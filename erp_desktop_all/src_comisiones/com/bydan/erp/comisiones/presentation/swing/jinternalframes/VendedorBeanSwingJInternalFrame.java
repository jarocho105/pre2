/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.comisiones.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.comisiones.util.VendedorConstantesFunciones;
import com.bydan.erp.comisiones.util.VendedorParameterReturnGeneral;
//import com.bydan.erp.comisiones.util.VendedorParameterGeneral;
//import com.bydan.erp.comisiones.presentation.report.source.VendedorBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.comisiones.resources.reportes.AuxiliarReportes;


import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.comisiones.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.comisiones.business.logic.*;
import com.bydan.erp.sris.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;
import com.bydan.erp.puntoventa.business.logic.*;
import com.bydan.erp.activosfijos.business.logic.*;
import com.bydan.erp.importaciones.business.logic.*;
import com.bydan.erp.produccion.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.comisiones.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.*;
import com.bydan.erp.sris.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;
import com.bydan.erp.puntoventa.presentation.swing.jinternalframes.*;
import com.bydan.erp.activosfijos.presentation.swing.jinternalframes.*;
import com.bydan.erp.importaciones.presentation.swing.jinternalframes.*;
import com.bydan.erp.produccion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.sris.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.puntoventa.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.activosfijos.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.importaciones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.produccion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.comisiones.business.entity.*;
import com.bydan.erp.sris.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.puntoventa.business.entity.*;
import com.bydan.erp.activosfijos.business.entity.*;
import com.bydan.erp.importaciones.business.entity.*;
import com.bydan.erp.produccion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.sris.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.puntoventa.util.*;
import com.bydan.erp.activosfijos.util.*;
import com.bydan.erp.importaciones.util.*;
import com.bydan.erp.produccion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.sris.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.puntoventa.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.activosfijos.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.importaciones.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.produccion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class VendedorBeanSwingJInternalFrame extends VendedorJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(VendedorBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<Vendedor> vendedorValidator = new ClassValidator<Vendedor>(Vendedor.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public Vendedor vendedor;	
	public Vendedor vendedorAux;
	public Vendedor vendedorAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public Vendedor vendedorTotales;
	public Long idVendedorActual;
	public Long iIdNuevoVendedor=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboEmpleadoSoporte="";

	public List<Empleado> empleadosoportesForeignKey;

	public List<Empleado> getempleadosoportesForeignKey() {
		return empleadosoportesForeignKey;
	}

	public void setempleadosoportesForeignKey(List<Empleado> empleadosoportesForeignKey) {
		this.empleadosoportesForeignKey = empleadosoportesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadosoporteForeignKey;

	public Empleado getempleadosoporteForeignKey() {
		return empleadosoporteForeignKey;
	}

	public void setempleadosoporteForeignKey(Empleado empleadosoporteForeignKey) {
		this.empleadosoporteForeignKey = empleadosoporteForeignKey;
	}

	public String sFinalQueryComboVendedor="";

	public List<Vendedor> vendedorsForeignKey;

	public List<Vendedor> getvendedorsForeignKey() {
		return vendedorsForeignKey;
	}

	public void setvendedorsForeignKey(List<Vendedor> vendedorsForeignKey) {
		this.vendedorsForeignKey = vendedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Vendedor vendedorForeignKey;

	public Vendedor getvendedorForeignKey() {
		return vendedorForeignKey;
	}

	public void setvendedorForeignKey(Vendedor vendedorForeignKey) {
		this.vendedorForeignKey = vendedorForeignKey;
	}

	public String sFinalQueryComboPais="";

	public List<Pais> paissForeignKey;

	public List<Pais> getpaissForeignKey() {
		return paissForeignKey;
	}

	public void setpaissForeignKey(List<Pais> paissForeignKey) {
		this.paissForeignKey = paissForeignKey;
	}

	//OBJETO FK ACTUAL
	public Pais paisForeignKey;

	public Pais getpaisForeignKey() {
		return paisForeignKey;
	}

	public void setpaisForeignKey(Pais paisForeignKey) {
		this.paisForeignKey = paisForeignKey;
	}

	public String sFinalQueryComboCiudad="";

	public List<Ciudad> ciudadsForeignKey;

	public List<Ciudad> getciudadsForeignKey() {
		return ciudadsForeignKey;
	}

	public void setciudadsForeignKey(List<Ciudad> ciudadsForeignKey) {
		this.ciudadsForeignKey = ciudadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ciudad ciudadForeignKey;

	public Ciudad getciudadForeignKey() {
		return ciudadForeignKey;
	}

	public void setciudadForeignKey(Ciudad ciudadForeignKey) {
		this.ciudadForeignKey = ciudadForeignKey;
	}

	public String sFinalQueryComboZona="";

	public List<Zona> zonasForeignKey;

	public List<Zona> getzonasForeignKey() {
		return zonasForeignKey;
	}

	public void setzonasForeignKey(List<Zona> zonasForeignKey) {
		this.zonasForeignKey = zonasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Zona zonaForeignKey;

	public Zona getzonaForeignKey() {
		return zonaForeignKey;
	}

	public void setzonaForeignKey(Zona zonaForeignKey) {
		this.zonaForeignKey = zonaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	public Long idEmpleadoSoporteActual=0L;

	public Long getidEmpleadoSoporteActual() {
		return idEmpleadoSoporteActual;
	}

	public void setidEmpleadoSoporteActual(Long idEmpleadoSoporteActual) {
		this.idEmpleadoSoporteActual= idEmpleadoSoporteActual;
	}
	
	

	public Boolean isTienePermisosNotaCreditoSoli=false;

	public Boolean getIsTienePermisosNotaCreditoSoli() {
		return isTienePermisosNotaCreditoSoli;
	}

	public void setIsTienePermisosNotaCreditoSoli(Boolean isTienePermisosNotaCreditoSoli) {
		this.isTienePermisosNotaCreditoSoli= isTienePermisosNotaCreditoSoli;
	}


	public Boolean isTienePermisosComisionVentaCobro=false;

	public Boolean getIsTienePermisosComisionVentaCobro() {
		return isTienePermisosComisionVentaCobro;
	}

	public void setIsTienePermisosComisionVentaCobro(Boolean isTienePermisosComisionVentaCobro) {
		this.isTienePermisosComisionVentaCobro= isTienePermisosComisionVentaCobro;
	}


	public Boolean isTienePermisosVendedor=false;

	public Boolean getIsTienePermisosVendedor() {
		return isTienePermisosVendedor;
	}

	public void setIsTienePermisosVendedor(Boolean isTienePermisosVendedor) {
		this.isTienePermisosVendedor= isTienePermisosVendedor;
	}


	public Boolean isTienePermisosCliente=false;

	public Boolean getIsTienePermisosCliente() {
		return isTienePermisosCliente;
	}

	public void setIsTienePermisosCliente(Boolean isTienePermisosCliente) {
		this.isTienePermisosCliente= isTienePermisosCliente;
	}


	public Boolean isTienePermisosComisionGrupo=false;

	public Boolean getIsTienePermisosComisionGrupo() {
		return isTienePermisosComisionGrupo;
	}

	public void setIsTienePermisosComisionGrupo(Boolean isTienePermisosComisionGrupo) {
		this.isTienePermisosComisionGrupo= isTienePermisosComisionGrupo;
	}


	public Boolean isTienePermisosComisionLinea=false;

	public Boolean getIsTienePermisosComisionLinea() {
		return isTienePermisosComisionLinea;
	}

	public void setIsTienePermisosComisionLinea(Boolean isTienePermisosComisionLinea) {
		this.isTienePermisosComisionLinea= isTienePermisosComisionLinea;
	}


	public Boolean isTienePermisosVendedorZona=false;

	public Boolean getIsTienePermisosVendedorZona() {
		return isTienePermisosVendedorZona;
	}

	public void setIsTienePermisosVendedorZona(Boolean isTienePermisosVendedorZona) {
		this.isTienePermisosVendedorZona= isTienePermisosVendedorZona;
	}


	public Boolean isTienePermisosComisionCate=false;

	public Boolean getIsTienePermisosComisionCate() {
		return isTienePermisosComisionCate;
	}

	public void setIsTienePermisosComisionCate(Boolean isTienePermisosComisionCate) {
		this.isTienePermisosComisionCate= isTienePermisosComisionCate;
	}


	public Boolean isTienePermisosCajeroTurno=false;

	public Boolean getIsTienePermisosCajeroTurno() {
		return isTienePermisosCajeroTurno;
	}

	public void setIsTienePermisosCajeroTurno(Boolean isTienePermisosCajeroTurno) {
		this.isTienePermisosCajeroTurno= isTienePermisosCajeroTurno;
	}


	public Boolean isTienePermisosComisionMarca=false;

	public Boolean getIsTienePermisosComisionMarca() {
		return isTienePermisosComisionMarca;
	}

	public void setIsTienePermisosComisionMarca(Boolean isTienePermisosComisionMarca) {
		this.isTienePermisosComisionMarca= isTienePermisosComisionMarca;
	}


	public Boolean isTienePermisosPresupuestoVentas=false;

	public Boolean getIsTienePermisosPresupuestoVentas() {
		return isTienePermisosPresupuestoVentas;
	}

	public void setIsTienePermisosPresupuestoVentas(Boolean isTienePermisosPresupuestoVentas) {
		this.isTienePermisosPresupuestoVentas= isTienePermisosPresupuestoVentas;
	}


	public Boolean isTienePermisosPresupuestoVentasLineas=false;

	public Boolean getIsTienePermisosPresupuestoVentasLineas() {
		return isTienePermisosPresupuestoVentasLineas;
	}

	public void setIsTienePermisosPresupuestoVentasLineas(Boolean isTienePermisosPresupuestoVentasLineas) {
		this.isTienePermisosPresupuestoVentasLineas= isTienePermisosPresupuestoVentasLineas;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoVendedor;
	public Boolean isPermisoNuevoVendedor;
	public Boolean isPermisoActualizarVendedor;
	public Boolean isPermisoActualizarOriginalVendedor;
	public Boolean isPermisoEliminarVendedor;
	public Boolean isPermisoGuardarCambiosVendedor;
	public Boolean isPermisoConsultaVendedor;
	public Boolean isPermisoBusquedaVendedor;
	public Boolean isPermisoReporteVendedor;
	public Boolean isPermisoPaginacionMedioVendedor;
	public Boolean isPermisoPaginacionAltoVendedor;
	public Boolean isPermisoPaginacionTodoVendedor;
	public Boolean isPermisoCopiarVendedor;
	public Boolean isPermisoVerFormVendedor;
	public Boolean isPermisoDuplicarVendedor;
	public Boolean isPermisoOrdenVendedor;
	
	public List<Vendedor> vendedorsArbol;
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public VendedorParameterReturnGeneral vendedorReturnGeneral;
	public VendedorParameterReturnGeneral vendedorParameterGeneral;
	
	

	public NotaCreditoSoliLogic notacreditosoliLogic=null;

	public NotaCreditoSoliLogic getNotaCreditoSoliLogic() {
		return notacreditosoliLogic;
	}

	public void setNotaCreditoSoliLogic(NotaCreditoSoliLogic notacreditosoliLogic) {
		this.notacreditosoliLogic = notacreditosoliLogic;
	}


	public ComisionVentaCobroLogic comisionventacobroLogic=null;

	public ComisionVentaCobroLogic getComisionVentaCobroLogic() {
		return comisionventacobroLogic;
	}

	public void setComisionVentaCobroLogic(ComisionVentaCobroLogic comisionventacobroLogic) {
		this.comisionventacobroLogic = comisionventacobroLogic;
	}


	public ClienteLogic clienteLogic=null;

	public ClienteLogic getClienteLogic() {
		return clienteLogic;
	}

	public void setClienteLogic(ClienteLogic clienteLogic) {
		this.clienteLogic = clienteLogic;
	}


	public ComisionGrupoLogic comisiongrupoLogic=null;

	public ComisionGrupoLogic getComisionGrupoLogic() {
		return comisiongrupoLogic;
	}

	public void setComisionGrupoLogic(ComisionGrupoLogic comisiongrupoLogic) {
		this.comisiongrupoLogic = comisiongrupoLogic;
	}


	public ComisionLineaLogic comisionlineaLogic=null;

	public ComisionLineaLogic getComisionLineaLogic() {
		return comisionlineaLogic;
	}

	public void setComisionLineaLogic(ComisionLineaLogic comisionlineaLogic) {
		this.comisionlineaLogic = comisionlineaLogic;
	}


	public VendedorZonaLogic vendedorzonaLogic=null;

	public VendedorZonaLogic getVendedorZonaLogic() {
		return vendedorzonaLogic;
	}

	public void setVendedorZonaLogic(VendedorZonaLogic vendedorzonaLogic) {
		this.vendedorzonaLogic = vendedorzonaLogic;
	}


	public ComisionCateLogic comisioncateLogic=null;

	public ComisionCateLogic getComisionCateLogic() {
		return comisioncateLogic;
	}

	public void setComisionCateLogic(ComisionCateLogic comisioncateLogic) {
		this.comisioncateLogic = comisioncateLogic;
	}


	public CajeroTurnoLogic cajeroturnoLogic=null;

	public CajeroTurnoLogic getCajeroTurnoLogic() {
		return cajeroturnoLogic;
	}

	public void setCajeroTurnoLogic(CajeroTurnoLogic cajeroturnoLogic) {
		this.cajeroturnoLogic = cajeroturnoLogic;
	}


	public ComisionMarcaLogic comisionmarcaLogic=null;

	public ComisionMarcaLogic getComisionMarcaLogic() {
		return comisionmarcaLogic;
	}

	public void setComisionMarcaLogic(ComisionMarcaLogic comisionmarcaLogic) {
		this.comisionmarcaLogic = comisionmarcaLogic;
	}


	public PresupuestoVentasLogic presupuestoventasLogic=null;

	public PresupuestoVentasLogic getPresupuestoVentasLogic() {
		return presupuestoventasLogic;
	}

	public void setPresupuestoVentasLogic(PresupuestoVentasLogic presupuestoventasLogic) {
		this.presupuestoventasLogic = presupuestoventasLogic;
	}


	public PresupuestoVentasLineasLogic presupuestoventaslineasLogic=null;

	public PresupuestoVentasLineasLogic getPresupuestoVentasLineasLogic() {
		return presupuestoventaslineasLogic;
	}

	public void setPresupuestoVentasLineasLogic(PresupuestoVentasLineasLogic presupuestoventaslineasLogic) {
		this.presupuestoventaslineasLogic = presupuestoventaslineasLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoVendedor=false;
	public Boolean esParaAccionDesdeFormularioVendedor=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected VendedorSessionBeanAdditional vendedorSessionBeanAdditional=null;
	
	public VendedorSessionBeanAdditional getVendedorSessionBeanAdditional() {
		return this.vendedorSessionBeanAdditional;
	}
	
	public void setVendedorSessionBeanAdditional(VendedorSessionBeanAdditional vendedorSessionBeanAdditional) {
		try {
			this.vendedorSessionBeanAdditional=vendedorSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected VendedorBeanSwingJInternalFrameAdditional vendedorBeanSwingJInternalFrameAdditional=null;
	//public class VendedorBeanSwingJInternalFrame
	
	public VendedorBeanSwingJInternalFrameAdditional getVendedorBeanSwingJInternalFrameAdditional() {
		return this.vendedorBeanSwingJInternalFrameAdditional;
	}
	
	public void setVendedorBeanSwingJInternalFrameAdditional(VendedorBeanSwingJInternalFrameAdditional vendedorBeanSwingJInternalFrameAdditional) {
		try {
			this.vendedorBeanSwingJInternalFrameAdditional=vendedorBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public VendedorLogic vendedorLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public Vendedor vendedorBean;
	public VendedorConstantesFunciones vendedorConstantesFunciones;
	//public VendedorParameterReturnGeneral vendedorReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EmpleadoLogic empleadoLogic;
	public EmpleadoLogic empleadosoporteLogic;
	public PaisLogic paisLogic;
	public CiudadLogic ciudadLogic;
	public ZonaLogic zonaLogic;
	
	//PARAMETROS
	
	
	//public List<Vendedor> vendedors;	
	//public List<Vendedor> vendedorsEliminados;
	//public List<Vendedor> vendedorsAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoVendedor=false;
	public Boolean isVisibilidadCeldaDuplicarVendedor=true;
	public Boolean isVisibilidadCeldaCopiarVendedor=true;
	public Boolean isVisibilidadCeldaVerFormVendedor=true;
	public Boolean isVisibilidadCeldaOrdenVendedor=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesVendedor=false;
	public Boolean isVisibilidadCeldaModificarVendedor=false;
	public Boolean isVisibilidadCeldaActualizarVendedor=false;
	public Boolean isVisibilidadCeldaEliminarVendedor=false;
	public Boolean isVisibilidadCeldaCancelarVendedor=false;
	public Boolean isVisibilidadCeldaGuardarVendedor=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosVendedor=false;	
	
	
	public Boolean isVisibilidadBusquedaPorCodigo=false;
	public Boolean isVisibilidadBusquedaPorNombre=false;
	public Boolean isVisibilidadBusquedaPorRuc=false;
	public Boolean isVisibilidadFK_IdCiudad=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpleadoSoporte=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdPais=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdVendedor=false;
	public Boolean isVisibilidadFK_IdZona=false;
	
	public Long getiIdNuevoVendedor() {
		return this.iIdNuevoVendedor;
	}

	public void setiIdNuevoVendedor(Long iIdNuevoVendedor) {
		this.iIdNuevoVendedor = iIdNuevoVendedor;
	}
	
	public Long getidVendedorActual() {
		return this.idVendedorActual;
	}

	public void setidVendedorActual(Long idVendedorActual) {
		this.idVendedorActual = idVendedorActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public Vendedor getvendedor() {
		return this.vendedor;
	}

	public void setvendedor(Vendedor vendedor) {
		this.vendedor = vendedor;
	}
	
	public Vendedor getvendedorAux() {
		return this.vendedorAux;
	}

	public void setvendedorAux(Vendedor vendedorAux) {
		this.vendedorAux = vendedorAux;
	}				
	
	public Vendedor getvendedorAnterior() {
		return this.vendedorAnterior;
	}

	public void setvendedorAnterior(Vendedor vendedorAnterior) {
		this.vendedorAnterior = vendedorAnterior;
	}	
	
	public Vendedor getvendedorTotales() {
		return this.vendedorTotales;
	}

	public void setvendedorTotales(Vendedor vendedorTotales) {
		this.vendedorTotales = vendedorTotales;
	}	
	
	public Vendedor getvendedorBean() {
		return this.vendedorBean;
	}

	public void setvendedorBean(Vendedor vendedorBean) {
		this.vendedorBean = vendedorBean;
	}	
	
	public VendedorParameterReturnGeneral getvendedorReturnGeneral() {
		return this.vendedorReturnGeneral;
	}

	public void setvendedorReturnGeneral(VendedorParameterReturnGeneral vendedorReturnGeneral) {
		this.vendedorReturnGeneral = vendedorReturnGeneral;
	}	
	
	
	public String codigoBusquedaPorCodigo="";

	public String getcodigoBusquedaPorCodigo() {
		return this.codigoBusquedaPorCodigo;
	}

	public void setcodigoBusquedaPorCodigo(String codigoBusquedaPorCodigo) {
		this.codigoBusquedaPorCodigo = codigoBusquedaPorCodigo;
	}

	public String nombreBusquedaPorNombre="";

	public String getnombreBusquedaPorNombre() {
		return this.nombreBusquedaPorNombre;
	}

	public void setnombreBusquedaPorNombre(String nombreBusquedaPorNombre) {
		this.nombreBusquedaPorNombre = nombreBusquedaPorNombre;
	}

	public String rucBusquedaPorRuc="";

	public String getrucBusquedaPorRuc() {
		return this.rucBusquedaPorRuc;
	}

	public void setrucBusquedaPorRuc(String rucBusquedaPorRuc) {
		this.rucBusquedaPorRuc = rucBusquedaPorRuc;
	}

	public Long id_ciudadFK_IdCiudad=-1L;

	public Long getid_ciudadFK_IdCiudad() {
		return this.id_ciudadFK_IdCiudad;
	}

	public void setid_ciudadFK_IdCiudad(Long id_ciudadFK_IdCiudad) {
		this.id_ciudadFK_IdCiudad = id_ciudadFK_IdCiudad;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empleado_soporteFK_IdEmpleadoSoporte=null;

	public Long getid_empleado_soporteFK_IdEmpleadoSoporte() {
		return this.id_empleado_soporteFK_IdEmpleadoSoporte;
	}

	public void setid_empleado_soporteFK_IdEmpleadoSoporte(Long id_empleado_soporteFK_IdEmpleadoSoporte) {
		this.id_empleado_soporteFK_IdEmpleadoSoporte = id_empleado_soporteFK_IdEmpleadoSoporte;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_paisFK_IdPais=-1L;

	public Long getid_paisFK_IdPais() {
		return this.id_paisFK_IdPais;
	}

	public void setid_paisFK_IdPais(Long id_paisFK_IdPais) {
		this.id_paisFK_IdPais = id_paisFK_IdPais;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_vendedorFK_IdVendedor=null;

	public Long getid_vendedorFK_IdVendedor() {
		return this.id_vendedorFK_IdVendedor;
	}

	public void setid_vendedorFK_IdVendedor(Long id_vendedorFK_IdVendedor) {
		this.id_vendedorFK_IdVendedor = id_vendedorFK_IdVendedor;
	}

	public Long id_zonaFK_IdZona=-1L;

	public Long getid_zonaFK_IdZona() {
		return this.id_zonaFK_IdZona;
	}

	public void setid_zonaFK_IdZona(Long id_zonaFK_IdZona) {
		this.id_zonaFK_IdZona = id_zonaFK_IdZona;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public VendedorLogic getVendedorLogic()	{		
		return vendedorLogic;
	}

	public void setVendedorLogic(VendedorLogic vendedorLogic) {
		this.vendedorLogic = vendedorLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoVendedor() {
		return isEsNuevoVendedor;
	}

	public void setIsEsNuevoVendedor(Boolean isEsNuevoVendedor) {
		this.isEsNuevoVendedor = isEsNuevoVendedor;
	}

	public Boolean getEsParaAccionDesdeFormularioVendedor() {
		return esParaAccionDesdeFormularioVendedor;
	}
	
	public void setEsParaAccionDesdeFormularioVendedor(Boolean esParaAccionDesdeFormularioVendedor) {
		this.esParaAccionDesdeFormularioVendedor = esParaAccionDesdeFormularioVendedor;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(vendedorSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(vendedorSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(vendedorSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadoSoportesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosoportesForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Empleado empleadosoporteNulo = new Empleado();

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSoporte()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadosoporteLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosoportesForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.empleadosoportesForeignKey.add(0, empleadosoporteNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleadoSoporte(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(vendedorSessionBean.getlidEmpleadoSoporteActual());
					this.empleadosoportesForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosVendedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.vendedorsForeignKey=new ArrayList<Vendedor>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Vendedor vendedorNulo = new Vendedor();

			VendedorLogic vendedorLogic=new VendedorLogic();

			//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

					vendedorLogic.getTodosVendedorsWithConnection(sFinalQuery,new Pagination());

					this.vendedorsForeignKey=vendedorLogic.getVendedors();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.vendedorsForeignKey.add(0, vendedorNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaVendedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(vendedorSessionBean.getlidVendedorActual());
					this.vendedorsForeignKey.add(vendedorLogic.getVendedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPaissForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.paissForeignKey=new ArrayList<Pais>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PaisLogic paisLogic=new PaisLogic();

			//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

					paisLogic.getTodosPaissWithConnection(sFinalQuery,new Pagination());

					this.paissForeignKey=paisLogic.getPaiss();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPais(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					paisLogic.getEntityWithConnection(vendedorSessionBean.getlidPaisActual());
					this.paissForeignKey.add(paisLogic.getPais());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCiudadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ciudadsForeignKey=new ArrayList<Ciudad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CiudadLogic ciudadLogic=new CiudadLogic();

			//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

					ciudadLogic.getTodosCiudadsWithConnection(sFinalQuery,new Pagination());

					this.ciudadsForeignKey=ciudadLogic.getCiudads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCiudad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ciudadLogic.getEntityWithConnection(vendedorSessionBean.getlidCiudadActual());
					this.ciudadsForeignKey.add(ciudadLogic.getCiudad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosZonasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.zonasForeignKey=new ArrayList<Zona>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ZonaLogic zonaLogic=new ZonaLogic();

			//zonaLogic.getZonaDataAccess().setIsForForeingKeyData(true);

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionZona()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//zonaLogic.getZonaDataAccess().setIsForForeingKeyData(true);

					zonaLogic.getTodosZonasWithConnection(sFinalQuery,new Pagination());

					this.zonasForeignKey=zonaLogic.getZonas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaZona(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					zonaLogic.getEntityWithConnection(vendedorSessionBean.getlidZonaActual());
					this.zonasForeignKey.add(zonaLogic.getZona());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.vendedor!=null) {
						this.vendedor.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaVendedor.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaVendedorGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaVendedorGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaVendedorGenerico!=null && jComboBoxid_empresaVendedorGenerico.getItemCount()>0) {
					jComboBoxid_empresaVendedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.vendedor!=null) {
						this.vendedor.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalVendedor.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalVendedorGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalVendedorGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalVendedorGenerico!=null && jComboBoxid_sucursalVendedorGenerico.getItemCount()>0) {
					jComboBoxid_sucursalVendedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.vendedor!=null) {
						this.vendedor.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoVendedor.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoVendedorGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoVendedorGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoVendedorGenerico!=null && jComboBoxid_empleadoVendedorGenerico.getItemCount()>0) {
					jComboBoxid_empleadoVendedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoSoporteForeignKey(Long idEmpleadoSoporteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadosoporteTemp=null;

			for(Empleado empleadosoporteAux:empleadosoportesForeignKey) {
				if(empleadosoporteAux.getId()!=null && empleadosoporteAux.getId().equals(idEmpleadoSoporteSeleccionado)) {
					empleadosoporteTemp=empleadosoporteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadosoporteTemp!=null) {

					if(this.vendedor!=null) {
						this.vendedor.setEmpleadoSoporte(empleadosoporteTemp);
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setSelectedItem(empleadosoporteTemp);
					}
				} else {
					//jComboBoxid_empleado_soporteVendedor.setSelectedItem(empleadosoporteTemp);
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoSoporteForeignKeyDescripcion(Long idEmpleadoSoporteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadosoporteTemp=null;

			for(Empleado empleadosoporteAux:empleadosoportesForeignKey) {
				if(empleadosoporteAux.getId()!=null && empleadosoporteAux.getId().equals(idEmpleadoSoporteSeleccionado)) {
					empleadosoporteTemp=empleadosoporteAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadosoporteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoSoporteForeignKeyGenerico(Long idEmpleadoSoporteSeleccionado,JComboBox jComboBoxid_empleado_soporteVendedorGenerico)throws Exception
	{
		try
		{
			Empleado  empleadosoporteTemp=null;

			for(Empleado empleadosoporteAux:empleadosoportesForeignKey) {
				if(empleadosoporteAux.getId()!=null && empleadosoporteAux.getId().equals(idEmpleadoSoporteSeleccionado)) {
					empleadosoporteTemp=empleadosoporteAux;
					break;
				}
			}

			if(empleadosoporteTemp!=null) {
				jComboBoxid_empleado_soporteVendedorGenerico.setSelectedItem(empleadosoporteTemp);
			} else {
				if(jComboBoxid_empleado_soporteVendedorGenerico!=null && jComboBoxid_empleado_soporteVendedorGenerico.getItemCount()>0) {
					jComboBoxid_empleado_soporteVendedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualVendedorForeignKey(Long idVendedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(vendedorTemp!=null) {

					if(this.vendedor!=null) {
						this.vendedor.setVendedor(vendedorTemp);
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setSelectedItem(vendedorTemp);
					}
				} else {
					//jComboBoxid_vendedorVendedor.setSelectedItem(vendedorTemp);
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(vendedorTemp!=null && jComboBoxid_vendedorFK_IdVendedorVendedor!=null) {
						jComboBoxid_vendedorFK_IdVendedorVendedor.setSelectedItem(vendedorTemp);
					} else {
						if(jComboBoxid_vendedorFK_IdVendedorVendedor!=null) {
							//jComboBoxid_vendedorFK_IdVendedorVendedor.setSelectedItem(vendedorTemp);
							if(jComboBoxid_vendedorFK_IdVendedorVendedor.getItemCount()>0) {
								jComboBoxid_vendedorFK_IdVendedorVendedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualVendedorForeignKeyDescripcion(Long idVendedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}


			sDescripcion=VendedorConstantesFunciones.getVendedorDescripcion(vendedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualVendedorForeignKeyGenerico(Long idVendedorSeleccionado,JComboBox jComboBoxid_vendedorVendedorGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(vendedorTemp!=null) {
				jComboBoxid_vendedorVendedorGenerico.setSelectedItem(vendedorTemp);
			} else {
				if(jComboBoxid_vendedorVendedorGenerico!=null && jComboBoxid_vendedorVendedorGenerico.getItemCount()>0) {
					jComboBoxid_vendedorVendedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPaisForeignKey(Long idPaisSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(paisTemp!=null) {

					if(this.vendedor!=null) {
						this.vendedor.setPais(paisTemp);
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setSelectedItem(paisTemp);
					}
				} else {
					//jComboBoxid_paisVendedor.setSelectedItem(paisTemp);
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){
					if(paisTemp!=null && jComboBoxid_paisFK_IdPaisVendedor!=null) {
						jComboBoxid_paisFK_IdPaisVendedor.setSelectedItem(paisTemp);
					} else {
						if(jComboBoxid_paisFK_IdPaisVendedor!=null) {
							//jComboBoxid_paisFK_IdPaisVendedor.setSelectedItem(paisTemp);
							if(jComboBoxid_paisFK_IdPaisVendedor.getItemCount()>0) {
								jComboBoxid_paisFK_IdPaisVendedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPaisForeignKeyDescripcion(Long idPaisSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}


			sDescripcion=PaisConstantesFunciones.getPaisDescripcion(paisTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPaisForeignKeyGenerico(Long idPaisSeleccionado,JComboBox jComboBoxid_paisVendedorGenerico)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(paisTemp!=null) {
				jComboBoxid_paisVendedorGenerico.setSelectedItem(paisTemp);
			} else {
				if(jComboBoxid_paisVendedorGenerico!=null && jComboBoxid_paisVendedorGenerico.getItemCount()>0) {
					jComboBoxid_paisVendedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCiudadForeignKey(Long idCiudadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ciudadTemp!=null) {

					if(this.vendedor!=null) {
						this.vendedor.setCiudad(ciudadTemp);
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setSelectedItem(ciudadTemp);
					}
				} else {
					//jComboBoxid_ciudadVendedor.setSelectedItem(ciudadTemp);
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCiudadForeignKeyDescripcion(Long idCiudadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}


			sDescripcion=CiudadConstantesFunciones.getCiudadDescripcion(ciudadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCiudadForeignKeyGenerico(Long idCiudadSeleccionado,JComboBox jComboBoxid_ciudadVendedorGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(ciudadTemp!=null) {
				jComboBoxid_ciudadVendedorGenerico.setSelectedItem(ciudadTemp);
			} else {
				if(jComboBoxid_ciudadVendedorGenerico!=null && jComboBoxid_ciudadVendedorGenerico.getItemCount()>0) {
					jComboBoxid_ciudadVendedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualZonaForeignKey(Long idZonaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Zona  zonaTemp=null;

			for(Zona zonaAux:zonasForeignKey) {
				if(zonaAux.getId()!=null && zonaAux.getId().equals(idZonaSeleccionado)) {
					zonaTemp=zonaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(zonaTemp!=null) {

					if(this.vendedor!=null) {
						this.vendedor.setZona(zonaTemp);
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setSelectedItem(zonaTemp);
					}
				} else {
					//jComboBoxid_zonaVendedor.setSelectedItem(zonaTemp);
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdZona") || sFormularioTipoBusqueda.equals("Todos")){
					if(zonaTemp!=null && jComboBoxid_zonaFK_IdZonaVendedor!=null) {
						jComboBoxid_zonaFK_IdZonaVendedor.setSelectedItem(zonaTemp);
					} else {
						if(jComboBoxid_zonaFK_IdZonaVendedor!=null) {
							//jComboBoxid_zonaFK_IdZonaVendedor.setSelectedItem(zonaTemp);
							if(jComboBoxid_zonaFK_IdZonaVendedor.getItemCount()>0) {
								jComboBoxid_zonaFK_IdZonaVendedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualZonaForeignKeyDescripcion(Long idZonaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Zona  zonaTemp=null;

			for(Zona zonaAux:zonasForeignKey) {
				if(zonaAux.getId()!=null && zonaAux.getId().equals(idZonaSeleccionado)) {
					zonaTemp=zonaAux;
					break;
				}
			}


			sDescripcion=ZonaConstantesFunciones.getZonaDescripcion(zonaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualZonaForeignKeyGenerico(Long idZonaSeleccionado,JComboBox jComboBoxid_zonaVendedorGenerico)throws Exception
	{
		try
		{
			Zona  zonaTemp=null;

			for(Zona zonaAux:zonasForeignKey) {
				if(zonaAux.getId()!=null && zonaAux.getId().equals(idZonaSeleccionado)) {
					zonaTemp=zonaAux;
					break;
				}
			}

			if(zonaTemp!=null) {
				jComboBoxid_zonaVendedorGenerico.setSelectedItem(zonaTemp);
			} else {
				if(jComboBoxid_zonaVendedorGenerico!=null && jComboBoxid_zonaVendedorGenerico.getItemCount()>0) {
					jComboBoxid_zonaVendedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(Vendedor vendedor,JComboBox jComboBoxid_empresaVendedorGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaVendedorGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaVendedorGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				vendedor.setid_empresa(empresaAux.getId());
				vendedor.setempresa_descripcion(VendedorConstantesFunciones.getEmpresaDescripcion(empresaAux));
				vendedor.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(Vendedor vendedor,JComboBox jComboBoxid_sucursalVendedorGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalVendedorGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalVendedorGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				vendedor.setid_sucursal(sucursalAux.getId());
				vendedor.setsucursal_descripcion(VendedorConstantesFunciones.getSucursalDescripcion(sucursalAux));
				vendedor.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(Vendedor vendedor,JComboBox jComboBoxid_empleadoVendedorGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoVendedorGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoVendedorGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				vendedor.setid_empleado(empleadoAux.getId());
				vendedor.setempleado_descripcion(VendedorConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				vendedor.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoSoporteForeignKey(Vendedor vendedor,JComboBox jComboBoxid_empleado_soporteVendedorGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleado_soporteVendedorGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleado_soporteVendedorGenerico.getSelectedItem();
			}

			if(empleadoAux!=null) {
				vendedor.setid_empleado_soporte(empleadoAux.getId());
				vendedor.setempleadosoporte_descripcion(VendedorConstantesFunciones.getEmpleadoSoporteDescripcion(empleadoAux));
				vendedor.setEmpleadoSoporte(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarVendedorForeignKey(Vendedor vendedor,JComboBox jComboBoxid_vendedorVendedorGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorAux=new Vendedor();

			if(jComboBoxid_vendedorVendedorGenerico==null) {
				vendedorAux=(Vendedor)this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.getSelectedItem();
			} else {
				vendedorAux=(Vendedor)jComboBoxid_vendedorVendedorGenerico.getSelectedItem();
			}

			if(vendedorAux!=null) {
				vendedor.setid_vendedor(vendedorAux.getId());
				vendedor.setvendedor_descripcion(VendedorConstantesFunciones.getVendedorDescripcion(vendedorAux));
				vendedor.setVendedor(vendedorAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPaisForeignKey(Vendedor vendedor,JComboBox jComboBoxid_paisVendedorGenerico)throws Exception
	{
		try
		{
			Pais  paisAux=new Pais();

			if(jComboBoxid_paisVendedorGenerico==null) {
				paisAux=(Pais)this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.getSelectedItem();
			} else {
				paisAux=(Pais)jComboBoxid_paisVendedorGenerico.getSelectedItem();
			}

			if(paisAux!=null && paisAux.getId()!=null) {
				vendedor.setid_pais(paisAux.getId());
				vendedor.setpais_descripcion(VendedorConstantesFunciones.getPaisDescripcion(paisAux));
				vendedor.setPais(paisAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCiudadForeignKey(Vendedor vendedor,JComboBox jComboBoxid_ciudadVendedorGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadAux=new Ciudad();

			if(jComboBoxid_ciudadVendedorGenerico==null) {
				ciudadAux=(Ciudad)this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.getSelectedItem();
			} else {
				ciudadAux=(Ciudad)jComboBoxid_ciudadVendedorGenerico.getSelectedItem();
			}

			if(ciudadAux!=null && ciudadAux.getId()!=null) {
				vendedor.setid_ciudad(ciudadAux.getId());
				vendedor.setciudad_descripcion(VendedorConstantesFunciones.getCiudadDescripcion(ciudadAux));
				vendedor.setCiudad(ciudadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarZonaForeignKey(Vendedor vendedor,JComboBox jComboBoxid_zonaVendedorGenerico)throws Exception
	{
		try
		{
			Zona  zonaAux=new Zona();

			if(jComboBoxid_zonaVendedorGenerico==null) {
				zonaAux=(Zona)this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.getSelectedItem();
			} else {
				zonaAux=(Zona)jComboBoxid_zonaVendedorGenerico.getSelectedItem();
			}

			if(zonaAux!=null && zonaAux.getId()!=null) {
				vendedor.setid_zona(zonaAux.getId());
				vendedor.setzona_descripcion(VendedorConstantesFunciones.getZonaDescripcion(zonaAux));
				vendedor.setZona(zonaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) { 
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) { 
					}

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) { 
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) { 
					}

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) { 
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) { 
					}

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadoSoportesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) { 
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.removeAllItems();

							for(Empleado empleadosoporte:this.empleadosoportesForeignKey) {
								this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.addItem(empleadosoporte);
							}
						}
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) { 
					}

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameVendedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingVendedor=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) { 
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.addItem(vendedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) { 
					}

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorVendedor.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jComboBoxid_vendedorFK_IdVendedorVendedor.addItem(vendedor);
							}
						}

						if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePaissForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPais=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) { 
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.addItem(pais);
							}
						}
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) { 
					}

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_paisFK_IdPaisVendedor.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jComboBoxid_paisFK_IdPaisVendedor.addItem(pais);
							}
						}

						if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCiudadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCiudad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) { 
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.removeAllItems();

							for(Ciudad ciudad:this.ciudadsForeignKey) {
								this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.addItem(ciudad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) { 
					}

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameZonasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingZona=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) { 
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.removeAllItems();

							for(Zona zona:this.zonasForeignKey) {
								this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.addItem(zona);
							}
						}
					}

					if(this.jInternalFrameDetalleFormVendedor!=null) { 
					}

					if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdZona") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_zonaFK_IdZonaVendedor.removeAllItems();

							for(Zona zona:this.zonasForeignKey) {
								this.jComboBoxid_zonaFK_IdZonaVendedor.addItem(zona);
							}
						}

						if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoSoporteForeignKey(Empleado empleadosoporte,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setSelectedItem(empleadosoporte);
						}
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameVendedorForeignKey(Vendedor vendedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setSelectedItem(vendedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_vendedorFK_IdVendedorVendedor.setSelectedItem(vendedor);
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorVendedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePaisForeignKey(Pais pais,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setSelectedItem(pais);
						}
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_paisFK_IdPaisVendedor.setSelectedItem(pais);
						} else {
							this.jComboBoxid_paisFK_IdPaisVendedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCiudadForeignKey(Ciudad ciudad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setSelectedItem(ciudad);
						}
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameZonaForeignKey(Zona zona,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setSelectedItem(zona);
						}
					} else {
						if(this.jInternalFrameDetalleFormVendedor!=null) {
							this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_zonaFK_IdZonaVendedor.setSelectedItem(zona);
						} else {
							this.jComboBoxid_zonaFK_IdZonaVendedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesVendedor() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			VendedorConstantesFunciones.refrescarForeignKeysDescripcionesVendedor(this.vendedorLogic.getVendedors());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			VendedorConstantesFunciones.refrescarForeignKeysDescripcionesVendedor(this.vendedors);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(Vendedor.class));
		classes.add(new Classe(Pais.class));
		classes.add(new Classe(Ciudad.class));
		classes.add(new Classe(Zona.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//vendedorLogic.setVendedors(this.vendedors);
			vendedorLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public VendedorParameterReturnGeneral getVendedorParameterGeneral() {
		return this.vendedorParameterGeneral;
	}
	
	public void setVendedorParameterGeneral(VendedorParameterReturnGeneral vendedorParameterGeneral) {
		this.vendedorParameterGeneral = vendedorParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoVendedor() {
		return isPermisoTodoVendedor;
	}

	public void setIsPermisoTodoVendedor(Boolean isPermisoTodoVendedor) {
		this.isPermisoTodoVendedor = isPermisoTodoVendedor;
	}

	public Boolean getIsPermisoNuevoVendedor() {
		return isPermisoNuevoVendedor;
	}

	public void setIsPermisoNuevoVendedor(Boolean isPermisoNuevoVendedor) {
		this.isPermisoNuevoVendedor = isPermisoNuevoVendedor;
	}

	public Boolean getIsPermisoActualizarVendedor() {
		return isPermisoActualizarVendedor;
	}

	public void setIsPermisoActualizarVendedor(Boolean isPermisoActualizarVendedor) {
		this.isPermisoActualizarVendedor = isPermisoActualizarVendedor;
	}

	public Boolean getIsPermisoEliminarVendedor() {
		return isPermisoEliminarVendedor;
	}

	public void setIsPermisoEliminarVendedor(Boolean isPermisoEliminarVendedor) {
		this.isPermisoEliminarVendedor = isPermisoEliminarVendedor;
	}

	public Boolean getIsPermisoGuardarCambiosVendedor() {
		return isPermisoGuardarCambiosVendedor;
	}

	public void setIsPermisoGuardarCambiosVendedor(Boolean isPermisoGuardarCambiosVendedor) {
		this.isPermisoGuardarCambiosVendedor = isPermisoGuardarCambiosVendedor;
	}
	
	public Boolean getIsPermisoConsultaVendedor() {
		return isPermisoConsultaVendedor;
	}

	public void setIsPermisoConsultaVendedor(Boolean isPermisoConsultaVendedor) {
		this.isPermisoConsultaVendedor = isPermisoConsultaVendedor;
	}

	public Boolean getIsPermisoBusquedaVendedor() {
		return isPermisoBusquedaVendedor;
	}

	public void setIsPermisoBusquedaVendedor(Boolean isPermisoBusquedaVendedor) {
		this.isPermisoBusquedaVendedor = isPermisoBusquedaVendedor;
	}

	public Boolean getIsPermisoReporteVendedor() {
		return isPermisoReporteVendedor;
	}

	public void setIsPermisoReporteVendedor(Boolean isPermisoReporteVendedor) {
		this.isPermisoReporteVendedor = isPermisoReporteVendedor;
	}
	
	public Boolean getIsPermisoPaginacionMedioVendedor() {
		return isPermisoPaginacionMedioVendedor;
	}

	public void setIsPermisoPaginacionMedioVendedor(Boolean isPermisoPaginacionMedioVendedor) {
		this.isPermisoPaginacionMedioVendedor = isPermisoPaginacionMedioVendedor;
	}
	
	public Boolean getIsPermisoPaginacionTodoVendedor() {
		return isPermisoPaginacionTodoVendedor;
	}

	public void setIsPermisoPaginacionTodoVendedor(Boolean isPermisoPaginacionTodoVendedor) {
		this.isPermisoPaginacionTodoVendedor = isPermisoPaginacionTodoVendedor;
	}
	
	public Boolean getIsPermisoPaginacionAltoVendedor() {
		return isPermisoPaginacionAltoVendedor;
	}

	public void setIsPermisoPaginacionAltoVendedor(Boolean isPermisoPaginacionAltoVendedor) {
		this.isPermisoPaginacionAltoVendedor = isPermisoPaginacionAltoVendedor;
	}
	
	public Boolean getIsPermisoCopiarVendedor() {
		return isPermisoCopiarVendedor;
	}

	public void setIsPermisoCopiarVendedor(Boolean isPermisoCopiarVendedor) {
		this.isPermisoCopiarVendedor = isPermisoCopiarVendedor;
	}
	
	public Boolean getIsPermisoVerFormVendedor() {
		return isPermisoVerFormVendedor;
	}

	public void setIsPermisoVerFormVendedor(Boolean isPermisoVerFormVendedor) {
		this.isPermisoVerFormVendedor = isPermisoVerFormVendedor;
	}
	
	public Boolean getIsPermisoDuplicarVendedor() {
		return isPermisoDuplicarVendedor;
	}

	public void setIsPermisoDuplicarVendedor(Boolean isPermisoDuplicarVendedor) {
		this.isPermisoDuplicarVendedor = isPermisoDuplicarVendedor;
	}
	
	public Boolean getIsPermisoOrdenVendedor() {
		return isPermisoOrdenVendedor;
	}

	public void setIsPermisoOrdenVendedor(Boolean isPermisoOrdenVendedor) {
		this.isPermisoOrdenVendedor = isPermisoOrdenVendedor;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoVendedor() {
		return isVisibilidadCeldaNuevoVendedor;
	}

	public void setIsVisibilidadCeldaNuevoVendedor(Boolean isVisibilidadCeldaNuevoVendedor) {
		this.isVisibilidadCeldaNuevoVendedor = isVisibilidadCeldaNuevoVendedor;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarVendedor() {
		return isVisibilidadCeldaDuplicarVendedor;
	}

	public void setIsVisibilidadCeldaDuplicarVendedor(Boolean isVisibilidadCeldaDuplicarVendedor) {
		this.isVisibilidadCeldaDuplicarVendedor = isVisibilidadCeldaDuplicarVendedor;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarVendedor() {
		return isVisibilidadCeldaCopiarVendedor;
	}

	public void setIsVisibilidadCeldaCopiarVendedor(Boolean isVisibilidadCeldaCopiarVendedor) {
		this.isVisibilidadCeldaCopiarVendedor = isVisibilidadCeldaCopiarVendedor;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormVendedor() {
		return isVisibilidadCeldaVerFormVendedor;
	}

	public void setIsVisibilidadCeldaVerFormVendedor(Boolean isVisibilidadCeldaVerFormVendedor) {
		this.isVisibilidadCeldaVerFormVendedor = isVisibilidadCeldaVerFormVendedor;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenVendedor() {
		return isVisibilidadCeldaOrdenVendedor;
	}

	public void setIsVisibilidadCeldaOrdenVendedor(Boolean isVisibilidadCeldaOrdenVendedor) {
		this.isVisibilidadCeldaOrdenVendedor = isVisibilidadCeldaOrdenVendedor;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesVendedor() {
		return isVisibilidadCeldaNuevoRelacionesVendedor;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesVendedor(Boolean isVisibilidadCeldaNuevoRelacionesVendedor) {
		this.isVisibilidadCeldaNuevoRelacionesVendedor = isVisibilidadCeldaNuevoRelacionesVendedor;
	}
	
	public Boolean getIsVisibilidadCeldaModificarVendedor() {
		return isVisibilidadCeldaModificarVendedor;
	}

	public void setIsVisibilidadCeldaModificarVendedor(Boolean isVisibilidadCeldaModificarVendedor) {
		this.isVisibilidadCeldaModificarVendedor = isVisibilidadCeldaModificarVendedor;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarVendedor() {
		return isVisibilidadCeldaActualizarVendedor;
	}

	public void setIsVisibilidadCeldaActualizarVendedor(Boolean isVisibilidadCeldaActualizarVendedor) {
		this.isVisibilidadCeldaActualizarVendedor = isVisibilidadCeldaActualizarVendedor;
	}

	public Boolean getIsVisibilidadCeldaEliminarVendedor() {
		return isVisibilidadCeldaEliminarVendedor;
	}

	public void setIsVisibilidadCeldaEliminarVendedor(Boolean isVisibilidadCeldaEliminarVendedor) {
		this.isVisibilidadCeldaEliminarVendedor = isVisibilidadCeldaEliminarVendedor;
	}

	public Boolean getIsVisibilidadCeldaCancelarVendedor() {
		return isVisibilidadCeldaCancelarVendedor;
	}

	public void setIsVisibilidadCeldaCancelarVendedor(Boolean isVisibilidadCeldaCancelarVendedor) {
		this.isVisibilidadCeldaCancelarVendedor = isVisibilidadCeldaCancelarVendedor;
	}

	public Boolean getIsVisibilidadCeldaGuardarVendedor() {
		return isVisibilidadCeldaGuardarVendedor;
	}

	public void setIsVisibilidadCeldaGuardarVendedor(Boolean isVisibilidadCeldaGuardarVendedor) {
		this.isVisibilidadCeldaGuardarVendedor = isVisibilidadCeldaGuardarVendedor;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosVendedor() {
		return isVisibilidadCeldaGuardarCambiosVendedor;
	}

	public void setIsVisibilidadCeldaGuardarCambiosVendedor(Boolean isVisibilidadCeldaGuardarCambiosVendedor) {
		this.isVisibilidadCeldaGuardarCambiosVendedor = isVisibilidadCeldaGuardarCambiosVendedor;
	}
		
	public VendedorSessionBean getvendedorSessionBean() {
		return this.vendedorSessionBean;
	}
	
	public void setvendedorSessionBean(VendedorSessionBean vendedorSessionBean) {
		this.vendedorSessionBean=vendedorSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorCodigo() {
		return this.isVisibilidadBusquedaPorCodigo;
	}

	public void setisVisibilidadBusquedaPorCodigo(Boolean isVisibilidadBusquedaPorCodigo) {
		this.isVisibilidadBusquedaPorCodigo=isVisibilidadBusquedaPorCodigo;
	}

	public Boolean getisVisibilidadBusquedaPorNombre() {
		return this.isVisibilidadBusquedaPorNombre;
	}

	public void setisVisibilidadBusquedaPorNombre(Boolean isVisibilidadBusquedaPorNombre) {
		this.isVisibilidadBusquedaPorNombre=isVisibilidadBusquedaPorNombre;
	}

	public Boolean getisVisibilidadBusquedaPorRuc() {
		return this.isVisibilidadBusquedaPorRuc;
	}

	public void setisVisibilidadBusquedaPorRuc(Boolean isVisibilidadBusquedaPorRuc) {
		this.isVisibilidadBusquedaPorRuc=isVisibilidadBusquedaPorRuc;
	}

	public Boolean getisVisibilidadFK_IdCiudad() {
		return this.isVisibilidadFK_IdCiudad;
	}

	public void setisVisibilidadFK_IdCiudad(Boolean isVisibilidadFK_IdCiudad) {
		this.isVisibilidadFK_IdCiudad=isVisibilidadFK_IdCiudad;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpleadoSoporte() {
		return this.isVisibilidadFK_IdEmpleadoSoporte;
	}

	public void setisVisibilidadFK_IdEmpleadoSoporte(Boolean isVisibilidadFK_IdEmpleadoSoporte) {
		this.isVisibilidadFK_IdEmpleadoSoporte=isVisibilidadFK_IdEmpleadoSoporte;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdPais() {
		return this.isVisibilidadFK_IdPais;
	}

	public void setisVisibilidadFK_IdPais(Boolean isVisibilidadFK_IdPais) {
		this.isVisibilidadFK_IdPais=isVisibilidadFK_IdPais;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdVendedor() {
		return this.isVisibilidadFK_IdVendedor;
	}

	public void setisVisibilidadFK_IdVendedor(Boolean isVisibilidadFK_IdVendedor) {
		this.isVisibilidadFK_IdVendedor=isVisibilidadFK_IdVendedor;
	}

	public Boolean getisVisibilidadFK_IdZona() {
		return this.isVisibilidadFK_IdZona;
	}

	public void setisVisibilidadFK_IdZona(Boolean isVisibilidadFK_IdZona) {
		this.isVisibilidadFK_IdZona=isVisibilidadFK_IdZona;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysVendedor(Vendedor vendedor)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(vendedor,null);
				this.setActualParaGuardarSucursalForeignKey(vendedor,null);
				this.setActualParaGuardarEmpleadoForeignKey(vendedor,null);
				this.setActualParaGuardarEmpleadoSoporteForeignKey(vendedor,null);
				this.setActualParaGuardarVendedorForeignKey(vendedor,null);
				this.setActualParaGuardarPaisForeignKey(vendedor,null);
				this.setActualParaGuardarCiudadForeignKey(vendedor,null);
				this.setActualParaGuardarZonaForeignKey(vendedor,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(Vendedor vendedor,Vendedor vendedorAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalVendedor(vendedor);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		vendedorAux.setId(vendedor.getId());
		vendedorAux.setVersionRow(vendedor.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessVendedor();
		
			int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = vendedorValidator.getInvalidValues(this.vendedor);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			vendedorLogic.setDatosCliente(datosCliente);
			vendedorLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				vendedorAux=new  Vendedor();
				
				vendedorAux.setIsNew(true);
				vendedorAux.setIsChanged(true);
				
				vendedorAux.setVendedorOriginal(this.vendedor);
				
				vendedorAux.setId(this.vendedor.getId());	
				vendedorAux.setVersionRow(this.vendedor.getVersionRow());	
				vendedorAux.setid_empresa(this.vendedor.getid_empresa());	
				vendedorAux.setid_sucursal(this.vendedor.getid_sucursal());	
				vendedorAux.setcodigo(this.vendedor.getcodigo());	
				vendedorAux.setnombre(this.vendedor.getnombre());	
				vendedorAux.setruc(this.vendedor.getruc());	
				vendedorAux.setemail(this.vendedor.getemail());	
				vendedorAux.setid_empleado(this.vendedor.getid_empleado());	
				vendedorAux.settelefono(this.vendedor.gettelefono());	
				
				if(this.vendedor.getid_empleado_soporte()!=null && this.vendedor.getid_empleado_soporte()>0L) {
					vendedorAux.setid_empleado_soporte(this.vendedor.getid_empleado_soporte());
				} else {
					vendedorAux.setid_empleado_soporte(null);
				}	
				
				if(this.vendedor.getid_vendedor()!=null && this.vendedor.getid_vendedor()>0L) {
					vendedorAux.setid_vendedor(this.vendedor.getid_vendedor());
				} else {
					vendedorAux.setid_vendedor(null);
				}	
				vendedorAux.setid_pais(this.vendedor.getid_pais());	
				vendedorAux.setid_ciudad(this.vendedor.getid_ciudad());	
				vendedorAux.setid_zona(this.vendedor.getid_zona());	
				vendedorAux.setrepresentante(this.vendedor.getrepresentante());	
				vendedorAux.setes_supervisor(this.vendedor.getes_supervisor());	
				vendedorAux.setfecha_creacion(this.vendedor.getfecha_creacion());	
				vendedorAux.setdireccion_domicilio(this.vendedor.getdireccion_domicilio());	
				vendedorAux.setdireccion_referencia(this.vendedor.getdireccion_referencia());	
				vendedorAux.setdescripcion(this.vendedor.getdescripcion());	
				vendedorAux.setporcentaje_comision(this.vendedor.getporcentaje_comision());	
				vendedorAux.setcomision(this.vendedor.getcomision());	
				vendedorAux.setmonto_vendido(this.vendedor.getmonto_vendido());	
				vendedorAux.setnumero_facturas(this.vendedor.getnumero_facturas());	
				vendedorAux.setfecha_ultima_venta(this.vendedor.getfecha_ultima_venta());	
				vendedorAux.setmonto_ultima_venta(this.vendedor.getmonto_ultima_venta());	
				vendedorAux.setcon_presupuesto(this.vendedor.getcon_presupuesto());	
				vendedorAux.setcon_cobertura(this.vendedor.getcon_cobertura());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.vendedorSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.vendedorSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(vendedorAux,vendedorLogic.getVendedors());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(vendedorAux,vendedors);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.vendedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.vendedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.saveVendedors();//WithConnection
						//vendedorLogic.getSetVersionRowVendedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.vendedor,vendedorAux);
					
					this.refrescarForeignKeysDescripcionesVendedor();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.vendedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis().addAll(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolisEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros().addAll(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobrosEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors().addAll(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorsEliminados);
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes().addAll(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientesEliminados);
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos().addAll(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongruposEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas().addAll(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineasEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas().addAll(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonasEliminados);
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates().addAll(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncatesEliminados);
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos().addAll(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnosEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas().addAll(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcasEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass().addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventassEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass().addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineassEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolis.addAll(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolisEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobros.addAll(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobrosEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedors.addAll(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorsEliminados);
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientes.addAll(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientesEliminados);
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupos.addAll(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongruposEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineas.addAll(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineasEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonas.addAll(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonasEliminados);
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncates.addAll(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncatesEliminados);
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnos.addAll(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnosEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcas.addAll(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcasEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventass.addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventassEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineass.addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineassEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								vendedorLogic.saveVendedorRelaciones(vendedorAux,this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis(),this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros(),this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors(),this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes(),this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos(),this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas(),this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas(),this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates(),this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos(),this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas(),this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass(),this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass());//WithConnection
								//vendedorLogic.getSetVersionRowVendedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.vendedor,vendedorAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.setComisionVentaCobros(new ArrayList<ComisionVentaCobro>());
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.setVendedors(new ArrayList<Vendedor>());
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.setClientes(new ArrayList<Cliente>());
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.setComisionGrupos(new ArrayList<ComisionGrupo>());
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.setComisionLineas(new ArrayList<ComisionLinea>());
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.setVendedorZonas(new ArrayList<VendedorZona>());
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.setComisionCates(new ArrayList<ComisionCate>());
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.setCajeroTurnos(new ArrayList<CajeroTurno>());
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.setComisionMarcas(new ArrayList<ComisionMarca>());
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.setPresupuestoVentass(new ArrayList<PresupuestoVentas>());
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.setPresupuestoVentasLineass(new ArrayList<PresupuestoVentasLineas>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolis= new ArrayList<NotaCreditoSoli>();
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobros= new ArrayList<ComisionVentaCobro>();
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedors= new ArrayList<Vendedor>();
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientes= new ArrayList<Cliente>();
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupos= new ArrayList<ComisionGrupo>();
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineas= new ArrayList<ComisionLinea>();
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonas= new ArrayList<VendedorZona>();
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncates= new ArrayList<ComisionCate>();
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnos= new ArrayList<CajeroTurno>();
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcas= new ArrayList<ComisionMarca>();
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventass= new ArrayList<PresupuestoVentas>();
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineass= new ArrayList<PresupuestoVentasLineas>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setNotaCreditoSolis(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis());

							if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionVentaCobros(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros());

							if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setVendedors(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors());

							if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setClientes(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes());

							if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionGrupos(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos());

							if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionLineas(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas());

							if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setVendedorZonas(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas());

							if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionCates(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates());

							if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setCajeroTurnos(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos());

							if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionMarcas(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas());

							if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setPresupuestoVentass(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass());

							if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setPresupuestoVentasLineass(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.vendedorSessionBean.getEstaModoGuardarRelaciones() 
									|| this.vendedorSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(vendedorAux,vendedorLogic.getVendedors());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(vendedorAux,vendedors);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.vendedor,vendedorAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				vendedorAux=new  Vendedor();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.vendedorSessionBean.getEsGuardarRelacionado() 
					|| (this.vendedorSessionBean.getEsGuardarRelacionado() && this.vendedor.getId()>=0)) {
						
					vendedorAux.setIsNew(false);
				}
				
				vendedorAux.setIsDeleted(false);
			
				vendedorAux.setId(this.vendedor.getId());	
				vendedorAux.setVersionRow(this.vendedor.getVersionRow());	
				vendedorAux.setid_empresa(this.vendedor.getid_empresa());	
				vendedorAux.setid_sucursal(this.vendedor.getid_sucursal());	
				vendedorAux.setcodigo(this.vendedor.getcodigo());	
				vendedorAux.setnombre(this.vendedor.getnombre());	
				vendedorAux.setruc(this.vendedor.getruc());	
				vendedorAux.setemail(this.vendedor.getemail());	
				vendedorAux.setid_empleado(this.vendedor.getid_empleado());	
				vendedorAux.settelefono(this.vendedor.gettelefono());	
				
				if(this.vendedor.getid_empleado_soporte()!=null && this.vendedor.getid_empleado_soporte()>0L) {
					vendedorAux.setid_empleado_soporte(this.vendedor.getid_empleado_soporte());
				} else {
					vendedorAux.setid_empleado_soporte(null);
				}	
				
				if(this.vendedor.getid_vendedor()!=null && this.vendedor.getid_vendedor()>0L) {
					vendedorAux.setid_vendedor(this.vendedor.getid_vendedor());
				} else {
					vendedorAux.setid_vendedor(null);
				}	
				vendedorAux.setid_pais(this.vendedor.getid_pais());	
				vendedorAux.setid_ciudad(this.vendedor.getid_ciudad());	
				vendedorAux.setid_zona(this.vendedor.getid_zona());	
				vendedorAux.setrepresentante(this.vendedor.getrepresentante());	
				vendedorAux.setes_supervisor(this.vendedor.getes_supervisor());	
				vendedorAux.setfecha_creacion(this.vendedor.getfecha_creacion());	
				vendedorAux.setdireccion_domicilio(this.vendedor.getdireccion_domicilio());	
				vendedorAux.setdireccion_referencia(this.vendedor.getdireccion_referencia());	
				vendedorAux.setdescripcion(this.vendedor.getdescripcion());	
				vendedorAux.setporcentaje_comision(this.vendedor.getporcentaje_comision());	
				vendedorAux.setcomision(this.vendedor.getcomision());	
				vendedorAux.setmonto_vendido(this.vendedor.getmonto_vendido());	
				vendedorAux.setnumero_facturas(this.vendedor.getnumero_facturas());	
				vendedorAux.setfecha_ultima_venta(this.vendedor.getfecha_ultima_venta());	
				vendedorAux.setmonto_ultima_venta(this.vendedor.getmonto_ultima_venta());	
				vendedorAux.setcon_presupuesto(this.vendedor.getcon_presupuesto());	
				vendedorAux.setcon_cobertura(this.vendedor.getcon_cobertura());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(vendedorAux,vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(vendedorAux,vendedors);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.vendedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.vendedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.saveVendedors();//WithConnection
						//vendedorLogic.getSetVersionRowVendedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.vendedor,vendedorAux);
					
					this.refrescarForeignKeysDescripcionesVendedor();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.vendedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis().addAll(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolisEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros().addAll(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobrosEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors().addAll(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorsEliminados);
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes().addAll(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientesEliminados);
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos().addAll(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongruposEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas().addAll(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineasEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas().addAll(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonasEliminados);
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates().addAll(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncatesEliminados);
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos().addAll(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnosEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas().addAll(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcasEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass().addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventassEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass().addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineassEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolis.addAll(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolisEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobros.addAll(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobrosEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedors.addAll(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorsEliminados);
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientes.addAll(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientesEliminados);
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupos.addAll(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongruposEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineas.addAll(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineasEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonas.addAll(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonasEliminados);
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncates.addAll(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncatesEliminados);
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnos.addAll(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnosEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcas.addAll(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcasEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventass.addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventassEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineass.addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineassEliminados);
						}
						//ARCHITECTURE
						
						if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								vendedorLogic.saveVendedorRelaciones(vendedorAux,this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis(),this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros(),this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors(),this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes(),this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos(),this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas(),this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas(),this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates(),this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos(),this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas(),this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass(),this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass());//WithConnection
								//vendedorLogic.getSetVersionRowVendedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.vendedor,vendedorAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.setComisionVentaCobros(new ArrayList<ComisionVentaCobro>());
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.setVendedors(new ArrayList<Vendedor>());
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.setClientes(new ArrayList<Cliente>());
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.setComisionGrupos(new ArrayList<ComisionGrupo>());
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.setComisionLineas(new ArrayList<ComisionLinea>());
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.setVendedorZonas(new ArrayList<VendedorZona>());
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.setComisionCates(new ArrayList<ComisionCate>());
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.setCajeroTurnos(new ArrayList<CajeroTurno>());
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.setComisionMarcas(new ArrayList<ComisionMarca>());
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.setPresupuestoVentass(new ArrayList<PresupuestoVentas>());
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.setPresupuestoVentasLineass(new ArrayList<PresupuestoVentasLineas>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolis= new ArrayList<NotaCreditoSoli>();
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobros= new ArrayList<ComisionVentaCobro>();
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedors= new ArrayList<Vendedor>();
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientes= new ArrayList<Cliente>();
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupos= new ArrayList<ComisionGrupo>();
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineas= new ArrayList<ComisionLinea>();
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonas= new ArrayList<VendedorZona>();
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncates= new ArrayList<ComisionCate>();
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnos= new ArrayList<CajeroTurno>();
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcas= new ArrayList<ComisionMarca>();
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventass= new ArrayList<PresupuestoVentas>();
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineass= new ArrayList<PresupuestoVentasLineas>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setNotaCreditoSolis(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis());

							if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionVentaCobros(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros());

							if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setVendedors(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors());

							if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setClientes(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes());

							if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionGrupos(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos());

							if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionLineas(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas());

							if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setVendedorZonas(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas());

							if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionCates(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates());

							if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setCajeroTurnos(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos());

							if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionMarcas(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas());

							if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setPresupuestoVentass(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass());

							if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setPresupuestoVentasLineass(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.vendedorSessionBean.getEstaModoGuardarRelaciones() 
									|| this.vendedorSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(vendedorAux,vendedorLogic.getVendedors());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(vendedorAux,vendedors);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.vendedor,vendedorAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				vendedorAux=new  Vendedor();
				
				vendedorAux.setIsNew(false);
				vendedorAux.setIsChanged(false);
				
				vendedorAux.setIsDeleted(true);
				
				vendedorAux.setId(this.vendedor.getId());	
				vendedorAux.setVersionRow(this.vendedor.getVersionRow());	
				vendedorAux.setid_empresa(this.vendedor.getid_empresa());	
				vendedorAux.setid_sucursal(this.vendedor.getid_sucursal());	
				vendedorAux.setcodigo(this.vendedor.getcodigo());	
				vendedorAux.setnombre(this.vendedor.getnombre());	
				vendedorAux.setruc(this.vendedor.getruc());	
				vendedorAux.setemail(this.vendedor.getemail());	
				vendedorAux.setid_empleado(this.vendedor.getid_empleado());	
				vendedorAux.settelefono(this.vendedor.gettelefono());	
				
				if(this.vendedor.getid_empleado_soporte()!=null && this.vendedor.getid_empleado_soporte()>0L) {
					vendedorAux.setid_empleado_soporte(this.vendedor.getid_empleado_soporte());
				} else {
					vendedorAux.setid_empleado_soporte(null);
				}	
				
				if(this.vendedor.getid_vendedor()!=null && this.vendedor.getid_vendedor()>0L) {
					vendedorAux.setid_vendedor(this.vendedor.getid_vendedor());
				} else {
					vendedorAux.setid_vendedor(null);
				}	
				vendedorAux.setid_pais(this.vendedor.getid_pais());	
				vendedorAux.setid_ciudad(this.vendedor.getid_ciudad());	
				vendedorAux.setid_zona(this.vendedor.getid_zona());	
				vendedorAux.setrepresentante(this.vendedor.getrepresentante());	
				vendedorAux.setes_supervisor(this.vendedor.getes_supervisor());	
				vendedorAux.setfecha_creacion(this.vendedor.getfecha_creacion());	
				vendedorAux.setdireccion_domicilio(this.vendedor.getdireccion_domicilio());	
				vendedorAux.setdireccion_referencia(this.vendedor.getdireccion_referencia());	
				vendedorAux.setdescripcion(this.vendedor.getdescripcion());	
				vendedorAux.setporcentaje_comision(this.vendedor.getporcentaje_comision());	
				vendedorAux.setcomision(this.vendedor.getcomision());	
				vendedorAux.setmonto_vendido(this.vendedor.getmonto_vendido());	
				vendedorAux.setnumero_facturas(this.vendedor.getnumero_facturas());	
				vendedorAux.setfecha_ultima_venta(this.vendedor.getfecha_ultima_venta());	
				vendedorAux.setmonto_ultima_venta(this.vendedor.getmonto_ultima_venta());	
				vendedorAux.setcon_presupuesto(this.vendedor.getcon_presupuesto());	
				vendedorAux.setcon_cobertura(this.vendedor.getcon_cobertura());	
				
				if(this.vendedorSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.vendedorAux.getId()>=0) {	
						this.vendedorsEliminados.add(vendedorAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(vendedorAux,vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(vendedorAux,vendedors);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.vendedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.vendedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.saveVendedors();//WithConnection
						//vendedorLogic.getSetVersionRowVendedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.vendedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis().addAll(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolisEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros().addAll(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobrosEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors().addAll(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorsEliminados);
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes().addAll(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientesEliminados);
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos().addAll(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongruposEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas().addAll(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineasEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas().addAll(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonasEliminados);
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates().addAll(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncatesEliminados);
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos().addAll(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnosEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas().addAll(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcasEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass().addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventassEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass().addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineassEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolis.addAll(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolisEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobros.addAll(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobrosEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedors.addAll(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorsEliminados);
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientes.addAll(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientesEliminados);
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupos.addAll(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongruposEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineas.addAll(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineasEliminados);
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonas.addAll(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonasEliminados);
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncates.addAll(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncatesEliminados);
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnos.addAll(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnosEliminados);
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcas.addAll(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcasEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventass.addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventassEliminados);
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineass.addAll(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineassEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								vendedorLogic.saveVendedorRelaciones(vendedorAux,this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis(),this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros(),this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors(),this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes(),this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos(),this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas(),this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas(),this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates(),this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos(),this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas(),this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass(),this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass());//WithConnection
								//vendedorLogic.getSetVersionRowVendedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.setComisionVentaCobros(new ArrayList<ComisionVentaCobro>());
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.setVendedors(new ArrayList<Vendedor>());
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.setClientes(new ArrayList<Cliente>());
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.setComisionGrupos(new ArrayList<ComisionGrupo>());
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.setComisionLineas(new ArrayList<ComisionLinea>());
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.setVendedorZonas(new ArrayList<VendedorZona>());
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.setComisionCates(new ArrayList<ComisionCate>());
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.setCajeroTurnos(new ArrayList<CajeroTurno>());
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.setComisionMarcas(new ArrayList<ComisionMarca>());
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.setPresupuestoVentass(new ArrayList<PresupuestoVentas>());
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.setPresupuestoVentasLineass(new ArrayList<PresupuestoVentasLineas>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolis= new ArrayList<NotaCreditoSoli>();
							this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobros= new ArrayList<ComisionVentaCobro>();
							this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedors= new ArrayList<Vendedor>();
							this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientes= new ArrayList<Cliente>();
							this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupos= new ArrayList<ComisionGrupo>();
							this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineas= new ArrayList<ComisionLinea>();
							this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonas= new ArrayList<VendedorZona>();
							this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncates= new ArrayList<ComisionCate>();
							this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnos= new ArrayList<CajeroTurno>();
							this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcas= new ArrayList<ComisionMarca>();
							this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventass= new ArrayList<PresupuestoVentas>();
							this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineass= new ArrayList<PresupuestoVentasLineas>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setNotaCreditoSolis(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis());

							if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionVentaCobros(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros());

							if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setVendedors(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors());

							if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setClientes(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes());

							if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionGrupos(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos());

							if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionLineas(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas());

							if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setVendedorZonas(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas());

							if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionCates(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates());

							if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setCajeroTurnos(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos());

							if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setComisionMarcas(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas());

							if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setPresupuestoVentass(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass());

							if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.quitarFilaTotales();}
							vendedorAux.setPresupuestoVentasLineass(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.vendedorSessionBean.getEstaModoGuardarRelaciones() 
								|| this.vendedorSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(vendedorAux,vendedorLogic.getVendedors());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(vendedorAux,vendedors);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getVendedors().addAll(this.vendedorsEliminados);
					
					vendedorLogic.saveVendedors();//WithConnection
					//vendedorLogic.getSetVersionRowVendedors();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesVendedor();
				
				this.vendedorsEliminados= new ArrayList<Vendedor>();		
			}
			
			if(this.vendedorSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
			//ACTUALIZA ARBOL
			this.getTodosVendedorArbol();
			
			//TO_OPTIMIZE POR TIPO FK NO TODOS
			this.inicializarCombosForeignKeyVendedorListas();
			
			this.cargarCombosForeignKeyVendedor(false);
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Vendedor GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.vendedor=vendedorAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessVendedor();
      	}
		
	}	
	
	public void actualizarRelaciones(Vendedor vendedorLocal) throws Exception {
		
		if(this.vendedorSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				vendedorLocal.setNotaCreditoSolis(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis());
				vendedorLocal.setComisionVentaCobros(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros());
				vendedorLocal.setVendedors(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors());
				vendedorLocal.setClientes(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes());
				vendedorLocal.setComisionGrupos(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos());
				vendedorLocal.setComisionLineas(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas());
				vendedorLocal.setVendedorZonas(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas());
				vendedorLocal.setComisionCates(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates());
				vendedorLocal.setCajeroTurnos(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos());
				vendedorLocal.setComisionMarcas(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas());
				vendedorLocal.setPresupuestoVentass(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass());
				vendedorLocal.setPresupuestoVentasLineass(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass());
			
			} else {
			
				vendedorLocal.setNotaCreditoSolis(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosolis);
				vendedorLocal.setComisionVentaCobros(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobros);
				vendedorLocal.setVendedors(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedors);
				vendedorLocal.setClientes(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clientes);
				vendedorLocal.setComisionGrupos(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupos);
				vendedorLocal.setComisionLineas(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineas);
				vendedorLocal.setVendedorZonas(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonas);
				vendedorLocal.setComisionCates(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncates);
				vendedorLocal.setCajeroTurnos(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnos);
				vendedorLocal.setComisionMarcas(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcas);
				vendedorLocal.setPresupuestoVentass(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventass);
				vendedorLocal.setPresupuestoVentasLineass(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineass);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(Vendedor vendedorLocal) throws Exception {	
		if(this.vendedorSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				vendedorLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				vendedorLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				vendedorLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadosoporteBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadosoporteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadosoporteBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadosoporteBeanSwingJInternalFrameLocal.actualizarLista(empleadosoporteBeanSwingJInternalFrameLocal.empleado,this.empleadosoportesForeignKey);

				empleadosoporteBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadosoporteBeanSwingJInternalFrameLocal.empleado);

				vendedorLocal.setEmpleadoSoporte(empleadosoporteBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleadoSoporte();
				this.cargarCombosFrameEmpleadoSoportesForeignKey("Formulario");
				this.setActualEmpleadoSoporteForeignKey(empleadosoporteBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(VendedorDetalleFormJInternalFrame.class)) {
				VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrameLocal=(VendedorBeanSwingJInternalFrame) ((VendedorDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				vendedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoVendedor(vendedorBeanSwingJInternalFrameLocal.getvendedor(),true);
				vendedorBeanSwingJInternalFrameLocal.actualizarLista(vendedorBeanSwingJInternalFrameLocal.vendedor,this.vendedorsForeignKey);

				vendedorBeanSwingJInternalFrameLocal.actualizarRelaciones(vendedorBeanSwingJInternalFrameLocal.vendedor);

				vendedorLocal.setVendedor(vendedorBeanSwingJInternalFrameLocal.vendedor);

				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey("Formulario");
				this.setActualVendedorForeignKey(vendedorBeanSwingJInternalFrameLocal.vendedor.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PaisDetalleFormJInternalFrame.class)) {
				PaisBeanSwingJInternalFrame paisBeanSwingJInternalFrameLocal=(PaisBeanSwingJInternalFrame) ((PaisDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				paisBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPais(paisBeanSwingJInternalFrameLocal.getpais(),true);
				paisBeanSwingJInternalFrameLocal.actualizarLista(paisBeanSwingJInternalFrameLocal.pais,this.paissForeignKey);

				paisBeanSwingJInternalFrameLocal.actualizarRelaciones(paisBeanSwingJInternalFrameLocal.pais);

				vendedorLocal.setPais(paisBeanSwingJInternalFrameLocal.pais);

				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey("Formulario");
				this.setActualPaisForeignKey(paisBeanSwingJInternalFrameLocal.pais.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CiudadDetalleFormJInternalFrame.class)) {
				CiudadBeanSwingJInternalFrame ciudadBeanSwingJInternalFrameLocal=(CiudadBeanSwingJInternalFrame) ((CiudadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ciudadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCiudad(ciudadBeanSwingJInternalFrameLocal.getciudad(),true);
				ciudadBeanSwingJInternalFrameLocal.actualizarLista(ciudadBeanSwingJInternalFrameLocal.ciudad,this.ciudadsForeignKey);

				ciudadBeanSwingJInternalFrameLocal.actualizarRelaciones(ciudadBeanSwingJInternalFrameLocal.ciudad);

				vendedorLocal.setCiudad(ciudadBeanSwingJInternalFrameLocal.ciudad);

				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey("Formulario");
				this.setActualCiudadForeignKey(ciudadBeanSwingJInternalFrameLocal.ciudad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ZonaDetalleFormJInternalFrame.class)) {
				ZonaBeanSwingJInternalFrame zonaBeanSwingJInternalFrameLocal=(ZonaBeanSwingJInternalFrame) ((ZonaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				zonaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoZona(zonaBeanSwingJInternalFrameLocal.getzona(),true);
				zonaBeanSwingJInternalFrameLocal.actualizarLista(zonaBeanSwingJInternalFrameLocal.zona,this.zonasForeignKey);

				zonaBeanSwingJInternalFrameLocal.actualizarRelaciones(zonaBeanSwingJInternalFrameLocal.zona);

				vendedorLocal.setZona(zonaBeanSwingJInternalFrameLocal.zona);

				this.addItemDefectoCombosForeignKeyZona();
				this.cargarCombosFrameZonasForeignKey("Formulario");
				this.setActualZonaForeignKey(zonaBeanSwingJInternalFrameLocal.zona.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarVendedorActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = vendedorValidator.getInvalidValues(this.vendedor);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(Vendedor vendedor,List<Vendedor> vendedors) throws Exception {
		try	{		
			VendedorConstantesFunciones.actualizarLista(vendedor,vendedors,this.vendedorSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(Vendedor vendedor,List<Vendedor> vendedors) throws Exception {
		try	{			
			VendedorConstantesFunciones.actualizarSelectedLista(vendedor,vendedors);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<Vendedor> vendedorsLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				vendedorsLocal=this.vendedorLogic.getVendedors();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				vendedorsLocal=this.vendedors;
			}
			//ARCHITECTURE
		
			for(Vendedor vendedorLocal:vendedorsLocal) {
				if(this.permiteMantenimiento(vendedorLocal) && vendedorLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+VendedorConstantesFunciones.getVendedorLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelid_empresaVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelid_sucursalVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelcodigoVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelnombreVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.RUC)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelrucVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.EMAIL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelemailVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelid_empleadoVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.TELEFONO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeltelefonoVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.IDEMPLEADOSOPORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelid_empleado_soporteVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.IDVENDEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelid_vendedorVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.IDPAIS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelid_paisVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.IDCIUDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelid_ciudadVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.IDZONA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelid_zonaVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.REPRESENTANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelrepresentanteVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.ESSUPERVISOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeles_supervisorVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.FECHACREACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelfecha_creacionVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.DIRECCIONDOMICILIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeldireccion_domicilioVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.DIRECCIONREFERENCIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeldireccion_referenciaVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeldescripcionVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.PORCENTAJECOMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelporcentaje_comisionVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.COMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelcomisionVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.MONTOVENDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelmonto_vendidoVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.NUMEROFACTURAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelnumero_facturasVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.FECHAULTIMAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelfecha_ultima_ventaVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.MONTOULTIMAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelmonto_ultima_ventaVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.CONPRESUPUESTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelcon_presupuestoVendedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(VendedorConstantesFunciones.CONCOBERTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelcon_coberturaVendedor,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormVendedor!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelid_empresaVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelid_sucursalVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelcodigoVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelnombreVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelrucVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelemailVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelid_empleadoVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabeltelefonoVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelid_empleado_soporteVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelid_vendedorVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelid_paisVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelid_ciudadVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelid_zonaVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelrepresentanteVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabeles_supervisorVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelfecha_creacionVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabeldireccion_domicilioVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabeldireccion_referenciaVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabeldescripcionVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelporcentaje_comisionVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelcomisionVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelmonto_vendidoVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelnumero_facturasVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelfecha_ultima_ventaVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelmonto_ultima_ventaVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelcon_presupuestoVendedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormVendedor.jLabelcon_coberturaVendedor,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("NotaCreditoSoli")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.getnotacreditosoli().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("ComisionVentaCobro")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.getcomisionventacobro().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("Vendedor")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.getvendedor().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("Cliente")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.getcliente().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("ComisionGrupo")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.getcomisiongrupo().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("ComisionLinea")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.getcomisionlinea().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("VendedorZona")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.getvendedorzona().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("ComisionCate")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.getcomisioncate().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("CajeroTurno")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.getcajeroturno().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("ComisionMarca")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.getcomisionmarca().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("PresupuestoVentas")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.getpresupuestoventas().setVendedor(this.vendedor);
			}

			return;
		}
		 else  if(sTipo.equals("PresupuestoVentasLineas")) {
			if(this.vendedor==null) {
				this.vendedor= new Vendedor();
			}

			if(this.vendedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoVendedor
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.getpresupuestoventaslineas().setVendedor(this.vendedor);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoVendedor--;	
		
		
		this.vendedorAux=new Vendedor();
		
		this.vendedorAux.setId(this.iIdNuevoVendedor);
		this.vendedorAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.vendedorLogic.getVendedors().add(this.vendedorAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.vendedors.add(this.vendedorAux);
		}
		//ARCHITECTURE
		
		this.vendedor=this.vendedorAux;
		
		if(VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioVendedor(this.vendedor);
			this.setVariablesObjetoActualToFormularioForeignKeyVendedor(this.vendedor);
		}
				
		//this.setDefaultControlesVendedor();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyVendedor();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyVendedor();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyVendedor();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualVendedor(this.vendedorBean,this.vendedor,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(VendedorConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.vendedorSessionBean.getConGuardarRelaciones()) {
			classes=VendedorConstantesFunciones.getClassesRelationshipsOfVendedor(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.vendedorReturnGeneral=vendedorLogic.procesarEventosVendedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.vendedorLogic.getVendedors(),this.vendedor,this.vendedorParameterGeneral,this.isEsNuevoVendedor,classes);//this.vendedorLogic.getVendedor()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanVendedor(this.vendedorReturnGeneral,this.vendedorBean,false);
		
		if(this.vendedorReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyVendedor(this.vendedorReturnGeneral.getVendedor());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioVendedor(this.vendedorReturnGeneral.getVendedor());
		}
		
		if(this.vendedorReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioVendedor(this.vendedorReturnGeneral.getVendedor(),classes);//this.vendedorBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyVendedor();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyVendedor();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			VendedorBeanSwingJInternalFrameAdditional.RecargarFormVendedor(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingVendedor(false);
						
			if(vendedorSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliSessionBean.getEsGuardarRelacionado() && NotaCreditoSoliJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonNotaCreditoSoliActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroSessionBean.getEsGuardarRelacionado() && ComisionVentaCobroJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionVentaCobroActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorSessionBean.getEsGuardarRelacionado() && VendedorJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonVendedorActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteSessionBean.getEsGuardarRelacionado() && ClienteJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonClienteActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoSessionBean.getEsGuardarRelacionado() && ComisionGrupoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionGrupoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaSessionBean.getEsGuardarRelacionado() && ComisionLineaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionLineaActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaSessionBean.getEsGuardarRelacionado() && VendedorZonaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonVendedorZonaActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateSessionBean.getEsGuardarRelacionado() && ComisionCateJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionCateActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.getEsGuardarRelacionado() && CajeroTurnoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajeroTurnoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaSessionBean.getEsGuardarRelacionado() && ComisionMarcaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionMarcaActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasSessionBean.getEsGuardarRelacionado() && PresupuestoVentasJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPresupuestoVentasActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasSessionBean.getEsGuardarRelacionado() && PresupuestoVentasLineasJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPresupuestoVentasLineasActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(VendedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualVendedor();
			}
			
			this.actualizarVisualTableDatosVendedor();
			
			this.jTableDatosVendedor.setRowSelectionInterval(this.getIndiceNuevoVendedor(), this.getIndiceNuevoVendedor());
			
			this.seleccionarFilaTablaVendedorActual();
						
			this.actualizarEstadoCeldasBotonesVendedor("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesVendedor(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormVendedor.jTextFieldcodigoVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarcodigoVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreanombreVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarnombreVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldrucVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarrucVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreaemailVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activaremailVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreatelefonoVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activartelefonoVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextArearepresentanteVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarrepresentanteVendedor);
		this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activares_supervisorVendedor);
		this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_creacionVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarfecha_creacionVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_domicilioVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activardireccion_domicilioVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_referenciaVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activardireccion_referenciaVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreadescripcionVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activardescripcionVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldporcentaje_comisionVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarporcentaje_comisionVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldcomisionVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarcomisionVendedor);//
		this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_vendidoVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarmonto_vendidoVendedor);//
		this.jInternalFrameDetalleFormVendedor.jTextFieldnumero_facturasVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarnumero_facturasVendedor);//
		this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_ultima_ventaVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarfecha_ultima_ventaVendedor);//
		this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_ultima_ventaVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarmonto_ultima_ventaVendedor);
		this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarcon_presupuestoVendedor);
		this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarcon_coberturaVendedor);	
		//
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarid_empresaVendedor);//
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarid_sucursalVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarid_empleadoVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarid_empleado_soporteVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarid_vendedorVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarid_paisVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarid_ciudadVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setEnabled(isHabilitar && this.vendedorConstantesFunciones.activarid_zonaVendedor);
	};
	
	public void setDefaultControlesVendedor() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoVendedor(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.vendedorSessionBean.setConGuardarRelaciones(true);			
			this.vendedorSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.vendedorSessionBean.setConGuardarRelaciones(false);			
			this.vendedorSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoVendedor() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
				if(vendedorAux.getId().equals(this.iIdNuevoVendedor)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Vendedor vendedorAux:this.vendedors) {
				if(vendedorAux.getId().equals(this.iIdNuevoVendedor)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualVendedor(Vendedor vendedor,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
				if(vendedorAux.getId().equals(vendedor.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Vendedor vendedorAux:this.vendedors) {
				if(vendedorAux.getId().equals(vendedor.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalVendedor(Vendedor vendedorOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
				if(vendedorAux.getVendedorOriginal().getId().equals(vendedorOriginal.getId())) {
					existe=true;
					vendedorOriginal.setId(vendedorAux.getId());
					vendedorOriginal.setVersionRow(vendedorAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Vendedor vendedorAux:this.vendedors) {
				if(vendedorAux.getVendedorOriginal().getId().equals(vendedorOriginal.getId())) {
					existe=true;
					vendedorOriginal.setId(vendedorAux.getId());
					vendedorOriginal.setVersionRow(vendedorAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosVendedor(Boolean esParaCancelar) throws Exception {
		vendedorsAux=new ArrayList<Vendedor>();
		vendedorAux=new Vendedor();
		
		if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
					if(vendedorAux.getId()<0) {
						vendedorsAux.add(vendedorAux);
					}		
				}
				this.iIdNuevoVendedor=0L;
				this.vendedorLogic.getVendedors().removeAll(vendedorsAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Vendedor vendedorAux:this.vendedors) {
					if(vendedorAux.getId()<0) {
						vendedorsAux.add(vendedorAux);
					}		
				}
				this.iIdNuevoVendedor=0L;
				this.vendedors.removeAll(vendedorsAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoVendedor 
					&& this.vendedorLogic.getVendedors().size()>0
					) {
					vendedorAux=this.vendedorLogic.getVendedors().get(this.vendedorLogic.getVendedors().size() - 1);
				
					if(vendedorAux.getId()<0) {
						this.vendedorLogic.getVendedors().remove(vendedorAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoVendedor && this.vendedors.size()>0) {
					vendedorAux=this.vendedors.get(this.vendedors.size() - 1);
				
					if(vendedorAux.getId()<0) {
						this.vendedors.remove(vendedorAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoVendedor(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(vendedor.getId()<0) {
				this.vendedorLogic.getVendedors().remove(this.vendedor);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(vendedor.getId()<0) {
				this.vendedors.remove(this.vendedor);
			}
		}			
	}
	
	public void setEstadosInicialesVendedor(List<Vendedor> vendedorsAux) throws Exception {
		VendedorConstantesFunciones.setEstadosInicialesVendedor(vendedorsAux);
	}
	
	public void setEstadosInicialesVendedor(Vendedor vendedorAux) throws Exception {
		VendedorConstantesFunciones.setEstadosInicialesVendedor(vendedorAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarVendedorActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesVendedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarVendedorActual()) {
				if(!this.isEsNuevoVendedor) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesVendedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoVendedor=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarVendedorActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Vendedor ?", "MANTENIMIENTO DE Vendedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesVendedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(Vendedor vendedor) throws Exception {
		VendedorConstantesFunciones.seleccionarAsignar(this.vendedor,vendedor);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarVendedor=this.isPermisoActualizarOriginalVendedor;
			
			
			this.seleccionarAsignar(vendedor);
			
			

			idEmpleadoActual=vendedor.getid_empleado();
			this.seleccionarEmpleadoActual();

			idEmpleadoSoporteActual=vendedor.getid_empleado_soporte();
			this.seleccionarEmpleadoSoporteActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			VendedorConstantesFunciones.quitarEspaciosVendedor(this.vendedor,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesVendedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.vendedorSessionBean.setsFuncionBusquedaRapida(this.vendedorSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarEmpleadoSoporteActual() throws Exception {
		try	{
			Empleado empleadosoporteAux=new Empleado();

			if(this.idEmpleadoSoporteActual != null && this.idEmpleadoSoporteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadosoporteLogic.getEntityWithConnection(this.idEmpleadoSoporteActual);
					empleadosoporteAux= empleadosoporteLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosoportesForeignKey=new ArrayList<Empleado>();
				empleadosoportesForeignKey.add(empleadosoporteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoVendedor) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosVendedor(esParaCancelar);				
				this.cancelarNuevoVendedor(esParaCancelar);								
			}
			
			this.vendedor=new Vendedor();
			
			this.inicializarVendedor();
			
			this.actualizarEstadoCeldasBotonesVendedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarVendedor() throws Exception {
		try {
			VendedorConstantesFunciones.inicializarVendedor(this.vendedor);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.vendedorLogic.getVendedors().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteVendedors(String sAccionBusqueda,List<Vendedor> vendedorsParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="Vendedor"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="VendedorMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("VendedorMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="Vendedor"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Vendedores");		
		parameters.put("busquedapor", VendedorConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(NotaCreditoSoli.class));
			classes.add(new Classe(ComisionVentaCobro.class));
			classes.add(new Classe(Vendedor.class));
			classes.add(new Classe(Cliente.class));
			classes.add(new Classe(ComisionGrupo.class));
			classes.add(new Classe(ComisionLinea.class));
			classes.add(new Classe(VendedorZona.class));
			classes.add(new Classe(ComisionCate.class));
			classes.add(new Classe(CajeroTurno.class));
			classes.add(new Classe(ComisionMarca.class));
			classes.add(new Classe(PresupuestoVentas.class));
			classes.add(new Classe(PresupuestoVentasLineas.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					VendedorLogic vendedorLogicAuxiliar=new VendedorLogic();
					vendedorLogicAuxiliar.setDatosCliente(vendedorLogic.getDatosCliente());				
					vendedorLogicAuxiliar.setVendedors(vendedorsParaReportes);
					
					vendedorLogicAuxiliar.cargarRelacionesLoteForeignKeyVendedorWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					vendedorsParaReportes=vendedorLogicAuxiliar.getVendedors();
					
					//vendedorLogic.getNewConnexionToDeep();
					
					//for (Vendedor vendedor:vendedorsParaReportes) {
					//	vendedorLogic.deepLoad(vendedor, false, DeepLoadType.INCLUDE, classes);
					//}						
					//vendedorLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//vendedorLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileNotaCreditoSoli = AuxiliarReportes.class.getResourceAsStream("NotaCreditoSoliDetalleRelacionesDesign.jasper");
			parameters.put("subreport_notacreditosoli", reportFileNotaCreditoSoli);

			InputStream reportFileComisionVentaCobro = AuxiliarReportes.class.getResourceAsStream("ComisionVentaCobroDetalleRelacionesDesign.jasper");
			parameters.put("subreport_comisionventacobro", reportFileComisionVentaCobro);

			InputStream reportFileVendedor = AuxiliarReportes.class.getResourceAsStream("VendedorDetalleRelacionesDesign.jasper");
			parameters.put("subreport_vendedor", reportFileVendedor);

			InputStream reportFileCliente = AuxiliarReportes.class.getResourceAsStream("ClienteDetalleRelacionesDesign.jasper");
			parameters.put("subreport_cliente", reportFileCliente);

			InputStream reportFileComisionGrupo = AuxiliarReportes.class.getResourceAsStream("ComisionGrupoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_comisiongrupo", reportFileComisionGrupo);

			InputStream reportFileComisionLinea = AuxiliarReportes.class.getResourceAsStream("ComisionLineaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_comisionlinea", reportFileComisionLinea);

			InputStream reportFileVendedorZona = AuxiliarReportes.class.getResourceAsStream("VendedorZonaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_vendedorzona", reportFileVendedorZona);

			InputStream reportFileComisionCate = AuxiliarReportes.class.getResourceAsStream("ComisionCateDetalleRelacionesDesign.jasper");
			parameters.put("subreport_comisioncate", reportFileComisionCate);

			InputStream reportFileCajeroTurno = AuxiliarReportes.class.getResourceAsStream("CajeroTurnoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_cajeroturno", reportFileCajeroTurno);

			InputStream reportFileComisionMarca = AuxiliarReportes.class.getResourceAsStream("ComisionMarcaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_comisionmarca", reportFileComisionMarca);

			InputStream reportFilePresupuestoVentas = AuxiliarReportes.class.getResourceAsStream("PresupuestoVentasDetalleRelacionesDesign.jasper");
			parameters.put("subreport_presupuestoventas", reportFilePresupuestoVentas);

			InputStream reportFilePresupuestoVentasLineas = AuxiliarReportes.class.getResourceAsStream("PresupuestoVentasLineasDetalleRelacionesDesign.jasper");
			parameters.put("subreport_presupuestoventaslineas", reportFilePresupuestoVentasLineas);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceVendedor=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			VendedorConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			VendedorConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceVendedor=new JRBeanArrayDataSource(VendedorJInternalFrame.TraerVendedorBeans(vendedorsParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceVendedor);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+VendedorConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+VendedorConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(VendedorBean.TraerVendedorBeans(vendedorsParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteVendedors(sAccionBusqueda,sTipoArchivoReporte,vendedorsParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalVendedors(sAccionBusqueda,sTipoArchivoReporte,vendedorsParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoVendedorActionPerformed(null);
					//this.generarExcelReporteVendedors(sAccionBusqueda,sTipoArchivoReporte,vendedorsParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalVendedors(sAccionBusqueda,sTipoArchivoReporte,vendedorsParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesVendedors(sAccionBusqueda,sTipoArchivoReporte,vendedorsParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesVendedors(sAccionBusqueda,sTipoArchivoReporte,vendedorsParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteVendedors(String sAccionBusqueda,String sTipoArchivoReporte,List<Vendedor> vendedorsParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"vendedor";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Vendedors");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderVendedor("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(Vendedor vendedor : vendedorsParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			VendedorConstantesFunciones.generarExcelReporteDataVendedor("NORMAL",row,workbook,vendedor,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderVendedor(String sTipo,Row row,Workbook workbook) {
		
		VendedorConstantesFunciones.generarExcelReporteHeaderVendedor(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalVendedors(String sAccionBusqueda,String sTipoArchivoReporte,List<Vendedor> vendedorsParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"vendedor_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Vendedors");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(Vendedor vendedor : vendedorsParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(VendedorConstantesFunciones.getVendedorDescripcion(vendedor));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getnombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_RUC))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_RUC);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getruc());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_EMAIL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_EMAIL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getemail());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_TELEFONO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_TELEFONO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.gettelefono());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getempleadosoporte_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_IDVENDEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_IDVENDEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getvendedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_IDPAIS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_IDPAIS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getpais_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_IDCIUDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_IDCIUDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getciudad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_IDZONA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_IDZONA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getzona_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_REPRESENTANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_REPRESENTANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getrepresentante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_ESSUPERVISOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_ESSUPERVISOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(vendedor.getes_supervisor()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_FECHACREACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_FECHACREACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getfecha_creacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getdireccion_domicilio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getdireccion_referencia());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getporcentaje_comision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_COMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_COMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getcomision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_MONTOVENDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_MONTOVENDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getmonto_vendido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_NUMEROFACTURAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_NUMEROFACTURAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getnumero_facturas());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getfecha_ultima_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(vendedor.getmonto_ultima_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_CONPRESUPUESTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_CONPRESUPUESTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(vendedor.getcon_presupuesto()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(VendedorConstantesFunciones.LABEL_CONCOBERTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(VendedorConstantesFunciones.LABEL_CONCOBERTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(vendedor.getcon_cobertura()));


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesVendedors(String sAccionBusqueda,String sTipoArchivoReporte,List<Vendedor> vendedorsParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<Vendedor> vendedorsRespaldo=null;
		
		classes=VendedorConstantesFunciones.getClassesRelationshipsOfVendedor(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.vendedorLogic.setDatosCliente(this.datosCliente);
		this.vendedorLogic.setDatosDeep(this.datosDeep);
		this.vendedorLogic.setIsConDeep(true);
		
		vendedorsRespaldo=this.vendedorLogic.getVendedors();
		
		this.vendedorLogic.setVendedors(vendedorsParaReportes);	
		this.vendedorLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		vendedorsParaReportes=this.vendedorLogic.getVendedors();
		this.vendedorLogic.setVendedors(vendedorsRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"vendedor_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Vendedors");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderVendedor("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(Vendedor vendedor : vendedorsParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderVendedor("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			VendedorConstantesFunciones.generarExcelReporteDataVendedor("NORMAL",row,workbook,vendedor,cellStyleDataAux);
		
			
			


				//NotaCreditoSoli
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getNotaCreditoSolis()!=null && vendedor.getNotaCreditoSolis().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					NotaCreditoSoliConstantesFunciones.generarExcelReporteHeaderNotaCreditoSoli("RELACIONADO",row,workbook);
				}

				if(vendedor.getNotaCreditoSolis()!=null) {
					i2=0;
					for(NotaCreditoSoli notacreditosoli : vendedor.getNotaCreditoSolis()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						NotaCreditoSoliConstantesFunciones.generarExcelReporteDataNotaCreditoSoli("RELACIONADO",row,workbook,notacreditosoli,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//ComisionVentaCobro
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(ComisionVentaCobroConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getComisionVentaCobros()!=null && vendedor.getComisionVentaCobros().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(ComisionVentaCobroConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					ComisionVentaCobroConstantesFunciones.generarExcelReporteHeaderComisionVentaCobro("RELACIONADO",row,workbook);
				}

				if(vendedor.getComisionVentaCobros()!=null) {
					i2=0;
					for(ComisionVentaCobro comisionventacobro : vendedor.getComisionVentaCobros()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						ComisionVentaCobroConstantesFunciones.generarExcelReporteDataComisionVentaCobro("RELACIONADO",row,workbook,comisionventacobro,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//Vendedor
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(VendedorConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getVendedors()!=null && vendedor.getVendedors().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(VendedorConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					VendedorConstantesFunciones.generarExcelReporteHeaderVendedor("RELACIONADO",row,workbook);
				}

				if(vendedor.getVendedors()!=null) {
					i2=0;
					for(Vendedor vendedorAutoRef : vendedor.getVendedors()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						VendedorConstantesFunciones.generarExcelReporteDataVendedor("RELACIONADO",row,workbook,vendedorAutoRef,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//Cliente
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(ClienteConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getClientes()!=null && vendedor.getClientes().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(ClienteConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					ClienteConstantesFunciones.generarExcelReporteHeaderCliente("RELACIONADO",row,workbook);
				}

				if(vendedor.getClientes()!=null) {
					i2=0;
					for(Cliente cliente : vendedor.getClientes()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						ClienteConstantesFunciones.generarExcelReporteDataCliente("RELACIONADO",row,workbook,cliente,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//ComisionGrupo
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(ComisionGrupoConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getComisionGrupos()!=null && vendedor.getComisionGrupos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(ComisionGrupoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					ComisionGrupoConstantesFunciones.generarExcelReporteHeaderComisionGrupo("RELACIONADO",row,workbook);
				}

				if(vendedor.getComisionGrupos()!=null) {
					i2=0;
					for(ComisionGrupo comisiongrupo : vendedor.getComisionGrupos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						ComisionGrupoConstantesFunciones.generarExcelReporteDataComisionGrupo("RELACIONADO",row,workbook,comisiongrupo,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//ComisionLinea
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(ComisionLineaConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getComisionLineas()!=null && vendedor.getComisionLineas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(ComisionLineaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					ComisionLineaConstantesFunciones.generarExcelReporteHeaderComisionLinea("RELACIONADO",row,workbook);
				}

				if(vendedor.getComisionLineas()!=null) {
					i2=0;
					for(ComisionLinea comisionlinea : vendedor.getComisionLineas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						ComisionLineaConstantesFunciones.generarExcelReporteDataComisionLinea("RELACIONADO",row,workbook,comisionlinea,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//VendedorZona
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(VendedorZonaConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getVendedorZonas()!=null && vendedor.getVendedorZonas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(VendedorZonaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					VendedorZonaConstantesFunciones.generarExcelReporteHeaderVendedorZona("RELACIONADO",row,workbook);
				}

				if(vendedor.getVendedorZonas()!=null) {
					i2=0;
					for(VendedorZona vendedorzona : vendedor.getVendedorZonas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						VendedorZonaConstantesFunciones.generarExcelReporteDataVendedorZona("RELACIONADO",row,workbook,vendedorzona,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//ComisionCate
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(ComisionCateConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getComisionCates()!=null && vendedor.getComisionCates().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(ComisionCateConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					ComisionCateConstantesFunciones.generarExcelReporteHeaderComisionCate("RELACIONADO",row,workbook);
				}

				if(vendedor.getComisionCates()!=null) {
					i2=0;
					for(ComisionCate comisioncate : vendedor.getComisionCates()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						ComisionCateConstantesFunciones.generarExcelReporteDataComisionCate("RELACIONADO",row,workbook,comisioncate,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//CajeroTurno
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(CajeroTurnoConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getCajeroTurnos()!=null && vendedor.getCajeroTurnos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(CajeroTurnoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					CajeroTurnoConstantesFunciones.generarExcelReporteHeaderCajeroTurno("RELACIONADO",row,workbook);
				}

				if(vendedor.getCajeroTurnos()!=null) {
					i2=0;
					for(CajeroTurno cajeroturno : vendedor.getCajeroTurnos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						CajeroTurnoConstantesFunciones.generarExcelReporteDataCajeroTurno("RELACIONADO",row,workbook,cajeroturno,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//ComisionMarca
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(ComisionMarcaConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getComisionMarcas()!=null && vendedor.getComisionMarcas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(ComisionMarcaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					ComisionMarcaConstantesFunciones.generarExcelReporteHeaderComisionMarca("RELACIONADO",row,workbook);
				}

				if(vendedor.getComisionMarcas()!=null) {
					i2=0;
					for(ComisionMarca comisionmarca : vendedor.getComisionMarcas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						ComisionMarcaConstantesFunciones.generarExcelReporteDataComisionMarca("RELACIONADO",row,workbook,comisionmarca,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//PresupuestoVentas
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(PresupuestoVentasConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getPresupuestoVentass()!=null && vendedor.getPresupuestoVentass().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(PresupuestoVentasConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					PresupuestoVentasConstantesFunciones.generarExcelReporteHeaderPresupuestoVentas("RELACIONADO",row,workbook);
				}

				if(vendedor.getPresupuestoVentass()!=null) {
					i2=0;
					for(PresupuestoVentas presupuestoventas : vendedor.getPresupuestoVentass()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						PresupuestoVentasConstantesFunciones.generarExcelReporteDataPresupuestoVentas("RELACIONADO",row,workbook,presupuestoventas,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//PresupuestoVentasLineas
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(PresupuestoVentasLineasConstantesFunciones.SCLASSWEBTITULO))) {

				if(vendedor.getPresupuestoVentasLineass()!=null && vendedor.getPresupuestoVentasLineass().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(PresupuestoVentasLineasConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					PresupuestoVentasLineasConstantesFunciones.generarExcelReporteHeaderPresupuestoVentasLineas("RELACIONADO",row,workbook);
				}

				if(vendedor.getPresupuestoVentasLineass()!=null) {
					i2=0;
					for(PresupuestoVentasLineas presupuestoventaslineas : vendedor.getPresupuestoVentasLineass()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						PresupuestoVentasLineasConstantesFunciones.generarExcelReporteDataPresupuestoVentasLineas("RELACIONADO",row,workbook,presupuestoventaslineas,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(VendedorConstantesFunciones.getVendedorDescripcion(vendedor));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoVendedor.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoVendedor.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessVendedor() throws Exception {		
		this.startProcessVendedor(true);
	}
	
	public void startProcessVendedor(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasVendedor ,this.jPanelParametrosReportesVendedor, this.jScrollPanelDatosVendedor,this.jPanelPaginacionVendedor, this.jScrollPanelDatosEdicionVendedor, this.jPanelAccionesVendedor,this.jPanelAccionesFormularioVendedor,this.jmenuBarVendedor,this.jmenuBarDetalleVendedor,this.jTtoolBarVendedor,this.jTtoolBarDetalleVendedor);		
		
		final JTabbedPane jTabbedPaneBusquedasVendedor=this.jTabbedPaneBusquedasVendedor; 
		
		final JPanel jPanelParametrosReportesVendedor=this.jPanelParametrosReportesVendedor;
		//final JScrollPane jScrollPanelDatosVendedor=this.jScrollPanelDatosVendedor;
		final JTable jTableDatosVendedor=this.jTableDatosVendedor;		
		final JPanel jPanelPaginacionVendedor=this.jPanelPaginacionVendedor;
		//final JScrollPane jScrollPanelDatosEdicionVendedor=this.jScrollPanelDatosEdicionVendedor;
		final JPanel jPanelAccionesVendedor=this.jPanelAccionesVendedor;
		
		JPanel jPanelCamposAuxiliarVendedor=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarVendedor=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormVendedor!=null) {
			jPanelCamposAuxiliarVendedor=this.jInternalFrameDetalleFormVendedor.jPanelCamposVendedor;
			jPanelAccionesFormularioAuxiliarVendedor=this.jInternalFrameDetalleFormVendedor.jPanelAccionesFormularioVendedor;
		}
		
		final JPanel jPanelCamposVendedor=jPanelCamposAuxiliarVendedor;
		final JPanel jPanelAccionesFormularioVendedor=jPanelAccionesFormularioAuxiliarVendedor;
		
		
		final JMenuBar jmenuBarVendedor=this.jmenuBarVendedor;
		final JToolBar jTtoolBarVendedor=this.jTtoolBarVendedor;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarVendedor=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarVendedor=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) {
			jmenuBarDetalleAuxiliarVendedor=this.jInternalFrameDetalleFormVendedor.jmenuBarDetalleVendedor;
			jTtoolBarDetalleAuxiliarVendedor=this.jInternalFrameDetalleFormVendedor.jTtoolBarDetalleVendedor;
		}
		
		final JMenuBar jmenuBarDetalleVendedor=jmenuBarDetalleAuxiliarVendedor;
		final JToolBar jTtoolBarDetalleVendedor=jTtoolBarDetalleAuxiliarVendedor;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasVendedor;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesVendedor;
			processRunnable.jTableDatos=jTableDatosVendedor;
			processRunnable.jPanelCampos=jPanelCamposVendedor;
			processRunnable.jPanelPaginacion=jPanelPaginacionVendedor;
			processRunnable.jPanelAcciones=jPanelAccionesVendedor;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioVendedor;
			
			
			processRunnable.jmenuBar=jmenuBarVendedor;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleVendedor;
			processRunnable.jTtoolBar=jTtoolBarVendedor;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleVendedor;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasVendedor ,jPanelParametrosReportesVendedor,jTableDatosVendedor, /*jScrollPanelDatosVendedor,*/jPanelCamposVendedor,jPanelPaginacionVendedor, /*jScrollPanelDatosEdicionVendedor,*/ jPanelAccionesVendedor,jPanelAccionesFormularioVendedor,jmenuBarVendedor,jmenuBarDetalleVendedor,jTtoolBarVendedor,jTtoolBarDetalleVendedor);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasVendedor ,jPanelParametrosReportesVendedor, jScrollPanelDatosVendedor,jPanelPaginacionVendedor, jScrollPanelDatosEdicionVendedor, jPanelAccionesVendedor,jPanelAccionesFormularioVendedor,jmenuBarVendedor,jmenuBarDetalleVendedor,jTtoolBarVendedor,jTtoolBarDetalleVendedor);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessVendedor() {// throws Exception 
		this.finishProcessVendedor(true);
	}
	
	public void finishProcessVendedor(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasVendedor ,this.jPanelParametrosReportesVendedor, this.jScrollPanelDatosVendedor,this.jPanelPaginacionVendedor, this.jScrollPanelDatosEdicionVendedor, this.jPanelAccionesVendedor,this.jPanelAccionesFormularioVendedor,this.jmenuBarVendedor,this.jmenuBarDetalleVendedor,this.jTtoolBarVendedor,this.jTtoolBarDetalleVendedor);		
		
		final JTabbedPane jTabbedPaneBusquedasVendedor=this.jTabbedPaneBusquedasVendedor; 
		
		final JPanel jPanelParametrosReportesVendedor=this.jPanelParametrosReportesVendedor;
		//final JScrollPane jScrollPanelDatosVendedor=this.jScrollPanelDatosVendedor;
		final JTable jTableDatosVendedor=this.jTableDatosVendedor;		
		final JPanel jPanelPaginacionVendedor=this.jPanelPaginacionVendedor;
		//final JScrollPane jScrollPanelDatosEdicionVendedor=this.jScrollPanelDatosEdicionVendedor;
		final JPanel jPanelAccionesVendedor=this.jPanelAccionesVendedor;
		
		JPanel jPanelCamposAuxiliarVendedor=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarVendedor=new JPanel();
		
		if(this.jInternalFrameDetalleFormVendedor!=null) {
			jPanelCamposAuxiliarVendedor=this.jInternalFrameDetalleFormVendedor.jPanelCamposVendedor;
			jPanelAccionesFormularioAuxiliarVendedor=this.jInternalFrameDetalleFormVendedor.jPanelAccionesFormularioVendedor;
		}
		
		final JPanel jPanelCamposVendedor=jPanelCamposAuxiliarVendedor;
		final JPanel jPanelAccionesFormularioVendedor=jPanelAccionesFormularioAuxiliarVendedor;
		
		
		final JMenuBar jmenuBarVendedor=this.jmenuBarVendedor;		
		final JToolBar jTtoolBarVendedor=this.jTtoolBarVendedor;
				
		JMenuBar jmenuBarDetalleAuxiliarVendedor=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarVendedor=new JToolBar();
		
		if(this.jInternalFrameDetalleFormVendedor!=null) {
			jmenuBarDetalleAuxiliarVendedor=this.jInternalFrameDetalleFormVendedor.jmenuBarDetalleVendedor;
			jTtoolBarDetalleAuxiliarVendedor=this.jInternalFrameDetalleFormVendedor.jTtoolBarDetalleVendedor;		
		}
		
		final JMenuBar jmenuBarDetalleVendedor=jmenuBarDetalleAuxiliarVendedor;
		final JToolBar jTtoolBarDetalleVendedor=jTtoolBarDetalleAuxiliarVendedor;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasVendedor;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesVendedor;
			processRunnable.jTableDatos=jTableDatosVendedor;
			processRunnable.jPanelCampos=jPanelCamposVendedor;
			processRunnable.jPanelPaginacion=jPanelPaginacionVendedor;
			processRunnable.jPanelAcciones=jPanelAccionesVendedor;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioVendedor;
			
			
			processRunnable.jmenuBar=jmenuBarVendedor;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleVendedor;
			processRunnable.jTtoolBar=jTtoolBarVendedor;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleVendedor;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasVendedor ,jPanelParametrosReportesVendedor, jTableDatosVendedor,/*jScrollPanelDatosVendedor,*/jPanelCamposVendedor,jPanelPaginacionVendedor, /*jScrollPanelDatosEdicionVendedor,*/ jPanelAccionesVendedor,jPanelAccionesFormularioVendedor,jmenuBarVendedor,jmenuBarDetalleVendedor,jTtoolBarVendedor,jTtoolBarDetalleVendedor));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesVendedor(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarVendedor(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuVendedor(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarVendedor(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarVendedor,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleVendedor,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuVendedor(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarVendedor,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleVendedor,esHabilitar,1,1);
		}
	}
	*/
	
	
	public void getTodosVendedorArbol() throws Exception {	
		ArrayList<String> arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral);
		
		String  finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);
		
		this.pagination=new Pagination();
		
		this.pagination.setiFirstResult(-1);
		this.pagination.setiMaxResults(-1);
		
		this.cargarDatosCliente();
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			vendedorLogic.getTodosVendedors(finalQueryGlobal+"",this.pagination);//WithConnection
			this.vendedorsArbol=vendedorLogic.getVendedors();
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
	}
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.vendedorConstantesFunciones.getsFinalQueryVendedor();
		String  finalQueryPaginacionTodos=this.vendedorConstantesFunciones.getsFinalQueryVendedor();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=VendedorConstantesFunciones.getArrayColumnasGlobalesNoVendedor(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.vendedorsEliminados= new ArrayList<Vendedor>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessVendedor();
		
				///*VendedorSessionBean*/this.vendedorSessionBean=new VendedorSessionBean();
			
			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=VendedorConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=VendedorConstantesFunciones.getClassesForeignKeysOfVendedor(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/vendedor."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			vendedorsAux= new ArrayList<Vendedor>();
			
				
			vendedorLogic.setDatosCliente(this.datosCliente);
			vendedorLogic.setDatosDeep(this.datosDeep);
			vendedorLogic.setIsConDeep(true);
			
			
			vendedorLogic.getVendedorDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					vendedorLogic.getTodosVendedors(finalQueryGlobal,pagination);
					
					//vendedorLogic.getTodosVendedorsWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(vendedorLogic.getVendedors()==null|| vendedorLogic.getVendedors().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							vendedorsAux= new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedorLogic.getVendedors());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux= new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							vendedorLogic.getTodosVendedors(finalQueryGlobal+"",this.pagination);												
							
							//vendedorLogic.getTodosVendedorsWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteVendedors("Todos",vendedorLogic.getVendedors() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							vendedorLogic.setVendedors(new ArrayList<Vendedor>());					
							vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idVendedor=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idVendedor=this.idActual;
				
				} else if(this.idVendedorActual!=null && this.idVendedorActual!=0L) {
					idVendedor=idVendedorActual;
				}
				
					
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndicePorId(idVendedor);
				
				this.vendedors=new ArrayList<Vendedor>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					vendedorLogic.getEntity(idVendedor);
					
					//vendedorLogic.getEntityWithConnection(idVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.setVendedors(new ArrayList<Vendedor>());
					vendedorLogic.getVendedors().add(vendedorLogic.getVendedor());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedors=new ArrayList<Vendedor>();
					this.vendedors.add(vendedor);
				}
				
				if(vendedorLogic.getVendedor()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorCodigo")) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					vendedorLogic.getVendedorsBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=vendedorLogic.getVendedors()==null||vendedorLogic.getVendedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=vendedors==null|| vendedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorsAux=new ArrayList<Vendedor>();
						vendedorsAux.addAll(vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux=new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							vendedorLogic.getVendedorsBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteVendedors("BusquedaPorCodigo",vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteVendedors("BusquedaPorCodigo",vendedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.setVendedors(new ArrayList<Vendedor>());
						vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNombre")) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					vendedorLogic.getVendedorsBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=vendedorLogic.getVendedors()==null||vendedorLogic.getVendedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=vendedors==null|| vendedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorsAux=new ArrayList<Vendedor>();
						vendedorsAux.addAll(vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux=new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							vendedorLogic.getVendedorsBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteVendedors("BusquedaPorNombre",vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteVendedors("BusquedaPorNombre",vendedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.setVendedors(new ArrayList<Vendedor>());
						vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorRuc")) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorRuc(rucBusquedaPorRuc);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					vendedorLogic.getVendedorsBusquedaPorRuc(finalQueryGlobal,pagination,rucBusquedaPorRuc);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorRuc(rucBusquedaPorRuc);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorRuc(rucBusquedaPorRuc);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=vendedorLogic.getVendedors()==null||vendedorLogic.getVendedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=vendedors==null|| vendedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorsAux=new ArrayList<Vendedor>();
						vendedorsAux.addAll(vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux=new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							vendedorLogic.getVendedorsBusquedaPorRuc(finalQueryGlobal,pagination,rucBusquedaPorRuc);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorRuc(rucBusquedaPorRuc);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceBusquedaPorRuc(rucBusquedaPorRuc);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteVendedors("BusquedaPorRuc",vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteVendedors("BusquedaPorRuc",vendedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.setVendedors(new ArrayList<Vendedor>());
						vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					vendedorLogic.getVendedorsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=vendedorLogic.getVendedors()==null||vendedorLogic.getVendedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=vendedors==null|| vendedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorsAux=new ArrayList<Vendedor>();
						vendedorsAux.addAll(vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux=new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							vendedorLogic.getVendedorsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteVendedors("FK_IdEmpresa",vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteVendedors("FK_IdEmpresa",vendedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.setVendedors(new ArrayList<Vendedor>());
						vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPais")) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					vendedorLogic.getVendedorsFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=vendedorLogic.getVendedors()==null||vendedorLogic.getVendedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=vendedors==null|| vendedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorsAux=new ArrayList<Vendedor>();
						vendedorsAux.addAll(vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux=new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							vendedorLogic.getVendedorsFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteVendedors("FK_IdPais",vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteVendedors("FK_IdPais",vendedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.setVendedors(new ArrayList<Vendedor>());
						vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					vendedorLogic.getVendedorsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=vendedorLogic.getVendedors()==null||vendedorLogic.getVendedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=vendedors==null|| vendedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorsAux=new ArrayList<Vendedor>();
						vendedorsAux.addAll(vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux=new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							vendedorLogic.getVendedorsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteVendedors("FK_IdSucursal",vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteVendedors("FK_IdSucursal",vendedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.setVendedors(new ArrayList<Vendedor>());
						vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdVendedor")) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					vendedorLogic.getVendedorsFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=vendedorLogic.getVendedors()==null||vendedorLogic.getVendedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=vendedors==null|| vendedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorsAux=new ArrayList<Vendedor>();
						vendedorsAux.addAll(vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux=new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							vendedorLogic.getVendedorsFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteVendedors("FK_IdVendedor",vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteVendedors("FK_IdVendedor",vendedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.setVendedors(new ArrayList<Vendedor>());
						vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdZona")) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					vendedorLogic.getVendedorsFK_IdZona(finalQueryGlobal,pagination,id_zonaFK_IdZona);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=vendedorLogic.getVendedors()==null||vendedorLogic.getVendedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=vendedors==null|| vendedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorsAux=new ArrayList<Vendedor>();
						vendedorsAux.addAll(vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorsAux=new ArrayList<Vendedor>();
							vendedorsAux.addAll(vendedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							vendedorLogic.getVendedorsFK_IdZona(finalQueryGlobal,pagination,id_zonaFK_IdZona);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=VendedorConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteVendedors("FK_IdZona",vendedorLogic.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteVendedors("FK_IdZona",vendedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorLogic.setVendedors(new ArrayList<Vendedor>());
						vendedorLogic.getVendedors().addAll(vendedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedors=new ArrayList<Vendedor>();
							vendedors.addAll(vendedorsAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesVendedor();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessVendedor();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=vendedorLogic.getVendedors().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=vendedors.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=vendedorLogic.getVendedors().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=vendedors.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(Vendedor vendedor) {
		Boolean permite=true;
		
		if(this.vendedor.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=VendedorConstantesFunciones.getOrderByListaVendedor();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=VendedorConstantesFunciones.getOrderByListaVendedor();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Vendedor vendedor:vendedorLogic.getVendedors()) {
				if(vendedor.getsType().equals(Constantes2.S_TOTALES)) {
					vendedorTotales=vendedor;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Vendedor vendedor:this.vendedors) {
				if(vendedor.getsType().equals(Constantes2.S_TOTALES)) {
					vendedorTotales=vendedor;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.vendedorAux=new Vendedor();
			this.vendedorAux.setsType(Constantes2.S_TOTALES);
			this.vendedorAux.setIsNew(false);
			this.vendedorAux.setIsChanged(false);
			this.vendedorAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				VendedorConstantesFunciones.TotalizarValoresFilaVendedor(this.vendedorLogic.getVendedors(),this.vendedorAux);
				
				this.vendedorLogic.getVendedors().add(this.vendedorAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				VendedorConstantesFunciones.TotalizarValoresFilaVendedor(this.vendedors,this.vendedorAux);
				
				this.vendedors.add(this.vendedorAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		vendedorTotales=new Vendedor();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.vendedorLogic.getVendedors().remove(vendedorTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.vendedors.remove(vendedorTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		vendedorTotales=new Vendedor();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Vendedor vendedor:vendedorLogic.getVendedors()) {
				if(vendedor.getsType().equals(Constantes2.S_TOTALES)) {
					vendedorTotales=vendedor;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				VendedorConstantesFunciones.TotalizarValoresFilaVendedor(this.vendedorLogic.getVendedors(),vendedorTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Vendedor vendedor:this.vendedors) {
				if(vendedor.getsType().equals(Constantes2.S_TOTALES)) {
					vendedorTotales=vendedor;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				VendedorConstantesFunciones.TotalizarValoresFilaVendedor(this.vendedors,vendedorTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getVendedorsBusquedaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsBusquedaPorNombre()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNombre";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsBusquedaPorRuc()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorRuc";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsFK_IdCiudad()throws Exception {
		try {
			sAccionBusqueda="FK_IdCiudad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsFK_IdEmpleadoSoporte()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleadoSoporte";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsFK_IdPais()throws Exception {
		try {
			sAccionBusqueda="FK_IdPais";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsFK_IdVendedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdVendedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getVendedorsFK_IdZona()throws Exception {
		try {
			sAccionBusqueda="FK_IdZona";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getVendedorsBusquedaPorCodigo(String sFinalQuery,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsBusquedaPorCodigo(sFinalQuery,this.pagination,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsBusquedaPorNombre(String sFinalQuery,String nombre)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsBusquedaPorNombre(sFinalQuery,this.pagination,nombre);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsBusquedaPorRuc(String sFinalQuery,String ruc)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsBusquedaPorRuc(sFinalQuery,this.pagination,ruc);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsFK_IdCiudad(String sFinalQuery,Long id_ciudad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsFK_IdCiudad(sFinalQuery,this.pagination,id_ciudad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsFK_IdEmpleadoSoporte(String sFinalQuery,Long id_empleado_soporte)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsFK_IdEmpleadoSoporte(sFinalQuery,this.pagination,id_empleado_soporte);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsFK_IdPais(String sFinalQuery,Long id_pais)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsFK_IdPais(sFinalQuery,this.pagination,id_pais);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsFK_IdVendedor(String sFinalQuery,Long id_vendedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsFK_IdVendedor(sFinalQuery,this.pagination,id_vendedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getVendedorsFK_IdZona(String sFinalQuery,Long id_zona)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getVendedorsFK_IdZona(sFinalQuery,this.pagination,id_zona);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosVendedor() {
		this.isPermisoTodoVendedor=false;
		this.isPermisoNuevoVendedor=false;
		this.isPermisoActualizarVendedor=false;
		this.isPermisoActualizarOriginalVendedor=false;
		this.isPermisoEliminarVendedor=false;
		this.isPermisoGuardarCambiosVendedor=false;
		this.isPermisoConsultaVendedor=false;
		this.isPermisoBusquedaVendedor=false;
		this.isPermisoReporteVendedor=false;		
		this.isPermisoOrdenVendedor=false;		
		this.isPermisoPaginacionMedioVendedor=false;		
		this.isPermisoPaginacionAltoVendedor=false;
		this.isPermisoPaginacionTodoVendedor=false;
		this.isPermisoCopiarVendedor=false;		
		this.isPermisoVerFormVendedor=false;		
		this.isPermisoDuplicarVendedor=false;		
		this.isPermisoOrdenVendedor=false;		
	}
	
	public void setPermisosUsuarioVendedor(Boolean isPermiso) {
		this.isPermisoTodoVendedor=isPermiso;
		this.isPermisoNuevoVendedor=isPermiso;
		this.isPermisoActualizarVendedor=isPermiso;
		this.isPermisoActualizarOriginalVendedor=isPermiso;
		this.isPermisoEliminarVendedor=isPermiso;
		this.isPermisoGuardarCambiosVendedor=isPermiso;
		this.isPermisoConsultaVendedor=isPermiso;
		this.isPermisoBusquedaVendedor=isPermiso;
		this.isPermisoReporteVendedor=isPermiso;
		this.isPermisoOrdenVendedor=isPermiso;		
		this.isPermisoPaginacionMedioVendedor=isPermiso;		
		this.isPermisoPaginacionAltoVendedor=isPermiso;		
		this.isPermisoPaginacionTodoVendedor=isPermiso;		
		this.isPermisoCopiarVendedor=isPermiso;		
		this.isPermisoVerFormVendedor=isPermiso;		
		this.isPermisoDuplicarVendedor=isPermiso;
		this.isPermisoOrdenVendedor=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioVendedor(Boolean isPermiso) {
		//this.isPermisoTodoVendedor=isPermiso;
		this.isPermisoNuevoVendedor=isPermiso;
		this.isPermisoActualizarVendedor=isPermiso;
		this.isPermisoActualizarOriginalVendedor=isPermiso;
		this.isPermisoEliminarVendedor=isPermiso;
		this.isPermisoGuardarCambiosVendedor=isPermiso;
		//this.isPermisoConsultaVendedor=isPermiso;
		//this.isPermisoBusquedaVendedor=isPermiso;
		//this.isPermisoReporteVendedor=isPermiso;
		//this.isPermisoOrdenVendedor=isPermiso;		
		//this.isPermisoPaginacionMedioVendedor=isPermiso;		
		//this.isPermisoPaginacionAltoVendedor=isPermiso;		
		//this.isPermisoPaginacionTodoVendedor=isPermiso;		
		//this.isPermisoCopiarVendedor=isPermiso;		
		//this.isPermisoDuplicarVendedor=isPermiso;
		//this.isPermisoOrdenVendedor=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioVendedorClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(ComisionVentaCobroConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(VendedorConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(ClienteConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(ComisionGrupoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(ComisionLineaConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(VendedorZonaConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(ComisionCateConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(CajeroTurnoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(ComisionMarcaConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(PresupuestoVentasConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(PresupuestoVentasLineasConstantesFunciones.SNOMBREOPCION);
		
		if(VendedorJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosNotaCreditoSoli=false;
		this.isTienePermisosNotaCreditoSoli=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosComisionVentaCobro=false;
		this.isTienePermisosComisionVentaCobro=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,ComisionVentaCobroConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosVendedor=false;
		this.isTienePermisosVendedor=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,VendedorConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosCliente=false;
		this.isTienePermisosCliente=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,ClienteConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosComisionGrupo=false;
		this.isTienePermisosComisionGrupo=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,ComisionGrupoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosComisionLinea=false;
		this.isTienePermisosComisionLinea=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,ComisionLineaConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosVendedorZona=false;
		this.isTienePermisosVendedorZona=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,VendedorZonaConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosComisionCate=false;
		this.isTienePermisosComisionCate=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,ComisionCateConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosCajeroTurno=false;
		this.isTienePermisosCajeroTurno=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,CajeroTurnoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosComisionMarca=false;
		this.isTienePermisosComisionMarca=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,ComisionMarcaConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosPresupuestoVentas=false;
		this.isTienePermisosPresupuestoVentas=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,PresupuestoVentasConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosPresupuestoVentasLineas=false;
		this.isTienePermisosPresupuestoVentasLineas=this.verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(this.opcionsRelacionadas,PresupuestoVentasLineasConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebVendedor(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioVendedorClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosNotaCreditoSoli=conPermiso;
		this.isTienePermisosComisionVentaCobro=conPermiso;
		this.isTienePermisosVendedor=conPermiso;
		this.isTienePermisosCliente=conPermiso;
		this.isTienePermisosComisionGrupo=conPermiso;
		this.isTienePermisosComisionLinea=conPermiso;
		this.isTienePermisosVendedorZona=conPermiso;
		this.isTienePermisosComisionCate=conPermiso;
		this.isTienePermisosCajeroTurno=conPermiso;
		this.isTienePermisosComisionMarca=conPermiso;
		this.isTienePermisosPresupuestoVentas=conPermiso;
		this.isTienePermisosPresupuestoVentasLineas=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioVendedorClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionVendedorClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioVendedorClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosNotaCreditoSoli && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosComisionVentaCobro && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosVendedor && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosCliente && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosComisionGrupo && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosComisionLinea && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosVendedorZona && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosComisionCate && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosCajeroTurno && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosComisionMarca && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosPresupuestoVentas && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosPresupuestoVentasLineas && this.jInternalFrameDetalleFormVendedor!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.remove(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioVendedor() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(VendedorJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.vendedorSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, VendedorConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoVendedor=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarVendedor=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalVendedor=this.isPermisoActualizarVendedor;
			this.isPermisoEliminarVendedor=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosVendedor=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaVendedor=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaVendedor=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoVendedor=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteVendedor=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenVendedor=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioVendedor=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoVendedor=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoVendedor=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarVendedor=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormVendedor=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarVendedor=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenVendedor=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.vendedorSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosVendedor.setToolTipText(this.jTableDatosVendedor.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioVendedor(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioVendedor(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(VendedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(VendedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioVendedor() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosNotaCreditoSoli && this.vendedorConstantesFunciones.mostrarNotaCreditoSoliVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Solicitud Nota Credito");
			reporte.setsDescripcion("Solicitud Nota Credito");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosComisionVentaCobro && this.vendedorConstantesFunciones.mostrarComisionVentaCobroVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Comision Venta Cobro");
			reporte.setsDescripcion("Comision Venta Cobro");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosVendedor && this.vendedorConstantesFunciones.mostrarVendedorVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Vendedor");
			reporte.setsDescripcion("Vendedor");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosCliente && this.vendedorConstantesFunciones.mostrarClienteVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Cliente");
			reporte.setsDescripcion("Cliente");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosComisionGrupo && this.vendedorConstantesFunciones.mostrarComisionGrupoVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Comision Grupo");
			reporte.setsDescripcion("Comision Grupo");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosComisionLinea && this.vendedorConstantesFunciones.mostrarComisionLineaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Comision Linea");
			reporte.setsDescripcion("Comision Linea");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosVendedorZona && this.vendedorConstantesFunciones.mostrarVendedorZonaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Vendedor Zona");
			reporte.setsDescripcion("Vendedor Zona");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosComisionCate && this.vendedorConstantesFunciones.mostrarComisionCateVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Comision Cate");
			reporte.setsDescripcion("Comision Cate");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosCajeroTurno && this.vendedorConstantesFunciones.mostrarCajeroTurnoVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Cajero Turno");
			reporte.setsDescripcion("Cajero Turno");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosComisionMarca && this.vendedorConstantesFunciones.mostrarComisionMarcaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Comision Marca");
			reporte.setsDescripcion("Comision Marca");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosPresupuestoVentas && this.vendedorConstantesFunciones.mostrarPresupuestoVentasVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Presupuesto Ventas");
			reporte.setsDescripcion("Presupuesto Ventas");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosPresupuestoVentasLineas && this.vendedorConstantesFunciones.mostrarPresupuestoVentasLineasVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Presupuesto Ventas_lineas");
			reporte.setsDescripcion("Presupuesto Ventas_lineas");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyVendedorListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.empleadosoportesForeignKey=new ArrayList();
				this.vendedorsForeignKey=new ArrayList();
				this.paissForeignKey=new ArrayList();
				this.ciudadsForeignKey=new ArrayList();
				this.zonasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyVendedorListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(VendedorJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyVendedorListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoSoporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyZonaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoSoporteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosoportesForeignKey==null||this.empleadosoportesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadoSoportesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=VendedorConstantesFunciones.SFINALQUERY;

				this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPaisListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.paissForeignKey==null||this.paissForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PaisConstantesFunciones.SFINALQUERY;

				this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CiudadConstantesFunciones.SFINALQUERY;

				this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyZonaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.zonasForeignKey==null||this.zonasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ZonaConstantesFunciones.getArrayColumnasGlobalesZona(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ZonaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ZonaConstantesFunciones.SFINALQUERY;

				this.cargarCombosZonasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyVendedorListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			VendedorParameterReturnGeneral vendedorReturnGeneral=new VendedorParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.vendedorConstantesFunciones.cargarid_empresaVendedor)
					 || (this.esRecargarFks && this.vendedorConstantesFunciones.cargarid_empresaVendedor)) {

					if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+vendedorSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.vendedorConstantesFunciones.cargarid_sucursalVendedor)
					 || (this.esRecargarFks && this.vendedorConstantesFunciones.cargarid_sucursalVendedor)) {

					if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+vendedorSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.vendedorConstantesFunciones.cargarid_empleadoVendedor)
					 || (this.esRecargarFks && this.vendedorConstantesFunciones.cargarid_empleadoVendedor)) {

					if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+vendedorSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalEmpleadoSoporte="";

				if(((this.empleadosoportesForeignKey==null||this.empleadosoportesForeignKey.size()<=0) && this.vendedorConstantesFunciones.cargarid_empleado_soporteVendedor)
					 || (this.esRecargarFks && this.vendedorConstantesFunciones.cargarid_empleado_soporteVendedor)) {

					if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSoporte()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleadoSoporte=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleadoSoporte=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleadoSoporte, "");
						finalQueryGlobalEmpleadoSoporte+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadoSoportesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleadoSoporte=" WHERE " + ConstantesSql.ID + "="+vendedorSessionBean.getlidEmpleadoSoporteActual();
					}
				} else {
					finalQueryGlobalEmpleadoSoporte="NONE";
				}


				String finalQueryGlobalVendedor="";

				if(((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0) && this.vendedorConstantesFunciones.cargarid_vendedorVendedor)
					 || (this.esRecargarFks && this.vendedorConstantesFunciones.cargarid_vendedorVendedor)) {

					if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalVendedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

						finalQueryGlobalVendedor=Funciones.GetFinalQueryAppend(finalQueryGlobalVendedor, "");
						finalQueryGlobalVendedor+=VendedorConstantesFunciones.SFINALQUERY;

						//this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalVendedor=" WHERE " + ConstantesSql.ID + "="+vendedorSessionBean.getlidVendedorActual();
					}
				} else {
					finalQueryGlobalVendedor="NONE";
				}


				String finalQueryGlobalPais="";

				if(((this.paissForeignKey==null||this.paissForeignKey.size()<=0) && this.vendedorConstantesFunciones.cargarid_paisVendedor)
					 || (this.esRecargarFks && this.vendedorConstantesFunciones.cargarid_paisVendedor)) {

					if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPais=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

						finalQueryGlobalPais=Funciones.GetFinalQueryAppend(finalQueryGlobalPais, "");
						finalQueryGlobalPais+=PaisConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPais=" WHERE " + ConstantesSql.ID + "="+vendedorSessionBean.getlidPaisActual();
					}
				} else {
					finalQueryGlobalPais="NONE";
				}


				String finalQueryGlobalCiudad="";

				if(cargarCombosDependencia && ((this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0) && this.vendedorConstantesFunciones.cargarid_ciudadVendedor)
					 || (this.esRecargarFks && this.vendedorConstantesFunciones.cargarid_ciudadVendedor)) {

					if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCiudad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

						finalQueryGlobalCiudad=Funciones.GetFinalQueryAppend(finalQueryGlobalCiudad, "");
						finalQueryGlobalCiudad+=CiudadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCiudad=" WHERE " + ConstantesSql.ID + "="+vendedorSessionBean.getlidCiudadActual();
					}
				} else {
					finalQueryGlobalCiudad="NONE";
				}


				String finalQueryGlobalZona="";

				if(((this.zonasForeignKey==null||this.zonasForeignKey.size()<=0) && this.vendedorConstantesFunciones.cargarid_zonaVendedor)
					 || (this.esRecargarFks && this.vendedorConstantesFunciones.cargarid_zonaVendedor)) {

					if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionZona()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ZonaConstantesFunciones.getArrayColumnasGlobalesZona(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalZona=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ZonaConstantesFunciones.TABLENAME);

						finalQueryGlobalZona=Funciones.GetFinalQueryAppend(finalQueryGlobalZona, "");
						finalQueryGlobalZona+=ZonaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosZonasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalZona=" WHERE " + ConstantesSql.ID + "="+vendedorSessionBean.getlidZonaActual();
					}
				} else {
					finalQueryGlobalZona="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				vendedorReturnGeneral=vendedorLogic.cargarCombosLoteForeignKeyVendedor(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEmpleado,finalQueryGlobalEmpleadoSoporte,finalQueryGlobalVendedor,finalQueryGlobalPais,finalQueryGlobalCiudad,finalQueryGlobalZona);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=vendedorReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=vendedorReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=vendedorReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalEmpleadoSoporte.equals("NONE")) {
				this.empleadosoportesForeignKey=vendedorReturnGeneral.getempleadosoportesForeignKey();
			}

			if(!finalQueryGlobalVendedor.equals("NONE")) {
				this.vendedorsForeignKey=vendedorReturnGeneral.getvendedorsForeignKey();
			}

			if(!finalQueryGlobalPais.equals("NONE")) {
				this.paissForeignKey=vendedorReturnGeneral.getpaissForeignKey();
			}

			if(!finalQueryGlobalCiudad.equals("NONE")) {
				this.ciudadsForeignKey=vendedorReturnGeneral.getciudadsForeignKey();
			}

			if(!finalQueryGlobalZona.equals("NONE")) {
				this.zonasForeignKey=vendedorReturnGeneral.getzonasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyVendedor()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyEmpleadoSoporte();
			this.addItemDefectoCombosForeignKeyVendedor();
			this.addItemDefectoCombosForeignKeyPais();
			this.addItemDefectoCombosForeignKeyCiudad();
			this.addItemDefectoCombosForeignKeyZona();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleadoSoporte()throws Exception {
		try {

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSoporte()) {
				Empleado empleadosoporte=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleadosoporte,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleadosoporte.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosoportesForeignKey,empleadosoporte,true)) {

					this.empleadosoportesForeignKey.add(0,empleadosoporte);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyVendedor()throws Exception {
		try {

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				Vendedor vendedor=new Vendedor();
				VendedorConstantesFunciones.setVendedorDescripcion(vendedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				vendedor.setId(null);

				if(!VendedorConstantesFunciones.ExisteEnLista(this.vendedorsForeignKey,vendedor,true)) {

					this.vendedorsForeignKey.add(0,vendedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPais()throws Exception {
		try {

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				Pais pais=new Pais();
				PaisConstantesFunciones.setPaisDescripcion(pais,Constantes.SMENSAJE_ESCOJA_OPCION);
				pais.setId(null);

				if(!PaisConstantesFunciones.ExisteEnLista(this.paissForeignKey,pais,true)) {

					this.paissForeignKey.add(0,pais);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCiudad()throws Exception {
		try {

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				Ciudad ciudad=new Ciudad();
				CiudadConstantesFunciones.setCiudadDescripcion(ciudad,Constantes.SMENSAJE_ESCOJA_OPCION);
				ciudad.setId(null);

				if(!CiudadConstantesFunciones.ExisteEnLista(this.ciudadsForeignKey,ciudad,true)) {

					this.ciudadsForeignKey.add(0,ciudad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyZona()throws Exception {
		try {

			if(!this.vendedorSessionBean.getisBusquedaDesdeForeignKeySesionZona()) {
				Zona zona=new Zona();
				ZonaConstantesFunciones.setZonaDescripcion(zona,Constantes.SMENSAJE_ESCOJA_OPCION);
				zona.setId(null);

				if(!ZonaConstantesFunciones.ExisteEnLista(this.zonasForeignKey,zona,true)) {

					this.zonasForeignKey.add(0,zona);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyVendedor()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyPais("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyVendedor(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyPais(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyPais(JComboBox jComboBoxPaisGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Pais paisLocal=(Pais)jComboBoxPaisGenerico.getSelectedItem();

			if(paisLocal!=null  && paisLocal.getId()!=null  && paisLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_pais="+paisLocal.getId();
			}
			//REDEFINE

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboCiudad=sFinalQueryCombo;

			this.ciudadsForeignKey=new ArrayList<Ciudad>();
			this.cargarCombosForeignKeyCiudad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyPais(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.addItemListener(new ComboBoxItemListener(this,"id_paisVendedor"));
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.addFocusListener(new ComboBoxFocusListener(this,"id_paisVendedor"));
					}
				} else {
					if(this.jInternalFrameDetalleFormVendedor!=null) {
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.addActionListener(new ComboBoxActionListener(this,"id_paisVendedor"));
						this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.addFocusListener(new ComboBoxFocusListener(this,"id_paisVendedor"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_paisFK_IdPaisVendedor.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_paisFK_IdPaisVendedor"));

						this.jComboBoxid_paisFK_IdPaisVendedor.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_paisFK_IdPaisVendedor"));

					} else {
						this.jComboBoxid_paisFK_IdPaisVendedor.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_paisFK_IdPaisVendedor"));

						this.jComboBoxid_paisFK_IdPaisVendedor.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_paisFK_IdPaisVendedor"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyVendedor()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
			
			
				this.vendedor.setfecha_creacion(this.parametroGeneralUsuario.getfecha_sistema());
				this.vendedor.setfecha_ultima_venta(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyVendedor();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyVendedor(Vendedor vendedor)throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(vendedor.getid_empleado(),false,"Formulario");
			this.setActualEmpleadoSoporteForeignKey(vendedor.getid_empleado_soporte(),false,"Formulario");
			this.setActualVendedorForeignKey(vendedor.getid_vendedor(),false,"Formulario");
			this.setActualPaisForeignKey(vendedor.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(vendedor.getid_ciudad(),false,"Formulario");
			this.setActualZonaForeignKey(vendedor.getid_zona(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyVendedor(Vendedor vendedor,String sTipoEvento)throws Exception {	
		try {
			
			

				if(vendedor.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoVendedor")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(vendedor.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				if(vendedor.getEmpleadoSoporte()!=null && !sTipoEvento.equals("id_empleado_soporteVendedor")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosoportesForeignKey=new ArrayList<Empleado>();
					this.empleadosoportesForeignKey.add(vendedor.getEmpleadoSoporte());

					this.addItemDefectoCombosForeignKeyEmpleadoSoporte();
					this.cargarCombosFrameEmpleadoSoportesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyVendedor()throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(this.vendedorConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualEmpleadoSoporteForeignKey(this.vendedorConstantesFunciones.getid_empleado_soporte(),false,"Formulario");
			this.setActualVendedorForeignKey(this.vendedorConstantesFunciones.getid_vendedor(),false,"Formulario");
			this.setActualPaisForeignKey(this.vendedorConstantesFunciones.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(this.vendedorConstantesFunciones.getid_ciudad(),false,"Formulario");
			this.setActualZonaForeignKey(this.vendedorConstantesFunciones.getid_zona(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyVendedor()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyVendedor()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyVendedor()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroVendedor()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyVendedor()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameEmpleadoSoportesForeignKey("Todos");
			this.cargarCombosFrameVendedorsForeignKey("Todos");
			this.cargarCombosFramePaissForeignKey("Todos");
			this.cargarCombosFrameCiudadsForeignKey("Todos");
			this.cargarCombosFrameZonasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyVendedor(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadoSoportesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameZonasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyVendedor()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor!=null && this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor!=null && this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor!=null && this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor!=null && this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor!=null && this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor!=null && this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor!=null && this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor!=null && this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	











	public void recargarFormVendedorPais(JComboBox<?> jComboBoxGenericoPais,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormVendedorid_ciudad(jComboBoxGenericoPais,sFormularioTipoBusqueda,"Pais",false);
	}




	
	



	public void recargarFormVendedorid_ciudad(JComboBox<?> jComboBoxGenericoCiudad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Pais")){
				this.setActualParaGuardarPaisForeignKey(this.vendedor,jComboBoxGenericoCiudad);
			}

			if(this.vendedor.getid_pais()!=null && this.vendedor.getid_pais()!=0L) {
				sFinalQuery+="  WHERE  id_pais="+this.vendedor.getid_pais();
			} else {
				sFinalQuery+="  WHERE  id_pais=-1";
			}



			//BUCLE RECURSIVO
			this.setActualCiudadForeignKey(this.vendedor.getid_pais(),true,sFormularioTipoBusqueda);

			this.cargarCombosCiudadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public VendedorBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public VendedorBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public VendedorBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.vendedorSessionBean=new VendedorSessionBean(); 
		this.vendedorConstantesFunciones=new VendedorConstantesFunciones(); 
		this.vendedorBean=new Vendedor();//(this.vendedorConstantesFunciones); 		
		this.vendedorReturnGeneral=new VendedorParameterReturnGeneral(); 
		
		this.vendedorSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.vendedorSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public VendedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public VendedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public VendedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessVendedor(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.vendedorConstantesFunciones=new VendedorConstantesFunciones(); 
			this.vendedorBean=new Vendedor();//this.vendedorConstantesFunciones); 			
			this.vendedorReturnGeneral=new VendedorParameterReturnGeneral(); 
		
			VendedorBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Vendedor Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.vendedor=new Vendedor();
			this.vendedors = new ArrayList<Vendedor>();
			this.vendedorsAux = new ArrayList<Vendedor>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic=new VendedorLogic();
				this.vendedorLogic.getNewConnexionToDeep("");
			}
			
			//this.vendedorSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.vendedorSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormVendedor);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoVendedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoVendedor);	
					}
					
					if(this.jInternalFrameImportacionVendedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionVendedor);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByVendedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByVendedor);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormVendedor!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormVendedor);
				this.jInternalFrameDetalleFormVendedor.setVisible(false);
				this.jInternalFrameDetalleFormVendedor.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoVendedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoVendedor);
					this.jInternalFrameReporteDinamicoVendedor.setVisible(false);
					this.jInternalFrameReporteDinamicoVendedor.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionVendedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionVendedor);
					this.jInternalFrameImportacionVendedor.setVisible(false);
					this.jInternalFrameImportacionVendedor.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByVendedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByVendedor);
					this.jInternalFrameOrderByVendedor.setVisible(false);
					this.jInternalFrameOrderByVendedor.setSelected(false);				
				}
				
			}
			
			this.vendedorsArbol= new ArrayList<Vendedor>();
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTreeVendedor);    		
			}
			
			this.jDesktopPane.add(this.jInternalFrameTreeVendedor);
			this.jInternalFrameTreeVendedor.setVisible(false);
	        this.jInternalFrameTreeVendedor.setSelected(false);						
			
			if(!esParaBusquedaForeignKey) {
				this.getTodosVendedorArbol();
			}			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idVendedorActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=VendedorConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.vendedorReturnGeneral=new VendedorParameterReturnGeneral();
			
			this.vendedorParameterGeneral=new VendedorParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.vendedorLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(VendedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.vendedorSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(ComisionVentaCobroConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(VendedorConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(ClienteConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(ComisionGrupoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(ComisionLineaConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(VendedorZonaConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(ComisionCateConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(CajeroTurnoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(ComisionMarcaConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(PresupuestoVentasConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(PresupuestoVentasLineasConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,VendedorConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.vendedorSessionBean.getEsGuardarRelacionado(),this.vendedorSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,VendedorConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.vendedorSessionBean.getEsGuardarRelacionado(),this.vendedorSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoVendedor=false;
			this.isVisibilidadCeldaDuplicarVendedor=true;
			this.isVisibilidadCeldaCopiarVendedor=true;
			this.isVisibilidadCeldaVerFormVendedor=true;
			this.isVisibilidadCeldaOrdenVendedor=true;
			this.isVisibilidadCeldaNuevoRelacionesVendedor=false;
			this.isVisibilidadCeldaModificarVendedor=false;
			this.isVisibilidadCeldaActualizarVendedor=false;
			this.isVisibilidadCeldaEliminarVendedor=false;
			this.isVisibilidadCeldaCancelarVendedor=false;
			this.isVisibilidadCeldaGuardarVendedor=false;
			this.isVisibilidadCeldaGuardarCambiosVendedor=false;
			
			
			this.isVisibilidadBusquedaPorCodigo=true;
			this.isVisibilidadBusquedaPorNombre=true;
			this.isVisibilidadBusquedaPorRuc=true;
			this.isVisibilidadFK_IdCiudad=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpleadoSoporte=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdPais=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdVendedor=true;
			this.isVisibilidadFK_IdZona=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesVendedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosVendedor();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioVendedor(false);
			
			this.setPermisosUsuarioVendedor();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.vendedorSessionBean.getEsGuardarRelacionado() 
				|| (this.vendedorSessionBean.getEsGuardarRelacionado() && this.vendedorSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioVendedorClasesRelacionadas();
			}
			
			if(this.vendedorSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioVendedorClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!VendedorJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosVendedor();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualVendedor();
			}
			
			if(!this.isPermisoBusquedaVendedor) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasVendedor.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioVendedor,this.isPermisoPaginacionMedioVendedor,this.isPermisoPaginacionTodoVendedor);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(VendedorConstantesFunciones.getTiposSeleccionarVendedor());
				
				this.tiposColumnasSelect=VendedorConstantesFunciones.getTiposSeleccionarVendedor(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectVendedor();				
				//this.tiposRelacionesSelect=VendedorConstantesFunciones.getTiposRelacionesVendedor(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioVendedor();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioVendedor(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioVendedor(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesVendedor() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.notacreditosoliLogic=new NotaCreditoSoliLogic();
			this.comisionventacobroLogic=new ComisionVentaCobroLogic();
			this.clienteLogic=new ClienteLogic();
			this.comisiongrupoLogic=new ComisionGrupoLogic();
			this.comisionlineaLogic=new ComisionLineaLogic();
			this.vendedorzonaLogic=new VendedorZonaLogic();
			this.comisioncateLogic=new ComisionCateLogic();
			this.cajeroturnoLogic=new CajeroTurnoLogic();
			this.comisionmarcaLogic=new ComisionMarcaLogic();
			this.presupuestoventasLogic=new PresupuestoVentasLogic();
			this.presupuestoventaslineasLogic=new PresupuestoVentasLineasLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.empleadosoporteLogic=new EmpleadoLogic();
			this.paisLogic=new PaisLogic();
			this.ciudadLogic=new CiudadLogic();
			this.zonaLogic=new ZonaLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				vendedorImplementable= (VendedorImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+VendedorConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				vendedorImplementableHome= (VendedorImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+VendedorConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.vendedors= new ArrayList<Vendedor>();
			this.vendedorsEliminados= new ArrayList<Vendedor>();
						
			this.isEsNuevoVendedor=false;
			this.esParaAccionDesdeFormularioVendedor=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idEmpleadoActual=0L;
			this.idEmpleadoSoporteActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.empleadosoportesForeignKey=new ArrayList<Empleado>() ;
			this.vendedorsForeignKey=new ArrayList<Vendedor>() ;
			this.paissForeignKey=new ArrayList<Pais>() ;
			this.ciudadsForeignKey=new ArrayList<Ciudad>() ;
			this.zonasForeignKey=new ArrayList<Zona>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyVendedor(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroVendedor();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			VendedorBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=VendedorConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesVendedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingVendedor(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormVendedor!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioVendedor();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioVendedor();
			}
			
			VendedorBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasVendedor.getTabCount(); i++) {
					this.jTabbedPaneBusquedasVendedor.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasVendedor.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessVendedor(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga Vendedor: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectVendedor() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(ComisionVentaCobroConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(ComisionVentaCobroConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(VendedorConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(VendedorConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(ClienteConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(ClienteConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(ComisionGrupoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(ComisionGrupoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(ComisionLineaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(ComisionLineaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(VendedorZonaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(VendedorZonaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(ComisionCateConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(ComisionCateConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(CajeroTurnoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(CajeroTurnoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(ComisionMarcaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(ComisionMarcaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(PresupuestoVentasConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(PresupuestoVentasConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(PresupuestoVentasLineasConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(PresupuestoVentasLineasConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesVendedor")) {
				iIndex=this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosVendedor.getSelectedRow();	
				
				

				if(sTitle.equals("Cajero Turnos")) {
					if(!CajeroTurnoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaCajeroTurno(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Clientes")) {
					if(!ClienteJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaCliente(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Comision Cates")) {
					if(!ComisionCateJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaComisionCate(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Comision Grupos")) {
					if(!ComisionGrupoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaComisionGrupo(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Comision Lineas")) {
					if(!ComisionLineaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaComisionLinea(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Comision Marcas")) {
					if(!ComisionMarcaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaComisionMarca(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Comision Venta Cobroes")) {
					if(!ComisionVentaCobroJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaComisionVentaCobro(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Solicitud Nota Creditos")) {
					if(!NotaCreditoSoliJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaNotaCreditoSoli(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Presupuesto Ventases")) {
					if(!PresupuestoVentasJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaPresupuestoVentas(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Presupuesto Ventas_lineases")) {
					if(!PresupuestoVentasLineasJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaPresupuestoVentasLineas(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Vendedores")) {
					if(!VendedorJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaVendedor(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Vendedor Zonas")) {
					if(!VendedorZonaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessVendedor();

						this.cargarParteTabPanelRelacionadaVendedorZona(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessVendedor();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaCajeroTurno(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameCajeroTurno(false,true,iIndex);
		this.jButtonCajeroTurnoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaCajeroTurno();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaCliente(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameCliente(false,true,iIndex);
		this.jButtonClienteActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaCliente();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaComisionCate(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameComisionCate(false,true,iIndex);
		this.jButtonComisionCateActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaComisionCate();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaComisionGrupo(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameComisionGrupo(false,true,iIndex);
		this.jButtonComisionGrupoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaComisionGrupo();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaComisionLinea(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameComisionLinea(false,true,iIndex);
		this.jButtonComisionLineaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaComisionLinea();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaComisionMarca(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameComisionMarca(false,true,iIndex);
		this.jButtonComisionMarcaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaComisionMarca();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaComisionVentaCobro(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameComisionVentaCobro(false,true,iIndex);
		this.jButtonComisionVentaCobroActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaComisionVentaCobro();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaNotaCreditoSoli(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameNotaCreditoSoli(false,true,iIndex);
		this.jButtonNotaCreditoSoliActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaNotaCreditoSoli();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaPresupuestoVentas(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFramePresupuestoVentas(false,true,iIndex);
		this.jButtonPresupuestoVentasActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaPresupuestoVentas();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaPresupuestoVentasLineas(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFramePresupuestoVentasLineas(false,true,iIndex);
		this.jButtonPresupuestoVentasLineasActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaPresupuestoVentasLineas();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaVendedor(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameVendedor(false,true,iIndex);
		this.jButtonVendedorActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaVendedor();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaVendedorZona(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormVendedor.cargarSessionConBeanSwingJInternalFrameVendedorZona(false,true,iIndex);
		this.jButtonVendedorZonaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaVendedorZona();

		//this.jTabbedPaneRelacionesVendedor.updateUI();
		//this.jTabbedPaneRelacionesVendedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesVendedor.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("NotaCreditoSoli")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonNotaCreditoSoliActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("ComisionVentaCobro")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonComisionVentaCobroActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("Vendedor")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonVendedorActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("Cliente")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonClienteActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("ComisionGrupo")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonComisionGrupoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("ComisionLinea")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonComisionLineaActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("VendedorZona")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonVendedorZonaActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("ComisionCate")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonComisionCateActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("CajeroTurno")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonCajeroTurnoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("ComisionMarca")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonComisionMarcaActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("PresupuestoVentas")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonPresupuestoVentasActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("PresupuestoVentasLineas")) {
				int row=this.jTableDatosVendedor.getSelectedRow();
				jButtonPresupuestoVentasLineasActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Solicitud Nota Credito")) {

					if(this.isTienePermisosNotaCreditoSoli && this.vendedorConstantesFunciones.mostrarNotaCreditoSoliVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Solicitud Nota Creditos"+"("+NotaCreditoSoliConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Solicitud Nota Creditos");

						if(vendedorConstantesFunciones.resaltarNotaCreditoSoliVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarNotaCreditoSoliVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarNotaCreditoSoliVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"NotaCreditoSoli"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Comision Venta Cobro")) {

					if(this.isTienePermisosComisionVentaCobro && this.vendedorConstantesFunciones.mostrarComisionVentaCobroVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Comision Venta Cobroes"+"("+ComisionVentaCobroConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Comision Venta Cobroes");

						if(vendedorConstantesFunciones.resaltarComisionVentaCobroVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarComisionVentaCobroVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarComisionVentaCobroVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"ComisionVentaCobro"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Vendedor")) {

					if(this.isTienePermisosVendedor && this.vendedorConstantesFunciones.mostrarVendedorVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Vendedores"+"("+VendedorConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Vendedores");

						if(vendedorConstantesFunciones.resaltarVendedorVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarVendedorVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarVendedorVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"Vendedor"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Cliente")) {

					if(this.isTienePermisosCliente && this.vendedorConstantesFunciones.mostrarClienteVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Clientes"+"("+ClienteConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Clientes");

						if(vendedorConstantesFunciones.resaltarClienteVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarClienteVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarClienteVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"Cliente"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Comision Grupo")) {

					if(this.isTienePermisosComisionGrupo && this.vendedorConstantesFunciones.mostrarComisionGrupoVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Comision Grupos"+"("+ComisionGrupoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Comision Grupos");

						if(vendedorConstantesFunciones.resaltarComisionGrupoVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarComisionGrupoVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarComisionGrupoVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"ComisionGrupo"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Comision Linea")) {

					if(this.isTienePermisosComisionLinea && this.vendedorConstantesFunciones.mostrarComisionLineaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Comision Lineas"+"("+ComisionLineaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Comision Lineas");

						if(vendedorConstantesFunciones.resaltarComisionLineaVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarComisionLineaVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarComisionLineaVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"ComisionLinea"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Vendedor Zona")) {

					if(this.isTienePermisosVendedorZona && this.vendedorConstantesFunciones.mostrarVendedorZonaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Vendedor Zonas"+"("+VendedorZonaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Vendedor Zonas");

						if(vendedorConstantesFunciones.resaltarVendedorZonaVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarVendedorZonaVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarVendedorZonaVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"VendedorZona"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Comision Cate")) {

					if(this.isTienePermisosComisionCate && this.vendedorConstantesFunciones.mostrarComisionCateVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Comision Cates"+"("+ComisionCateConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Comision Cates");

						if(vendedorConstantesFunciones.resaltarComisionCateVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarComisionCateVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarComisionCateVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"ComisionCate"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Cajero Turno")) {

					if(this.isTienePermisosCajeroTurno && this.vendedorConstantesFunciones.mostrarCajeroTurnoVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Cajero Turnos"+"("+CajeroTurnoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Cajero Turnos");

						if(vendedorConstantesFunciones.resaltarCajeroTurnoVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarCajeroTurnoVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarCajeroTurnoVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"CajeroTurno"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Comision Marca")) {

					if(this.isTienePermisosComisionMarca && this.vendedorConstantesFunciones.mostrarComisionMarcaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Comision Marcas"+"("+ComisionMarcaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Comision Marcas");

						if(vendedorConstantesFunciones.resaltarComisionMarcaVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarComisionMarcaVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarComisionMarcaVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"ComisionMarca"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Presupuesto Ventas")) {

					if(this.isTienePermisosPresupuestoVentas && this.vendedorConstantesFunciones.mostrarPresupuestoVentasVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Presupuesto Ventases"+"("+PresupuestoVentasConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Presupuesto Ventases");

						if(vendedorConstantesFunciones.resaltarPresupuestoVentasVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarPresupuestoVentasVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarPresupuestoVentasVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"PresupuestoVentas"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Presupuesto Ventas_lineas")) {

					if(this.isTienePermisosPresupuestoVentasLineas && this.vendedorConstantesFunciones.mostrarPresupuestoVentasLineasVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Presupuesto Ventas_lineases"+"("+PresupuestoVentasLineasConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Presupuesto Ventas_lineases");

						if(vendedorConstantesFunciones.resaltarPresupuestoVentasLineasVendedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(vendedorConstantesFunciones.resaltarPresupuestoVentasLineasVendedor);
						}

						jmenuItem.setEnabled(this.vendedorConstantesFunciones.activarPresupuestoVentasLineasVendedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"PresupuestoVentasLineas"));

						

						this.jInternalFrameDetalleFormVendedor.jmenuDetalleVendedor.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyVendedor(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyVendedorListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyVendedor();
		
		this.cargarCombosFrameForeignKeyVendedor();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyVendedor();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyVendedor();
		}
	}
	
	

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoSoporte(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoSoporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleadoSoporte();
				this.cargarCombosFrameEmpleadoSoportesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleadoSoporte(this.empleadosoportesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaVendedor(this.vendedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPais(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaPais(this.paissForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCiudad(this.ciudadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyZona(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyZonaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyZona();
				this.cargarCombosFrameZonasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaZona(this.zonasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoVendedorActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.vendedorSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			
			if(jTableDatosVendedor.getRowCount()>=1) {
				jTableDatosVendedor.removeRowSelectionInterval(0, jTableDatosVendedor.getRowCount()-1);						
			}
			
			this.isEsNuevoVendedor=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoVendedor(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesVendedor(true);			
			//this.vendedor=new Vendedor();
			//this.vendedor.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesVendedor(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualVendedor() ;
			
			if(VendedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleVendedor(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.vendedor);	
			this.actualizarInformacion("INFO_PADRE",false,this.vendedor);				
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			if(this.vendedorSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar Vendedor: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarVendedorActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosVendedor.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosVendedor.getSelectedRows().length;			
			}
			
			vendedorsSeleccionados=this.getVendedorsSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoVendedor--;			
				//Vendedor vendedorAux= new Vendedor();			
				//vendedorAux.setId(this.iIdNuevoVendedor);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//Vendedor vendedorOrigen=new Vendedor();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(Vendedor vendedorOrigen : vendedorsSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							vendedorOrigen =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							vendedorOrigen =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaVendedor();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.vendedor.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosVendedor(vendedorOrigen,this.vendedor,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.vendedorLogic.getVendedors().add(this.vendedorAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.vendedors.add(this.vendedorAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaVendedor(false);
				
				this.jTableDatosVendedor.setRowSelectionInterval(this.getIndiceNuevoVendedor(), this.getIndiceNuevoVendedor());
				
				int iLastRow =  this.jTableDatosVendedor.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosVendedor.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosVendedor.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaVendedor(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();									
		
			Vendedor vendedorOrigen=new Vendedor();
			Vendedor vendedorDestino=new Vendedor();
				
			vendedorsSeleccionados=this.getVendedorsSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosVendedor.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || vendedorsSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosVendedor.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorOrigen =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						vendedorOrigen =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						vendedorDestino =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						vendedorDestino =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				vendedorOrigen =vendedorsSeleccionados.get(0);
				vendedorDestino =vendedorsSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosVendedor(vendedorOrigen,vendedorDestino,true,false);
				
				vendedorDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(vendedorDestino,vendedorLogic.getVendedors());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(vendedorDestino,vendedors);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaVendedor(false);
				
				//this.jTableDatosVendedor.setRowSelectionInterval(this.getIndiceNuevoVendedor(), this.getIndiceNuevoVendedor());
				
				int iLastRow =  this.jTableDatosVendedor.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosVendedor.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosVendedor.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaVendedor(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormVendedor.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesVendedor.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasVendedor.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesVendedor.setVisible(!isVisible);
			this.jPanelPaginacionVendedor.setVisible(!isVisible);
			this.jPanelAccionesVendedor.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameVendedor();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoVendedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionVendedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByVendedor();
			
			this.abrirFrameOrderByVendedor();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByVendedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleVendedor(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormVendedor);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormVendedor.isMaximum()) {
					this.jInternalFrameDetalleFormVendedor.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormVendedor.setSize(this.jInternalFrameDetalleFormVendedor.iWidthFormulario,this.jInternalFrameDetalleFormVendedor.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormVendedor.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormVendedor.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormVendedor.isMaximum()) {
						this.jInternalFrameDetalleFormVendedor.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),VendedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),VendedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),VendedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(CajeroTurnoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaCajeroTurno();
					}

					if(ClienteJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaCliente();
					}

					if(ComisionCateJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaComisionCate();
					}

					if(ComisionGrupoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaComisionGrupo();
					}

					if(ComisionLineaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaComisionLinea();
					}

					if(ComisionMarcaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaComisionMarca();
					}

					if(ComisionVentaCobroJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaComisionVentaCobro();
					}

					if(NotaCreditoSoliJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaNotaCreditoSoli();
					}

					if(PresupuestoVentasJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaPresupuestoVentas();
					}

					if(PresupuestoVentasLineasJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaPresupuestoVentasLineas();
					}

					if(VendedorJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaVendedor();
					}

					if(VendedorZonaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaVendedorZona();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormVendedor.setVisible(true);
	        this.jInternalFrameDetalleFormVendedor.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByVendedor() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByVendedor==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByVendedor=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByVendedor,false,this);
				} else {
					this.jInternalFrameOrderByVendedor=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByVendedor,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByVendedor);
				this.jInternalFrameOrderByVendedor.setVisible(false);
				this.jInternalFrameOrderByVendedor.setSelected(false);
				
				this.jInternalFrameOrderByVendedor.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByVendedor"));
				
				this.inicializarActualizarBindingTablaOrderByVendedor();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionVendedor() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionVendedor==null) {
				
				this.jInternalFrameImportacionVendedor=new ImportacionJInternalFrame(VendedorConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionVendedor);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionVendedor);
				this.jInternalFrameImportacionVendedor.setVisible(false);
				this.jInternalFrameImportacionVendedor.setSelected(false);


				this.jInternalFrameImportacionVendedor.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionVendedor"));
				this.jInternalFrameImportacionVendedor.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionVendedor"));
				this.jInternalFrameImportacionVendedor.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionVendedor"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoVendedor() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoVendedor==null) {
				this.jInternalFrameReporteDinamicoVendedor=new ReporteDinamicoJInternalFrame(VendedorConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoVendedor);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoVendedor);
				this.jInternalFrameReporteDinamicoVendedor.setVisible(false);
				this.jInternalFrameReporteDinamicoVendedor.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoVendedor.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoVendedor"));
				this.jInternalFrameReporteDinamicoVendedor.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoVendedor"));
				this.jInternalFrameReporteDinamicoVendedor.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoVendedor"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualVendedor();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaCajeroTurno() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaCliente() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaComisionCate() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.jScrollPanelDatosComisionCate.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.jScrollPanelDatosComisionCate.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.jScrollPanelDatosComisionCate.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.jScrollPanelDatosComisionCate.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaComisionGrupo() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.jScrollPanelDatosComisionGrupo.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.jScrollPanelDatosComisionGrupo.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.jScrollPanelDatosComisionGrupo.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.jScrollPanelDatosComisionGrupo.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaComisionLinea() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.jScrollPanelDatosComisionLinea.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.jScrollPanelDatosComisionLinea.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.jScrollPanelDatosComisionLinea.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.jScrollPanelDatosComisionLinea.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaComisionMarca() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.jScrollPanelDatosComisionMarca.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.jScrollPanelDatosComisionMarca.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.jScrollPanelDatosComisionMarca.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.jScrollPanelDatosComisionMarca.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaComisionVentaCobro() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.jScrollPanelDatosComisionVentaCobro.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.jScrollPanelDatosComisionVentaCobro.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.jScrollPanelDatosComisionVentaCobro.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.jScrollPanelDatosComisionVentaCobro.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaNotaCreditoSoli() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoSoli.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoSoli.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoSoli.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoSoli.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaPresupuestoVentas() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentas.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentas.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentas.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentas.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaPresupuestoVentasLineas() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasLineas.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasLineas.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasLineas.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasLineas.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaVendedor() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaVendedorZona() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.jScrollPanelDatosVendedorZona.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormVendedor.jContentPaneDetalleVendedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.jScrollPanelDatosVendedorZona.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.jScrollPanelDatosVendedorZona.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.jScrollPanelDatosVendedorZona.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleVendedor() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormVendedor);
			
	       	this.jInternalFrameDetalleFormVendedor.setVisible(false);
	        this.jInternalFrameDetalleFormVendedor.setSelected(false);
			
			//this.jInternalFrameDetalleFormVendedor.dispose();
			//this.jInternalFrameDetalleFormVendedor=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoVendedor() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoVendedor.setVisible(true);
	        this.jInternalFrameReporteDinamicoVendedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionVendedor() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionVendedor.setVisible(true);
	        this.jInternalFrameImportacionVendedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByVendedor() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByVendedor.setVisible(true);
	        this.jInternalFrameOrderByVendedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByVendedor() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByVendedor.setVisible(false);
	        this.jInternalFrameOrderByVendedor.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoVendedor() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoVendedor.setVisible(false);
	        this.jInternalFrameReporteDinamicoVendedor.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionVendedor() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionVendedor.setVisible(false);
	        this.jInternalFrameImportacionVendedor.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	 public void abrirFrameTreeVendedor(String sTipoProceso) { //throws Exception	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameTreeVendedor);
			
			this.jInternalFrameTreeVendedor.setsTipoProceso(sTipoProceso);
			
			if(sTipoProceso.equals("BUSQUEDA_FK")) {
				this.jInternalFrameTreeVendedor.sTipoBusqueda="Vendedor";
			}
			
			this.jInternalFrameTreeVendedor.setVendedors(this.vendedorsArbol);
			this.jInternalFrameTreeVendedor.CargarTreeVendedor();
			
	       	this.jInternalFrameTreeVendedor.setVisible(true);
	        this.jInternalFrameTreeVendedor.setSelected(true);
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			e.getStackTrace();
			//FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }
	}
	
	public void cerrarFrameTreeVendedor() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameTreeVendedor);
			
	       	this.jInternalFrameTreeVendedor.setVisible(false);
	        this.jInternalFrameTreeVendedor.setSelected(false);
			
			//this.jInternalFrameTreeVendedor.dispose();
			//this.jInternalFrameTreeVendedor=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void jButtonModificarVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarVendedor(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarVendedor(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesVendedor(true);
			//this.isEsNuevoVendedor=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesVendedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesVendedor(false) ;
			
			if(vendedorSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliSessionBean.getEsGuardarRelacionado() && NotaCreditoSoliJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonNotaCreditoSoliActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroSessionBean.getEsGuardarRelacionado() && ComisionVentaCobroJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionVentaCobroActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorSessionBean.getEsGuardarRelacionado() && VendedorJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonVendedorActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteSessionBean.getEsGuardarRelacionado() && ClienteJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonClienteActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoSessionBean.getEsGuardarRelacionado() && ComisionGrupoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionGrupoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaSessionBean.getEsGuardarRelacionado() && ComisionLineaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionLineaActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaSessionBean.getEsGuardarRelacionado() && VendedorZonaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonVendedorZonaActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateSessionBean.getEsGuardarRelacionado() && ComisionCateJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionCateActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.getEsGuardarRelacionado() && CajeroTurnoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajeroTurnoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaSessionBean.getEsGuardarRelacionado() && ComisionMarcaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonComisionMarcaActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasSessionBean.getEsGuardarRelacionado() && PresupuestoVentasJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPresupuestoVentasActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasSessionBean.getEsGuardarRelacionado() && PresupuestoVentasLineasJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPresupuestoVentasLineasActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(VendedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleVendedor(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualVendedor(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaVendedorActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarVendedor(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesVendedor(true);
			//this.isEsNuevoVendedor=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.vendedor.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesVendedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesVendedor(false) ;
			
			if(VendedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleVendedor(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualVendedor(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Empleado")) {
				if(!this.vendedorConstantesFunciones.cargarid_empleadoVendedor) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingVendedor(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
			
			if(sType.equals("EmpleadoSoporte")) {
				if(!this.vendedorConstantesFunciones.cargarid_empleado_soporteVendedor) {
					this.cargarCombosEmpleadoSoportesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingVendedor(false,false);
					this.cargarCombosFrameEmpleadoSoportesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado_soporte (id);

				this.recargarComboTablaEmpleadoSoporte(this.empleadosoportesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosVendedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpleadoSoporte(List<Empleado> empleadosoportesForeignKey)throws Exception{
		TableColumn tableColumnEmpleadoSoporte=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE));
		TableCellEditor tableCellEditorEmpleadoSoporte =tableColumnEmpleadoSoporte.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleadoSoporte;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosoportesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosVendedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosoportesForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaVendedor(List<Vendedor> vendedorsForeignKey)throws Exception{
		TableColumn tableColumnVendedor=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDVENDEDOR));
		TableCellEditor tableCellEditorVendedor =tableColumnVendedor.getCellEditor();

		VendedorTableCell vendedorTableCellFk=(VendedorTableCell)tableCellEditorVendedor;

		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.setvendedorsForeignKey(vendedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosVendedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//vendedorTableCellFk.setRowActual(intSelectedRow);
			//vendedorTableCellFk.setvendedorsForeignKeyActual(vendedorsForeignKey);
		//}


		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.RecargarVendedorsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaPais(List<Pais> paissForeignKey)throws Exception{
		TableColumn tableColumnPais=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDPAIS));
		TableCellEditor tableCellEditorPais =tableColumnPais.getCellEditor();

		PaisTableCell paisTableCellFk=(PaisTableCell)tableCellEditorPais;

		if(paisTableCellFk!=null) {
			paisTableCellFk.setpaissForeignKey(paissForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosVendedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//paisTableCellFk.setRowActual(intSelectedRow);
			//paisTableCellFk.setpaissForeignKeyActual(paissForeignKey);
		//}


		if(paisTableCellFk!=null) {
			paisTableCellFk.RecargarPaissForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCiudad(List<Ciudad> ciudadsForeignKey)throws Exception{
		TableColumn tableColumnCiudad=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDCIUDAD));
		TableCellEditor tableCellEditorCiudad =tableColumnCiudad.getCellEditor();

		CiudadTableCell ciudadTableCellFk=(CiudadTableCell)tableCellEditorCiudad;

		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.setciudadsForeignKey(ciudadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosVendedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//ciudadTableCellFk.setRowActual(intSelectedRow);
			//ciudadTableCellFk.setciudadsForeignKeyActual(ciudadsForeignKey);
		//}


		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.RecargarCiudadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaZona(List<Zona> zonasForeignKey)throws Exception{
		TableColumn tableColumnZona=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDZONA));
		TableCellEditor tableCellEditorZona =tableColumnZona.getCellEditor();

		ZonaTableCell zonaTableCellFk=(ZonaTableCell)tableCellEditorZona;

		if(zonaTableCellFk!=null) {
			zonaTableCellFk.setzonasForeignKey(zonasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosVendedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//zonaTableCellFk.setRowActual(intSelectedRow);
			//zonaTableCellFk.setzonasForeignKeyActual(zonasForeignKey);
		//}


		if(zonaTableCellFk!=null) {
			zonaTableCellFk.RecargarZonasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_empleado_soporte (Long id) throws Exception {
		this.setActualEmpleadoSoporteForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesVendedor(false);
			
			//if(!this.isEsNuevoVendedor) {								
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				
			}
			
			if(this.permiteMantenimiento(this.vendedor)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.vendedorSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoVendedor=true;
					this.inicializarActualizarBindingTablaVendedor(false);
					this.isEsNuevoVendedor=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoVendedor=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoVendedor=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesVendedor(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualVendedor(false);
				
				this.habilitarDeshabilitarControlesVendedor(false);
			
												
				
				if(VendedorJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleVendedor();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoVendedorActionPerformed(evt,vendedorSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualVendedor(this.vendedor,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,vendedorSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.vendedor.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarVendedorActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				this.vendedor.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				this.vendedor.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.vendedor)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.vendedorSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((VendedorModel) this.jTableDatosVendedor.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoVendedor=true;
				this.inicializarActualizarBindingTablaVendedor(false);
				this.isEsNuevoVendedor=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesVendedor(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualVendedor(false);
				
				this.habilitarDeshabilitarControlesVendedor(false);
				
				
				
				if(VendedorJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleVendedor();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarVendedorActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosVendedor.getRowCount()>=1) {
				jTableDatosVendedor.removeRowSelectionInterval(0, jTableDatosVendedor.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesVendedor(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaVendedor(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesVendedor(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualVendedor(false) ;
			
			this.isEsNuevoVendedor=false;
			
			if(VendedorJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleVendedor();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosVendedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingVendedor(false);
				
				//SI ES MANUAL
				if(VendedorJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualVendedor();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosVendedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoVendedor--;			
			//Vendedor vendedorAux= new Vendedor();			
			//vendedorAux.setId(this.iIdNuevoVendedor);
			
			if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaVendedor();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
			
			this.vendedor.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.vendedorLogic.getVendedors().add(this.vendedorAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.vendedors.add(this.vendedorAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaVendedor(false);
			
			this.jTableDatosVendedor.setRowSelectionInterval(this.getIndiceNuevoVendedor(), this.getIndiceNuevoVendedor());
			
			int iLastRow =  this.jTableDatosVendedor.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosVendedor.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosVendedor.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaVendedor(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionVendedorActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingVendedor(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingVendedor(false);
			
			//SI ES MANUAL
			if(VendedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualVendedor();
			}
			
			//this.abrirFrameTreeVendedor();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionVendedorActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE VendedorES ?", "MANTENIMIENTO DE Vendedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionVendedor.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralVendedor();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.vendedorReturnGeneral=vendedorLogic.procesarImportacionVendedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.vendedorParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarVendedorReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionVendedorActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionVendedor.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionVendedor.setFileImportacion(this.jInternalFrameImportacionVendedor.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionVendedor.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionVendedor.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionVendedor.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionVendedor.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoVendedorActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		

		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("VendedorBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"VendedorBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteVendedors("Todos",vendedorsSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case VendedorConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_RUC:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_c_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_c_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_c_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_c_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_EMAIL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ail_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ail_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ail_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ail_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_TELEFONO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefono_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefono_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefono_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefono_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EmpleadoSoporte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EmpleadoSoporte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EmpleadoSoporte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EmpleadoSoporte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_IDVENDEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Vendedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Vendedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Vendedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Vendedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_IDPAIS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Pais_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Pais_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Pais_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Pais_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_IDCIUDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ciudad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ciudad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ciudad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ciudad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_IDZONA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Zona_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Zona_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Zona_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Zona_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_REPRESENTANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_presentante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_presentante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_presentante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_presentante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_ESSUPERVISOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Supervisor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Supervisor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Supervisor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Supervisor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_FECHACREACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCreacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCreacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCreacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCreacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccionDomicilio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccionDomicilio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccionDomicilio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccionDomicilio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccionReferencia_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccionReferencia_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccionReferencia_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccionReferencia_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rcentajeComision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rcentajeComision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rcentajeComision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rcentajeComision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_COMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_MONTOVENDIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoVendido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoVendido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoVendido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoVendido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_NUMEROFACTURAS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroFacturas_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroFacturas_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroFacturas_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroFacturas_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaUltimaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaUltimaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaUltimaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaUltimaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoUltimaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoUltimaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoUltimaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoUltimaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_CONPRESUPUESTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nPresupuesto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nPresupuesto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nPresupuesto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nPresupuesto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case VendedorConstantesFunciones.LABEL_CONCOBERTURA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nCobertura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nCobertura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nCobertura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nCobertura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoVendedor.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoVendedor.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case VendedorConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case VendedorConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case VendedorConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case VendedorConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;

				case VendedorConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoria="ruc";
					break;

				case VendedorConstantesFunciones.LABEL_EMAIL:
					sNombreCampoCategoria="email";
					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case VendedorConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoria="telefono";
					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE:
					sNombreCampoCategoria="id_empleado_soporte";
					break;

				case VendedorConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoria="id_vendedor";
					break;

				case VendedorConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoria="id_pais";
					break;

				case VendedorConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoria="id_ciudad";
					break;

				case VendedorConstantesFunciones.LABEL_IDZONA:
					sNombreCampoCategoria="id_zona";
					break;

				case VendedorConstantesFunciones.LABEL_REPRESENTANTE:
					sNombreCampoCategoria="representante";
					break;

				case VendedorConstantesFunciones.LABEL_ESSUPERVISOR:
					sNombreCampoCategoria="es_supervisor";
					break;

				case VendedorConstantesFunciones.LABEL_FECHACREACION:
					sNombreCampoCategoria="fecha_creacion";
					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO:
					sNombreCampoCategoria="direccion_domicilio";
					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA:
					sNombreCampoCategoria="direccion_referencia";
					break;

				case VendedorConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION:
					sNombreCampoCategoria="porcentaje_comision";
					break;

				case VendedorConstantesFunciones.LABEL_COMISION:
					sNombreCampoCategoria="comision";
					break;

				case VendedorConstantesFunciones.LABEL_MONTOVENDIDO:
					sNombreCampoCategoria="monto_vendido";
					break;

				case VendedorConstantesFunciones.LABEL_NUMEROFACTURAS:
					sNombreCampoCategoria="numero_facturas";
					break;

				case VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA:
					sNombreCampoCategoria="fecha_ultima_venta";
					break;

				case VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA:
					sNombreCampoCategoria="monto_ultima_venta";
					break;

				case VendedorConstantesFunciones.LABEL_CONPRESUPUESTO:
					sNombreCampoCategoria="con_presupuesto";
					break;

				case VendedorConstantesFunciones.LABEL_CONCOBERTURA:
					sNombreCampoCategoria="con_cobertura";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoVendedor.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case VendedorConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case VendedorConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case VendedorConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case VendedorConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;

				case VendedorConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoriaValor="ruc";
					break;

				case VendedorConstantesFunciones.LABEL_EMAIL:
					sNombreCampoCategoriaValor="email";
					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case VendedorConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoriaValor="telefono";
					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE:
					sNombreCampoCategoriaValor="id_empleado_soporte";
					break;

				case VendedorConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoriaValor="id_vendedor";
					break;

				case VendedorConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoriaValor="id_pais";
					break;

				case VendedorConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoriaValor="id_ciudad";
					break;

				case VendedorConstantesFunciones.LABEL_IDZONA:
					sNombreCampoCategoriaValor="id_zona";
					break;

				case VendedorConstantesFunciones.LABEL_REPRESENTANTE:
					sNombreCampoCategoriaValor="representante";
					break;

				case VendedorConstantesFunciones.LABEL_ESSUPERVISOR:
					sNombreCampoCategoriaValor="es_supervisor";
					break;

				case VendedorConstantesFunciones.LABEL_FECHACREACION:
					sNombreCampoCategoriaValor="fecha_creacion";
					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO:
					sNombreCampoCategoriaValor="direccion_domicilio";
					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA:
					sNombreCampoCategoriaValor="direccion_referencia";
					break;

				case VendedorConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION:
					sNombreCampoCategoriaValor="porcentaje_comision";
					break;

				case VendedorConstantesFunciones.LABEL_COMISION:
					sNombreCampoCategoriaValor="comision";
					break;

				case VendedorConstantesFunciones.LABEL_MONTOVENDIDO:
					sNombreCampoCategoriaValor="monto_vendido";
					break;

				case VendedorConstantesFunciones.LABEL_NUMEROFACTURAS:
					sNombreCampoCategoriaValor="numero_facturas";
					break;

				case VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA:
					sNombreCampoCategoriaValor="fecha_ultima_venta";
					break;

				case VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA:
					sNombreCampoCategoriaValor="monto_ultima_venta";
					break;

				case VendedorConstantesFunciones.LABEL_CONPRESUPUESTO:
					sNombreCampoCategoriaValor="con_presupuesto";
					break;

				case VendedorConstantesFunciones.LABEL_CONCOBERTURA:
					sNombreCampoCategoriaValor="con_cobertura";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoVendedor.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoVendedor.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case VendedorConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case VendedorConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case VendedorConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case VendedorConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;

				case VendedorConstantesFunciones.LABEL_RUC:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc");
					break;

				case VendedorConstantesFunciones.LABEL_EMAIL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Email",sNombreCampoCategoria,sNombreCampoCategoriaValor,"email");
					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case VendedorConstantesFunciones.LABEL_TELEFONO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono");
					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado Soporte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado_soporte");
					break;

				case VendedorConstantesFunciones.LABEL_IDVENDEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Vendedor Padre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_vendedor");
					break;

				case VendedorConstantesFunciones.LABEL_IDPAIS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pais",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pais");
					break;

				case VendedorConstantesFunciones.LABEL_IDCIUDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ciudad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ciudad");
					break;

				case VendedorConstantesFunciones.LABEL_IDZONA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Zona",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_zona");
					break;

				case VendedorConstantesFunciones.LABEL_REPRESENTANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Representante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"representante");
					break;

				case VendedorConstantesFunciones.LABEL_ESSUPERVISOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Supervisor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_supervisor");
					break;

				case VendedorConstantesFunciones.LABEL_FECHACREACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Creacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_creacion");
					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion Domicilio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion_domicilio");
					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion Referencia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion_referencia");
					break;

				case VendedorConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Porcentaje Comision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"porcentaje_comision");
					break;

				case VendedorConstantesFunciones.LABEL_COMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Comision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"comision");
					break;

				case VendedorConstantesFunciones.LABEL_MONTOVENDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Vendido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto_vendido");
					break;

				case VendedorConstantesFunciones.LABEL_NUMEROFACTURAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Facturas",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_facturas");
					break;

				case VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Ultima Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_ultima_venta");
					break;

				case VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Ultima Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto_ultima_venta");
					break;

				case VendedorConstantesFunciones.LABEL_CONPRESUPUESTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Presupuesto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_presupuesto");
					break;

				case VendedorConstantesFunciones.LABEL_CONCOBERTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Cobertura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_cobertura");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoVendedorActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"vendedor";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("Vendedors");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case VendedorConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_RUC:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_RUC);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getruc());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_EMAIL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_EMAIL);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getemail());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_TELEFONO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_TELEFONO);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.gettelefono());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getempleadosoporte_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_IDVENDEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_IDVENDEDOR);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getvendedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_IDPAIS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_IDPAIS);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getpais_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_IDCIUDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_IDCIUDAD);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getciudad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_IDZONA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_IDZONA);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getzona_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_REPRESENTANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_REPRESENTANTE);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getrepresentante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_ESSUPERVISOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_ESSUPERVISOR);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getes_supervisor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_FECHACREACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_FECHACREACION);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getfecha_creacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getdireccion_domicilio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getdireccion_referencia());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getporcentaje_comision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_COMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_COMISION);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getcomision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_MONTOVENDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_MONTOVENDIDO);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getmonto_vendido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_NUMEROFACTURAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_NUMEROFACTURAS);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getnumero_facturas());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getfecha_ultima_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getmonto_ultima_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_CONPRESUPUESTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_CONPRESUPUESTO);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getcon_presupuesto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case VendedorConstantesFunciones.LABEL_CONCOBERTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(VendedorConstantesFunciones.LABEL_CONCOBERTURA);
					iRow++;

					for(Vendedor vendedor:vendedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(vendedor.getcon_cobertura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelVendedor(row);				
			//	iRow++;
			//}				
			
			//for(Vendedor vendedorAux:vendedorsSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelVendedor(vendedorAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	public void jButtonArbolVendedorActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.abrirFrameTreeVendedor("BUSQUEDA_NORMAL");
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingVendedor(false);
			
			//SI ES MANUAL
			if(VendedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualVendedor();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresVendedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingVendedor(false);
			
			//SI ES MANUAL
			if(VendedorJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualVendedor();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesVendedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingVendedor(false);
			
			//SI ES MANUAL
			if(VendedorJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualVendedor();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaVendedor() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosVendedor.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosVendedor.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosVendedor.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosVendedor.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosVendedor.setMinimumSize(dimensionMinimum);
		this.jTableDatosVendedor.setMaximumSize(dimensionMaximum);
		this.jTableDatosVendedor.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingVendedor(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingVendedor(esInicializar,true);
	}
	
	public void inicializarActualizarBindingVendedor(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaVendedor(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesVendedor(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasVendedor(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesVendedor(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesVendedor(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !VendedorJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!VendedorJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualVendedor() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaVendedor();
		
		this.inicializarActualizarBindingBotonesManualVendedor(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualVendedor();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesVendedor() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualVendedor(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualVendedor(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosVendedor.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosVendedor.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteVendedor.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormVendedor!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormVendedor.jCheckBoxPostAccionNuevoVendedor.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormVendedor.jCheckBoxPostAccionSinCerrarVendedor.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormVendedor.jCheckBoxPostAccionSinMensajeVendedor.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosVendedor.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosVendedor.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteVendedor.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormVendedor!=null) {
				this.jInternalFrameDetalleFormVendedor.jCheckBoxPostAccionNuevoVendedor.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormVendedor.jCheckBoxPostAccionSinCerrarVendedor.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormVendedor.jCheckBoxPostAccionSinMensajeVendedor.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionVendedor.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionVendedor.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormVendedor!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesVendedor.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoVendedor!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesVendedor.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesVendedor.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarVendedor.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesVendedor.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoVendedor!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesVendedor.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralVendedor.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesVendedor(Boolean esInicializar) throws Exception {
		try	{	
			if(VendedorJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualVendedor(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesVendedor() throws Exception {
		try	{
			if(VendedorJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualVendedor();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleVendedor() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualVendedor() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesVendedor.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesVendedor.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesVendedor.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesVendedor.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesVendedor.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesVendedor.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionVendedor.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionVendedor.addItem(reporte);
			}
			
			
			if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionVendedor.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionVendedor.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesVendedor.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesVendedor.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesVendedor.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesVendedor.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarVendedor.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarVendedor.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarVendedor.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualVendedor();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualVendedor() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoVendedor!=null) {
				this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoVendedor!=null) {
				this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoVendedor!=null) {
				
				if(this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoVendedor.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoVendedor.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoVendedor.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoVendedor.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoVendedor.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoVendedor.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=VendedorConstantesFunciones.getTiposSeleccionarVendedor(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoVendedor.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoVendedor.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoVendedor.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=VendedorConstantesFunciones.getTiposSeleccionarVendedor(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoVendedor.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoVendedor.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoVendedor.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=VendedorConstantesFunciones.getTiposSeleccionarVendedor(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoVendedor.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoVendedor.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualVendedor()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.codigoBusquedaPorCodigo=this.jTextFieldcodigoBusquedaPorCodigoVendedor.getText();
		this.nombreBusquedaPorNombre=this.jTextAreanombreBusquedaPorNombreVendedor.getText();
		this.rucBusquedaPorRuc=this.jTextFieldrucBusquedaPorRucVendedor.getText();
		if(this.jComboBoxid_paisFK_IdPaisVendedor.getSelectedItem()!=null){this.id_paisFK_IdPais=((Pais)this.jComboBoxid_paisFK_IdPaisVendedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_vendedorFK_IdVendedorVendedor.getSelectedItem()!=null){this.id_vendedorFK_IdVendedor=((Vendedor)this.jComboBoxid_vendedorFK_IdVendedorVendedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_zonaFK_IdZonaVendedor.getSelectedItem()!=null){this.id_zonaFK_IdZona=((Zona)this.jComboBoxid_zonaFK_IdZonaVendedor.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasVendedor(Boolean esInicializar) throws Exception {				
		if(VendedorJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualVendedor();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaVendedor() throws Exception {
		this.inicializarActualizarBindingTablaVendedor(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByVendedor() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosVendedorOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedorOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaVendedor(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=vendedorLogic.getVendedors().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=vendedors.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosVendedor.setModel(new VendedorModel(this.vendedorLogic.getVendedors(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosVendedor.setModel(new VendedorModel(this.vendedors,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByVendedor!=null && this.jInternalFrameOrderByVendedor.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByVendedor();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+VendedorConstantesFunciones.SCLASSWEBTITULO,vendedorConstantesFunciones.resaltarSeleccionarVendedor,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+VendedorConstantesFunciones.SCLASSWEBTITULO,vendedorConstantesFunciones.resaltarSeleccionarVendedor,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_ID));

		if(this.vendedorConstantesFunciones.mostraridVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.vendedorConstantesFunciones.resaltaridVendedor,this.vendedorConstantesFunciones.activaridVendedor,iSizeTabla,this,true,"idVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltaridVendedor,this.vendedorConstantesFunciones.activaridVendedor,this,true,"idVendedor","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDEMPRESA));

		if(this.vendedorConstantesFunciones.mostrarid_empresaVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.vendedorConstantesFunciones.resaltarid_empresaVendedor,this,this.vendedorConstantesFunciones.activarid_empresaVendedor,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.vendedorConstantesFunciones.resaltarid_empresaVendedor,this,this.vendedorConstantesFunciones.activarid_empresaVendedor,false,"id_empresaVendedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.vendedorConstantesFunciones.mostrarid_sucursalVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.vendedorConstantesFunciones.resaltarid_sucursalVendedor,this,this.vendedorConstantesFunciones.activarid_sucursalVendedor,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.vendedorConstantesFunciones.resaltarid_sucursalVendedor,this,this.vendedorConstantesFunciones.activarid_sucursalVendedor,false,"id_sucursalVendedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_CODIGO));

		if(this.vendedorConstantesFunciones.mostrarcodigoVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltarcodigoVendedor,this.vendedorConstantesFunciones.activarcodigoVendedor,iSizeTabla,this,true,"codigoVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarcodigoVendedor,this.vendedorConstantesFunciones.activarcodigoVendedor,this,true,"codigoVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_NOMBRE));

		if(this.vendedorConstantesFunciones.mostrarnombreVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_NOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltarnombreVendedor,this.vendedorConstantesFunciones.activarnombreVendedor,iSizeTabla,this,true,"nombreVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarnombreVendedor,this.vendedorConstantesFunciones.activarnombreVendedor,this,true,"nombreVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_RUC));

		if(this.vendedorConstantesFunciones.mostrarrucVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_RUC,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltarrucVendedor,this.vendedorConstantesFunciones.activarrucVendedor,iSizeTabla,this,true,"rucVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarrucVendedor,this.vendedorConstantesFunciones.activarrucVendedor,this,true,"rucVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_EMAIL));

		if(this.vendedorConstantesFunciones.mostraremailVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_EMAIL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltaremailVendedor,this.vendedorConstantesFunciones.activaremailVendedor,iSizeTabla,this,true,"emailVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltaremailVendedor,this.vendedorConstantesFunciones.activaremailVendedor,this,true,"emailVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.vendedorConstantesFunciones.mostrarid_empleadoVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.vendedorConstantesFunciones.resaltarid_empleadoVendedor,this,this.vendedorConstantesFunciones.activarid_empleadoVendedor,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.vendedorConstantesFunciones.resaltarid_empleadoVendedor,this,this.vendedorConstantesFunciones.activarid_empleadoVendedor,true,"id_empleadoVendedor","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_TELEFONO));

		if(this.vendedorConstantesFunciones.mostrartelefonoVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_TELEFONO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltartelefonoVendedor,this.vendedorConstantesFunciones.activartelefonoVendedor,iSizeTabla,this,true,"telefonoVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltartelefonoVendedor,this.vendedorConstantesFunciones.activartelefonoVendedor,this,true,"telefonoVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE));

		if(this.vendedorConstantesFunciones.mostrarid_empleado_soporteVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosoportesForeignKey,this.vendedorConstantesFunciones.resaltarid_empleado_soporteVendedor,this,this.vendedorConstantesFunciones.activarid_empleado_soporteVendedor,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosoportesForeignKey,this.vendedorConstantesFunciones.resaltarid_empleado_soporteVendedor,this,this.vendedorConstantesFunciones.activarid_empleado_soporteVendedor,true,"id_empleado_soporteVendedor","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDVENDEDOR));

		if(this.vendedorConstantesFunciones.mostrarid_vendedorVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_IDVENDEDOR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new VendedorTableCell(this.vendedorsForeignKey,this.vendedorConstantesFunciones.resaltarid_vendedorVendedor,this,this.vendedorConstantesFunciones.activarid_vendedorVendedor,iSizeTabla));
			tableColumn.setCellEditor(new VendedorTableCell(this.vendedorsForeignKey,this.vendedorConstantesFunciones.resaltarid_vendedorVendedor,this,this.vendedorConstantesFunciones.activarid_vendedorVendedor,true,"id_vendedorVendedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDPAIS));

		if(this.vendedorConstantesFunciones.mostrarid_paisVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_IDPAIS,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PaisTableCell(this.paissForeignKey,this.vendedorConstantesFunciones.resaltarid_paisVendedor,this,this.vendedorConstantesFunciones.activarid_paisVendedor,iSizeTabla));
			tableColumn.setCellEditor(new PaisTableCell(this.paissForeignKey,this.vendedorConstantesFunciones.resaltarid_paisVendedor,this,this.vendedorConstantesFunciones.activarid_paisVendedor,true,"id_paisVendedor","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDCIUDAD));

		if(this.vendedorConstantesFunciones.mostrarid_ciudadVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_IDCIUDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CiudadTableCell(this.ciudadsForeignKey,this.vendedorConstantesFunciones.resaltarid_ciudadVendedor,this,this.vendedorConstantesFunciones.activarid_ciudadVendedor,iSizeTabla));
			tableColumn.setCellEditor(new CiudadTableCell(this.ciudadsForeignKey,this.vendedorConstantesFunciones.resaltarid_ciudadVendedor,this,this.vendedorConstantesFunciones.activarid_ciudadVendedor,true,"id_ciudadVendedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_IDZONA));

		if(this.vendedorConstantesFunciones.mostrarid_zonaVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_IDZONA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ZonaTableCell(this.zonasForeignKey,this.vendedorConstantesFunciones.resaltarid_zonaVendedor,this,this.vendedorConstantesFunciones.activarid_zonaVendedor,iSizeTabla));
			tableColumn.setCellEditor(new ZonaTableCell(this.zonasForeignKey,this.vendedorConstantesFunciones.resaltarid_zonaVendedor,this,this.vendedorConstantesFunciones.activarid_zonaVendedor,true,"id_zonaVendedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_REPRESENTANTE));

		if(this.vendedorConstantesFunciones.mostrarrepresentanteVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_REPRESENTANTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltarrepresentanteVendedor,this.vendedorConstantesFunciones.activarrepresentanteVendedor,iSizeTabla,this,true,"representanteVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarrepresentanteVendedor,this.vendedorConstantesFunciones.activarrepresentanteVendedor,this,true,"representanteVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_ESSUPERVISOR));

		if(this.vendedorConstantesFunciones.mostrares_supervisorVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_ESSUPERVISOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.vendedorConstantesFunciones.resaltares_supervisorVendedor,this.vendedorConstantesFunciones.activares_supervisorVendedor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.vendedorConstantesFunciones.resaltares_supervisorVendedor,this.vendedorConstantesFunciones.activares_supervisorVendedor,this,true,"es_supervisorVendedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_FECHACREACION));

		if(this.vendedorConstantesFunciones.mostrarfecha_creacionVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_FECHACREACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.vendedorConstantesFunciones.resaltarfecha_creacionVendedor,this.vendedorConstantesFunciones.activarfecha_creacionVendedor,iSizeTabla,this,true,"fecha_creacionVendedor","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.vendedorConstantesFunciones.resaltarfecha_creacionVendedor,this.vendedorConstantesFunciones.activarfecha_creacionVendedor,this,true,"fecha_creacionVendedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO));

		if(this.vendedorConstantesFunciones.mostrardireccion_domicilioVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltardireccion_domicilioVendedor,this.vendedorConstantesFunciones.activardireccion_domicilioVendedor,iSizeTabla,this,true,"direccion_domicilioVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltardireccion_domicilioVendedor,this.vendedorConstantesFunciones.activardireccion_domicilioVendedor,this,true,"direccion_domicilioVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA));

		if(this.vendedorConstantesFunciones.mostrardireccion_referenciaVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltardireccion_referenciaVendedor,this.vendedorConstantesFunciones.activardireccion_referenciaVendedor,iSizeTabla,this,true,"direccion_referenciaVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltardireccion_referenciaVendedor,this.vendedorConstantesFunciones.activardireccion_referenciaVendedor,this,true,"direccion_referenciaVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_DESCRIPCION));

		if(this.vendedorConstantesFunciones.mostrardescripcionVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.vendedorConstantesFunciones.resaltardescripcionVendedor,this.vendedorConstantesFunciones.activardescripcionVendedor,iSizeTabla,this,true,"descripcionVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltardescripcionVendedor,this.vendedorConstantesFunciones.activardescripcionVendedor,this,true,"descripcionVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION));

		if(this.vendedorConstantesFunciones.mostrarporcentaje_comisionVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.vendedorConstantesFunciones.resaltarporcentaje_comisionVendedor,this.vendedorConstantesFunciones.activarporcentaje_comisionVendedor,iSizeTabla,this,true,"porcentaje_comisionVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarporcentaje_comisionVendedor,this.vendedorConstantesFunciones.activarporcentaje_comisionVendedor,this,true,"porcentaje_comisionVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_COMISION));

		if(this.vendedorConstantesFunciones.mostrarcomisionVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_COMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.vendedorConstantesFunciones.resaltarcomisionVendedor,this.vendedorConstantesFunciones.activarcomisionVendedor,iSizeTabla,this,true,"comisionVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarcomisionVendedor,this.vendedorConstantesFunciones.activarcomisionVendedor,this,true,"comisionVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_MONTOVENDIDO));

		if(this.vendedorConstantesFunciones.mostrarmonto_vendidoVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_MONTOVENDIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.vendedorConstantesFunciones.resaltarmonto_vendidoVendedor,this.vendedorConstantesFunciones.activarmonto_vendidoVendedor,iSizeTabla,this,true,"monto_vendidoVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarmonto_vendidoVendedor,this.vendedorConstantesFunciones.activarmonto_vendidoVendedor,this,true,"monto_vendidoVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_NUMEROFACTURAS));

		if(this.vendedorConstantesFunciones.mostrarnumero_facturasVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_NUMEROFACTURAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.vendedorConstantesFunciones.resaltarnumero_facturasVendedor,this.vendedorConstantesFunciones.activarnumero_facturasVendedor,iSizeTabla,this,true,"numero_facturasVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarnumero_facturasVendedor,this.vendedorConstantesFunciones.activarnumero_facturasVendedor,this,true,"numero_facturasVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA));

		if(this.vendedorConstantesFunciones.mostrarfecha_ultima_ventaVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.vendedorConstantesFunciones.resaltarfecha_ultima_ventaVendedor,this.vendedorConstantesFunciones.activarfecha_ultima_ventaVendedor,iSizeTabla,this,true,"fecha_ultima_ventaVendedor","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.vendedorConstantesFunciones.resaltarfecha_ultima_ventaVendedor,this.vendedorConstantesFunciones.activarfecha_ultima_ventaVendedor,this,true,"fecha_ultima_ventaVendedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA));

		if(this.vendedorConstantesFunciones.mostrarmonto_ultima_ventaVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.vendedorConstantesFunciones.resaltarmonto_ultima_ventaVendedor,this.vendedorConstantesFunciones.activarmonto_ultima_ventaVendedor,iSizeTabla,this,true,"monto_ultima_ventaVendedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.vendedorConstantesFunciones.resaltarmonto_ultima_ventaVendedor,this.vendedorConstantesFunciones.activarmonto_ultima_ventaVendedor,this,true,"monto_ultima_ventaVendedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_CONPRESUPUESTO));

		if(this.vendedorConstantesFunciones.mostrarcon_presupuestoVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_CONPRESUPUESTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.vendedorConstantesFunciones.resaltarcon_presupuestoVendedor,this.vendedorConstantesFunciones.activarcon_presupuestoVendedor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.vendedorConstantesFunciones.resaltarcon_presupuestoVendedor,this.vendedorConstantesFunciones.activarcon_presupuestoVendedor,this,true,"con_presupuestoVendedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosVendedor,VendedorConstantesFunciones.LABEL_CONCOBERTURA));

		if(this.vendedorConstantesFunciones.mostrarcon_coberturaVendedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,VendedorConstantesFunciones.LABEL_CONCOBERTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.vendedorConstantesFunciones.resaltarcon_coberturaVendedor,this.vendedorConstantesFunciones.activarcon_coberturaVendedor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.vendedorConstantesFunciones.resaltarcon_coberturaVendedor,this.vendedorConstantesFunciones.activarcon_coberturaVendedor,this,true,"con_coberturaVendedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new VendedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.vendedorSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosNotaCreditoSoli && this.vendedorConstantesFunciones.mostrarNotaCreditoSoliVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Solicitud Nota Creditos");
				tableColumn.setHeaderValue("Solicitud Nota Creditos");
				tableColumn.setCellRenderer(new NotaCreditoSoliTableCell(vendedorConstantesFunciones.resaltarNotaCreditoSoliVendedor,this,this.vendedorConstantesFunciones.activarNotaCreditoSoliVendedor));
				tableColumn.setCellEditor(new NotaCreditoSoliTableCell(vendedorConstantesFunciones.resaltarNotaCreditoSoliVendedor,this,this.vendedorConstantesFunciones.activarNotaCreditoSoliVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosComisionVentaCobro && this.vendedorConstantesFunciones.mostrarComisionVentaCobroVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Comision Venta Cobroes");
				tableColumn.setHeaderValue("Comision Venta Cobroes");
				tableColumn.setCellRenderer(new ComisionVentaCobroTableCell(vendedorConstantesFunciones.resaltarComisionVentaCobroVendedor,this,this.vendedorConstantesFunciones.activarComisionVentaCobroVendedor));
				tableColumn.setCellEditor(new ComisionVentaCobroTableCell(vendedorConstantesFunciones.resaltarComisionVentaCobroVendedor,this,this.vendedorConstantesFunciones.activarComisionVentaCobroVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosVendedor && this.vendedorConstantesFunciones.mostrarVendedorVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Vendedores");
				tableColumn.setHeaderValue("Vendedores");
				tableColumn.setCellRenderer(new VendedorTableCell(vendedorConstantesFunciones.resaltarVendedorVendedor,this,this.vendedorConstantesFunciones.activarVendedorVendedor));
				tableColumn.setCellEditor(new VendedorTableCell(vendedorConstantesFunciones.resaltarVendedorVendedor,this,this.vendedorConstantesFunciones.activarVendedorVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosCliente && this.vendedorConstantesFunciones.mostrarClienteVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Clientes");
				tableColumn.setHeaderValue("Clientes");
				tableColumn.setCellRenderer(new ClienteTableCell(vendedorConstantesFunciones.resaltarClienteVendedor,this,this.vendedorConstantesFunciones.activarClienteVendedor));
				tableColumn.setCellEditor(new ClienteTableCell(vendedorConstantesFunciones.resaltarClienteVendedor,this,this.vendedorConstantesFunciones.activarClienteVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosComisionGrupo && this.vendedorConstantesFunciones.mostrarComisionGrupoVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Comision Grupos");
				tableColumn.setHeaderValue("Comision Grupos");
				tableColumn.setCellRenderer(new ComisionGrupoTableCell(vendedorConstantesFunciones.resaltarComisionGrupoVendedor,this,this.vendedorConstantesFunciones.activarComisionGrupoVendedor));
				tableColumn.setCellEditor(new ComisionGrupoTableCell(vendedorConstantesFunciones.resaltarComisionGrupoVendedor,this,this.vendedorConstantesFunciones.activarComisionGrupoVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosComisionLinea && this.vendedorConstantesFunciones.mostrarComisionLineaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Comision Lineas");
				tableColumn.setHeaderValue("Comision Lineas");
				tableColumn.setCellRenderer(new ComisionLineaTableCell(vendedorConstantesFunciones.resaltarComisionLineaVendedor,this,this.vendedorConstantesFunciones.activarComisionLineaVendedor));
				tableColumn.setCellEditor(new ComisionLineaTableCell(vendedorConstantesFunciones.resaltarComisionLineaVendedor,this,this.vendedorConstantesFunciones.activarComisionLineaVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosVendedorZona && this.vendedorConstantesFunciones.mostrarVendedorZonaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Vendedor Zonas");
				tableColumn.setHeaderValue("Vendedor Zonas");
				tableColumn.setCellRenderer(new VendedorZonaTableCell(vendedorConstantesFunciones.resaltarVendedorZonaVendedor,this,this.vendedorConstantesFunciones.activarVendedorZonaVendedor));
				tableColumn.setCellEditor(new VendedorZonaTableCell(vendedorConstantesFunciones.resaltarVendedorZonaVendedor,this,this.vendedorConstantesFunciones.activarVendedorZonaVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosComisionCate && this.vendedorConstantesFunciones.mostrarComisionCateVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Comision Cates");
				tableColumn.setHeaderValue("Comision Cates");
				tableColumn.setCellRenderer(new ComisionCateTableCell(vendedorConstantesFunciones.resaltarComisionCateVendedor,this,this.vendedorConstantesFunciones.activarComisionCateVendedor));
				tableColumn.setCellEditor(new ComisionCateTableCell(vendedorConstantesFunciones.resaltarComisionCateVendedor,this,this.vendedorConstantesFunciones.activarComisionCateVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosCajeroTurno && this.vendedorConstantesFunciones.mostrarCajeroTurnoVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Cajero Turnos");
				tableColumn.setHeaderValue("Cajero Turnos");
				tableColumn.setCellRenderer(new CajeroTurnoTableCell(vendedorConstantesFunciones.resaltarCajeroTurnoVendedor,this,this.vendedorConstantesFunciones.activarCajeroTurnoVendedor));
				tableColumn.setCellEditor(new CajeroTurnoTableCell(vendedorConstantesFunciones.resaltarCajeroTurnoVendedor,this,this.vendedorConstantesFunciones.activarCajeroTurnoVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosComisionMarca && this.vendedorConstantesFunciones.mostrarComisionMarcaVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Comision Marcas");
				tableColumn.setHeaderValue("Comision Marcas");
				tableColumn.setCellRenderer(new ComisionMarcaTableCell(vendedorConstantesFunciones.resaltarComisionMarcaVendedor,this,this.vendedorConstantesFunciones.activarComisionMarcaVendedor));
				tableColumn.setCellEditor(new ComisionMarcaTableCell(vendedorConstantesFunciones.resaltarComisionMarcaVendedor,this,this.vendedorConstantesFunciones.activarComisionMarcaVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosPresupuestoVentas && this.vendedorConstantesFunciones.mostrarPresupuestoVentasVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Presupuesto Ventases");
				tableColumn.setHeaderValue("Presupuesto Ventases");
				tableColumn.setCellRenderer(new PresupuestoVentasTableCell(vendedorConstantesFunciones.resaltarPresupuestoVentasVendedor,this,this.vendedorConstantesFunciones.activarPresupuestoVentasVendedor));
				tableColumn.setCellEditor(new PresupuestoVentasTableCell(vendedorConstantesFunciones.resaltarPresupuestoVentasVendedor,this,this.vendedorConstantesFunciones.activarPresupuestoVentasVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}

			if(this.isTienePermisosPresupuestoVentasLineas && this.vendedorConstantesFunciones.mostrarPresupuestoVentasLineasVendedor && !VendedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Presupuesto Ventas_lineases");
				tableColumn.setHeaderValue("Presupuesto Ventas_lineases");
				tableColumn.setCellRenderer(new PresupuestoVentasLineasTableCell(vendedorConstantesFunciones.resaltarPresupuestoVentasLineasVendedor,this,this.vendedorConstantesFunciones.activarPresupuestoVentasLineasVendedor));
				tableColumn.setCellEditor(new PresupuestoVentasLineasTableCell(vendedorConstantesFunciones.resaltarPresupuestoVentasLineasVendedor,this,this.vendedorConstantesFunciones.activarPresupuestoVentasLineasVendedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosVendedor.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.vendedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.vendedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosVendedor.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.vendedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.vendedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosVendedor.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarVendedor && this.isPermisoGuardarCambiosVendedor) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.vendedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.vendedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosVendedor.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.vendedorSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosVendedor.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosVendedor.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarVendedor && this.isPermisoGuardarCambiosVendedor) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.vendedorSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarVendedor && this.isPermisoGuardarCambiosVendedor) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosVendedor.moveColumn(this.jTableDatosVendedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosVendedor.moveColumn(this.jTableDatosVendedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.vendedorSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosVendedor.moveColumn(this.jTableDatosVendedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosVendedor.moveColumn(this.jTableDatosVendedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosVendedor.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosVendedor.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosVendedor,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosVendedor.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosVendedor.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosVendedor.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosVendedor.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosVendedor.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=vendedorLogic.getVendedors().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=vendedors.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosVendedor.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosVendedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosVendedor();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoVendedor=false;
					
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
				if(this.vendedorSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosVendedor.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosVendedor.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.vendedor.getsType().equals("DUPLICADO")
				   || this.vendedor.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoVendedor=true;
				
				} else {
					this.isEsNuevoVendedor=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.vendedorSessionBean.getEsGuardarRelacionado()) {
					if(this.vendedor.getId()>=0 && !this.vendedor.getIsNew()) {						
						this.isEsNuevoVendedor=false;
						
					} else {
						this.isEsNuevoVendedor=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoVendedor(esRelaciones);						
				
				this.seleccionarVendedor(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.vendedor.getId()<0) {
					this.isEsNuevoVendedor=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarVendedor(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarVendedor(evt,rowIndex);
				}	
				
				if(this.vendedorSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion Vendedor: " + this.dDif); 
					}
				}								
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarVendedor(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.vendedor)) {
					if(this.vendedor.getId()>0) {
						this.vendedor.setIsDeleted(true);
						
						this.vendedorsEliminados.add(this.vendedor);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.vendedorLogic.getVendedors().remove(this.vendedor);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.vendedors.remove(this.vendedor);				
					}
					
					
					((VendedorModel) this.jTableDatosVendedor.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaVendedor(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarVendedor(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoVendedor) {
			
			if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosVendedor.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosVendedor.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioVendedor(this.vendedor);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.vendedorConstantesFunciones.cargarid_empresaVendedor || this.vendedorConstantesFunciones.event_dependid_empresaVendedor) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.vendedor.getid_empresa());
									//this.inicializarActualizarBindingVendedor(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(vendedor.getEmpresa()!=null) {
							this.empresasForeignKey.add(vendedor.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.vendedor.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.vendedorConstantesFunciones.cargarid_sucursalVendedor || this.vendedorConstantesFunciones.event_dependid_sucursalVendedor) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.vendedor.getid_sucursal());
									//this.inicializarActualizarBindingVendedor(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(vendedor.getSucursal()!=null) {
							this.sucursalsForeignKey.add(vendedor.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.vendedor.getid_sucursal(),false,"Formulario");

					//Empleado
					if(!this.vendedorConstantesFunciones.cargarid_empleadoVendedor || this.vendedorConstantesFunciones.event_dependid_empleadoVendedor) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.vendedor.getid_empleado());
									//this.inicializarActualizarBindingVendedor(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(vendedor.getEmpleado()!=null) {
							this.empleadosForeignKey.add(vendedor.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.vendedor.getid_empleado(),false,"Formulario");

					//EmpleadoSoporte
					if(!this.vendedorConstantesFunciones.cargarid_empleado_soporteVendedor || this.vendedorConstantesFunciones.event_dependid_empleado_soporteVendedor) {
						//this.cargarCombosEmpleadoSoportesForeignKeyLista(" where id="+this.vendedor.getid_empleado_soporte());
									//this.inicializarActualizarBindingVendedor(false,false);
						this.empleadosoportesForeignKey=new ArrayList<Empleado>();

						if(vendedor.getEmpleadoSoporte()!=null) {
							this.empleadosoportesForeignKey.add(vendedor.getEmpleadoSoporte());
						}

						this.addItemDefectoCombosForeignKeyEmpleadoSoporte();
						this.cargarCombosFrameEmpleadoSoportesForeignKey("Todos");
					}
					this.setActualEmpleadoSoporteForeignKey(this.vendedor.getid_empleado_soporte(),false,"Formulario");

					//Vendedor
					if(!this.vendedorConstantesFunciones.cargarid_vendedorVendedor || this.vendedorConstantesFunciones.event_dependid_vendedorVendedor) {
						//this.cargarCombosVendedorsForeignKeyLista(" where id="+this.vendedor.getid_vendedor());
									//this.inicializarActualizarBindingVendedor(false,false);
						this.vendedorsForeignKey=new ArrayList<Vendedor>();

						if(vendedor.getVendedor()!=null) {
							this.vendedorsForeignKey.add(vendedor.getVendedor());
						}

						this.addItemDefectoCombosForeignKeyVendedor();
						this.cargarCombosFrameVendedorsForeignKey("Todos");
					}
					this.setActualVendedorForeignKey(this.vendedor.getid_vendedor(),false,"Formulario");

					//Pais
					if(!this.vendedorConstantesFunciones.cargarid_paisVendedor || this.vendedorConstantesFunciones.event_dependid_paisVendedor) {
						//this.cargarCombosPaissForeignKeyLista(" where id="+this.vendedor.getid_pais());
									//this.inicializarActualizarBindingVendedor(false,false);
						this.paissForeignKey=new ArrayList<Pais>();

						if(vendedor.getPais()!=null) {
							this.paissForeignKey.add(vendedor.getPais());
						}

						this.addItemDefectoCombosForeignKeyPais();
						this.cargarCombosFramePaissForeignKey("Todos");
					}
					this.setActualPaisForeignKey(this.vendedor.getid_pais(),false,"Formulario");

					//Ciudad
					if(!this.vendedorConstantesFunciones.cargarid_ciudadVendedor || this.vendedorConstantesFunciones.event_dependid_ciudadVendedor) {
						//this.cargarCombosCiudadsForeignKeyLista(" where id="+this.vendedor.getid_ciudad());
									//this.inicializarActualizarBindingVendedor(false,false);
						this.ciudadsForeignKey=new ArrayList<Ciudad>();

						if(vendedor.getCiudad()!=null) {
							this.ciudadsForeignKey.add(vendedor.getCiudad());
						}

						this.addItemDefectoCombosForeignKeyCiudad();
						this.cargarCombosFrameCiudadsForeignKey("Todos");
					}
					this.setActualCiudadForeignKey(this.vendedor.getid_ciudad(),false,"Formulario");

					//Zona
					if(!this.vendedorConstantesFunciones.cargarid_zonaVendedor || this.vendedorConstantesFunciones.event_dependid_zonaVendedor) {
						//this.cargarCombosZonasForeignKeyLista(" where id="+this.vendedor.getid_zona());
									//this.inicializarActualizarBindingVendedor(false,false);
						this.zonasForeignKey=new ArrayList<Zona>();

						if(vendedor.getZona()!=null) {
							this.zonasForeignKey.add(vendedor.getZona());
						}

						this.addItemDefectoCombosForeignKeyZona();
						this.cargarCombosFrameZonasForeignKey("Todos");
					}
					this.setActualZonaForeignKey(this.vendedor.getid_zona(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesVendedor("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesVendedor(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualVendedor() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoVendedor(Vendedor vendedor) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoVendedor(vendedor,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoVendedor(Vendedor vendedor,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioVendedor(vendedor);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyVendedor(vendedor,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyVendedor(vendedor);
	}
	
	public void setVariablesObjetoActualToFormularioVendedor(Vendedor vendedor) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.setText(vendedor.getId().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldcodigoVendedor.setText(vendedor.getcodigo());
			this.jInternalFrameDetalleFormVendedor.jTextAreanombreVendedor.setText(vendedor.getnombre());
			this.jInternalFrameDetalleFormVendedor.jTextFieldrucVendedor.setText(vendedor.getruc());
			this.jInternalFrameDetalleFormVendedor.jTextAreaemailVendedor.setText(vendedor.getemail());
			this.jInternalFrameDetalleFormVendedor.jTextAreatelefonoVendedor.setText(vendedor.gettelefono());
			this.jInternalFrameDetalleFormVendedor.jTextArearepresentanteVendedor.setText(vendedor.getrepresentante());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.setSelected(vendedor.getes_supervisor());
			this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_creacionVendedor.setDate(vendedor.getfecha_creacion());
			this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_domicilioVendedor.setText(vendedor.getdireccion_domicilio());
			this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_referenciaVendedor.setText(vendedor.getdireccion_referencia());
			this.jInternalFrameDetalleFormVendedor.jTextAreadescripcionVendedor.setText(vendedor.getdescripcion());
			this.jInternalFrameDetalleFormVendedor.jTextFieldporcentaje_comisionVendedor.setText(vendedor.getporcentaje_comision().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldcomisionVendedor.setText(vendedor.getcomision().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_vendidoVendedor.setText(vendedor.getmonto_vendido().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldnumero_facturasVendedor.setText(vendedor.getnumero_facturas().toString());
			this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_ultima_ventaVendedor.setDate(vendedor.getfecha_ultima_venta());
			this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_ultima_ventaVendedor.setText(vendedor.getmonto_ultima_venta().toString());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.setSelected(vendedor.getcon_presupuesto());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.setSelected(vendedor.getcon_cobertura());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,Vendedor vendedorLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,vendedorLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,Vendedor vendedorLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				vendedorLocal=this.vendedor;
			} else {
				vendedorLocal=this.vendedorAnterior;
			}
		}
		
		if(this.permiteMantenimiento(vendedorLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoVendedor(vendedorLocal,true);
					
					if(vendedorSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(vendedorLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.vendedorSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(vendedorLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoVendedor(Vendedor vendedor,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualVendedor(vendedor,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysVendedor(vendedor);
	}
	
	public void setVariablesFormularioToObjetoActualVendedor(Vendedor vendedor,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualVendedor(vendedor,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualVendedor(Vendedor vendedor,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.getText()==null || this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.getText()=="" || this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.getText()=="Id") {
				this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.setText("0");
			}

			if(conColumnasBase) {vendedor.setId(Long.parseLong(this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelIdVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setcodigo(this.jInternalFrameDetalleFormVendedor.jTextFieldcodigoVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelcodigoVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setnombre(this.jInternalFrameDetalleFormVendedor.jTextAreanombreVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_NOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelnombreVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setruc(this.jInternalFrameDetalleFormVendedor.jTextFieldrucVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_RUC+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelrucVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setemail(this.jInternalFrameDetalleFormVendedor.jTextAreaemailVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_EMAIL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelemailVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.settelefono(this.jInternalFrameDetalleFormVendedor.jTextAreatelefonoVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_TELEFONO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeltelefonoVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setrepresentante(this.jInternalFrameDetalleFormVendedor.jTextArearepresentanteVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_REPRESENTANTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelrepresentanteVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setes_supervisor(this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_ESSUPERVISOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeles_supervisorVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setfecha_creacion(this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_creacionVendedor.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_FECHACREACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelfecha_creacionVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setdireccion_domicilio(this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_domicilioVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeldireccion_domicilioVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setdireccion_referencia(this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_referenciaVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeldireccion_referenciaVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setdescripcion(this.jInternalFrameDetalleFormVendedor.jTextAreadescripcionVendedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabeldescripcionVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setporcentaje_comision(Double.parseDouble(this.jInternalFrameDetalleFormVendedor.jTextFieldporcentaje_comisionVendedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelporcentaje_comisionVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setcomision(Double.parseDouble(this.jInternalFrameDetalleFormVendedor.jTextFieldcomisionVendedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_COMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelcomisionVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setmonto_vendido(Double.parseDouble(this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_vendidoVendedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_MONTOVENDIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelmonto_vendidoVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setnumero_facturas(Integer.parseInt(this.jInternalFrameDetalleFormVendedor.jTextFieldnumero_facturasVendedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_NUMEROFACTURAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelnumero_facturasVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setfecha_ultima_venta(this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_ultima_ventaVendedor.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelfecha_ultima_ventaVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setmonto_ultima_venta(Double.parseDouble(this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_ultima_ventaVendedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelmonto_ultima_ventaVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setcon_presupuesto(this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_CONPRESUPUESTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelcon_presupuestoVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			vendedor.setcon_cobertura(this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+VendedorConstantesFunciones.LABEL_CONCOBERTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormVendedor.jLabelcon_coberturaVendedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualVendedor(Vendedor vendedorBean,Vendedor vendedor,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && vendedorBean.getid_empleado()!=null && !vendedorBean.getid_empleado().equals(-1L))) {vendedor.setid_empleado(vendedorBean.getid_empleado());}
			if(conDefault || (!conDefault && vendedorBean.getid_empleado_soporte()!=null && !vendedorBean.getid_empleado_soporte().equals(null))) {vendedor.setid_empleado_soporte(vendedorBean.getid_empleado_soporte());}
			if(conDefault || (!conDefault && vendedorBean.getid_vendedor()!=null && !vendedorBean.getid_vendedor().equals(null))) {vendedor.setid_vendedor(vendedorBean.getid_vendedor());}
			if(conDefault || (!conDefault && vendedorBean.getid_pais()!=null && !vendedorBean.getid_pais().equals(-1L))) {vendedor.setid_pais(vendedorBean.getid_pais());}
			if(conDefault || (!conDefault && vendedorBean.getid_ciudad()!=null && !vendedorBean.getid_ciudad().equals(-1L))) {vendedor.setid_ciudad(vendedorBean.getid_ciudad());}
			if(conDefault || (!conDefault && vendedorBean.getid_zona()!=null && !vendedorBean.getid_zona().equals(-1L))) {vendedor.setid_zona(vendedorBean.getid_zona());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosVendedor(Vendedor vendedorOrigen,Vendedor vendedor,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && vendedorOrigen.getId()!=null && !vendedorOrigen.getId().equals(0L))) {vendedor.setId(vendedorOrigen.getId());}}
			if(conDefault || (!conDefault && vendedorOrigen.getcodigo()!=null && !vendedorOrigen.getcodigo().equals(""))) {vendedor.setcodigo(vendedorOrigen.getcodigo());}
			if(conDefault || (!conDefault && vendedorOrigen.getnombre()!=null && !vendedorOrigen.getnombre().equals(""))) {vendedor.setnombre(vendedorOrigen.getnombre());}
			if(conDefault || (!conDefault && vendedorOrigen.getruc()!=null && !vendedorOrigen.getruc().equals(""))) {vendedor.setruc(vendedorOrigen.getruc());}
			if(conDefault || (!conDefault && vendedorOrigen.getemail()!=null && !vendedorOrigen.getemail().equals(""))) {vendedor.setemail(vendedorOrigen.getemail());}
			if(conDefault || (!conDefault && vendedorOrigen.getid_empleado()!=null && !vendedorOrigen.getid_empleado().equals(-1L))) {vendedor.setid_empleado(vendedorOrigen.getid_empleado());}
			if(conDefault || (!conDefault && vendedorOrigen.gettelefono()!=null && !vendedorOrigen.gettelefono().equals(""))) {vendedor.settelefono(vendedorOrigen.gettelefono());}
			if(conDefault || (!conDefault && vendedorOrigen.getid_empleado_soporte()!=null && !vendedorOrigen.getid_empleado_soporte().equals(null))) {vendedor.setid_empleado_soporte(vendedorOrigen.getid_empleado_soporte());}
			if(conDefault || (!conDefault && vendedorOrigen.getid_vendedor()!=null && !vendedorOrigen.getid_vendedor().equals(null))) {vendedor.setid_vendedor(vendedorOrigen.getid_vendedor());}
			if(conDefault || (!conDefault && vendedorOrigen.getid_pais()!=null && !vendedorOrigen.getid_pais().equals(-1L))) {vendedor.setid_pais(vendedorOrigen.getid_pais());}
			if(conDefault || (!conDefault && vendedorOrigen.getid_ciudad()!=null && !vendedorOrigen.getid_ciudad().equals(-1L))) {vendedor.setid_ciudad(vendedorOrigen.getid_ciudad());}
			if(conDefault || (!conDefault && vendedorOrigen.getid_zona()!=null && !vendedorOrigen.getid_zona().equals(-1L))) {vendedor.setid_zona(vendedorOrigen.getid_zona());}
			if(conDefault || (!conDefault && vendedorOrigen.getrepresentante()!=null && !vendedorOrigen.getrepresentante().equals(""))) {vendedor.setrepresentante(vendedorOrigen.getrepresentante());}
			if(conDefault || (!conDefault && vendedorOrigen.getes_supervisor()!=null && !vendedorOrigen.getes_supervisor().equals(false))) {vendedor.setes_supervisor(vendedorOrigen.getes_supervisor());}
			if(conDefault || (!conDefault && vendedorOrigen.getfecha_creacion()!=null && !vendedorOrigen.getfecha_creacion().equals(new Date()))) {vendedor.setfecha_creacion(vendedorOrigen.getfecha_creacion());}
			if(conDefault || (!conDefault && vendedorOrigen.getdireccion_domicilio()!=null && !vendedorOrigen.getdireccion_domicilio().equals(""))) {vendedor.setdireccion_domicilio(vendedorOrigen.getdireccion_domicilio());}
			if(conDefault || (!conDefault && vendedorOrigen.getdireccion_referencia()!=null && !vendedorOrigen.getdireccion_referencia().equals(""))) {vendedor.setdireccion_referencia(vendedorOrigen.getdireccion_referencia());}
			if(conDefault || (!conDefault && vendedorOrigen.getdescripcion()!=null && !vendedorOrigen.getdescripcion().equals(""))) {vendedor.setdescripcion(vendedorOrigen.getdescripcion());}
			if(conDefault || (!conDefault && vendedorOrigen.getporcentaje_comision()!=null && !vendedorOrigen.getporcentaje_comision().equals(0.0))) {vendedor.setporcentaje_comision(vendedorOrigen.getporcentaje_comision());}
			if(conDefault || (!conDefault && vendedorOrigen.getcomision()!=null && !vendedorOrigen.getcomision().equals(0.0))) {vendedor.setcomision(vendedorOrigen.getcomision());}
			if(conDefault || (!conDefault && vendedorOrigen.getmonto_vendido()!=null && !vendedorOrigen.getmonto_vendido().equals(0.0))) {vendedor.setmonto_vendido(vendedorOrigen.getmonto_vendido());}
			if(conDefault || (!conDefault && vendedorOrigen.getnumero_facturas()!=null && !vendedorOrigen.getnumero_facturas().equals(0))) {vendedor.setnumero_facturas(vendedorOrigen.getnumero_facturas());}
			if(conDefault || (!conDefault && vendedorOrigen.getfecha_ultima_venta()!=null && !vendedorOrigen.getfecha_ultima_venta().equals(new Date()))) {vendedor.setfecha_ultima_venta(vendedorOrigen.getfecha_ultima_venta());}
			if(conDefault || (!conDefault && vendedorOrigen.getmonto_ultima_venta()!=null && !vendedorOrigen.getmonto_ultima_venta().equals(0.0))) {vendedor.setmonto_ultima_venta(vendedorOrigen.getmonto_ultima_venta());}
			if(conDefault || (!conDefault && vendedorOrigen.getcon_presupuesto()!=null && !vendedorOrigen.getcon_presupuesto().equals(false))) {vendedor.setcon_presupuesto(vendedorOrigen.getcon_presupuesto());}
			if(conDefault || (!conDefault && vendedorOrigen.getcon_cobertura()!=null && !vendedorOrigen.getcon_cobertura().equals(false))) {vendedor.setcon_cobertura(vendedorOrigen.getcon_cobertura());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioVendedor(Vendedor vendedor) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.setText(vendedor.getId().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldcodigoVendedor.setText(vendedor.getcodigo());
			this.jInternalFrameDetalleFormVendedor.jTextAreanombreVendedor.setText(vendedor.getnombre());
			this.jInternalFrameDetalleFormVendedor.jTextFieldrucVendedor.setText(vendedor.getruc());
			this.jInternalFrameDetalleFormVendedor.jTextAreaemailVendedor.setText(vendedor.getemail());
			this.jInternalFrameDetalleFormVendedor.jTextAreatelefonoVendedor.setText(vendedor.gettelefono());
			this.jInternalFrameDetalleFormVendedor.jTextArearepresentanteVendedor.setText(vendedor.getrepresentante());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.setSelected(vendedor.getes_supervisor());
			this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_creacionVendedor.setDate(vendedor.getfecha_creacion());
			this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_domicilioVendedor.setText(vendedor.getdireccion_domicilio());
			this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_referenciaVendedor.setText(vendedor.getdireccion_referencia());
			this.jInternalFrameDetalleFormVendedor.jTextAreadescripcionVendedor.setText(vendedor.getdescripcion());
			this.jInternalFrameDetalleFormVendedor.jTextFieldporcentaje_comisionVendedor.setText(vendedor.getporcentaje_comision().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldcomisionVendedor.setText(vendedor.getcomision().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_vendidoVendedor.setText(vendedor.getmonto_vendido().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldnumero_facturasVendedor.setText(vendedor.getnumero_facturas().toString());
			this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_ultima_ventaVendedor.setDate(vendedor.getfecha_ultima_venta());
			this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_ultima_ventaVendedor.setText(vendedor.getmonto_ultima_venta().toString());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.setSelected(vendedor.getcon_presupuesto());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.setSelected(vendedor.getcon_cobertura());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioVendedor(VendedorBean vendedorBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.setText(vendedorBean.getId().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldcodigoVendedor.setText(vendedorBean.getcodigo());
			this.jInternalFrameDetalleFormVendedor.jTextAreanombreVendedor.setText(vendedorBean.getnombre());
			this.jInternalFrameDetalleFormVendedor.jTextFieldrucVendedor.setText(vendedorBean.getruc());
			this.jInternalFrameDetalleFormVendedor.jTextAreaemailVendedor.setText(vendedorBean.getemail());
			this.jInternalFrameDetalleFormVendedor.jTextAreatelefonoVendedor.setText(vendedorBean.gettelefono());
			this.jInternalFrameDetalleFormVendedor.jTextArearepresentanteVendedor.setText(vendedorBean.getrepresentante());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.setSelected(vendedorBean.getes_supervisor());
			this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_creacionVendedor.setDate(vendedorBean.getfecha_creacion());
			this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_domicilioVendedor.setText(vendedorBean.getdireccion_domicilio());
			this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_referenciaVendedor.setText(vendedorBean.getdireccion_referencia());
			this.jInternalFrameDetalleFormVendedor.jTextAreadescripcionVendedor.setText(vendedorBean.getdescripcion());
			this.jInternalFrameDetalleFormVendedor.jTextFieldporcentaje_comisionVendedor.setText(vendedorBean.getporcentaje_comision().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldcomisionVendedor.setText(vendedorBean.getcomision().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_vendidoVendedor.setText(vendedorBean.getmonto_vendido().toString());
			this.jInternalFrameDetalleFormVendedor.jTextFieldnumero_facturasVendedor.setText(vendedorBean.getnumero_facturas().toString());
			this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_ultima_ventaVendedor.setDate(vendedorBean.getfecha_ultima_venta());
			this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_ultima_ventaVendedor.setText(vendedorBean.getmonto_ultima_venta().toString());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.setSelected(vendedorBean.getcon_presupuesto());
			this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.setSelected(vendedorBean.getcon_cobertura());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanVendedor(VendedorParameterReturnGeneral vendedorReturnGeneral,VendedorBean vendedorBean,Boolean conDefault) throws Exception { 
		try {
			Vendedor vendedorLocal=new Vendedor();
			
			vendedorLocal=vendedorReturnGeneral.getVendedor();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && vendedorLocal.getId()!=null && !vendedorLocal.getId().equals(0L))) {vendedorBean.setId(vendedorLocal.getId());}}
			if(conDefault || (!conDefault && vendedorLocal.getcodigo()!=null && !vendedorLocal.getcodigo().equals(""))) {vendedorBean.setcodigo(vendedorLocal.getcodigo());}
			if(conDefault || (!conDefault && vendedorLocal.getnombre()!=null && !vendedorLocal.getnombre().equals(""))) {vendedorBean.setnombre(vendedorLocal.getnombre());}
			if(conDefault || (!conDefault && vendedorLocal.getruc()!=null && !vendedorLocal.getruc().equals(""))) {vendedorBean.setruc(vendedorLocal.getruc());}
			if(conDefault || (!conDefault && vendedorLocal.getemail()!=null && !vendedorLocal.getemail().equals(""))) {vendedorBean.setemail(vendedorLocal.getemail());}
			if(conDefault || (!conDefault && vendedorLocal.getid_empleado()!=null && !vendedorLocal.getid_empleado().equals(-1L))) {vendedorBean.setid_empleado(vendedorLocal.getid_empleado());}
			if(conDefault || (!conDefault && vendedorLocal.gettelefono()!=null && !vendedorLocal.gettelefono().equals(""))) {vendedorBean.settelefono(vendedorLocal.gettelefono());}
			if(conDefault || (!conDefault && vendedorLocal.getid_empleado_soporte()!=null && !vendedorLocal.getid_empleado_soporte().equals(null))) {vendedorBean.setid_empleado_soporte(vendedorLocal.getid_empleado_soporte());}
			if(conDefault || (!conDefault && vendedorLocal.getid_vendedor()!=null && !vendedorLocal.getid_vendedor().equals(null))) {vendedorBean.setid_vendedor(vendedorLocal.getid_vendedor());}
			if(conDefault || (!conDefault && vendedorLocal.getid_pais()!=null && !vendedorLocal.getid_pais().equals(-1L))) {vendedorBean.setid_pais(vendedorLocal.getid_pais());}
			if(conDefault || (!conDefault && vendedorLocal.getid_ciudad()!=null && !vendedorLocal.getid_ciudad().equals(-1L))) {vendedorBean.setid_ciudad(vendedorLocal.getid_ciudad());}
			if(conDefault || (!conDefault && vendedorLocal.getid_zona()!=null && !vendedorLocal.getid_zona().equals(-1L))) {vendedorBean.setid_zona(vendedorLocal.getid_zona());}
			if(conDefault || (!conDefault && vendedorLocal.getrepresentante()!=null && !vendedorLocal.getrepresentante().equals(""))) {vendedorBean.setrepresentante(vendedorLocal.getrepresentante());}
			if(conDefault || (!conDefault && vendedorLocal.getes_supervisor()!=null && !vendedorLocal.getes_supervisor().equals(false))) {vendedorBean.setes_supervisor(vendedorLocal.getes_supervisor());}
			if(conDefault || (!conDefault && vendedorLocal.getfecha_creacion()!=null && !vendedorLocal.getfecha_creacion().equals(new Date()))) {vendedorBean.setfecha_creacion(vendedorLocal.getfecha_creacion());}
			if(conDefault || (!conDefault && vendedorLocal.getdireccion_domicilio()!=null && !vendedorLocal.getdireccion_domicilio().equals(""))) {vendedorBean.setdireccion_domicilio(vendedorLocal.getdireccion_domicilio());}
			if(conDefault || (!conDefault && vendedorLocal.getdireccion_referencia()!=null && !vendedorLocal.getdireccion_referencia().equals(""))) {vendedorBean.setdireccion_referencia(vendedorLocal.getdireccion_referencia());}
			if(conDefault || (!conDefault && vendedorLocal.getdescripcion()!=null && !vendedorLocal.getdescripcion().equals(""))) {vendedorBean.setdescripcion(vendedorLocal.getdescripcion());}
			if(conDefault || (!conDefault && vendedorLocal.getporcentaje_comision()!=null && !vendedorLocal.getporcentaje_comision().equals(0.0))) {vendedorBean.setporcentaje_comision(vendedorLocal.getporcentaje_comision());}
			if(conDefault || (!conDefault && vendedorLocal.getcomision()!=null && !vendedorLocal.getcomision().equals(0.0))) {vendedorBean.setcomision(vendedorLocal.getcomision());}
			if(conDefault || (!conDefault && vendedorLocal.getmonto_vendido()!=null && !vendedorLocal.getmonto_vendido().equals(0.0))) {vendedorBean.setmonto_vendido(vendedorLocal.getmonto_vendido());}
			if(conDefault || (!conDefault && vendedorLocal.getnumero_facturas()!=null && !vendedorLocal.getnumero_facturas().equals(0))) {vendedorBean.setnumero_facturas(vendedorLocal.getnumero_facturas());}
			if(conDefault || (!conDefault && vendedorLocal.getfecha_ultima_venta()!=null && !vendedorLocal.getfecha_ultima_venta().equals(new Date()))) {vendedorBean.setfecha_ultima_venta(vendedorLocal.getfecha_ultima_venta());}
			if(conDefault || (!conDefault && vendedorLocal.getmonto_ultima_venta()!=null && !vendedorLocal.getmonto_ultima_venta().equals(0.0))) {vendedorBean.setmonto_ultima_venta(vendedorLocal.getmonto_ultima_venta());}
			if(conDefault || (!conDefault && vendedorLocal.getcon_presupuesto()!=null && !vendedorLocal.getcon_presupuesto().equals(false))) {vendedorBean.setcon_presupuesto(vendedorLocal.getcon_presupuesto());}
			if(conDefault || (!conDefault && vendedorLocal.getcon_cobertura()!=null && !vendedorLocal.getcon_cobertura().equals(false))) {vendedorBean.setcon_cobertura(vendedorLocal.getcon_cobertura());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxVendedorGenerico(Long idVendedorSeleccionado,JComboBox jComboBoxVendedor,List<Vendedor> vendedorsLocal)throws Exception {
		try {
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsLocal) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			jComboBoxVendedor.setSelectedItem(vendedorTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxVendedorGenerico(JComboBox jComboBoxVendedor,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxVendedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxVendedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxVendedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxVendedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxVendedor.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxVendedor.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxVendedor.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxVendedor.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxVendedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxVendedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
				//AUTOREFERENCIADA
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ARBOL");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ARBOL");
				
				jComboBoxVendedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxVendedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Arbol"));			
				//AUTOREFERENCIADA
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("NotaCreditoSoli")) {
			jButtonNotaCreditoSoliActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("ComisionVentaCobro")) {
			jButtonComisionVentaCobroActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("Vendedor")) {
			jButtonVendedorActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("Cliente")) {
			jButtonClienteActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("ComisionGrupo")) {
			jButtonComisionGrupoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("ComisionLinea")) {
			jButtonComisionLineaActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("VendedorZona")) {
			jButtonVendedorZonaActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("ComisionCate")) {
			jButtonComisionCateActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("CajeroTurno")) {
			jButtonCajeroTurnoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("ComisionMarca")) {
			jButtonComisionMarcaActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("PresupuestoVentas")) {
			jButtonPresupuestoVentasActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("PresupuestoVentasLineas")) {
			jButtonPresupuestoVentasLineasActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			vendedor=(Vendedor) vendedorLogic.getVendedors().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			vendedor =(Vendedor) vendedors.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!vendedor.getIsNew() && !vendedor.getIsChanged() && !vendedor.getIsDeleted()) {
				sDescripcion=vendedor.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=vendedor.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!vendedor.getIsNew() && !vendedor.getIsChanged() && !vendedor.getIsDeleted()) {
				sDescripcion=vendedor.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=vendedor.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!vendedor.getIsNew() && !vendedor.getIsChanged() && !vendedor.getIsDeleted()) {
				sDescripcion=vendedor.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=vendedor.getempleado_descripcion();
			}
		}

		if(sTipo.equals("EmpleadoSoporte")) {
			//sDescripcion=this.getActualEmpleadoSoporteForeignKeyDescripcion((Long)value);
			if(!vendedor.getIsNew() && !vendedor.getIsChanged() && !vendedor.getIsDeleted()) {
				sDescripcion=vendedor.getempleadosoporte_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoSoporteForeignKeyDescripcion((Long)value);
				sDescripcion=vendedor.getempleadosoporte_descripcion();
			}
		}

		if(sTipo.equals("Vendedor")) {
			//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
			if(!vendedor.getIsNew() && !vendedor.getIsChanged() && !vendedor.getIsDeleted()) {
				sDescripcion=vendedor.getvendedor_descripcion();
			} else {
				//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
				sDescripcion=vendedor.getvendedor_descripcion();
			}
		}

		if(sTipo.equals("Pais")) {
			//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
			if(!vendedor.getIsNew() && !vendedor.getIsChanged() && !vendedor.getIsDeleted()) {
				sDescripcion=vendedor.getpais_descripcion();
			} else {
				//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
				sDescripcion=vendedor.getpais_descripcion();
			}
		}

		if(sTipo.equals("Ciudad")) {
			//sDescripcion=this.getActualCiudadForeignKeyDescripcion((Long)value);
			if(!vendedor.getIsNew() && !vendedor.getIsChanged() && !vendedor.getIsDeleted()) {
				sDescripcion=vendedor.getciudad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=vendedor.getciudad_descripcion();
			}
		}

		if(sTipo.equals("Zona")) {
			//sDescripcion=this.getActualZonaForeignKeyDescripcion((Long)value);
			if(!vendedor.getIsNew() && !vendedor.getIsChanged() && !vendedor.getIsDeleted()) {
				sDescripcion=vendedor.getzona_descripcion();
			} else {
				//sDescripcion=this.getActualZonaForeignKeyDescripcion((Long)value);
				sDescripcion=vendedor.getzona_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		Vendedor vendedorRow=new Vendedor();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			vendedorRow=(Vendedor) vendedorLogic.getVendedors().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			vendedorRow=(Vendedor) vendedors.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonNotaCreditoSoliActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosNotaCreditoSoli && this.permiteMantenimiento(this.vendedor)) {
					NotaCreditoSoliBeanSwingJInternalFrame notacreditosoliBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFramePopup=new NotaCreditoSoliBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						notacreditosoliBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFramePopup;
					} else {
						notacreditosoliBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//notacreditosoliBeanSwingJInternalFrame.notacreditosoliSessionBean.setConGuardarRelaciones(false);
						//notacreditosoliBeanSwingJInternalFrame.notacreditosoliSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					notacreditosoliBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarNotaCreditoSoliBeanSwingJInternalFrame(vendedors,this.vendedor,notacreditosoliBeanSwingJInternalFrame,/*conInicializar,*/notacreditosoliBeanSwingJInternalFrame.notacreditosoliSessionBean.getConGuardarRelaciones(),notacreditosoliBeanSwingJInternalFrame.notacreditosoliSessionBean.getEsGuardarRelacionado());
					notacreditosoliBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						notacreditosoliBeanSwingJInternalFrame.actualizarEstadoPanelsNotaCreditoSoli("no_relacionado");

						notacreditosoliBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(NotaCreditoSoliConstantesFunciones.ITAMANIOFILATABLA + (NotaCreditoSoliConstantesFunciones.ITAMANIOFILATABLA/2));

						notacreditosoliBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)notacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoSoli.getBorder();

						titledBorderNotaCreditoSoli.setTitle(titledBorderVendedor.getTitle() + " -> Solicitud Nota Credito");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,notacreditosoliBeanSwingJInternalFrame);
						}

						notacreditosoliBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(notacreditosoliBeanSwingJInternalFrame);

						notacreditosoliBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Solicitud Nota Credito",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonComisionVentaCobroActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosComisionVentaCobro && this.permiteMantenimiento(this.vendedor)) {
					ComisionVentaCobroBeanSwingJInternalFrame comisionventacobroBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFramePopup=new ComisionVentaCobroBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						comisionventacobroBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFramePopup;
					} else {
						comisionventacobroBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//comisionventacobroBeanSwingJInternalFrame.comisionventacobroSessionBean.setConGuardarRelaciones(false);
						//comisionventacobroBeanSwingJInternalFrame.comisionventacobroSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					comisionventacobroBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarComisionVentaCobroBeanSwingJInternalFrame(vendedors,this.vendedor,comisionventacobroBeanSwingJInternalFrame,/*conInicializar,*/comisionventacobroBeanSwingJInternalFrame.comisionventacobroSessionBean.getConGuardarRelaciones(),comisionventacobroBeanSwingJInternalFrame.comisionventacobroSessionBean.getEsGuardarRelacionado());
					comisionventacobroBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						comisionventacobroBeanSwingJInternalFrame.actualizarEstadoPanelsComisionVentaCobro("no_relacionado");

						comisionventacobroBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(ComisionVentaCobroConstantesFunciones.ITAMANIOFILATABLA + (ComisionVentaCobroConstantesFunciones.ITAMANIOFILATABLA/2));

						comisionventacobroBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderComisionVentaCobro=(TitledBorder)comisionventacobroBeanSwingJInternalFrame.jScrollPanelDatosComisionVentaCobro.getBorder();

						titledBorderComisionVentaCobro.setTitle(titledBorderVendedor.getTitle() + " -> Comision Venta Cobro");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,comisionventacobroBeanSwingJInternalFrame);
						}

						comisionventacobroBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(comisionventacobroBeanSwingJInternalFrame);

						comisionventacobroBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Comision Venta Cobro",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonVendedorActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosVendedor && this.permiteMantenimiento(this.vendedor)) {
					VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFramePopup=new VendedorBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						vendedorBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFramePopup;
					} else {
						vendedorBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//vendedorBeanSwingJInternalFrame.vendedorSessionBean.setConGuardarRelaciones(false);
						//vendedorBeanSwingJInternalFrame.vendedorSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					vendedorBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarVendedorBeanSwingJInternalFrame(vendedors,this.vendedor,vendedorBeanSwingJInternalFrame,/*conInicializar,*/vendedorBeanSwingJInternalFrame.vendedorSessionBean.getConGuardarRelaciones(),vendedorBeanSwingJInternalFrame.vendedorSessionBean.getEsGuardarRelacionado());
					vendedorBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						vendedorBeanSwingJInternalFrame.actualizarEstadoPanelsVendedor("no_relacionado");

						vendedorBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(VendedorConstantesFunciones.ITAMANIOFILATABLA + (VendedorConstantesFunciones.ITAMANIOFILATABLA/2));

						vendedorBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						titledBorderVendedor.setTitle(titledBorderVendedor.getTitle() + " -> Vendedor");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,vendedorBeanSwingJInternalFrame);
						}

						vendedorBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(vendedorBeanSwingJInternalFrame);

						vendedorBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Vendedor",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonClienteActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosCliente && this.permiteMantenimiento(this.vendedor)) {
					ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFramePopup=new ClienteBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						clienteBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFramePopup;
					} else {
						clienteBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//clienteBeanSwingJInternalFrame.clienteSessionBean.setConGuardarRelaciones(false);
						//clienteBeanSwingJInternalFrame.clienteSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					clienteBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarClienteBeanSwingJInternalFrame(vendedors,this.vendedor,clienteBeanSwingJInternalFrame,/*conInicializar,*/clienteBeanSwingJInternalFrame.clienteSessionBean.getConGuardarRelaciones(),clienteBeanSwingJInternalFrame.clienteSessionBean.getEsGuardarRelacionado());
					clienteBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						clienteBeanSwingJInternalFrame.actualizarEstadoPanelsCliente("no_relacionado");

						clienteBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(ClienteConstantesFunciones.ITAMANIOFILATABLA + (ClienteConstantesFunciones.ITAMANIOFILATABLA/2));

						clienteBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderCliente=(TitledBorder)clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

						titledBorderCliente.setTitle(titledBorderVendedor.getTitle() + " -> Cliente");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,clienteBeanSwingJInternalFrame);
						}

						clienteBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(clienteBeanSwingJInternalFrame);

						clienteBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Cliente",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonComisionGrupoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosComisionGrupo && this.permiteMantenimiento(this.vendedor)) {
					ComisionGrupoBeanSwingJInternalFrame comisiongrupoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFramePopup=new ComisionGrupoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						comisiongrupoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFramePopup;
					} else {
						comisiongrupoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//comisiongrupoBeanSwingJInternalFrame.comisiongrupoSessionBean.setConGuardarRelaciones(false);
						//comisiongrupoBeanSwingJInternalFrame.comisiongrupoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					comisiongrupoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarComisionGrupoBeanSwingJInternalFrame(vendedors,this.vendedor,comisiongrupoBeanSwingJInternalFrame,/*conInicializar,*/comisiongrupoBeanSwingJInternalFrame.comisiongrupoSessionBean.getConGuardarRelaciones(),comisiongrupoBeanSwingJInternalFrame.comisiongrupoSessionBean.getEsGuardarRelacionado());
					comisiongrupoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						comisiongrupoBeanSwingJInternalFrame.actualizarEstadoPanelsComisionGrupo("no_relacionado");

						comisiongrupoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(ComisionGrupoConstantesFunciones.ITAMANIOFILATABLA + (ComisionGrupoConstantesFunciones.ITAMANIOFILATABLA/2));

						comisiongrupoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderComisionGrupo=(TitledBorder)comisiongrupoBeanSwingJInternalFrame.jScrollPanelDatosComisionGrupo.getBorder();

						titledBorderComisionGrupo.setTitle(titledBorderVendedor.getTitle() + " -> Comision Grupo");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,comisiongrupoBeanSwingJInternalFrame);
						}

						comisiongrupoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(comisiongrupoBeanSwingJInternalFrame);

						comisiongrupoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Comision Grupo",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonComisionLineaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosComisionLinea && this.permiteMantenimiento(this.vendedor)) {
					ComisionLineaBeanSwingJInternalFrame comisionlineaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFramePopup=new ComisionLineaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						comisionlineaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFramePopup;
					} else {
						comisionlineaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//comisionlineaBeanSwingJInternalFrame.comisionlineaSessionBean.setConGuardarRelaciones(false);
						//comisionlineaBeanSwingJInternalFrame.comisionlineaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					comisionlineaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarComisionLineaBeanSwingJInternalFrame(vendedors,this.vendedor,comisionlineaBeanSwingJInternalFrame,/*conInicializar,*/comisionlineaBeanSwingJInternalFrame.comisionlineaSessionBean.getConGuardarRelaciones(),comisionlineaBeanSwingJInternalFrame.comisionlineaSessionBean.getEsGuardarRelacionado());
					comisionlineaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						comisionlineaBeanSwingJInternalFrame.actualizarEstadoPanelsComisionLinea("no_relacionado");

						comisionlineaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(ComisionLineaConstantesFunciones.ITAMANIOFILATABLA + (ComisionLineaConstantesFunciones.ITAMANIOFILATABLA/2));

						comisionlineaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderComisionLinea=(TitledBorder)comisionlineaBeanSwingJInternalFrame.jScrollPanelDatosComisionLinea.getBorder();

						titledBorderComisionLinea.setTitle(titledBorderVendedor.getTitle() + " -> Comision Linea");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,comisionlineaBeanSwingJInternalFrame);
						}

						comisionlineaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(comisionlineaBeanSwingJInternalFrame);

						comisionlineaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Comision Linea",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonVendedorZonaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosVendedorZona && this.permiteMantenimiento(this.vendedor)) {
					VendedorZonaBeanSwingJInternalFrame vendedorzonaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFramePopup=new VendedorZonaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						vendedorzonaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFramePopup;
					} else {
						vendedorzonaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//vendedorzonaBeanSwingJInternalFrame.vendedorzonaSessionBean.setConGuardarRelaciones(false);
						//vendedorzonaBeanSwingJInternalFrame.vendedorzonaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					vendedorzonaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarVendedorZonaBeanSwingJInternalFrame(vendedors,this.vendedor,vendedorzonaBeanSwingJInternalFrame,/*conInicializar,*/vendedorzonaBeanSwingJInternalFrame.vendedorzonaSessionBean.getConGuardarRelaciones(),vendedorzonaBeanSwingJInternalFrame.vendedorzonaSessionBean.getEsGuardarRelacionado());
					vendedorzonaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						vendedorzonaBeanSwingJInternalFrame.actualizarEstadoPanelsVendedorZona("no_relacionado");

						vendedorzonaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(VendedorZonaConstantesFunciones.ITAMANIOFILATABLA + (VendedorZonaConstantesFunciones.ITAMANIOFILATABLA/2));

						vendedorzonaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderVendedorZona=(TitledBorder)vendedorzonaBeanSwingJInternalFrame.jScrollPanelDatosVendedorZona.getBorder();

						titledBorderVendedorZona.setTitle(titledBorderVendedor.getTitle() + " -> Vendedor Zona");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,vendedorzonaBeanSwingJInternalFrame);
						}

						vendedorzonaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(vendedorzonaBeanSwingJInternalFrame);

						vendedorzonaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Vendedor Zona",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonComisionCateActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosComisionCate && this.permiteMantenimiento(this.vendedor)) {
					ComisionCateBeanSwingJInternalFrame comisioncateBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFramePopup=new ComisionCateBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						comisioncateBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFramePopup;
					} else {
						comisioncateBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//comisioncateBeanSwingJInternalFrame.comisioncateSessionBean.setConGuardarRelaciones(false);
						//comisioncateBeanSwingJInternalFrame.comisioncateSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					comisioncateBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarComisionCateBeanSwingJInternalFrame(vendedors,this.vendedor,comisioncateBeanSwingJInternalFrame,/*conInicializar,*/comisioncateBeanSwingJInternalFrame.comisioncateSessionBean.getConGuardarRelaciones(),comisioncateBeanSwingJInternalFrame.comisioncateSessionBean.getEsGuardarRelacionado());
					comisioncateBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						comisioncateBeanSwingJInternalFrame.actualizarEstadoPanelsComisionCate("no_relacionado");

						comisioncateBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(ComisionCateConstantesFunciones.ITAMANIOFILATABLA + (ComisionCateConstantesFunciones.ITAMANIOFILATABLA/2));

						comisioncateBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderComisionCate=(TitledBorder)comisioncateBeanSwingJInternalFrame.jScrollPanelDatosComisionCate.getBorder();

						titledBorderComisionCate.setTitle(titledBorderVendedor.getTitle() + " -> Comision Cate");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,comisioncateBeanSwingJInternalFrame);
						}

						comisioncateBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(comisioncateBeanSwingJInternalFrame);

						comisioncateBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Comision Cate",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonCajeroTurnoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosCajeroTurno && this.permiteMantenimiento(this.vendedor)) {
					CajeroTurnoBeanSwingJInternalFrame cajeroturnoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFramePopup=new CajeroTurnoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						cajeroturnoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFramePopup;
					} else {
						cajeroturnoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.setConGuardarRelaciones(false);
						//cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					cajeroturnoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarCajeroTurnoBeanSwingJInternalFrame(vendedors,this.vendedor,cajeroturnoBeanSwingJInternalFrame,/*conInicializar,*/cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.getConGuardarRelaciones(),cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.getEsGuardarRelacionado());
					cajeroturnoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						cajeroturnoBeanSwingJInternalFrame.actualizarEstadoPanelsCajeroTurno("no_relacionado");

						cajeroturnoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(CajeroTurnoConstantesFunciones.ITAMANIOFILATABLA + (CajeroTurnoConstantesFunciones.ITAMANIOFILATABLA/2));

						cajeroturnoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderCajeroTurno=(TitledBorder)cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.getBorder();

						titledBorderCajeroTurno.setTitle(titledBorderVendedor.getTitle() + " -> Cajero Turno");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cajeroturnoBeanSwingJInternalFrame);
						}

						cajeroturnoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(cajeroturnoBeanSwingJInternalFrame);

						cajeroturnoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Cajero Turno",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonComisionMarcaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosComisionMarca && this.permiteMantenimiento(this.vendedor)) {
					ComisionMarcaBeanSwingJInternalFrame comisionmarcaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFramePopup=new ComisionMarcaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						comisionmarcaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFramePopup;
					} else {
						comisionmarcaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//comisionmarcaBeanSwingJInternalFrame.comisionmarcaSessionBean.setConGuardarRelaciones(false);
						//comisionmarcaBeanSwingJInternalFrame.comisionmarcaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					comisionmarcaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarComisionMarcaBeanSwingJInternalFrame(vendedors,this.vendedor,comisionmarcaBeanSwingJInternalFrame,/*conInicializar,*/comisionmarcaBeanSwingJInternalFrame.comisionmarcaSessionBean.getConGuardarRelaciones(),comisionmarcaBeanSwingJInternalFrame.comisionmarcaSessionBean.getEsGuardarRelacionado());
					comisionmarcaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						comisionmarcaBeanSwingJInternalFrame.actualizarEstadoPanelsComisionMarca("no_relacionado");

						comisionmarcaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(ComisionMarcaConstantesFunciones.ITAMANIOFILATABLA + (ComisionMarcaConstantesFunciones.ITAMANIOFILATABLA/2));

						comisionmarcaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderComisionMarca=(TitledBorder)comisionmarcaBeanSwingJInternalFrame.jScrollPanelDatosComisionMarca.getBorder();

						titledBorderComisionMarca.setTitle(titledBorderVendedor.getTitle() + " -> Comision Marca");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,comisionmarcaBeanSwingJInternalFrame);
						}

						comisionmarcaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(comisionmarcaBeanSwingJInternalFrame);

						comisionmarcaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Comision Marca",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonPresupuestoVentasActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosPresupuestoVentas && this.permiteMantenimiento(this.vendedor)) {
					PresupuestoVentasBeanSwingJInternalFrame presupuestoventasBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFramePopup=new PresupuestoVentasBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						presupuestoventasBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFramePopup;
					} else {
						presupuestoventasBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//presupuestoventasBeanSwingJInternalFrame.presupuestoventasSessionBean.setConGuardarRelaciones(false);
						//presupuestoventasBeanSwingJInternalFrame.presupuestoventasSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					presupuestoventasBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarPresupuestoVentasBeanSwingJInternalFrame(vendedors,this.vendedor,presupuestoventasBeanSwingJInternalFrame,/*conInicializar,*/presupuestoventasBeanSwingJInternalFrame.presupuestoventasSessionBean.getConGuardarRelaciones(),presupuestoventasBeanSwingJInternalFrame.presupuestoventasSessionBean.getEsGuardarRelacionado());
					presupuestoventasBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						presupuestoventasBeanSwingJInternalFrame.actualizarEstadoPanelsPresupuestoVentas("no_relacionado");

						presupuestoventasBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(PresupuestoVentasConstantesFunciones.ITAMANIOFILATABLA + (PresupuestoVentasConstantesFunciones.ITAMANIOFILATABLA/2));

						presupuestoventasBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderPresupuestoVentas=(TitledBorder)presupuestoventasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentas.getBorder();

						titledBorderPresupuestoVentas.setTitle(titledBorderVendedor.getTitle() + " -> Presupuesto Ventas");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,presupuestoventasBeanSwingJInternalFrame);
						}

						presupuestoventasBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(presupuestoventasBeanSwingJInternalFrame);

						presupuestoventasBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Presupuesto Ventas",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonPresupuestoVentasLineasActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Vendedor vendedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormVendedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor = (Vendedor)this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.vendedor = (Vendedor)this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(vendedor!=null) {
						this.vendedor = vendedor;
					} else {
						this.vendedor = new Vendedor();
					}
				}

				if(this.isTienePermisosPresupuestoVentasLineas && this.permiteMantenimiento(this.vendedor)) {
					PresupuestoVentasLineasBeanSwingJInternalFrame presupuestoventaslineasBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFramePopup=new PresupuestoVentasLineasBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						presupuestoventaslineasBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFramePopup;
					} else {
						presupuestoventaslineasBeanSwingJInternalFrame=this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame;
					}

					List<Vendedor> vendedors=new ArrayList<Vendedor>();
					vendedors.add(this.vendedor);
					if(!esRelacionado) {
						//presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasSessionBean.setConGuardarRelaciones(false);
						//presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					presupuestoventaslineasBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormVendedor.cargarPresupuestoVentasLineasBeanSwingJInternalFrame(vendedors,this.vendedor,presupuestoventaslineasBeanSwingJInternalFrame,/*conInicializar,*/presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasSessionBean.getConGuardarRelaciones(),presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasSessionBean.getEsGuardarRelacionado());
					presupuestoventaslineasBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						presupuestoventaslineasBeanSwingJInternalFrame.actualizarEstadoPanelsPresupuestoVentasLineas("no_relacionado");

						presupuestoventaslineasBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(PresupuestoVentasLineasConstantesFunciones.ITAMANIOFILATABLA + (PresupuestoVentasLineasConstantesFunciones.ITAMANIOFILATABLA/2));

						presupuestoventaslineasBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
						TitledBorder titledBorderPresupuestoVentasLineas=(TitledBorder)presupuestoventaslineasBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasLineas.getBorder();

						titledBorderPresupuestoVentasLineas.setTitle(titledBorderVendedor.getTitle() + " -> Presupuesto Ventas_lineas");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,presupuestoventaslineasBeanSwingJInternalFrame);
						}

						presupuestoventaslineasBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(presupuestoventaslineasBeanSwingJInternalFrame);

						presupuestoventaslineasBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.vendedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Presupuesto Ventas_lineas",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualVendedor(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoVendedor.setVisible((this.isVisibilidadCeldaNuevoVendedor && this.isPermisoNuevoVendedor));			
			this.jButtonDuplicarVendedor.setVisible((this.isVisibilidadCeldaDuplicarVendedor && this.isPermisoDuplicarVendedor));			
			this.jButtonCopiarVendedor.setVisible((this.isVisibilidadCeldaCopiarVendedor && this.isPermisoCopiarVendedor));
			this.jButtonVerFormVendedor.setVisible((this.isVisibilidadCeldaVerFormVendedor && this.isPermisoVerFormVendedor));
			
			this.jButtonAbrirOrderByVendedor.setVisible((this.isVisibilidadCeldaOrdenVendedor && this.isPermisoOrdenVendedor));			
			
			this.jButtonNuevoRelacionesVendedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesVendedor && this.isPermisoNuevoVendedor));			
			this.jButtonNuevoGuardarCambiosVendedor.setVisible((this.isVisibilidadCeldaNuevoVendedor && this.isPermisoNuevoVendedor && this.isPermisoGuardarCambiosVendedor));
			
			if(this.jInternalFrameDetalleFormVendedor!=null) {
			this.jInternalFrameDetalleFormVendedor.jButtonModificarVendedor.setVisible((this.isVisibilidadCeldaModificarVendedor && this.isPermisoActualizarVendedor));	
			this.jInternalFrameDetalleFormVendedor.jButtonActualizarVendedor.setVisible((this.isVisibilidadCeldaActualizarVendedor && this.isPermisoActualizarVendedor));	
			this.jInternalFrameDetalleFormVendedor.jButtonEliminarVendedor.setVisible((this.isVisibilidadCeldaEliminarVendedor && this.isPermisoEliminarVendedor));
			this.jInternalFrameDetalleFormVendedor.jButtonCancelarVendedor.setVisible(this.isVisibilidadCeldaCancelarVendedor);							
			this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosVendedor.setVisible((this.isVisibilidadCeldaGuardarVendedor && this.isPermisoGuardarCambiosVendedor));			
			
			}
						
			this.jButtonGuardarCambiosTablaVendedor.setVisible((this.isVisibilidadCeldaGuardarCambiosVendedor && this.isPermisoGuardarCambiosVendedor));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarVendedor.setVisible((this.isVisibilidadCeldaNuevoVendedor && this.isPermisoNuevoVendedor));						
			this.jButtonDuplicarToolBarVendedor.setVisible((this.isVisibilidadCeldaDuplicarVendedor && this.isPermisoDuplicarVendedor));						
			this.jButtonCopiarToolBarVendedor.setVisible((this.isVisibilidadCeldaCopiarVendedor && this.isPermisoCopiarVendedor));			
			this.jButtonVerFormToolBarVendedor.setVisible((this.isVisibilidadCeldaVerFormVendedor && this.isPermisoVerFormVendedor));			
			this.jButtonAbrirOrderByToolBarVendedor.setVisible((this.isVisibilidadCeldaOrdenVendedor && this.isPermisoOrdenVendedor));
			this.jButtonNuevoRelacionesToolBarVendedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesVendedor && this.isPermisoNuevoVendedor));			
			this.jButtonNuevoGuardarCambiosToolBarVendedor.setVisible((this.isVisibilidadCeldaNuevoVendedor && this.isPermisoNuevoVendedor && this.isPermisoGuardarCambiosVendedor));			
			
			if(this.jInternalFrameDetalleFormVendedor!=null) {
			this.jInternalFrameDetalleFormVendedor.jButtonModificarToolBarVendedor.setVisible((this.isVisibilidadCeldaModificarVendedor && this.isPermisoActualizarVendedor));	
			this.jInternalFrameDetalleFormVendedor.jButtonActualizarToolBarVendedor.setVisible((this.isVisibilidadCeldaActualizarVendedor  && this.isPermisoActualizarVendedor));	
			this.jInternalFrameDetalleFormVendedor.jButtonEliminarToolBarVendedor.setVisible((this.isVisibilidadCeldaEliminarVendedor && this.isPermisoEliminarVendedor));
			this.jInternalFrameDetalleFormVendedor.jButtonCancelarToolBarVendedor.setVisible(this.isVisibilidadCeldaCancelarVendedor);				
			this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosToolBarVendedor.setVisible((this.isVisibilidadCeldaGuardarVendedor && this.isPermisoGuardarCambiosVendedor));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarVendedor.setVisible((this.isVisibilidadCeldaGuardarCambiosVendedor && this.isPermisoGuardarCambiosVendedor));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoVendedor.setVisible((this.isVisibilidadCeldaNuevoVendedor && this.isPermisoNuevoVendedor));			
			this.jMenuItemDuplicarVendedor.setVisible((this.isVisibilidadCeldaDuplicarVendedor && this.isPermisoDuplicarVendedor));			
			this.jMenuItemCopiarVendedor.setVisible((this.isVisibilidadCeldaCopiarVendedor && this.isPermisoCopiarVendedor));			
			this.jMenuItemVerFormVendedor.setVisible((this.isVisibilidadCeldaVerFormVendedor && this.isPermisoVerFormVendedor));			
			this.jMenuItemAbrirOrderByVendedor.setVisible((this.isVisibilidadCeldaOrdenVendedor && this.isPermisoOrdenVendedor));			
			//this.jMenuItemMostrarOcultarVendedor.setVisible((this.isVisibilidadCeldaOrdenVendedor && this.isPermisoOrdenVendedor));
			this.jMenuItemDetalleAbrirOrderByVendedor.setVisible((this.isVisibilidadCeldaOrdenVendedor && this.isPermisoOrdenVendedor));			
			//this.jMenuItemDetalleMostrarOcultarVendedor.setVisible((this.isVisibilidadCeldaOrdenVendedor && this.isPermisoOrdenVendedor));			
			this.jMenuItemNuevoRelacionesVendedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesVendedor && this.isPermisoNuevoVendedor));			
			this.jMenuItemNuevoGuardarCambiosVendedor.setVisible((this.isVisibilidadCeldaNuevoVendedor && this.isPermisoNuevoVendedor && this.isPermisoGuardarCambiosVendedor));									
			
			if(this.jInternalFrameDetalleFormVendedor!=null) {
			this.jInternalFrameDetalleFormVendedor.jMenuItemModificarVendedor.setVisible((this.isVisibilidadCeldaModificarVendedor && this.isPermisoActualizarVendedor));	
			this.jInternalFrameDetalleFormVendedor.jMenuItemActualizarVendedor.setVisible((this.isVisibilidadCeldaActualizarVendedor && this.isPermisoActualizarVendedor));	
			this.jInternalFrameDetalleFormVendedor.jMenuItemEliminarVendedor.setVisible((this.isVisibilidadCeldaEliminarVendedor && this.isPermisoEliminarVendedor));
			this.jInternalFrameDetalleFormVendedor.jMenuItemCancelarVendedor.setVisible(this.isVisibilidadCeldaCancelarVendedor);				
			}
			
			this.jMenuItemGuardarCambiosVendedor.setVisible((this.isVisibilidadCeldaGuardarVendedor && this.isPermisoGuardarCambiosVendedor));						
			this.jMenuItemGuardarCambiosTablaVendedor.setVisible((this.isVisibilidadCeldaGuardarCambiosVendedor && this.isPermisoGuardarCambiosVendedor));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoVendedor=this.jButtonNuevoVendedor.isVisible();
			this.isVisibilidadCeldaDuplicarVendedor=this.jButtonDuplicarVendedor.isVisible();
			this.isVisibilidadCeldaCopiarVendedor=this.jButtonCopiarVendedor.isVisible();
			this.isVisibilidadCeldaVerFormVendedor=this.jButtonVerFormVendedor.isVisible();
			
			this.isVisibilidadCeldaOrdenVendedor=this.jButtonAbrirOrderByVendedor.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesVendedor=this.jButtonNuevoRelacionesVendedor.isVisible();
			this.isVisibilidadCeldaModificarVendedor=this.jButtonModificarVendedor.isVisible();
			
			if(this.jInternalFrameDetalleFormVendedor!=null) {
			this.isVisibilidadCeldaActualizarVendedor=this.jInternalFrameDetalleFormVendedor.jButtonActualizarVendedor.isVisible();
			this.isVisibilidadCeldaEliminarVendedor=this.jInternalFrameDetalleFormVendedor.jButtonEliminarVendedor.isVisible();
			this.isVisibilidadCeldaCancelarVendedor=this.jInternalFrameDetalleFormVendedor.jButtonCancelarVendedor.isVisible();
			this.isVisibilidadCeldaGuardarVendedor=this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosVendedor.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosVendedor=this.jButtonGuardarCambiosTablaVendedor.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoVendedor=this.jButtonNuevoToolBarVendedor.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesVendedor=this.jButtonNuevoRelacionesToolBarVendedor.isVisible();
			
			if(this.jInternalFrameDetalleFormVendedor!=null) {
			this.isVisibilidadCeldaModificarVendedor=this.jInternalFrameDetalleFormVendedor.jButtonModificarToolBarVendedor.isVisible();
			this.isVisibilidadCeldaActualizarVendedor=this.jInternalFrameDetalleFormVendedor.jButtonActualizarToolBarVendedor.isVisible();
			this.isVisibilidadCeldaEliminarVendedor=this.jInternalFrameDetalleFormVendedor.jButtonEliminarToolBarVendedor.isVisible();
			this.isVisibilidadCeldaCancelarVendedor=this.jInternalFrameDetalleFormVendedor.jButtonCancelarToolBarVendedor.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarVendedor=this.jButtonGuardarCambiosToolBarVendedor.isVisible();
			this.isVisibilidadCeldaGuardarCambiosVendedor=this.jButtonGuardarCambiosTablaToolBarVendedor.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoVendedor=this.jMenuItemNuevoVendedor.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesVendedor=this.jMenuItemNuevoRelacionesVendedor.isVisible();
			
			if(this.jInternalFrameDetalleFormVendedor!=null) {
			this.isVisibilidadCeldaModificarVendedor=this.jInternalFrameDetalleFormVendedor.jMenuItemModificarVendedor.isVisible();
			this.isVisibilidadCeldaActualizarVendedor=this.jInternalFrameDetalleFormVendedor.jMenuItemActualizarVendedor.isVisible();
			this.isVisibilidadCeldaEliminarVendedor=this.jInternalFrameDetalleFormVendedor.jMenuItemEliminarVendedor.isVisible();
			this.isVisibilidadCeldaCancelarVendedor=this.jInternalFrameDetalleFormVendedor.jMenuItemCancelarVendedor.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarVendedor=this.jMenuItemGuardarCambiosVendedor.isVisible();
			this.isVisibilidadCeldaGuardarCambiosVendedor=this.jMenuItemGuardarCambiosTablaVendedor.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesVendedor(Boolean esInicializar) {
		if(VendedorJInternalFrame.ISBINDING_MANUAL) {			
			if(this.vendedorSessionBean.getConGuardarRelaciones()) {
				//if(this.vendedorSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesVendedor();
			}
			
			this.inicializarActualizarBindingBotonesManualVendedor(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualVendedor() {
		this.jButtonNuevoVendedor.setVisible(this.isPermisoNuevoVendedor);			
		this.jButtonDuplicarVendedor.setVisible(this.isPermisoDuplicarVendedor);			
		this.jButtonCopiarVendedor.setVisible(this.isPermisoCopiarVendedor);			
		this.jButtonVerFormVendedor.setVisible(this.isPermisoVerFormVendedor);			
		
		this.jButtonAbrirOrderByVendedor.setVisible(this.isPermisoOrdenVendedor);					
		
		this.jButtonNuevoRelacionesVendedor.setVisible(this.isPermisoNuevoVendedor);			
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonModificarVendedor.setVisible(this.isPermisoActualizarVendedor);	
			this.jInternalFrameDetalleFormVendedor.jButtonActualizarVendedor.setVisible(this.isPermisoActualizarVendedor);	
			this.jInternalFrameDetalleFormVendedor.jButtonEliminarVendedor.setVisible(this.isPermisoEliminarVendedor);
			this.jInternalFrameDetalleFormVendedor.jButtonCancelarVendedor.setVisible(this.isVisibilidadCeldaCancelarVendedor);						
			this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosVendedor.setVisible(this.isPermisoGuardarCambiosVendedor);							
		}
		
		this.jButtonGuardarCambiosTablaVendedor.setVisible(this.isPermisoActualizarVendedor);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleVendedor() {
		this.jInternalFrameDetalleFormVendedor.jButtonModificarVendedor.setVisible(this.isPermisoActualizarVendedor);	
		this.jInternalFrameDetalleFormVendedor.jButtonActualizarVendedor.setVisible(this.isPermisoActualizarVendedor);	
		this.jInternalFrameDetalleFormVendedor.jButtonEliminarVendedor.setVisible(this.isPermisoEliminarVendedor);
		this.jInternalFrameDetalleFormVendedor.jButtonCancelarVendedor.setVisible(this.isVisibilidadCeldaCancelarVendedor);							
		this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosVendedor.setVisible((this.isVisibilidadCeldaGuardarVendedor && this.isPermisoGuardarCambiosVendedor));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosVendedor() {
		if(VendedorJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualVendedor();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesVendedor() {
	}
	
	public void jTableDatosVendedorListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarVendedor(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.vendedor.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaVendedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebVendedor(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosVendedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.vendedorLogic.getConnexion());

				if(this.vendedor.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.vendedor.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderVendedor.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.vendedor.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalVendedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebVendedor(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosVendedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.vendedorLogic.getConnexion());

				if(this.vendedor.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.vendedor.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderVendedor.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.vendedor.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.vendedor.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombreVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.vendedor.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrucVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getruc()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc like '%"+this.vendedor.getruc()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonemailVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getemail()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where email like '%"+this.vendedor.getemail()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoVendedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderVendedor=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosVendedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderVendedor.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoVendedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebVendedor(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosVendedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.vendedorLogic.getConnexion());

				if(this.vendedor.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.vendedor.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderVendedor.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.vendedor.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefonoVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.gettelefono()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono like '%"+this.vendedor.gettelefono()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleado_soporteVendedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadosoporteBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadosoporteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadosoporteBeanSwingJInternalFrame.sTipoBusqueda="EmpleadoSoporte";

			if(!this.sFinalQueryGeneral_empleadosoporte.equals("")) {
				this.empleadosoporteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleadosoporte);
				this.empleadosoporteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadosoporteBeanSwingJInternalFrame.procesarBusqueda(this.empleadosoporteBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadosoporteBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleadoSoporte.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadosoporteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderVendedor=null;
			TitledBorder titledBorderempleadosoporte=null;

			if(!this.jScrollPanelDatosVendedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				titledBorderempleadosoporte=(TitledBorder)this.empleadosoporteBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleadosoporte.setTitle(titledBorderVendedor.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleado_soporteVendedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleadosoporte=true;

			idTienePermisoempleadosoporte=this.tienePermisosUsuarioEnPaginaWebVendedor(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleadosoporte) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosVendedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.empleadosoporteBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadosoporteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadosoporteBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.vendedorLogic.getConnexion());

				if(this.vendedor.getid_empleado_soporte()!=null) {
					this.empleadosoporteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadosoporteBeanSwingJInternalFrame.setIdActual(this.vendedor.getid_empleado_soporte());
					this.empleadosoporteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadosoporteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadosoporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadosoporteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				TitledBorder titledBorderempleadosoporte=(TitledBorder)this.empleadosoporteBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleadosoporte.setTitle(titledBorderVendedor.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleado_soporteVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getid_empleado_soporte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado_soporte = "+this.vendedor.getid_empleado_soporte().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_vendedorVendedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisovendedor=true;

			idTienePermisovendedor=this.tienePermisosUsuarioEnPaginaWebVendedor(VendedorConstantesFunciones.CLASSNAME);

			if(idTienePermisovendedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosVendedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.vendedorBeanSwingJInternalFrame.getVendedorLogic().setConnexion(this.vendedorLogic.getConnexion());

				if(this.vendedor.getid_vendedor()!=null) {
					this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.vendedorBeanSwingJInternalFrame.setIdActual(this.vendedor.getid_vendedor());
					this.vendedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor();
				}

				JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				TitledBorder titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderVendedor.getTitle() + " -> Vendedor");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_vendedorVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getid_vendedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_vendedor = "+this.vendedor.getid_vendedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_paisVendedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopais=true;

			idTienePermisopais=this.tienePermisosUsuarioEnPaginaWebVendedor(PaisConstantesFunciones.CLASSNAME);

			if(idTienePermisopais) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosVendedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.paisBeanSwingJInternalFrame=new PaisBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.paisBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.paisBeanSwingJInternalFrame.getPaisLogic().setConnexion(this.vendedorLogic.getConnexion());

				if(this.vendedor.getid_pais()!=null) {
					this.paisBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.paisBeanSwingJInternalFrame.setIdActual(this.vendedor.getid_pais());
					this.paisBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.inicializarActualizarBindingTablaPais();
				}

				JInternalFrameBase jinternalFrame =this.paisBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				TitledBorder titledBorderpais=(TitledBorder)this.paisBeanSwingJInternalFrame.jScrollPanelDatosPais.getBorder();

				titledBorderpais.setTitle(titledBorderVendedor.getTitle() + " -> Pais");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_paisVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getid_pais()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pais = "+this.vendedor.getid_pais().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ciudadVendedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisociudad=true;

			idTienePermisociudad=this.tienePermisosUsuarioEnPaginaWebVendedor(CiudadConstantesFunciones.CLASSNAME);

			if(idTienePermisociudad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosVendedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.ciudadBeanSwingJInternalFrame=new CiudadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ciudadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ciudadBeanSwingJInternalFrame.getCiudadLogic().setConnexion(this.vendedorLogic.getConnexion());

				if(this.vendedor.getid_ciudad()!=null) {
					this.ciudadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ciudadBeanSwingJInternalFrame.setIdActual(this.vendedor.getid_ciudad());
					this.ciudadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.inicializarActualizarBindingTablaCiudad();
				}

				JInternalFrameBase jinternalFrame =this.ciudadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				TitledBorder titledBorderciudad=(TitledBorder)this.ciudadBeanSwingJInternalFrame.jScrollPanelDatosCiudad.getBorder();

				titledBorderciudad.setTitle(titledBorderVendedor.getTitle() + " -> Ciudad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ciudadVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getid_ciudad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ciudad = "+this.vendedor.getid_ciudad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_zonaVendedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisozona=true;

			idTienePermisozona=this.tienePermisosUsuarioEnPaginaWebVendedor(ZonaConstantesFunciones.CLASSNAME);

			if(idTienePermisozona) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosVendedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosVendedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);

				this.zonaBeanSwingJInternalFrame=new ZonaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.zonaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.zonaBeanSwingJInternalFrame.getZonaLogic().setConnexion(this.vendedorLogic.getConnexion());

				if(this.vendedor.getid_zona()!=null) {
					this.zonaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.zonaBeanSwingJInternalFrame.setIdActual(this.vendedor.getid_zona());
					this.zonaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.zonaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.zonaBeanSwingJInternalFrame.inicializarActualizarBindingTablaZona();
				}

				JInternalFrameBase jinternalFrame =this.zonaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderVendedor=(TitledBorder)this.jScrollPanelDatosVendedor.getBorder();
				TitledBorder titledBorderzona=(TitledBorder)this.zonaBeanSwingJInternalFrame.jScrollPanelDatosZona.getBorder();

				titledBorderzona.setTitle(titledBorderVendedor.getTitle() + " -> Zona");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_zonaVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getid_zona()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_zona = "+this.vendedor.getid_zona().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrepresentanteVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getrepresentante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where representante like '%"+this.vendedor.getrepresentante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_supervisorVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getes_supervisor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_supervisor = "+this.vendedor.getes_supervisor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_creacionVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getfecha_creacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_creacion = '"+Funciones2.getStringPostgresDate(this.vendedor.getfecha_creacion())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccion_domicilioVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getdireccion_domicilio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion_domicilio like '%"+this.vendedor.getdireccion_domicilio()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccion_referenciaVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getdireccion_referencia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion_referencia like '%"+this.vendedor.getdireccion_referencia()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.vendedor.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonporcentaje_comisionVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getporcentaje_comision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where porcentaje_comision = "+this.vendedor.getporcentaje_comision().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncomisionVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getcomision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where comision = "+this.vendedor.getcomision().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmonto_vendidoVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getmonto_vendido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto_vendido = "+this.vendedor.getmonto_vendido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_facturasVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getnumero_facturas()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_facturas = "+this.vendedor.getnumero_facturas().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_ultima_ventaVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getfecha_ultima_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_ultima_venta = '"+Funciones2.getStringPostgresDate(this.vendedor.getfecha_ultima_venta())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmonto_ultima_ventaVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getmonto_ultima_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto_ultima_venta = "+this.vendedor.getmonto_ultima_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_presupuestoVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getcon_presupuesto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_presupuesto = "+this.vendedor.getcon_presupuesto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_coberturaVendedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosVendedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualVendedor(this.getvendedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.vendedor==null) {
						this.vendedor = new Vendedor();
					}

					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);
				}

				if(this.vendedor.getcon_cobertura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_cobertura = "+this.vendedor.getcon_cobertura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingVendedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorCodigoVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsBusquedaPorCodigo();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNombreVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsBusquedaPorNombre();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorRucVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsBusquedaPorRuc();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCiudadVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsFK_IdCiudad();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsFK_IdEmpleado();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoSoporteVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsFK_IdEmpleadoSoporte();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsFK_IdEmpresa();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPaisVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsFK_IdPais();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsFK_IdSucursal();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdVendedorVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsFK_IdVendedor();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdZonaVendedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingVendedor(false,false);

			this.getVendedorsFK_IdZona();

			this.inicializarActualizarBindingVendedor(false);

			//if(VendedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingVendedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.vendedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameVendedor() {
		if(this.jInternalFrameDetalleFormVendedor!=null) {
		

		if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormVendedor!=null) {
			this.jInternalFrameDetalleFormVendedor.setVisible(false);	    			
			this.jInternalFrameDetalleFormVendedor.dispose();
			this.jInternalFrameDetalleFormVendedor=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoVendedor!=null) {
			this.jInternalFrameReporteDinamicoVendedor.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoVendedor.dispose();
			this.jInternalFrameReporteDinamicoVendedor=null;
		}
		
		if(this.jInternalFrameImportacionVendedor!=null) {
			this.jInternalFrameImportacionVendedor.setVisible(false);	    			
			this.jInternalFrameImportacionVendedor.dispose();
			this.jInternalFrameImportacionVendedor=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	public void closingTreeFrameVendedor() {
		
		if(this.jInternalFrameTreeVendedor!=null) {
			this.jInternalFrameTreeVendedor.setVisible(false);	    			
			this.jInternalFrameTreeVendedor.dispose();
			this.jInternalFrameTreeVendedor=null;
		}
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessVendedor();
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			
			if(sTipo.equals("NuevoVendedor")) {
				jButtonNuevoVendedorActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarVendedor")) {
				jButtonDuplicarVendedorActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarVendedor")) {
				jButtonCopiarVendedorActionPerformed(evt);
			} else if(sTipo.equals("VerFormVendedor")) {
				jButtonVerFormVendedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarVendedor")) {
				jButtonNuevoVendedorActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarVendedor")) {
				jButtonDuplicarVendedorActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoVendedor")) {
				jButtonNuevoVendedorActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarVendedor")) {
				jButtonDuplicarVendedorActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesVendedor")) {
				jButtonNuevoVendedorActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarVendedor")) {
				jButtonNuevoVendedorActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesVendedor")) {
				jButtonNuevoVendedorActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarVendedor")) {
				jButtonModificarVendedorActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarVendedor")) {
				jButtonModificarVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarVendedor")) {
				jButtonModificarVendedorActionPerformed(evt);
			} else if(sTipo.equals("ActualizarVendedor")) {
				jButtonActualizarVendedorActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarVendedor")) {
				jButtonActualizarVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarVendedor")) {
				jButtonActualizarVendedorActionPerformed(evt);
			} else if(sTipo.equals("EliminarVendedor")) {
				jButtonEliminarVendedorActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarVendedor")) {
				jButtonEliminarVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarVendedor")) {
				jButtonEliminarVendedorActionPerformed(evt);
			} else if(sTipo.equals("CancelarVendedor")) {
				jButtonCancelarVendedorActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarVendedor")) {
				jButtonCancelarVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarVendedor")) {
				jButtonCancelarVendedorActionPerformed(evt);
			} else if(sTipo.equals("CerrarVendedor")) {
				jButtonCerrarVendedorActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarVendedor")) {
				jButtonCerrarVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarVendedor")) {
				jButtonCerrarVendedorActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarVendedor")) {
				jButtonMostrarOcultarVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarVendedor")) {
				jButtonCancelarVendedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosVendedor")) {
				jButtonGuardarCambiosVendedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarVendedor")) {
				jButtonGuardarCambiosVendedorActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarVendedor")) {
				jButtonCopiarVendedorActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarVendedor")) {
				jButtonVerFormVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosVendedor")) {
				jButtonGuardarCambiosVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarVendedor")) {
				jButtonCopiarVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormVendedor")) {
				jButtonVerFormVendedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaVendedor")) {
				jButtonGuardarCambiosVendedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarVendedor")) {
				jButtonGuardarCambiosVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaVendedor")) {
				jButtonGuardarCambiosVendedorActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionVendedor")) {
				jButtonRecargarInformacionVendedorActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarVendedor")) {
				jButtonRecargarInformacionVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionVendedor")) {
				jButtonRecargarInformacionVendedorActionPerformed(evt);
			}
			else if(sTipo.equals("ArbolVendedor")) {
				jButtonArbolVendedorActionPerformed(evt);
			} 
			else if(sTipo.equals("AnterioresVendedor")) {
				jButtonAnterioresVendedorActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarVendedor")) {
				jButtonAnterioresVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreVendedor")) {
				jButtonAnterioresVendedorActionPerformed(evt);
			} else if(sTipo.equals("SiguientesVendedor")) {
				jButtonSiguientesVendedorActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarVendedor")) {
				jButtonSiguientesVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesVendedor")) {
				jButtonSiguientesVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByVendedor") || sTipo.equals("MenuItemDetalleAbrirOrderByVendedor")) {
				jButtonAbrirOrderByVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarVendedor") || sTipo.equals("MenuItemDetalleMostrarOcultarVendedor")) {
				jButtonMostrarOcultarVendedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosVendedor")) {
				jButtonNuevoGuardarCambiosVendedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarVendedor")) {
				jButtonNuevoGuardarCambiosVendedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosVendedor")) {
				jButtonNuevoGuardarCambiosVendedorActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoVendedor")) {
				jButtonCerrarReporteDinamicoVendedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoVendedor")) {
				jButtonGenerarReporteDinamicoVendedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoVendedor")) {
				
				jButtonGenerarExcelReporteDinamicoVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionVendedor")) {
				jButtonCerrarImportacionVendedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionVendedor")) {
				
				jButtonGenerarImportacionVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionVendedor")) {
				
				jButtonAbrirImportacionVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesVendedor")) {
				jComboBoxTiposAccionesVendedorActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesVendedor")) {
				jComboBoxTiposRelacionesVendedorActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioVendedor")) {
				jComboBoxTiposAccionesVendedorActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarVendedor")) {
				
				jComboBoxTiposSeleccionarVendedorActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralVendedor")) {
				jTextFieldValorCampoGeneralVendedorActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByVendedor")) {
				jButtonAbrirOrderByVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarVendedor")) {
				jButtonAbrirOrderByVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByVendedor")) {
				jButtonCerrarOrderByVendedorActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idVendedorBusqueda")) {
				this.jButtonidVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaVendedorUpdate")) {
				this.jButtonid_empresaVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaVendedorBusqueda")) {
				this.jButtonid_empresaVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalVendedorUpdate")) {
				this.jButtonid_sucursalVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalVendedorBusqueda")) {
				this.jButtonid_sucursalVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoVendedorBusqueda")) {
				this.jButtoncodigoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreVendedorBusqueda")) {
				this.jButtonnombreVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucVendedorBusqueda")) {
				this.jButtonrucVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("emailVendedorBusqueda")) {
				this.jButtonemailVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoVendedor")) {
				this.jButtonid_empleadoVendedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoVendedorUpdate")) {
				this.jButtonid_empleadoVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoVendedorBusqueda")) {
				this.jButtonid_empleadoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoVendedorBusqueda")) {
				this.jButtontelefonoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleado_soporteVendedor")) {
				this.jButtonid_empleado_soporteVendedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleado_soporteVendedorUpdate")) {
				this.jButtonid_empleado_soporteVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleado_soporteVendedorBusqueda")) {
				this.jButtonid_empleado_soporteVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorVendedorUpdate")) {
				this.jButtonid_vendedorVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorVendedorBusqueda")) {
				this.jButtonid_vendedorVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisVendedorUpdate")) {
				this.jButtonid_paisVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisVendedorBusqueda")) {
				this.jButtonid_paisVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadVendedorUpdate")) {
				this.jButtonid_ciudadVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadVendedorBusqueda")) {
				this.jButtonid_ciudadVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_zonaVendedorUpdate")) {
				this.jButtonid_zonaVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_zonaVendedorBusqueda")) {
				this.jButtonid_zonaVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("representanteVendedorBusqueda")) {
				this.jButtonrepresentanteVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_supervisorVendedorBusqueda")) {
				this.jButtones_supervisorVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_creacionVendedorBusqueda")) {
				this.jButtonfecha_creacionVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_domicilioVendedorBusqueda")) {
				this.jButtondireccion_domicilioVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_referenciaVendedorBusqueda")) {
				this.jButtondireccion_referenciaVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionVendedorBusqueda")) {
				this.jButtondescripcionVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_comisionVendedorBusqueda")) {
				this.jButtonporcentaje_comisionVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("comisionVendedorBusqueda")) {
				this.jButtoncomisionVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_vendidoVendedorBusqueda")) {
				this.jButtonmonto_vendidoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturasVendedorBusqueda")) {
				this.jButtonnumero_facturasVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_ultima_ventaVendedorBusqueda")) {
				this.jButtonfecha_ultima_ventaVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_ultima_ventaVendedorBusqueda")) {
				this.jButtonmonto_ultima_ventaVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_presupuestoVendedorBusqueda")) {
				this.jButtoncon_presupuestoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_coberturaVendedorBusqueda")) {
				this.jButtoncon_coberturaVendedorBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("BusquedaPorCodigoVendedor")) {
				this.jButtonBusquedaPorCodigoVendedorActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNombreVendedor")) {
				this.jButtonBusquedaPorNombreVendedorActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorRucVendedor")) {
				this.jButtonBusquedaPorRucVendedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPaisVendedor")) {
				this.jButtonFK_IdPaisVendedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdVendedorVendedor")) {
				this.jButtonFK_IdVendedorVendedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdZonaVendedor")) {
				this.jButtonFK_IdZonaVendedorActionPerformed(evt);
			}
			
			;
			
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessVendedor();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaVendedorActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				


				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			Vendedor vendedorLocal=null;
			
			if(!this.getEsControlTabla()) {
				vendedorLocal=this.vendedor;
			} else {
				vendedorLocal=this.vendedorAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
							
				
				


				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaVendedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorAnterior =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.vendedorAnterior =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaVendedorActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
								
						
				


				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
								
				
				


				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaVendedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorAnterior =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.vendedorAnterior =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaVendedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorAnterior =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.vendedorAnterior =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaVendedorActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
							
				
				


				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaVendedorActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedorAnterior =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.vendedorAnterior =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaVendedorActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
								
				
				


				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaVendedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorAnterior =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.vendedorAnterior =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaVendedorActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaVendedorActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosVendedor")) {
					jCheckBoxSeleccionarTodosVendedorItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosVendedor")) {
					jCheckBoxSeleccionadosVendedorItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarVendedor")) {
					
				}
				
				


				
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
												
				
				


				
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaVendedorActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.vendedorAnterior =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.vendedorAnterior =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaVendedorActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_paisVendedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor;
				}

				if(this.vendedorSessionBean.getConGuardarRelaciones()) {
					//classes=VendedorConstantesFunciones.getClassesRelationshipsOfVendedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyPais(jComboBoxGenerico,"Formulario");

				this.recargarFormVendedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_paisFK_IdPaisVendedor")) {
				this.procesarActionsCombosForeignKeyPais(jComboBoxid_paisFK_IdPaisVendedor,"FK_IdPais");
				//recargarFormVendedorPais(jComboBoxid_paisFK_IdPaisVendedor,"FK_IdPais");
			}
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaVendedorActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_paisVendedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor;
				}

				if(this.vendedorSessionBean.getConGuardarRelaciones()) {
					//classes=VendedorConstantesFunciones.getClassesRelationshipsOfVendedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyPais(jComboBoxGenerico,"Formulario");

				this.recargarFormVendedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_paisFK_IdPaisVendedor")) {
				this.procesarActionsCombosForeignKeyPais(jComboBoxid_paisFK_IdPaisVendedor,"FK_IdPais");
				//recargarFormVendedorPais(jComboBoxid_paisFK_IdPaisVendedor,"FK_IdPais");
			}
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.vendedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.vendedor);
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_paisVendedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor;
				}

				if(this.vendedorSessionBean.getConGuardarRelaciones()) {
					//classes=VendedorConstantesFunciones.getClassesRelationshipsOfVendedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyPais(jComboBoxGenerico,"Formulario");

				this.recargarFormVendedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_paisFK_IdPaisVendedor")) {
				this.procesarActionsCombosForeignKeyPais(jComboBoxid_paisFK_IdPaisVendedor,"FK_IdPais");
				//recargarFormVendedorPais(jComboBoxid_paisFK_IdPaisVendedor,"FK_IdPais");
			}
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Vendedor.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Vendedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaVendedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.vendedorAnterior =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.vendedorAnterior =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarVendedor")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosVendedorListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosVendedor.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.vendedor =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.vendedor =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.vendedor);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarVendedor")) {
				
				}
				
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarVendedor")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosVendedor.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarVendedor")) {
			
			}
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessVendedor();
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			if(sTipo.equals("NuevoVendedor")) {
				jButtonNuevoVendedorActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarVendedor")) {
				jButtonDuplicarVendedorActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarVendedor")) {
				jButtonCopiarVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormVendedor")) {
				jButtonVerFormVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesVendedor")) {
				jButtonNuevoVendedorActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarVendedor")) {
				jButtonModificarVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarVendedor")) {
				jButtonActualizarVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarVendedor")) {
				jButtonEliminarVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaVendedor")) {
				jButtonGuardarCambiosVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarVendedor")) {
				jButtonCancelarVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarVendedor")) {
				jButtonCerrarVendedorActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosVendedor")) {
				jButtonGuardarCambiosVendedorActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosVendedor")) {
				jButtonNuevoGuardarCambiosVendedorActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByVendedor")) {
				jButtonAbrirOrderByVendedorActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionVendedor")) {
				jButtonRecargarInformacionVendedorActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresVendedor")) {
				jButtonAnterioresVendedorActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesVendedor")) {
				jButtonSiguientesVendedorActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idVendedorBusqueda")) {
				this.jButtonidVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaVendedorUpdate")) {
				this.jButtonid_empresaVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaVendedorBusqueda")) {
				this.jButtonid_empresaVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalVendedorUpdate")) {
				this.jButtonid_sucursalVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalVendedorBusqueda")) {
				this.jButtonid_sucursalVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoVendedorBusqueda")) {
				this.jButtoncodigoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreVendedorBusqueda")) {
				this.jButtonnombreVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucVendedorBusqueda")) {
				this.jButtonrucVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("emailVendedorBusqueda")) {
				this.jButtonemailVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoVendedor")) {
				this.jButtonid_empleadoVendedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoVendedorUpdate")) {
				this.jButtonid_empleadoVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoVendedorBusqueda")) {
				this.jButtonid_empleadoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoVendedorBusqueda")) {
				this.jButtontelefonoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleado_soporteVendedor")) {
				this.jButtonid_empleado_soporteVendedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleado_soporteVendedorUpdate")) {
				this.jButtonid_empleado_soporteVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleado_soporteVendedorBusqueda")) {
				this.jButtonid_empleado_soporteVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorVendedorUpdate")) {
				this.jButtonid_vendedorVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorVendedorBusqueda")) {
				this.jButtonid_vendedorVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisVendedorUpdate")) {
				this.jButtonid_paisVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisVendedorBusqueda")) {
				this.jButtonid_paisVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadVendedorUpdate")) {
				this.jButtonid_ciudadVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadVendedorBusqueda")) {
				this.jButtonid_ciudadVendedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_zonaVendedorUpdate")) {
				this.jButtonid_zonaVendedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_zonaVendedorBusqueda")) {
				this.jButtonid_zonaVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("representanteVendedorBusqueda")) {
				this.jButtonrepresentanteVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_supervisorVendedorBusqueda")) {
				this.jButtones_supervisorVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_creacionVendedorBusqueda")) {
				this.jButtonfecha_creacionVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_domicilioVendedorBusqueda")) {
				this.jButtondireccion_domicilioVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_referenciaVendedorBusqueda")) {
				this.jButtondireccion_referenciaVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionVendedorBusqueda")) {
				this.jButtondescripcionVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_comisionVendedorBusqueda")) {
				this.jButtonporcentaje_comisionVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("comisionVendedorBusqueda")) {
				this.jButtoncomisionVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_vendidoVendedorBusqueda")) {
				this.jButtonmonto_vendidoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturasVendedorBusqueda")) {
				this.jButtonnumero_facturasVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_ultima_ventaVendedorBusqueda")) {
				this.jButtonfecha_ultima_ventaVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_ultima_ventaVendedorBusqueda")) {
				this.jButtonmonto_ultima_ventaVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_presupuestoVendedorBusqueda")) {
				this.jButtoncon_presupuestoVendedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_coberturaVendedorBusqueda")) {
				this.jButtoncon_coberturaVendedorBusquedaActionPerformed(evt);
			}
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessVendedor();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameVendedor")) {
				closingInternalFrameVendedor();
				
			} else if(sTipo.equals("jButtonCancelarVendedor")) {
				JInternalFrameBase jInternalFrameDetalleFormVendedor = (JInternalFrameBase)evt.getSource();
	            	
	            VendedorBeanSwingJInternalFrame jInternalFrameParent=(VendedorBeanSwingJInternalFrame)jInternalFrameDetalleFormVendedor.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarVendedorActionPerformed(null);
			}
			
			VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.vendedor,new Object(),this.vendedorParameterGeneral,this.vendedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormVendedor(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormVendedor(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormVendedor(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.vendedor)) {
			if(!esControlTabla) {
				if(VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);			
				}
				
				if(this.vendedorSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualVendedor(this.vendedor,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.vendedorReturnGeneral=vendedorLogic.procesarEventosVendedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.vendedorLogic.getVendedors(),this.vendedor,this.vendedorParameterGeneral,this.isEsNuevoVendedor,classes);//this.vendedorLogic.getVendedor()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanVendedor(this.vendedorReturnGeneral,this.vendedorBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.vendedorSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanVendedor(classes,this.vendedorReturnGeneral,this.vendedorBean,false);
					}
						
					if(this.vendedorReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyVendedor(this.vendedorReturnGeneral.getVendedor());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioVendedor(this.vendedorReturnGeneral.getVendedor());	
					}
						
					if(this.vendedorReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioVendedor(this.vendedorReturnGeneral.getVendedor(),classes);//this.vendedorBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioVendedor(this.vendedor,classes);//this.vendedorBean);									
				}
			
				if(VendedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualVendedor(this.vendedor,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysVendedor(this.vendedor);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.vendedorAnterior!=null) {
						this.vendedor=this.vendedorAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.vendedorReturnGeneral=vendedorLogic.procesarEventosVendedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.vendedorLogic.getVendedors(),this.vendedor,this.vendedorParameterGeneral,this.isEsNuevoVendedor,classes);//this.vendedorLogic.getVendedor()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.vendedorSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.vendedorSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.vendedorReturnGeneral.getVendedor(),vendedorLogic.getVendedors());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.vendedorReturnGeneral.getVendedor(),this.vendedors);
				}
				//ARCHITECTURE
				
				//this.jTableDatosVendedor.repaint();
				
				//((AbstractTableModel) this.jTableDatosVendedor.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosVendedor();
			}
		}
	}
	
	public void actualizarVisualTableDatosVendedor() throws Exception {
		
		VendedorModel vendedorModel=(VendedorModel)this.jTableDatosVendedor.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			vendedorModel.vendedors=this.vendedorLogic.getVendedors();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			vendedorModel.vendedors=this.vendedors;
		}
		
		
		((VendedorModel) this.jTableDatosVendedor.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaVendedor() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getvendedorAnterior(),this.vendedorLogic.getVendedors());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getvendedorAnterior(),this.vendedors);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosVendedor();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioVendedor(Vendedor vendedor,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(NotaCreditoSoli.class)) {
					this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.setNotaCreditoSolis(vendedor.getNotaCreditoSolis());
					this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.inicializarActualizarBindingTablaNotaCreditoSoli(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionVentaCobro.class)) {
					this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.setComisionVentaCobros(vendedor.getComisionVentaCobros());
					this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionVentaCobro(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Vendedor.class)) {
					this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.setVendedors(vendedor.getVendedors());
					this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Cliente.class)) {
					this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.setClientes(vendedor.getClientes());
					this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionGrupo.class)) {
					this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.setComisionGrupos(vendedor.getComisionGrupos());
					this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionGrupo(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionLinea.class)) {
					this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.setComisionLineas(vendedor.getComisionLineas());
					this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionLinea(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(VendedorZona.class)) {
					this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.setVendedorZonas(vendedor.getVendedorZonas());
					this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedorZona(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionCate.class)) {
					this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.setComisionCates(vendedor.getComisionCates());
					this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionCate(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajeroTurno.class)) {
					this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.setCajeroTurnos(vendedor.getCajeroTurnos());
					this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajeroTurno(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionMarca.class)) {
					this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.setComisionMarcas(vendedor.getComisionMarcas());
					this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionMarca(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentas.class)) {
					this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.setPresupuestoVentass(vendedor.getPresupuestoVentass());
					this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.inicializarActualizarBindingTablaPresupuestoVentas(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentasLineas.class)) {
					this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.setPresupuestoVentasLineass(vendedor.getPresupuestoVentasLineass());
					this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.inicializarActualizarBindingTablaPresupuestoVentasLineas(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.vendedor,new Object(),generalEntityParameterGeneral,this.vendedorReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.vendedorSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=VendedorConstantesFunciones.getClassesRelationshipsOfVendedor(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=VendedorConstantesFunciones.getClassesRelationshipsFromStringsOfVendedor(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormVendedor(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				VendedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.vendedor,new Object(),generalEntityParameterGeneral,this.vendedorReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioVendedor(VendedorBean vendedorBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(NotaCreditoSoli.class)) {
					this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.setNotaCreditoSolis(vendedor.getNotaCreditoSolis());
					this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.inicializarActualizarBindingTablaNotaCreditoSoli(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionVentaCobro.class)) {
					this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.setComisionVentaCobros(vendedor.getComisionVentaCobros());
					this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionVentaCobro(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Vendedor.class)) {
					this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.setVendedors(vendedor.getVendedors());
					this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Cliente.class)) {
					this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.setClientes(vendedor.getClientes());
					this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionGrupo.class)) {
					this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.setComisionGrupos(vendedor.getComisionGrupos());
					this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionGrupo(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionLinea.class)) {
					this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.setComisionLineas(vendedor.getComisionLineas());
					this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionLinea(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(VendedorZona.class)) {
					this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.setVendedorZonas(vendedor.getVendedorZonas());
					this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedorZona(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionCate.class)) {
					this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.setComisionCates(vendedor.getComisionCates());
					this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionCate(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajeroTurno.class)) {
					this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.setCajeroTurnos(vendedor.getCajeroTurnos());
					this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajeroTurno(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionMarca.class)) {
					this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.setComisionMarcas(vendedor.getComisionMarcas());
					this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.inicializarActualizarBindingTablaComisionMarca(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentas.class)) {
					this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.setPresupuestoVentass(vendedor.getPresupuestoVentass());
					this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.inicializarActualizarBindingTablaPresupuestoVentas(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentasLineas.class)) {
					this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.setPresupuestoVentasLineass(vendedor.getPresupuestoVentasLineass());
					this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.inicializarActualizarBindingTablaPresupuestoVentasLineas(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanVendedor(ArrayList<Classe> classes,VendedorReturnGeneral vendedorReturnGeneral,VendedorBean vendedorBean,Boolean conDefault) throws Exception {
		
			this.vendedorBean.setNotaCreditoSolis(vendedorReturnGeneral.getVendedor().getNotaCreditoSolis());
			this.vendedorBean.setComisionVentaCobros(vendedorReturnGeneral.getVendedor().getComisionVentaCobros());
			this.vendedorBean.setVendedors(vendedorReturnGeneral.getVendedor().getVendedors());
			this.vendedorBean.setClientes(vendedorReturnGeneral.getVendedor().getClientes());
			this.vendedorBean.setComisionGrupos(vendedorReturnGeneral.getVendedor().getComisionGrupos());
			this.vendedorBean.setComisionLineas(vendedorReturnGeneral.getVendedor().getComisionLineas());
			this.vendedorBean.setVendedorZonas(vendedorReturnGeneral.getVendedor().getVendedorZonas());
			this.vendedorBean.setComisionCates(vendedorReturnGeneral.getVendedor().getComisionCates());
			this.vendedorBean.setCajeroTurnos(vendedorReturnGeneral.getVendedor().getCajeroTurnos());
			this.vendedorBean.setComisionMarcas(vendedorReturnGeneral.getVendedor().getComisionMarcas());
			this.vendedorBean.setPresupuestoVentass(vendedorReturnGeneral.getVendedor().getPresupuestoVentass());
			this.vendedorBean.setPresupuestoVentasLineass(vendedorReturnGeneral.getVendedor().getPresupuestoVentasLineass());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualVendedor(Vendedor vendedor,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(NotaCreditoSoli.class)) {
					vendedor.setNotaCreditoSolis(this.jInternalFrameDetalleFormVendedor.notacreditosoliBeanSwingJInternalFrame.notacreditosoliLogic.getNotaCreditoSolis());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionVentaCobro.class)) {
					vendedor.setComisionVentaCobros(this.jInternalFrameDetalleFormVendedor.comisionventacobroBeanSwingJInternalFrame.comisionventacobroLogic.getComisionVentaCobros());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Vendedor.class)) {
					vendedor.setVendedors(this.jInternalFrameDetalleFormVendedor.vendedorBeanSwingJInternalFrame.vendedorLogic.getVendedors());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Cliente.class)) {
					vendedor.setClientes(this.jInternalFrameDetalleFormVendedor.clienteBeanSwingJInternalFrame.clienteLogic.getClientes());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionGrupo.class)) {
					vendedor.setComisionGrupos(this.jInternalFrameDetalleFormVendedor.comisiongrupoBeanSwingJInternalFrame.comisiongrupoLogic.getComisionGrupos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionLinea.class)) {
					vendedor.setComisionLineas(this.jInternalFrameDetalleFormVendedor.comisionlineaBeanSwingJInternalFrame.comisionlineaLogic.getComisionLineas());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(VendedorZona.class)) {
					vendedor.setVendedorZonas(this.jInternalFrameDetalleFormVendedor.vendedorzonaBeanSwingJInternalFrame.vendedorzonaLogic.getVendedorZonas());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionCate.class)) {
					vendedor.setComisionCates(this.jInternalFrameDetalleFormVendedor.comisioncateBeanSwingJInternalFrame.comisioncateLogic.getComisionCates());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajeroTurno.class)) {
					vendedor.setCajeroTurnos(this.jInternalFrameDetalleFormVendedor.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ComisionMarca.class)) {
					vendedor.setComisionMarcas(this.jInternalFrameDetalleFormVendedor.comisionmarcaBeanSwingJInternalFrame.comisionmarcaLogic.getComisionMarcas());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentas.class)) {
					vendedor.setPresupuestoVentass(this.jInternalFrameDetalleFormVendedor.presupuestoventasBeanSwingJInternalFrame.presupuestoventasLogic.getPresupuestoVentass());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentasLineas.class)) {
					vendedor.setPresupuestoVentasLineass(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasBeanSwingJInternalFrame.presupuestoventaslineasLogic.getPresupuestoVentasLineass());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.vendedor)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormVendedor = new VendedorDetalleFormJInternalFrame(jDesktopPane,this.vendedorSessionBean.getConGuardarRelaciones(),this.vendedorSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormVendedor);
		this.jInternalFrameDetalleFormVendedor.setVisible(false);
		this.jInternalFrameDetalleFormVendedor.setSelected(false);						
		
		this.jInternalFrameDetalleFormVendedor.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormVendedor.vendedorLogic=this.vendedorLogic;
		
		this.cargarCombosFrameForeignKeyVendedor("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleVendedor();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleVendedor();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyVendedor("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyVendedor();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormVendedor.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarVendedor"));
		
		this.jInternalFrameDetalleFormVendedor.jButtonModificarVendedor.addActionListener(new ButtonActionListener(this,"ModificarVendedor"));

		
		this.jInternalFrameDetalleFormVendedor.jButtonModificarToolBarVendedor.addActionListener(new ButtonActionListener(this,"ModificarToolBarVendedor"));
					
		this.jInternalFrameDetalleFormVendedor.jMenuItemModificarVendedor.addActionListener(new ButtonActionListener(this,"MenuItemModificarVendedor"));		
		
		
		
		this.jInternalFrameDetalleFormVendedor.jButtonActualizarVendedor.addActionListener (new ButtonActionListener(this,"ActualizarVendedor"));
		
		
		this.jInternalFrameDetalleFormVendedor.jButtonActualizarToolBarVendedor.addActionListener(new ButtonActionListener(this,"ActualizarToolBarVendedor"));
						
		this.jInternalFrameDetalleFormVendedor.jMenuItemActualizarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemActualizarVendedor"));		
		
		
		
		this.jInternalFrameDetalleFormVendedor.jButtonEliminarVendedor.addActionListener (new ButtonActionListener(this,"EliminarVendedor"));
		
		
		this.jInternalFrameDetalleFormVendedor.jButtonEliminarToolBarVendedor.addActionListener (new ButtonActionListener(this,"EliminarToolBarVendedor"));
								
		this.jInternalFrameDetalleFormVendedor.jMenuItemEliminarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemEliminarVendedor"));		
		
		
		
		this.jInternalFrameDetalleFormVendedor.jButtonCancelarVendedor.addActionListener (new ButtonActionListener(this,"CancelarVendedor"));
		
		
		this.jInternalFrameDetalleFormVendedor.jButtonCancelarToolBarVendedor.addActionListener (new ButtonActionListener(this,"CancelarToolBarVendedor"));
					
		this.jInternalFrameDetalleFormVendedor.jMenuItemCancelarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemCancelarVendedor"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormVendedor.jMenuItemDetalleCerrarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarVendedor"));		
		
		
		
		this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosToolBarVendedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarVendedor"));
		
		
		
		this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosToolBarVendedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarVendedor"));
		
		
		
		this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioVendedor"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonidVendedorBusqueda.addActionListener(new ButtonActionListener(this,"idVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empresaVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empresaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_sucursalVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_sucursalVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncodigoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"codigoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonnombreVendedorBusqueda.addActionListener(new ButtonActionListener(this,"nombreVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonrucVendedorBusqueda.addActionListener(new ButtonActionListener(this,"rucVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonemailVendedorBusqueda.addActionListener(new ButtonActionListener(this,"emailVendedorBusqueda"));
		//jButtonid_empleadoVendedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoVendedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedor.addActionListener(new ButtonActionListener(this,"id_empleadoVendedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtontelefonoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"telefonoVendedorBusqueda"));
		//jButtonid_empleado_soporteVendedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_soporteVendedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedor.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_vendedorVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_vendedorVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_paisVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_paisVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_paisVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_paisVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_ciudadVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_ciudadVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_zonaVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_zonaVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_zonaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_zonaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonrepresentanteVendedorBusqueda.addActionListener(new ButtonActionListener(this,"representanteVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtones_supervisorVendedorBusqueda.addActionListener(new ButtonActionListener(this,"es_supervisorVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonfecha_creacionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_creacionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondireccion_domicilioVendedorBusqueda.addActionListener(new ButtonActionListener(this,"direccion_domicilioVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondireccion_referenciaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"direccion_referenciaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondescripcionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonporcentaje_comisionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_comisionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncomisionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"comisionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonmonto_vendidoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"monto_vendidoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonnumero_facturasVendedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturasVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonfecha_ultima_ventaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ultima_ventaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonmonto_ultima_ventaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"monto_ultima_ventaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncon_presupuestoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"con_presupuestoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncon_coberturaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"con_coberturaVendedorBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesVendedor"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameVendedor"));
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarVendedor"));
		}
		
		this.jTableDatosVendedor.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarVendedor"));
		
		this.jTableDatosVendedor.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarVendedor"));
		
		this.jButtonNuevoVendedor.addActionListener(new ButtonActionListener(this,"NuevoVendedor"));
		
		this.jButtonDuplicarVendedor.addActionListener(new ButtonActionListener(this,"DuplicarVendedor"));
		
		this.jButtonCopiarVendedor.addActionListener(new ButtonActionListener(this,"CopiarVendedor"));
		
		this.jButtonVerFormVendedor.addActionListener(new ButtonActionListener(this,"VerFormVendedor"));
		
		
		this.jButtonNuevoToolBarVendedor.addActionListener(new ButtonActionListener(this,"NuevoToolBarVendedor"));
			
		this.jButtonDuplicarToolBarVendedor.addActionListener(new ButtonActionListener(this,"DuplicarToolBarVendedor"));
			
		this.jMenuItemNuevoVendedor.addActionListener (new ButtonActionListener(this,"MenuItemNuevoVendedor"));
			
		this.jMenuItemDuplicarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarVendedor"));		
		
		
		this.jButtonNuevoRelacionesVendedor.addActionListener (new ButtonActionListener(this,"NuevoRelacionesVendedor"));
		
		
		this.jButtonNuevoRelacionesToolBarVendedor.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarVendedor"));
			
		this.jMenuItemNuevoRelacionesVendedor.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesVendedor"));		
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonModificarVendedor.addActionListener(new ButtonActionListener(this,"ModificarVendedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonModificarToolBarVendedor.addActionListener(new ButtonActionListener(this,"ModificarToolBarVendedor"));
			
			this.jInternalFrameDetalleFormVendedor.jMenuItemModificarVendedor.addActionListener(new ButtonActionListener(this,"MenuItemModificarVendedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormVendedor.jButtonActualizarVendedor.addActionListener (new ButtonActionListener(this,"ActualizarVendedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonActualizarToolBarVendedor.addActionListener(new ButtonActionListener(this,"ActualizarToolBarVendedor"));
				
			this.jInternalFrameDetalleFormVendedor.jMenuItemActualizarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemActualizarVendedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonEliminarVendedor.addActionListener (new ButtonActionListener(this,"EliminarVendedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonEliminarToolBarVendedor.addActionListener (new ButtonActionListener(this,"EliminarToolBarVendedor"));
						
			this.jInternalFrameDetalleFormVendedor.jMenuItemEliminarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemEliminarVendedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonCancelarVendedor.addActionListener (new ButtonActionListener(this,"CancelarVendedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonCancelarToolBarVendedor.addActionListener (new ButtonActionListener(this,"CancelarToolBarVendedor"));
			
			this.jInternalFrameDetalleFormVendedor.jMenuItemCancelarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemCancelarVendedor"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarVendedor.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarVendedor"));		
		
		
		this.jButtonCerrarVendedor.addActionListener (new ButtonActionListener(this,"CerrarVendedor"));
		
		
		this.jButtonCerrarToolBarVendedor.addActionListener (new ButtonActionListener(this,"CerrarToolBarVendedor"));
			
		this.jMenuItemCerrarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemCerrarVendedor"));
			
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jMenuItemDetalleCerrarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarVendedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosVendedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosVendedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosToolBarVendedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarVendedor"));
		}
		
		this.jButtonCopiarToolBarVendedor.addActionListener (new ButtonActionListener(this,"CopiarToolBarVendedor"));
			
		this.jButtonVerFormToolBarVendedor.addActionListener (new ButtonActionListener(this,"VerFormToolBarVendedor"));
		
		this.jMenuItemGuardarCambiosVendedor.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosVendedor"));
			
		this.jMenuItemCopiarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemCopiarVendedor"));		
		
		this.jMenuItemVerFormVendedor.addActionListener (new ButtonActionListener(this,"MenuItemVerFormVendedor"));		
		
		
		this.jButtonGuardarCambiosTablaVendedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaVendedor"));
		
		
		this.jButtonGuardarCambiosTablaToolBarVendedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarVendedor"));
			
		this.jMenuItemGuardarCambiosTablaVendedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaVendedor"));		
		
		
		
		this.jButtonRecargarInformacionVendedor.addActionListener (new ButtonActionListener(this,"RecargarInformacionVendedor"));
					
		this.jButtonRecargarInformacionToolBarVendedor.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarVendedor"));
		
		this.jMenuItemRecargarInformacionVendedor.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionVendedor"));		
		
		
		this.jButtonArbolVendedor.addActionListener (new ButtonActionListener(this,"ArbolVendedor"));
		
		this.jButtonAnterioresVendedor.addActionListener (new ButtonActionListener(this,"AnterioresVendedor"));
		
		
		this.jButtonAnterioresToolBarVendedor.addActionListener (new ButtonActionListener(this,"AnterioresToolBarVendedor"));
		
		this.jMenuItemAnterioresVendedor.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresVendedor"));		
		
		
		this.jButtonSiguientesVendedor.addActionListener (new ButtonActionListener(this,"SiguientesVendedor"));
		
		
		this.jButtonSiguientesToolBarVendedor.addActionListener (new ButtonActionListener(this,"SiguientesToolBarVendedor"));
			
		this.jMenuItemSiguientesVendedor.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesVendedor"));
			
		this.jMenuItemAbrirOrderByVendedor.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByVendedor"));
			
		this.jMenuItemMostrarOcultarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarVendedor"));
			
		this.jMenuItemDetalleAbrirOrderByVendedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByVendedor"));
			
		this.jMenuItemDetalleMostarOcultarVendedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarVendedor"));		
		
		
		this.jButtonNuevoGuardarCambiosVendedor.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosVendedor"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarVendedor.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarVendedor"));
			
		this.jMenuItemNuevoGuardarCambiosVendedor.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosVendedor"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosVendedor.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosVendedor"));

		this.jCheckBoxSeleccionadosVendedor.addItemListener(new CheckBoxItemListener(this,"SeleccionadosVendedor"));
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioVendedor"));
		}
		
		
		this.jComboBoxTiposRelacionesVendedor.addActionListener (new ButtonActionListener(this,"TiposRelacionesVendedor"));
			
		this.jComboBoxTiposAccionesVendedor.addActionListener (new ButtonActionListener(this,"TiposAccionesVendedor"));
					
		this.jComboBoxTiposSeleccionarVendedor.addActionListener (new ButtonActionListener(this,"TiposSeleccionarVendedor"));
			
		this.jTextFieldValorCampoGeneralVendedor.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralVendedor"));		
		
		
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonidVendedorBusqueda.addActionListener(new ButtonActionListener(this,"idVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empresaVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empresaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_sucursalVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_sucursalVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncodigoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"codigoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonnombreVendedorBusqueda.addActionListener(new ButtonActionListener(this,"nombreVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonrucVendedorBusqueda.addActionListener(new ButtonActionListener(this,"rucVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonemailVendedorBusqueda.addActionListener(new ButtonActionListener(this,"emailVendedorBusqueda"));
		//jButtonid_empleadoVendedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoVendedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedor.addActionListener(new ButtonActionListener(this,"id_empleadoVendedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtontelefonoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"telefonoVendedorBusqueda"));
		//jButtonid_empleado_soporteVendedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_soporteVendedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedor.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_vendedorVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_vendedorVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_paisVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_paisVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_paisVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_paisVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_ciudadVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_ciudadVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_zonaVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_zonaVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_zonaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_zonaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonrepresentanteVendedorBusqueda.addActionListener(new ButtonActionListener(this,"representanteVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtones_supervisorVendedorBusqueda.addActionListener(new ButtonActionListener(this,"es_supervisorVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonfecha_creacionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_creacionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondireccion_domicilioVendedorBusqueda.addActionListener(new ButtonActionListener(this,"direccion_domicilioVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondireccion_referenciaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"direccion_referenciaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondescripcionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonporcentaje_comisionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_comisionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncomisionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"comisionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonmonto_vendidoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"monto_vendidoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonnumero_facturasVendedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturasVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonfecha_ultima_ventaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ultima_ventaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonmonto_ultima_ventaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"monto_ultima_ventaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncon_presupuestoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"con_presupuestoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncon_coberturaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"con_coberturaVendedorBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorCodigoVendedor.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoVendedor"));

			this.jButtonBusquedaPorNombreVendedor.addActionListener(new ButtonActionListener(this,"BusquedaPorNombreVendedor"));

			this.jButtonBusquedaPorRucVendedor.addActionListener(new ButtonActionListener(this,"BusquedaPorRucVendedor"));

			this.jButtonFK_IdPaisVendedor.addActionListener(new ButtonActionListener(this,"FK_IdPaisVendedor"));

			this.jButtonFK_IdVendedorVendedor.addActionListener(new ButtonActionListener(this,"FK_IdVendedorVendedor"));

			this.jButtonFK_IdZonaVendedor.addActionListener(new ButtonActionListener(this,"FK_IdZonaVendedor"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoVendedor!=null) {
				this.jInternalFrameReporteDinamicoVendedor.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoVendedor"));
				this.jInternalFrameReporteDinamicoVendedor.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoVendedor"));
				this.jInternalFrameReporteDinamicoVendedor.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoVendedor"));
			}
			
			//this.jButtonCerrarReporteDinamicoVendedor.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoVendedor"));				
			//this.jButtonGenerarReporteDinamicoVendedor.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoVendedor"));
			//this.jButtonGenerarExcelReporteDinamicoVendedor.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoVendedor"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionVendedor!=null) {
				this.jInternalFrameImportacionVendedor.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionVendedor"));
				this.jInternalFrameImportacionVendedor.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionVendedor"));
				this.jInternalFrameImportacionVendedor.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionVendedor"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByVendedor.addActionListener (new ButtonActionListener(this,"AbrirOrderByVendedor"));
			
			this.jButtonAbrirOrderByToolBarVendedor.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarVendedor"));			
			
			if(this.jInternalFrameOrderByVendedor!=null) {
				this.jInternalFrameOrderByVendedor.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByVendedor"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormVendedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormVendedor.jTabbedPaneRelacionesVendedor.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesVendedor"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameVendedor();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormVendedor.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormVendedor = (JInternalFrameBase)event.getSource();
	            	
	            VendedorBeanSwingJInternalFrame jInternalFrameParent=(VendedorBeanSwingJInternalFrame)jInternalFrameDetalleFormVendedor.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarVendedorActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosVendedor.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosVendedorListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosVendedor.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosVendedor.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoVendedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoVendedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoVendedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoVendedor";
		inputMap = this.jButtonNuevoVendedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoVendedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoVendedorActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoVendedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoVendedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoVendedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesVendedor";
		inputMap = this.jButtonNuevoRelacionesVendedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesVendedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoVendedorActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarVendedor";
		inputMap = this.jButtonModificarVendedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarVendedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarVendedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarVendedor";
		inputMap = this.jButtonActualizarVendedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarVendedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarVendedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarVendedor";
		inputMap = this.jButtonEliminarVendedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarVendedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarVendedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarVendedor";
		inputMap = this.jButtonCancelarVendedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarVendedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarVendedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarVendedor";
		inputMap = this.jButtonCerrarVendedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarVendedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarVendedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosVendedor";
		inputMap = this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosVendedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormVendedor.jButtonGuardarCambiosVendedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosVendedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonArbolVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonArbolVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosVendedor.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosVendedorItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesVendedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesVendedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarVendedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarVendedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralVendedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralVendedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonidVendedorBusqueda.addActionListener(new ButtonActionListener(this,"idVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empresaVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empresaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_sucursalVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_sucursalVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncodigoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"codigoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonnombreVendedorBusqueda.addActionListener(new ButtonActionListener(this,"nombreVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonrucVendedorBusqueda.addActionListener(new ButtonActionListener(this,"rucVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonemailVendedorBusqueda.addActionListener(new ButtonActionListener(this,"emailVendedorBusqueda"));
		//jButtonid_empleadoVendedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoVendedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedor.addActionListener(new ButtonActionListener(this,"id_empleadoVendedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtontelefonoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"telefonoVendedorBusqueda"));
		//jButtonid_empleado_soporteVendedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_soporteVendedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedor.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_soporteVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_vendedorVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_vendedorVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_paisVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_paisVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_paisVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_paisVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_ciudadVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_ciudadVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadVendedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormVendedor.jButtonid_zonaVendedorUpdate.addActionListener(new ButtonActionListener(this,"id_zonaVendedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonid_zonaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"id_zonaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonrepresentanteVendedorBusqueda.addActionListener(new ButtonActionListener(this,"representanteVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtones_supervisorVendedorBusqueda.addActionListener(new ButtonActionListener(this,"es_supervisorVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonfecha_creacionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_creacionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondireccion_domicilioVendedorBusqueda.addActionListener(new ButtonActionListener(this,"direccion_domicilioVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondireccion_referenciaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"direccion_referenciaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtondescripcionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonporcentaje_comisionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_comisionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncomisionVendedorBusqueda.addActionListener(new ButtonActionListener(this,"comisionVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonmonto_vendidoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"monto_vendidoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonnumero_facturasVendedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturasVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonfecha_ultima_ventaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ultima_ventaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtonmonto_ultima_ventaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"monto_ultima_ventaVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncon_presupuestoVendedorBusqueda.addActionListener(new ButtonActionListener(this,"con_presupuestoVendedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormVendedor.jButtoncon_coberturaVendedorBusqueda.addActionListener(new ButtonActionListener(this,"con_coberturaVendedorBusqueda"));
		
		
		this.jButtonBusquedaPorCodigoVendedor.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoVendedor"));

		this.jButtonBusquedaPorNombreVendedor.addActionListener(new ButtonActionListener(this,"BusquedaPorNombreVendedor"));

		this.jButtonBusquedaPorRucVendedor.addActionListener(new ButtonActionListener(this,"BusquedaPorRucVendedor"));

		this.jButtonFK_IdPaisVendedor.addActionListener(new ButtonActionListener(this,"FK_IdPaisVendedor"));

		this.jButtonFK_IdVendedorVendedor.addActionListener(new ButtonActionListener(this,"FK_IdVendedorVendedor"));

		this.jButtonFK_IdZonaVendedor.addActionListener(new ButtonActionListener(this,"FK_IdZonaVendedor"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionVendedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionVendedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarVendedorActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarVendedor.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosVendedor(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
					vendedorAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Vendedor vendedorAux:vendedors) {
					vendedorAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosVendedorItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingVendedor(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
						vendedorAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Vendedor vendedorAux:vendedors) {
						vendedorAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
					
						if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_ESSUPERVISOR)) {
							existe=true;
							vendedorAux.setes_supervisor(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CONPRESUPUESTO)) {
							existe=true;
							vendedorAux.setcon_presupuesto(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CONCOBERTURA)) {
							existe=true;
							vendedorAux.setcon_cobertura(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Vendedor vendedorAux:vendedors) {
						
						if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_ESSUPERVISOR)) {
							existe=true;
							vendedorAux.setes_supervisor(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CONPRESUPUESTO)) {
							existe=true;
							vendedorAux.setcon_presupuesto(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CONCOBERTURA)) {
							existe=true;
							vendedorAux.setcon_cobertura(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaVendedor(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosVendedor.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosVendedor.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosVendedor,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosVendedorItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingVendedor(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosVendedor.getSelectedRows();
			
			Vendedor vendedorLocal=new Vendedor();
			
			//this.seleccionarTodosVendedor(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLocal =(Vendedor) this.vendedorLogic.getVendedors().toArray()[this.jTableDatosVendedor.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					vendedorLocal =(Vendedor) this.vendedors.toArray()[this.jTableDatosVendedor.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				vendedorLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
						vendedorAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Vendedor vendedorAux:vendedors) {
						vendedorAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaVendedor(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosVendedor.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosVendedor.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosVendedor,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualVendedorItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarVendedorParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralVendedorActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingVendedor(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralVendedor.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Vendedor vendedorAux:this.vendedorLogic.getVendedors()) {
				
						if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							vendedorAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							vendedorAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_RUC)) {
							existe=true;
							vendedorAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_EMAIL)) {
							existe=true;
							vendedorAux.setemail(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							vendedorAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_REPRESENTANTE)) {
							existe=true;
							vendedorAux.setrepresentante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_FECHACREACION)) {
							existe=true;
							vendedorAux.setfecha_creacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO)) {
							existe=true;
							vendedorAux.setdireccion_domicilio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA)) {
							existe=true;
							vendedorAux.setdireccion_referencia(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							vendedorAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION)) {
							existe=true;
							vendedorAux.setporcentaje_comision(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_COMISION)) {
							existe=true;
							vendedorAux.setcomision(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_MONTOVENDIDO)) {
							existe=true;
							vendedorAux.setmonto_vendido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_NUMEROFACTURAS)) {
							existe=true;
							vendedorAux.setnumero_facturas(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA)) {
							existe=true;
							vendedorAux.setfecha_ultima_venta(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA)) {
							existe=true;
							vendedorAux.setmonto_ultima_venta(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Vendedor vendedorAux:vendedors) {
					
						if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							vendedorAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							vendedorAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_RUC)) {
							existe=true;
							vendedorAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_EMAIL)) {
							existe=true;
							vendedorAux.setemail(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							vendedorAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_REPRESENTANTE)) {
							existe=true;
							vendedorAux.setrepresentante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_FECHACREACION)) {
							existe=true;
							vendedorAux.setfecha_creacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO)) {
							existe=true;
							vendedorAux.setdireccion_domicilio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA)) {
							existe=true;
							vendedorAux.setdireccion_referencia(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							vendedorAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION)) {
							existe=true;
							vendedorAux.setporcentaje_comision(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_COMISION)) {
							existe=true;
							vendedorAux.setcomision(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_MONTOVENDIDO)) {
							existe=true;
							vendedorAux.setmonto_vendido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_NUMEROFACTURAS)) {
							existe=true;
							vendedorAux.setnumero_facturas(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA)) {
							existe=true;
							vendedorAux.setfecha_ultima_venta(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA)) {
							existe=true;
							vendedorAux.setmonto_ultima_venta(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaVendedor(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesVendedorActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingVendedor(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioVendedor=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesVendedor.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteVendedor) {				
					conSplash=true;//false;										
					
					//this.startProcessVendedor(conSplash);
				
					this.generarReporteVendedorsSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoVendedorsSeleccionados();
				//this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoVendedorsSeleccionados(false);
				//this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoVendedorsSeleccionados(true);
				//this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessVendedor();
				
				this.exportarVendedorsSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionVendedors();
				//this.importarVendedors();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessVendedor();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelVendedorsSeleccionados();
				//this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Vendedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessVendedor();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoVendedor)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyVendedor(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.setSelectedIndex(0);					
				}	
			} 			
			else if(VendedorBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteVendedor) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessVendedor(conSplash);
					
						//this.actualizarParametrosGeneralVendedor();
						
						this.generarReporteProcesoAccionVendedorsSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(VendedorBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO VendedorES SELECCIONADOS?", "MANTENIMIENTO DE Vendedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessVendedor();
				
						this.actualizarParametrosGeneralVendedor();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.vendedorReturnGeneral=vendedorLogic.procesarAccionVendedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.vendedorLogic.getVendedors(),this.vendedorParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarVendedorReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralVendedor();
					
					VendedorBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarVendedorReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesVendedor.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormVendedor.jComboBoxTiposAccionesFormularioVendedor.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessVendedor(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesVendedorActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessVendedor();
			
			if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		
			Vendedor vendedor=new Vendedor();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingVendedor(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesVendedor.getSelectedItem();
			
			
			
			
			vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
			//this.sTipoAccion;
			
			if(vendedorsSeleccionados.size()==1) {
				for(Vendedor vendedorAux:vendedorsSeleccionados) {
					vendedor=vendedorAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Solicitud Nota Credito")) {
					jButtonNotaCreditoSoliActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Comision Venta Cobro")) {
					jButtonComisionVentaCobroActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Vendedor")) {
					jButtonVendedorActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Cliente")) {
					jButtonClienteActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Comision Grupo")) {
					jButtonComisionGrupoActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Comision Linea")) {
					jButtonComisionLineaActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Vendedor Zona")) {
					jButtonVendedorZonaActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Comision Cate")) {
					jButtonComisionCateActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Cajero Turno")) {
					jButtonCajeroTurnoActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Comision Marca")) {
					jButtonComisionMarcaActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Presupuesto Ventas")) {
					jButtonPresupuestoVentasActionPerformed(null,rowIndex,true,false,vendedor);
				}
				else if(this.sTipoRelacion.equals("Presupuesto Ventas_lineas")) {
					jButtonPresupuestoVentasLineasActionPerformed(null,rowIndex,true,false,vendedor);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessVendedor();
			
      		//this.finishProcessVendedor(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarVendedorReturnGeneral() throws Exception {
		if(this.vendedorReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.vendedorReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.vendedorReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.vendedorReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.vendedorReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.vendedorReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingVendedor(false);
		}
		
		if(this.vendedorReturnGeneral.getConRetornoLista() || this.vendedorReturnGeneral.getConRetornoObjeto()) {
			if(this.vendedorReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.vendedorLogic.setVendedors(this.vendedorReturnGeneral.getVendedors());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.vendedorReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.vendedorLogic.setVendedor(this.vendedorReturnGeneral.getVendedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingVendedor(false);
		}
	}
	
	public void actualizarParametrosGeneralVendedor() throws Exception {
		
		
	}
	
	public ArrayList<Vendedor> getVendedorsSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioVendedor) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(Vendedor vendedorAux:vendedorLogic.getVendedors()) {
					if(vendedorAux.getIsSelected()) {
						vendedorsSeleccionados.add(vendedorAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Vendedor vendedorAux:this.vendedors) {
					if(vendedorAux.getIsSelected()) {
						vendedorsSeleccionados.add(vendedorAux);				
					}
				}
			}
			
			if(vendedorsSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						vendedorsSeleccionados.addAll(this.vendedorLogic.getVendedors());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						vendedorsSeleccionados.addAll(this.vendedors);				
					}
				}
			}
		} else {
			vendedorsSeleccionados.add(this.vendedor);
		}
		
		return vendedorsSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteVendedorsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalVendedorsSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoVendedorsSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoVendedorsSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoVendedorsSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesVendedorsSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Vendedor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesVendedorsSeleccionados() throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteVendedors("Todos",vendedorsSeleccionados);
		
	}	
	
	public void generarReporteNormalVendedorsSeleccionados() throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteVendedors("Todos",vendedorsSeleccionados);
	}		
	
	public void generarReporteProcesoAccionVendedorsSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteVendedors("Todos",vendedorsSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoVendedorsSeleccionados() throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		
		
		
		this.abrirInicializarFrameReporteDinamicoVendedor();
		
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoVendedor();
		
		
		//this.generarReporteVendedors("Todos",vendedorsSeleccionados ,vendedorImplementable,vendedorImplementableHome);
	}
	
	public void mostrarImportacionVendedors() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionVendedor();
		
		this.abrirFrameImportacionVendedor();		
		
			
		//this.generarReporteVendedors("Todos",vendedorsSeleccionados ,vendedorImplementable,vendedorImplementableHome);
	}
	
	public void importarVendedors() throws Exception {		
	
	}
	
	public void exportarVendedorsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelVendedorsSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoVendedorsSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlVendedorsSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Vendedor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoVendedorsSeleccionados() throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"vendedor."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarVendedor(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(Vendedor vendedorAux:vendedorsSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarVendedor(vendedorAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//vendedorAux.setsDetalleGeneralEntityReporte(vendedorAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarVendedor(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_NOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_RUC;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_EMAIL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_TELEFONO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_IDVENDEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_IDPAIS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_IDCIUDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_IDZONA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_REPRESENTANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_ESSUPERVISOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_FECHACREACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_COMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_MONTOVENDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_NUMEROFACTURAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_CONPRESUPUESTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=VendedorConstantesFunciones.LABEL_CONCOBERTURA;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarVendedor(Vendedor vendedor,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=vendedor.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getnombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getruc();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getemail();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.gettelefono();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getempleadosoporte_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getvendedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getpais_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getciudad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getzona_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getrepresentante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getes_supervisor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getfecha_creacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getdireccion_domicilio();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getdireccion_referencia();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getporcentaje_comision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getcomision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getmonto_vendido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getnumero_facturas().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getfecha_ultima_venta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getmonto_ultima_venta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getcon_presupuesto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=vendedor.getcon_cobertura().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelVendedorsSeleccionados() throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"vendedor.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("Vendedors");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelVendedor(row);				
				iRow++;
			}				
			
			for(Vendedor vendedorAux:vendedorsSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelVendedor(vendedorAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlVendedorsSeleccionados() throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();		
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"vendedor.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("vendedors");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("vendedor");
			//elementRoot.appendChild(element);
		
			for(Vendedor vendedorAux:vendedorsSeleccionados) {
				element = document.createElement("vendedor");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlVendedor(vendedorAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.vendedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Vendedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelVendedor(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_NOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_RUC);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_EMAIL);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_TELEFONO);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_IDVENDEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_IDPAIS);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_IDCIUDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_IDZONA);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_REPRESENTANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_ESSUPERVISOR);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_FECHACREACION);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_PORCENTAJECOMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_COMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_MONTOVENDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_NUMEROFACTURAS);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_MONTOULTIMAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_CONPRESUPUESTO);
		cell = row.createCell(iColumn++);cell.setCellValue(VendedorConstantesFunciones.LABEL_CONCOBERTURA);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelVendedor(Vendedor vendedor,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getnombre());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getruc());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getemail());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.gettelefono());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getempleadosoporte_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getvendedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getpais_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getciudad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getzona_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getrepresentante());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getes_supervisor());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getfecha_creacion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getdireccion_domicilio());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getdireccion_referencia());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getporcentaje_comision());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getcomision());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getmonto_vendido());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getnumero_facturas());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getfecha_ultima_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getmonto_ultima_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getcon_presupuesto());
		cell = row.createCell(iColumn++);cell.setCellValue(vendedor.getcon_cobertura());				
	}
	
	public void setFilaDatosExportarXmlVendedor(Vendedor vendedor,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(VendedorConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(vendedor.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(VendedorConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(vendedor.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(VendedorConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(vendedor.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(VendedorConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(vendedor.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementcodigo = document.createElement(VendedorConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(vendedor.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnombre = document.createElement(VendedorConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(vendedor.getnombre().trim()));
		element.appendChild(elementnombre);

		Element elementruc = document.createElement(VendedorConstantesFunciones.RUC);
		elementruc.appendChild(document.createTextNode(vendedor.getruc().trim()));
		element.appendChild(elementruc);

		Element elementemail = document.createElement(VendedorConstantesFunciones.EMAIL);
		elementemail.appendChild(document.createTextNode(vendedor.getemail().trim()));
		element.appendChild(elementemail);

		Element elementempleado_descripcion = document.createElement(VendedorConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(vendedor.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementtelefono = document.createElement(VendedorConstantesFunciones.TELEFONO);
		elementtelefono.appendChild(document.createTextNode(vendedor.gettelefono().trim()));
		element.appendChild(elementtelefono);

		Element elementempleadosoporte_descripcion = document.createElement(VendedorConstantesFunciones.IDEMPLEADOSOPORTE);
		elementempleadosoporte_descripcion.appendChild(document.createTextNode(vendedor.getempleadosoporte_descripcion()));
		element.appendChild(elementempleadosoporte_descripcion);

		Element elementvendedor_descripcion = document.createElement(VendedorConstantesFunciones.IDVENDEDOR);
		elementvendedor_descripcion.appendChild(document.createTextNode(vendedor.getvendedor_descripcion()));
		element.appendChild(elementvendedor_descripcion);

		Element elementpais_descripcion = document.createElement(VendedorConstantesFunciones.IDPAIS);
		elementpais_descripcion.appendChild(document.createTextNode(vendedor.getpais_descripcion()));
		element.appendChild(elementpais_descripcion);

		Element elementciudad_descripcion = document.createElement(VendedorConstantesFunciones.IDCIUDAD);
		elementciudad_descripcion.appendChild(document.createTextNode(vendedor.getciudad_descripcion()));
		element.appendChild(elementciudad_descripcion);

		Element elementzona_descripcion = document.createElement(VendedorConstantesFunciones.IDZONA);
		elementzona_descripcion.appendChild(document.createTextNode(vendedor.getzona_descripcion()));
		element.appendChild(elementzona_descripcion);

		Element elementrepresentante = document.createElement(VendedorConstantesFunciones.REPRESENTANTE);
		elementrepresentante.appendChild(document.createTextNode(vendedor.getrepresentante().trim()));
		element.appendChild(elementrepresentante);

		Element elementes_supervisor = document.createElement(VendedorConstantesFunciones.ESSUPERVISOR);
		elementes_supervisor.appendChild(document.createTextNode(vendedor.getes_supervisor().toString().trim()));
		element.appendChild(elementes_supervisor);

		Element elementfecha_creacion = document.createElement(VendedorConstantesFunciones.FECHACREACION);
		elementfecha_creacion.appendChild(document.createTextNode(vendedor.getfecha_creacion().toString().trim()));
		element.appendChild(elementfecha_creacion);

		Element elementdireccion_domicilio = document.createElement(VendedorConstantesFunciones.DIRECCIONDOMICILIO);
		elementdireccion_domicilio.appendChild(document.createTextNode(vendedor.getdireccion_domicilio().trim()));
		element.appendChild(elementdireccion_domicilio);

		Element elementdireccion_referencia = document.createElement(VendedorConstantesFunciones.DIRECCIONREFERENCIA);
		elementdireccion_referencia.appendChild(document.createTextNode(vendedor.getdireccion_referencia().trim()));
		element.appendChild(elementdireccion_referencia);

		Element elementdescripcion = document.createElement(VendedorConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(vendedor.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementporcentaje_comision = document.createElement(VendedorConstantesFunciones.PORCENTAJECOMISION);
		elementporcentaje_comision.appendChild(document.createTextNode(vendedor.getporcentaje_comision().toString().trim()));
		element.appendChild(elementporcentaje_comision);

		Element elementcomision = document.createElement(VendedorConstantesFunciones.COMISION);
		elementcomision.appendChild(document.createTextNode(vendedor.getcomision().toString().trim()));
		element.appendChild(elementcomision);

		Element elementmonto_vendido = document.createElement(VendedorConstantesFunciones.MONTOVENDIDO);
		elementmonto_vendido.appendChild(document.createTextNode(vendedor.getmonto_vendido().toString().trim()));
		element.appendChild(elementmonto_vendido);

		Element elementnumero_facturas = document.createElement(VendedorConstantesFunciones.NUMEROFACTURAS);
		elementnumero_facturas.appendChild(document.createTextNode(vendedor.getnumero_facturas().toString().trim()));
		element.appendChild(elementnumero_facturas);

		Element elementfecha_ultima_venta = document.createElement(VendedorConstantesFunciones.FECHAULTIMAVENTA);
		elementfecha_ultima_venta.appendChild(document.createTextNode(vendedor.getfecha_ultima_venta().toString().trim()));
		element.appendChild(elementfecha_ultima_venta);

		Element elementmonto_ultima_venta = document.createElement(VendedorConstantesFunciones.MONTOULTIMAVENTA);
		elementmonto_ultima_venta.appendChild(document.createTextNode(vendedor.getmonto_ultima_venta().toString().trim()));
		element.appendChild(elementmonto_ultima_venta);

		Element elementcon_presupuesto = document.createElement(VendedorConstantesFunciones.CONPRESUPUESTO);
		elementcon_presupuesto.appendChild(document.createTextNode(vendedor.getcon_presupuesto().toString().trim()));
		element.appendChild(elementcon_presupuesto);

		Element elementcon_cobertura = document.createElement(VendedorConstantesFunciones.CONCOBERTURA);
		elementcon_cobertura.appendChild(document.createTextNode(vendedor.getcon_cobertura().toString().trim()));
		element.appendChild(elementcon_cobertura);
	}
	
	public void generarReporteGroupGenericoVendedorsSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<Vendedor> vendedorsSeleccionados=new ArrayList<Vendedor>();
		
		vendedorsSeleccionados=this.getVendedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoVendedor(vendedorsSeleccionados);
		
		this.generarReporteVendedors("Todos",vendedorsSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoVendedor(ArrayList<Vendedor> vendedorsSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(Vendedor vendedorAux:vendedorsSeleccionados) {
				vendedorAux.setsDetalleGeneralEntityReporte(vendedorAux.toString());
			
				if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getnombre());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_RUC)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getruc());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_EMAIL)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getemail());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_TELEFONO)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.gettelefono());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_IDEMPLEADOSOPORTE)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getempleadosoporte_descripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_IDVENDEDOR)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getvendedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_IDPAIS)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getpais_descripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_IDCIUDAD)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getciudad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_IDZONA)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getzona_descripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_REPRESENTANTE)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getrepresentante());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_ESSUPERVISOR)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(vendedorAux.getes_supervisor()));
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_FECHACREACION)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(vendedorAux.getfecha_creacion()));
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DIRECCIONDOMICILIO)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getdireccion_domicilio());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DIRECCIONREFERENCIA)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getdireccion_referencia());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_NUMEROFACTURAS)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(vendedorAux.getnumero_facturas().toString());
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_FECHAULTIMAVENTA)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(vendedorAux.getfecha_ultima_venta()));
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CONPRESUPUESTO)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(vendedorAux.getcon_presupuesto()));
				}
				 else if(sTipoSeleccionar.equals(VendedorConstantesFunciones.LABEL_CONCOBERTURA)) {
					existe=true;
					vendedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(vendedorAux.getcon_cobertura()));
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,VendedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesVendedor(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoVendedor=true;
				this.isVisibilidadCeldaNuevoRelacionesVendedor=true;
				this.isVisibilidadCeldaGuardarCambiosVendedor=true;
			}
			
			this.isVisibilidadCeldaModificarVendedor=false;
			this.isVisibilidadCeldaActualizarVendedor=false;
			this.isVisibilidadCeldaEliminarVendedor=false;
			this.isVisibilidadCeldaCancelarVendedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarVendedor=true;
				} else {
					this.isVisibilidadCeldaGuardarVendedor=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoVendedor=false;
			this.isVisibilidadCeldaNuevoRelacionesVendedor=false;
			this.isVisibilidadCeldaGuardarCambiosVendedor=false;
			this.isVisibilidadCeldaModificarVendedor=false;
			this.isVisibilidadCeldaActualizarVendedor=true;
			this.isVisibilidadCeldaEliminarVendedor=false;
			this.isVisibilidadCeldaCancelarVendedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarVendedor=true;
				} else {
					this.isVisibilidadCeldaGuardarVendedor=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoVendedor=false;
			this.isVisibilidadCeldaNuevoRelacionesVendedor=false;
			this.isVisibilidadCeldaGuardarCambiosVendedor=false;
			this.isVisibilidadCeldaModificarVendedor=false;
			this.isVisibilidadCeldaActualizarVendedor=true;
			this.isVisibilidadCeldaEliminarVendedor=true;
			this.isVisibilidadCeldaCancelarVendedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarVendedor=true;
				} else {
					this.isVisibilidadCeldaGuardarVendedor=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoVendedor=false;
			this.isVisibilidadCeldaNuevoRelacionesVendedor=false;
			this.isVisibilidadCeldaGuardarCambiosVendedor=false;
			this.isVisibilidadCeldaModificarVendedor=false;
			this.isVisibilidadCeldaActualizarVendedor=true;
			this.isVisibilidadCeldaEliminarVendedor=false;
			this.isVisibilidadCeldaCancelarVendedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarVendedor=false;
				} else {
					this.isVisibilidadCeldaGuardarVendedor=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoVendedor=true;
			this.isVisibilidadCeldaNuevoRelacionesVendedor=true;
			this.isVisibilidadCeldaGuardarCambiosVendedor=true;
			this.isVisibilidadCeldaModificarVendedor=false;
			this.isVisibilidadCeldaActualizarVendedor=false;
			this.isVisibilidadCeldaEliminarVendedor=false;
			this.isVisibilidadCeldaCancelarVendedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarVendedor=true;
				} else {
					this.isVisibilidadCeldaGuardarVendedor=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoVendedor=false;
			this.isVisibilidadCeldaNuevoRelacionesVendedor=false;
			this.isVisibilidadCeldaGuardarCambiosVendedor=false;
			this.isVisibilidadCeldaActualizarVendedor=false;
			this.isVisibilidadCeldaEliminarVendedor=false;
			this.isVisibilidadCeldaCancelarVendedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarVendedor=false;
				} else {
					this.isVisibilidadCeldaGuardarVendedor=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoVendedor=false;
			this.isVisibilidadCeldaNuevoRelacionesVendedor=false;
			this.isVisibilidadCeldaGuardarCambiosVendedor=false;
			this.isVisibilidadCeldaModificarVendedor=true;
			this.isVisibilidadCeldaActualizarVendedor=false;
			this.isVisibilidadCeldaEliminarVendedor=false;
			this.isVisibilidadCeldaCancelarVendedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarVendedor=false;
				} else {
					this.isVisibilidadCeldaGuardarVendedor=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(VendedorJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoVendedor=true;
			this.isVisibilidadCeldaNuevoRelacionesVendedor=true;
			this.isVisibilidadCeldaGuardarCambiosVendedor=true;
		} else {
			this.actualizarEstadoPanelsVendedor(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarVendedor=false;
			//this.isVisibilidadCeldaVerFormVendedor=false;
			this.isVisibilidadCeldaDuplicarVendedor=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!vendedorSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesVendedor=false;
		} else {
			this.isVisibilidadCeldaNuevoVendedor=false;
			this.isVisibilidadCeldaGuardarCambiosVendedor=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(vendedorSessionBean.getEsGuardarRelacionado()) {
			if(!vendedorSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesVendedor=false;												
			}
			
			this.jButtonCerrarVendedor.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesVendedor=false;
		}
		
		if(!this.permiteMantenimiento(this.vendedor)) {
			this.isVisibilidadCeldaActualizarVendedor=false;
			this.isVisibilidadCeldaEliminarVendedor=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesVendedor() {
		this.isVisibilidadCeldaNuevoVendedor=false;
		this.isVisibilidadCeldaGuardarCambiosVendedor=false;
	}
	
	public void actualizarEstadoPanelsVendedor(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionVendedor!=null) {
				this.jScrollPanelDatosEdicionVendedor.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasVendedor!=null) {
				this.jTabbedPaneBusquedasVendedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosVendedor!=null) {
				this.jScrollPanelDatosVendedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionVendedor!=null) {
				this.jPanelPaginacionVendedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionVendedor!=null) {
				this.jScrollPanelDatosEdicionVendedor.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasVendedor!=null) {
				this.jTabbedPaneBusquedasVendedor.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosVendedor!=null) {
				this.jScrollPanelDatosVendedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionVendedor!=null) {
				this.jPanelPaginacionVendedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionVendedor!=null) {
				this.jScrollPanelDatosEdicionVendedor.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasVendedor!=null) {
				this.jTabbedPaneBusquedasVendedor.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosVendedor!=null) {
				this.jScrollPanelDatosVendedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionVendedor!=null) {
				this.jPanelPaginacionVendedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionVendedor!=null) {
				this.jScrollPanelDatosEdicionVendedor.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasVendedor!=null) {
				this.jTabbedPaneBusquedasVendedor.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosVendedor!=null) {
				this.jScrollPanelDatosVendedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionVendedor!=null) {
				this.jPanelPaginacionVendedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionVendedor!=null) {
				this.jScrollPanelDatosEdicionVendedor.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasVendedor!=null) {
				this.jTabbedPaneBusquedasVendedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosVendedor!=null) {
				this.jScrollPanelDatosVendedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionVendedor!=null) {
				this.jPanelPaginacionVendedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionVendedor!=null) {
				this.jScrollPanelDatosEdicionVendedor.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasVendedor!=null) {
				this.jTabbedPaneBusquedasVendedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosVendedor!=null) {
				this.jScrollPanelDatosVendedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionVendedor!=null) {
				this.jPanelPaginacionVendedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionVendedor!=null) {
				this.jScrollPanelDatosEdicionVendedor.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasVendedor!=null) {
				this.jTabbedPaneBusquedasVendedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosVendedor!=null) {
				this.jScrollPanelDatosVendedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionVendedor!=null) {
				this.jPanelPaginacionVendedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.vendedorSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasVendedor!=null) {
					this.jTabbedPaneBusquedasVendedor.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.vendedorSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasVendedor!=null) {
				this.jTabbedPaneBusquedasVendedor.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesVendedor!=null) {
				this.jPanelParametrosReportesVendedor.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorCodigoVendedor);}

			this.isVisibilidadBusquedaPorNombre=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorNombreVendedor);}

			this.isVisibilidadBusquedaPorRuc=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorRuc) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorRucVendedor);}

			this.isVisibilidadFK_IdPais=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdPaisVendedor);}

			this.isVisibilidadFK_IdVendedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdVendedorVendedor);}

			this.isVisibilidadFK_IdZona=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdZonaVendedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadBusquedaPorCodigo=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorCodigoVendedor);}

			this.isVisibilidadBusquedaPorNombre=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorNombreVendedor);}

			this.isVisibilidadBusquedaPorRuc=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorRuc) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorRucVendedor);}

			this.isVisibilidadFK_IdPais=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdPaisVendedor);}

			this.isVisibilidadFK_IdVendedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdVendedorVendedor);}

			this.isVisibilidadFK_IdZona=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdZonaVendedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorCodigoVendedor);}

			this.isVisibilidadBusquedaPorNombre=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorNombreVendedor);}

			this.isVisibilidadBusquedaPorRuc=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorRuc) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorRucVendedor);}

			this.isVisibilidadFK_IdPais=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdPaisVendedor);}

			this.isVisibilidadFK_IdVendedor=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdVendedorVendedor);}

			this.isVisibilidadFK_IdZona=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdZonaVendedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleadoSoporte(Boolean isParaEmpleadoSoporte){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoSoporteNegation=!isParaEmpleadoSoporte;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpleadoSoporteNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorCodigoVendedor);}

			this.isVisibilidadBusquedaPorNombre=isParaEmpleadoSoporteNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorNombreVendedor);}

			this.isVisibilidadBusquedaPorRuc=isParaEmpleadoSoporteNegation;
			if(!this.isVisibilidadBusquedaPorRuc) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorRucVendedor);}

			this.isVisibilidadFK_IdPais=isParaEmpleadoSoporteNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdPaisVendedor);}

			this.isVisibilidadFK_IdVendedor=isParaEmpleadoSoporteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdVendedorVendedor);}

			this.isVisibilidadFK_IdZona=isParaEmpleadoSoporteNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdZonaVendedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaVendedor(Boolean isParaVendedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaVendedorNegation=!isParaVendedor;

			this.isVisibilidadBusquedaPorCodigo=isParaVendedorNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorCodigoVendedor);}

			this.isVisibilidadBusquedaPorNombre=isParaVendedorNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorNombreVendedor);}

			this.isVisibilidadBusquedaPorRuc=isParaVendedorNegation;
			if(!this.isVisibilidadBusquedaPorRuc) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorRucVendedor);}

			this.isVisibilidadFK_IdPais=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdPaisVendedor);}

			this.isVisibilidadFK_IdVendedor=isParaVendedor;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdVendedorVendedor);}

			this.isVisibilidadFK_IdZona=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdZonaVendedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaPais(Boolean isParaPais){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPaisNegation=!isParaPais;

			this.isVisibilidadBusquedaPorCodigo=isParaPaisNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorCodigoVendedor);}

			this.isVisibilidadBusquedaPorNombre=isParaPaisNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorNombreVendedor);}

			this.isVisibilidadBusquedaPorRuc=isParaPaisNegation;
			if(!this.isVisibilidadBusquedaPorRuc) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorRucVendedor);}

			this.isVisibilidadFK_IdPais=isParaPais;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdPaisVendedor);}

			this.isVisibilidadFK_IdVendedor=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdVendedorVendedor);}

			this.isVisibilidadFK_IdZona=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdZonaVendedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCiudad(Boolean isParaCiudad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCiudadNegation=!isParaCiudad;

			this.isVisibilidadBusquedaPorCodigo=isParaCiudadNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorCodigoVendedor);}

			this.isVisibilidadBusquedaPorNombre=isParaCiudadNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorNombreVendedor);}

			this.isVisibilidadBusquedaPorRuc=isParaCiudadNegation;
			if(!this.isVisibilidadBusquedaPorRuc) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorRucVendedor);}

			this.isVisibilidadFK_IdPais=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdPaisVendedor);}

			this.isVisibilidadFK_IdVendedor=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdVendedorVendedor);}

			this.isVisibilidadFK_IdZona=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdZonaVendedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaZona(Boolean isParaZona){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaZonaNegation=!isParaZona;

			this.isVisibilidadBusquedaPorCodigo=isParaZonaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorCodigoVendedor);}

			this.isVisibilidadBusquedaPorNombre=isParaZonaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorNombreVendedor);}

			this.isVisibilidadBusquedaPorRuc=isParaZonaNegation;
			if(!this.isVisibilidadBusquedaPorRuc) {this.jTabbedPaneBusquedasVendedor.remove(jPanelBusquedaPorRucVendedor);}

			this.isVisibilidadFK_IdPais=isParaZonaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdPaisVendedor);}

			this.isVisibilidadFK_IdVendedor=isParaZonaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdVendedorVendedor);}

			this.isVisibilidadFK_IdZona=isParaZona;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasVendedor.remove(jPanelFK_IdZonaVendedor);}
		}
		
	}
	
	

	public String registrarSesionVendedorParaNotaCreditoSolis() throws Exception {
		Boolean isPaginaPopupNotaCreditoSoli=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupNotaCreditoSoli=this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeNotaCreditoSoli(true);
			this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeNotaCreditoSoli(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.notacreditosoliSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaComisionVentaCobroes() throws Exception {
		Boolean isPaginaPopupComisionVentaCobro=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean=new ComisionVentaCobroSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ComisionVentaCobroConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupComisionVentaCobro=this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeComisionVentaCobro(true);
			this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeComisionVentaCobro(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.comisionventacobroSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaVendedores() throws Exception {
		Boolean isPaginaPopupVendedor=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.vendedorSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.vendedorSessionBean=new VendedorSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.vendedorSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+VendedorConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.vendedorSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupVendedor=this.jInternalFrameDetalleFormVendedor.vendedorSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.vendedorSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeVendedor(true);
			this.jInternalFrameDetalleFormVendedor.vendedorSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeVendedor(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.vendedorSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.vendedorSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.clienteSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.clienteSessionBean=new ClienteSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.clienteSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.clienteSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupCliente=this.jInternalFrameDetalleFormVendedor.clienteSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			this.jInternalFrameDetalleFormVendedor.clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.clienteSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.clienteSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaComisionGrupos() throws Exception {
		Boolean isPaginaPopupComisionGrupo=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean=new ComisionGrupoSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ComisionGrupoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupComisionGrupo=this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeComisionGrupo(true);
			this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeComisionGrupo(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.comisiongrupoSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaComisionLineas() throws Exception {
		Boolean isPaginaPopupComisionLinea=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean=new ComisionLineaSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ComisionLineaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupComisionLinea=this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeComisionLinea(true);
			this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeComisionLinea(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.comisionlineaSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaVendedorZonas() throws Exception {
		Boolean isPaginaPopupVendedorZona=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean=new VendedorZonaSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+VendedorZonaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupVendedorZona=this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeVendedorZona(true);
			this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeVendedorZona(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.vendedorzonaSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaComisionCates() throws Exception {
		Boolean isPaginaPopupComisionCate=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean=new ComisionCateSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ComisionCateConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupComisionCate=this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeComisionCate(true);
			this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeComisionCate(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.comisioncateSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaCajeroTurnos() throws Exception {
		Boolean isPaginaPopupCajeroTurno=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean=new CajeroTurnoSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CajeroTurnoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupCajeroTurno=this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCajeroTurno(true);
			this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCajeroTurno(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.cajeroturnoSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaComisionMarcas() throws Exception {
		Boolean isPaginaPopupComisionMarca=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean=new ComisionMarcaSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ComisionMarcaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupComisionMarca=this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeComisionMarca(true);
			this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeComisionMarca(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.comisionmarcaSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaPresupuestoVentases() throws Exception {
		Boolean isPaginaPopupPresupuestoVentas=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean=new PresupuestoVentasSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+PresupuestoVentasConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupPresupuestoVentas=this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdePresupuestoVentas(true);
			this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdePresupuestoVentas(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.presupuestoventasSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionVendedorParaPresupuestoVentasLineases() throws Exception {
		Boolean isPaginaPopupPresupuestoVentasLineas=false;

		try {

			if(this.vendedorSessionBean==null) {
				this.vendedorSessionBean=new VendedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean==null) {
				this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean=new PresupuestoVentasLineasSessionBean();
			}

			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+PresupuestoVentasLineasConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupPresupuestoVentasLineas=this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdePresupuestoVentasLineas(true);
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdePresupuestoVentasLineas(VendedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			this.jInternalFrameDetalleFormVendedor.presupuestoventaslineasSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionVendedorParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(vendedorSessionBean==null) {
				vendedorSessionBean=new VendedorSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.vendedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(VendedorConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			//empleadoSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionVendedorParaBusquedaEmpleadoSoportes() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(vendedorSessionBean==null) {
				vendedorSessionBean=new VendedorSessionBean();
			}

			if(empleadosoporteSessionBean==null) {
				empleadosoporteSessionBean=new EmpleadoSessionBean();
			}

			empleadosoporteSessionBean.setsPathNavegacionActual(vendedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadosoporteSessionBean.setisPermiteRecargarInformacion(false);
			empleadosoporteSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadosoporteSessionBean.getisPaginaPopup();
			empleadosoporteSessionBean.setisPaginaPopup(false);
			empleadosoporteSessionBean.setEstaModoBusqueda(true);
			empleadosoporteSessionBean.setsFuncionBusquedaRapida("window.opener.vendedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado_soporte(TO_REPLACE);");
			empleadosoporteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadosoporteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(VendedorConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionVendedor(true);
			//empleadoSessionBean.setlidVendedorActual(this.idVendedorActual);

			vendedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyVendedor(true);
			vendedorSessionBean.setlIdVendedorActualForeignKey(this.idVendedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//VendedorSessionBean vendedorSessionBean=new VendedorSessionBean();
		
		if(this.vendedorSessionBean==null) {
			this.vendedorSessionBean=new VendedorSessionBean();
		}
		
		this.vendedorSessionBean.setsUltimaBusquedaVendedor(this.getsAccionBusqueda());
		this.vendedorSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.vendedorSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
			vendedorSessionBean.setcodigo(this.getcodigoBusquedaPorCodigo());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
			vendedorSessionBean.setnombre(this.getnombreBusquedaPorNombre());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorRuc")) {
			vendedorSessionBean.setruc(this.getrucBusquedaPorRuc());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			vendedorSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
			vendedorSessionBean.setid_pais(this.getid_paisFK_IdPais());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			vendedorSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
			vendedorSessionBean.setid_vendedor(this.getid_vendedorFK_IdVendedor());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdZona")) {
			vendedorSessionBean.setid_zona(this.getid_zonaFK_IdZona());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//VendedorSessionBean vendedorSessionBean=new VendedorSessionBean();
		
		if(this.vendedorSessionBean==null) {
			this.vendedorSessionBean=new VendedorSessionBean();
		}
		
		if(this.vendedorSessionBean.getsUltimaBusquedaVendedor()!=null&&!this.vendedorSessionBean.getsUltimaBusquedaVendedor().equals("")) {
			this.setsAccionBusqueda(vendedorSessionBean.getsUltimaBusquedaVendedor());
			this.setiNumeroPaginacion(vendedorSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(vendedorSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
				this.setcodigoBusquedaPorCodigo(vendedorSessionBean.getcodigo());
				vendedorSessionBean.setcodigo("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
				this.setnombreBusquedaPorNombre(vendedorSessionBean.getnombre());
				vendedorSessionBean.setnombre("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorRuc")) {
				this.setrucBusquedaPorRuc(vendedorSessionBean.getruc());
				vendedorSessionBean.setruc("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(vendedorSessionBean.getid_empresa());
				vendedorSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
				this.setid_paisFK_IdPais(vendedorSessionBean.getid_pais());
				vendedorSessionBean.setid_pais(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(vendedorSessionBean.getid_sucursal());
				vendedorSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
				this.setid_vendedorFK_IdVendedor(vendedorSessionBean.getid_vendedor());
				vendedorSessionBean.setid_vendedor(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdZona")) {
				this.setid_zonaFK_IdZona(vendedorSessionBean.getid_zona());
				vendedorSessionBean.setid_zona(-1L);
			}
		}
		
		this.vendedorSessionBean.setsUltimaBusquedaVendedor("");
		this.vendedorSessionBean.setiNumeroPaginacion(VendedorConstantesFunciones.INUMEROPAGINACION);
		this.vendedorSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaVendedor(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioVendedor() {
		this.updateBorderResaltarBusquedasFormularioVendedor();
		this.updateVisibilidadBusquedasFormularioVendedor();
		this.updateHabilitarBusquedasFormularioVendedor();
	}
	
	public void updateBorderResaltarBusquedasFormularioVendedor() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasVendedor.getComponents().length>0) {
	

		if(this.vendedorConstantesFunciones.resaltarBusquedaPorCodigoVendedor!=null) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorCodigoVendedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				jPanel.setBorder(this.vendedorConstantesFunciones.resaltarBusquedaPorCodigoVendedor);
			}
		}

		if(this.vendedorConstantesFunciones.resaltarBusquedaPorNombreVendedor!=null) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorNombreVendedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				jPanel.setBorder(this.vendedorConstantesFunciones.resaltarBusquedaPorNombreVendedor);
			}
		}

		if(this.vendedorConstantesFunciones.resaltarBusquedaPorRucVendedor!=null) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorRucVendedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				jPanel.setBorder(this.vendedorConstantesFunciones.resaltarBusquedaPorRucVendedor);
			}
		}

		if(this.vendedorConstantesFunciones.resaltarFK_IdPaisVendedor!=null) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdPaisVendedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				jPanel.setBorder(this.vendedorConstantesFunciones.resaltarFK_IdPaisVendedor);
			}
		}

		if(this.vendedorConstantesFunciones.resaltarFK_IdVendedorVendedor!=null) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdVendedorVendedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				jPanel.setBorder(this.vendedorConstantesFunciones.resaltarFK_IdVendedorVendedor);
			}
		}

		if(this.vendedorConstantesFunciones.resaltarFK_IdZonaVendedor!=null) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdZonaVendedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				jPanel.setBorder(this.vendedorConstantesFunciones.resaltarFK_IdZonaVendedor);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioVendedor() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasVendedor.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorCodigoVendedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.vendedorConstantesFunciones.mostrarBusquedaPorCodigoVendedor);
			if(!this.vendedorConstantesFunciones.mostrarBusquedaPorCodigoVendedor && index>-1) {
				this.jTabbedPaneBusquedasVendedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorNombreVendedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.vendedorConstantesFunciones.mostrarBusquedaPorNombreVendedor);
			if(!this.vendedorConstantesFunciones.mostrarBusquedaPorNombreVendedor && index>-1) {
				this.jTabbedPaneBusquedasVendedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorRucVendedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.vendedorConstantesFunciones.mostrarBusquedaPorRucVendedor);
			if(!this.vendedorConstantesFunciones.mostrarBusquedaPorRucVendedor && index>-1) {
				this.jTabbedPaneBusquedasVendedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdPaisVendedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.vendedorConstantesFunciones.mostrarFK_IdPaisVendedor);
			if(!this.vendedorConstantesFunciones.mostrarFK_IdPaisVendedor && index>-1) {
				this.jTabbedPaneBusquedasVendedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdVendedorVendedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.vendedorConstantesFunciones.mostrarFK_IdVendedorVendedor);
			if(!this.vendedorConstantesFunciones.mostrarFK_IdVendedorVendedor && index>-1) {
				this.jTabbedPaneBusquedasVendedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdZonaVendedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.vendedorConstantesFunciones.mostrarFK_IdZonaVendedor);
			if(!this.vendedorConstantesFunciones.mostrarFK_IdZonaVendedor && index>-1) {
				this.jTabbedPaneBusquedasVendedor.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioVendedor() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasVendedor.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorCodigoVendedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.vendedorConstantesFunciones.activarBusquedaPorCodigoVendedor);
				this.jTabbedPaneBusquedasVendedor.setEnabledAt(index,this.vendedorConstantesFunciones.activarBusquedaPorCodigoVendedor);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorNombreVendedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.vendedorConstantesFunciones.activarBusquedaPorNombreVendedor);
				this.jTabbedPaneBusquedasVendedor.setEnabledAt(index,this.vendedorConstantesFunciones.activarBusquedaPorNombreVendedor);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorRucVendedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.vendedorConstantesFunciones.activarBusquedaPorRucVendedor);
				this.jTabbedPaneBusquedasVendedor.setEnabledAt(index,this.vendedorConstantesFunciones.activarBusquedaPorRucVendedor);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdPaisVendedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.vendedorConstantesFunciones.activarFK_IdPaisVendedor);
				this.jTabbedPaneBusquedasVendedor.setEnabledAt(index,this.vendedorConstantesFunciones.activarFK_IdPaisVendedor);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdVendedorVendedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.vendedorConstantesFunciones.activarFK_IdVendedorVendedor);
				this.jTabbedPaneBusquedasVendedor.setEnabledAt(index,this.vendedorConstantesFunciones.activarFK_IdVendedorVendedor);
			}

			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdZonaVendedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.vendedorConstantesFunciones.activarFK_IdZonaVendedor);
				this.jTabbedPaneBusquedasVendedor.setEnabledAt(index,this.vendedorConstantesFunciones.activarFK_IdZonaVendedor);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaVendedor(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorCodigo")) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorCodigoVendedor);

			this.jTabbedPaneBusquedasVendedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);

			this.vendedorConstantesFunciones.setResaltarBusquedaPorCodigoVendedor(resaltar);

			jPanel.setBorder(this.vendedorConstantesFunciones.resaltarBusquedaPorCodigoVendedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNombre")) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorNombreVendedor);

			this.jTabbedPaneBusquedasVendedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);

			this.vendedorConstantesFunciones.setResaltarBusquedaPorNombreVendedor(resaltar);

			jPanel.setBorder(this.vendedorConstantesFunciones.resaltarBusquedaPorNombreVendedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorRuc")) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelBusquedaPorRucVendedor);

			this.jTabbedPaneBusquedasVendedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);

			this.vendedorConstantesFunciones.setResaltarBusquedaPorRucVendedor(resaltar);

			jPanel.setBorder(this.vendedorConstantesFunciones.resaltarBusquedaPorRucVendedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPais")) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdPaisVendedor);

			this.jTabbedPaneBusquedasVendedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);

			this.vendedorConstantesFunciones.setResaltarFK_IdPaisVendedor(resaltar);

			jPanel.setBorder(this.vendedorConstantesFunciones.resaltarFK_IdPaisVendedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdVendedor")) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdVendedorVendedor);

			this.jTabbedPaneBusquedasVendedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);

			this.vendedorConstantesFunciones.setResaltarFK_IdVendedorVendedor(resaltar);

			jPanel.setBorder(this.vendedorConstantesFunciones.resaltarFK_IdVendedorVendedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdZona")) {
			index= this.jTabbedPaneBusquedasVendedor.indexOfComponent(this.jPanelFK_IdZonaVendedor);

			this.jTabbedPaneBusquedasVendedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasVendedor.getComponent(index);

			this.vendedorConstantesFunciones.setResaltarFK_IdZonaVendedor(resaltar);

			jPanel.setBorder(this.vendedorConstantesFunciones.resaltarFK_IdZonaVendedor);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarVendedor.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioVendedor() throws Exception {

		if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioVendedor();
		this.updateVisibilidadResaltarControlesFormularioVendedor();
		this.updateHabilitarResaltarControlesFormularioVendedor();
		
	}
	
	public void updateBorderResaltarControlesFormularioVendedor() throws Exception {
		if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.vendedorConstantesFunciones.resaltaridVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.setBorder(this.vendedorConstantesFunciones.resaltaridVendedor);}
		if(this.vendedorConstantesFunciones.resaltarid_empresaVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setBorder(this.vendedorConstantesFunciones.resaltarid_empresaVendedor);}
		if(this.vendedorConstantesFunciones.resaltarid_sucursalVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setBorder(this.vendedorConstantesFunciones.resaltarid_sucursalVendedor);}
		if(this.vendedorConstantesFunciones.resaltarcodigoVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextFieldcodigoVendedor.setBorder(this.vendedorConstantesFunciones.resaltarcodigoVendedor);}
		if(this.vendedorConstantesFunciones.resaltarnombreVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextAreanombreVendedor.setBorder(this.vendedorConstantesFunciones.resaltarnombreVendedor);}
		if(this.vendedorConstantesFunciones.resaltarrucVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextFieldrucVendedor.setBorder(this.vendedorConstantesFunciones.resaltarrucVendedor);}
		if(this.vendedorConstantesFunciones.resaltaremailVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextAreaemailVendedor.setBorder(this.vendedorConstantesFunciones.resaltaremailVendedor);}
		if(this.vendedorConstantesFunciones.resaltarid_empleadoVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setBorder(this.vendedorConstantesFunciones.resaltarid_empleadoVendedor);}
		if(this.vendedorConstantesFunciones.resaltartelefonoVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextAreatelefonoVendedor.setBorder(this.vendedorConstantesFunciones.resaltartelefonoVendedor);}
		if(this.vendedorConstantesFunciones.resaltarid_empleado_soporteVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setBorder(this.vendedorConstantesFunciones.resaltarid_empleado_soporteVendedor);}
		if(this.vendedorConstantesFunciones.resaltarid_vendedorVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setBorder(this.vendedorConstantesFunciones.resaltarid_vendedorVendedor);}
		if(this.vendedorConstantesFunciones.resaltarid_paisVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setBorder(this.vendedorConstantesFunciones.resaltarid_paisVendedor);}
		if(this.vendedorConstantesFunciones.resaltarid_ciudadVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setBorder(this.vendedorConstantesFunciones.resaltarid_ciudadVendedor);}
		if(this.vendedorConstantesFunciones.resaltarid_zonaVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setBorder(this.vendedorConstantesFunciones.resaltarid_zonaVendedor);}
		if(this.vendedorConstantesFunciones.resaltarrepresentanteVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextArearepresentanteVendedor.setBorder(this.vendedorConstantesFunciones.resaltarrepresentanteVendedor);}
		if(this.vendedorConstantesFunciones.resaltares_supervisorVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.setBorderPainted(true);this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.setBorder(this.vendedorConstantesFunciones.resaltares_supervisorVendedor);}
		if(this.vendedorConstantesFunciones.resaltarfecha_creacionVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_creacionVendedor.setBorder(this.vendedorConstantesFunciones.resaltarfecha_creacionVendedor);}
		if(this.vendedorConstantesFunciones.resaltardireccion_domicilioVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_domicilioVendedor.setBorder(this.vendedorConstantesFunciones.resaltardireccion_domicilioVendedor);}
		if(this.vendedorConstantesFunciones.resaltardireccion_referenciaVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_referenciaVendedor.setBorder(this.vendedorConstantesFunciones.resaltardireccion_referenciaVendedor);}
		if(this.vendedorConstantesFunciones.resaltardescripcionVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextAreadescripcionVendedor.setBorder(this.vendedorConstantesFunciones.resaltardescripcionVendedor);}
		if(this.vendedorConstantesFunciones.resaltarporcentaje_comisionVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextFieldporcentaje_comisionVendedor.setBorder(this.vendedorConstantesFunciones.resaltarporcentaje_comisionVendedor);}
		if(this.vendedorConstantesFunciones.resaltarcomisionVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextFieldcomisionVendedor.setBorder(this.vendedorConstantesFunciones.resaltarcomisionVendedor);}
		if(this.vendedorConstantesFunciones.resaltarmonto_vendidoVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_vendidoVendedor.setBorder(this.vendedorConstantesFunciones.resaltarmonto_vendidoVendedor);}
		if(this.vendedorConstantesFunciones.resaltarnumero_facturasVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextFieldnumero_facturasVendedor.setBorder(this.vendedorConstantesFunciones.resaltarnumero_facturasVendedor);}
		if(this.vendedorConstantesFunciones.resaltarfecha_ultima_ventaVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_ultima_ventaVendedor.setBorder(this.vendedorConstantesFunciones.resaltarfecha_ultima_ventaVendedor);}
		if(this.vendedorConstantesFunciones.resaltarmonto_ultima_ventaVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_ultima_ventaVendedor.setBorder(this.vendedorConstantesFunciones.resaltarmonto_ultima_ventaVendedor);}
		if(this.vendedorConstantesFunciones.resaltarcon_presupuestoVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.setBorderPainted(true);this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.setBorder(this.vendedorConstantesFunciones.resaltarcon_presupuestoVendedor);}
		if(this.vendedorConstantesFunciones.resaltarcon_coberturaVendedor!=null && this.jInternalFrameDetalleFormVendedor!=null) {this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.setBorderPainted(true);this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.setBorder(this.vendedorConstantesFunciones.resaltarcon_coberturaVendedor);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioVendedor() throws Exception {		
		if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormVendedor!=null) {
	
		//this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.setVisible(this.vendedorConstantesFunciones.mostraridVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelidVendedor.setVisible(this.vendedorConstantesFunciones.mostraridVendedor);
		//this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_empresaVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelid_empresaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_empresaVendedor);
		//this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_sucursalVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelid_sucursalVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_sucursalVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextFieldcodigoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarcodigoVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelcodigoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarcodigoVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextAreanombreVendedor.setVisible(this.vendedorConstantesFunciones.mostrarnombreVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelnombreVendedor.setVisible(this.vendedorConstantesFunciones.mostrarnombreVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextFieldrucVendedor.setVisible(this.vendedorConstantesFunciones.mostrarrucVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelrucVendedor.setVisible(this.vendedorConstantesFunciones.mostrarrucVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextAreaemailVendedor.setVisible(this.vendedorConstantesFunciones.mostraremailVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelemailVendedor.setVisible(this.vendedorConstantesFunciones.mostraremailVendedor);
		//this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_empleadoVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelid_empleadoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_empleadoVendedor);
			this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_empleadoVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextAreatelefonoVendedor.setVisible(this.vendedorConstantesFunciones.mostrartelefonoVendedor);
		this.jInternalFrameDetalleFormVendedor.jPaneltelefonoVendedor.setVisible(this.vendedorConstantesFunciones.mostrartelefonoVendedor);
		//this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_empleado_soporteVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelid_empleado_soporteVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_empleado_soporteVendedor);
			this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_empleado_soporteVendedor);
		//this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_vendedorVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelid_vendedorVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_vendedorVendedor);
		//this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_paisVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelid_paisVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_paisVendedor);
		//this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_ciudadVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelid_ciudadVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_ciudadVendedor);
		//this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_zonaVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelid_zonaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarid_zonaVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextArearepresentanteVendedor.setVisible(this.vendedorConstantesFunciones.mostrarrepresentanteVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelrepresentanteVendedor.setVisible(this.vendedorConstantesFunciones.mostrarrepresentanteVendedor);
		//this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.setVisible(this.vendedorConstantesFunciones.mostrares_supervisorVendedor);
		this.jInternalFrameDetalleFormVendedor.jPaneles_supervisorVendedor.setVisible(this.vendedorConstantesFunciones.mostrares_supervisorVendedor);
		//this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_creacionVendedor.setVisible(this.vendedorConstantesFunciones.mostrarfecha_creacionVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelfecha_creacionVendedor.setVisible(this.vendedorConstantesFunciones.mostrarfecha_creacionVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_domicilioVendedor.setVisible(this.vendedorConstantesFunciones.mostrardireccion_domicilioVendedor);
		this.jInternalFrameDetalleFormVendedor.jPaneldireccion_domicilioVendedor.setVisible(this.vendedorConstantesFunciones.mostrardireccion_domicilioVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_referenciaVendedor.setVisible(this.vendedorConstantesFunciones.mostrardireccion_referenciaVendedor);
		this.jInternalFrameDetalleFormVendedor.jPaneldireccion_referenciaVendedor.setVisible(this.vendedorConstantesFunciones.mostrardireccion_referenciaVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextAreadescripcionVendedor.setVisible(this.vendedorConstantesFunciones.mostrardescripcionVendedor);
		this.jInternalFrameDetalleFormVendedor.jPaneldescripcionVendedor.setVisible(this.vendedorConstantesFunciones.mostrardescripcionVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextFieldporcentaje_comisionVendedor.setVisible(this.vendedorConstantesFunciones.mostrarporcentaje_comisionVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelporcentaje_comisionVendedor.setVisible(this.vendedorConstantesFunciones.mostrarporcentaje_comisionVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextFieldcomisionVendedor.setVisible(this.vendedorConstantesFunciones.mostrarcomisionVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelcomisionVendedor.setVisible(this.vendedorConstantesFunciones.mostrarcomisionVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_vendidoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarmonto_vendidoVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelmonto_vendidoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarmonto_vendidoVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextFieldnumero_facturasVendedor.setVisible(this.vendedorConstantesFunciones.mostrarnumero_facturasVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelnumero_facturasVendedor.setVisible(this.vendedorConstantesFunciones.mostrarnumero_facturasVendedor);
		//this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_ultima_ventaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarfecha_ultima_ventaVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelfecha_ultima_ventaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarfecha_ultima_ventaVendedor);
		//this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_ultima_ventaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarmonto_ultima_ventaVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelmonto_ultima_ventaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarmonto_ultima_ventaVendedor);
		//this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarcon_presupuestoVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelcon_presupuestoVendedor.setVisible(this.vendedorConstantesFunciones.mostrarcon_presupuestoVendedor);
		//this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarcon_coberturaVendedor);
		this.jInternalFrameDetalleFormVendedor.jPanelcon_coberturaVendedor.setVisible(this.vendedorConstantesFunciones.mostrarcon_coberturaVendedor);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioVendedor() throws Exception {
		if(this.jInternalFrameDetalleFormVendedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormVendedor!=null) {
	
		this.jInternalFrameDetalleFormVendedor.jLabelidVendedor.setEnabled(this.vendedorConstantesFunciones.activaridVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_empresaVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_empresaVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_sucursalVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_sucursalVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldcodigoVendedor.setEnabled(this.vendedorConstantesFunciones.activarcodigoVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreanombreVendedor.setEnabled(this.vendedorConstantesFunciones.activarnombreVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldrucVendedor.setEnabled(this.vendedorConstantesFunciones.activarrucVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreaemailVendedor.setEnabled(this.vendedorConstantesFunciones.activaremailVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleadoVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_empleadoVendedor);
			this.jInternalFrameDetalleFormVendedor.jButtonid_empleadoVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_empleadoVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreatelefonoVendedor.setEnabled(this.vendedorConstantesFunciones.activartelefonoVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_empleado_soporteVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_empleado_soporteVendedor);
			this.jInternalFrameDetalleFormVendedor.jButtonid_empleado_soporteVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_empleado_soporteVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_vendedorVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_vendedorVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_paisVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_paisVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_ciudadVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_ciudadVendedor);
		this.jInternalFrameDetalleFormVendedor.jComboBoxid_zonaVendedor.setEnabled(this.vendedorConstantesFunciones.activarid_zonaVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextArearepresentanteVendedor.setEnabled(this.vendedorConstantesFunciones.activarrepresentanteVendedor);
		this.jInternalFrameDetalleFormVendedor.jCheckBoxes_supervisorVendedor.setEnabled(this.vendedorConstantesFunciones.activares_supervisorVendedor);
		this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_creacionVendedor.setEnabled(this.vendedorConstantesFunciones.activarfecha_creacionVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_domicilioVendedor.setEnabled(this.vendedorConstantesFunciones.activardireccion_domicilioVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreadireccion_referenciaVendedor.setEnabled(this.vendedorConstantesFunciones.activardireccion_referenciaVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextAreadescripcionVendedor.setEnabled(this.vendedorConstantesFunciones.activardescripcionVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldporcentaje_comisionVendedor.setEnabled(this.vendedorConstantesFunciones.activarporcentaje_comisionVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldcomisionVendedor.setEnabled(this.vendedorConstantesFunciones.activarcomisionVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_vendidoVendedor.setEnabled(this.vendedorConstantesFunciones.activarmonto_vendidoVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldnumero_facturasVendedor.setEnabled(this.vendedorConstantesFunciones.activarnumero_facturasVendedor);
		this.jInternalFrameDetalleFormVendedor.jDateChooserfecha_ultima_ventaVendedor.setEnabled(this.vendedorConstantesFunciones.activarfecha_ultima_ventaVendedor);
		this.jInternalFrameDetalleFormVendedor.jTextFieldmonto_ultima_ventaVendedor.setEnabled(this.vendedorConstantesFunciones.activarmonto_ultima_ventaVendedor);
		this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_presupuestoVendedor.setEnabled(this.vendedorConstantesFunciones.activarcon_presupuestoVendedor);
		this.jInternalFrameDetalleFormVendedor.jCheckBoxcon_coberturaVendedor.setEnabled(this.vendedorConstantesFunciones.activarcon_coberturaVendedor);
		}
	}
	
		
}