/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes.report;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

//import com.bydan.erp.inventario.util.ProductosServiciosExistenciasConstantesFunciones;
import com.bydan.erp.inventario.util.report.ProductosServiciosExistenciasParameterReturnGeneral;
//import com.bydan.erp.inventario.util.report.ProductosServiciosExistenciasParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.report.ProductosServiciosExistenciasBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.report.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.report.AuxiliarReportes;

import com.bydan.erp.inventario.util.*;

import com.bydan.erp.inventario.util.report.*;
import com.bydan.erp.inventario.business.logic.report.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.inventario.business.entity.report.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

//import org.hibernate.collection.PersistentBag;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.report.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ProductosServiciosExistenciasBeanSwingJInternalFrame extends ProductosServiciosExistenciasJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ProductosServiciosExistenciasBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<ProductosServiciosExistencias> productosserviciosexistenciasValidator = new ClassValidator<ProductosServiciosExistencias>(ProductosServiciosExistencias.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public ProductosServiciosExistencias productosserviciosexistencias;	
	public ProductosServiciosExistencias productosserviciosexistenciasAux;
	public ProductosServiciosExistencias productosserviciosexistenciasAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public ProductosServiciosExistencias productosserviciosexistenciasTotales;
	public Long idProductosServiciosExistenciasActual;
	public Long iIdNuevoProductosServiciosExistencias=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboLinea="";

	public List<Linea> lineasForeignKey;

	public List<Linea> getlineasForeignKey() {
		return lineasForeignKey;
	}

	public void setlineasForeignKey(List<Linea> lineasForeignKey) {
		this.lineasForeignKey = lineasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Linea lineaForeignKey;

	public Linea getlineaForeignKey() {
		return lineaForeignKey;
	}

	public void setlineaForeignKey(Linea lineaForeignKey) {
		this.lineaForeignKey = lineaForeignKey;
	}

	public String sFinalQueryComboLineaGrupo="";

	public List<Linea> lineagruposForeignKey;

	public List<Linea> getlineagruposForeignKey() {
		return lineagruposForeignKey;
	}

	public void setlineagruposForeignKey(List<Linea> lineagruposForeignKey) {
		this.lineagruposForeignKey = lineagruposForeignKey;
	}

	//OBJETO FK ACTUAL
	public Linea lineagrupoForeignKey;

	public Linea getlineagrupoForeignKey() {
		return lineagrupoForeignKey;
	}

	public void setlineagrupoForeignKey(Linea lineagrupoForeignKey) {
		this.lineagrupoForeignKey = lineagrupoForeignKey;
	}

	public String sFinalQueryComboLineaCategoria="";

	public List<Linea> lineacategoriasForeignKey;

	public List<Linea> getlineacategoriasForeignKey() {
		return lineacategoriasForeignKey;
	}

	public void setlineacategoriasForeignKey(List<Linea> lineacategoriasForeignKey) {
		this.lineacategoriasForeignKey = lineacategoriasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Linea lineacategoriaForeignKey;

	public Linea getlineacategoriaForeignKey() {
		return lineacategoriaForeignKey;
	}

	public void setlineacategoriaForeignKey(Linea lineacategoriaForeignKey) {
		this.lineacategoriaForeignKey = lineacategoriaForeignKey;
	}

	public String sFinalQueryComboLineaMarca="";

	public List<Linea> lineamarcasForeignKey;

	public List<Linea> getlineamarcasForeignKey() {
		return lineamarcasForeignKey;
	}

	public void setlineamarcasForeignKey(List<Linea> lineamarcasForeignKey) {
		this.lineamarcasForeignKey = lineamarcasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Linea lineamarcaForeignKey;

	public Linea getlineamarcaForeignKey() {
		return lineamarcaForeignKey;
	}

	public void setlineamarcaForeignKey(Linea lineamarcaForeignKey) {
		this.lineamarcaForeignKey = lineamarcaForeignKey;
	}

	public String sFinalQueryComboTipoProductoServicio="";

	public List<TipoProductoServicio> tipoproductoserviciosForeignKey;

	public List<TipoProductoServicio> gettipoproductoserviciosForeignKey() {
		return tipoproductoserviciosForeignKey;
	}

	public void settipoproductoserviciosForeignKey(List<TipoProductoServicio> tipoproductoserviciosForeignKey) {
		this.tipoproductoserviciosForeignKey = tipoproductoserviciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoProductoServicio tipoproductoservicioForeignKey;

	public TipoProductoServicio gettipoproductoservicioForeignKey() {
		return tipoproductoservicioForeignKey;
	}

	public void settipoproductoservicioForeignKey(TipoProductoServicio tipoproductoservicioForeignKey) {
		this.tipoproductoservicioForeignKey = tipoproductoservicioForeignKey;
	}

		
	
	
	
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoProductosServiciosExistencias;
	public Boolean isPermisoNuevoProductosServiciosExistencias;
	public Boolean isPermisoActualizarProductosServiciosExistencias;
	public Boolean isPermisoActualizarOriginalProductosServiciosExistencias;
	public Boolean isPermisoEliminarProductosServiciosExistencias;
	public Boolean isPermisoGuardarCambiosProductosServiciosExistencias;
	public Boolean isPermisoConsultaProductosServiciosExistencias;
	public Boolean isPermisoBusquedaProductosServiciosExistencias;
	public Boolean isPermisoReporteProductosServiciosExistencias;
	public Boolean isPermisoPaginacionMedioProductosServiciosExistencias;
	public Boolean isPermisoPaginacionAltoProductosServiciosExistencias;
	public Boolean isPermisoPaginacionTodoProductosServiciosExistencias;
	public Boolean isPermisoCopiarProductosServiciosExistencias;
	public Boolean isPermisoVerFormProductosServiciosExistencias;
	public Boolean isPermisoDuplicarProductosServiciosExistencias;
	public Boolean isPermisoOrdenProductosServiciosExistencias;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ProductosServiciosExistenciasParameterReturnGeneral productosserviciosexistenciasReturnGeneral;
	public ProductosServiciosExistenciasParameterReturnGeneral productosserviciosexistenciasParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoProductosServiciosExistencias=false;
	public Boolean esParaAccionDesdeFormularioProductosServiciosExistencias=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ProductosServiciosExistenciasSessionBeanAdditional productosserviciosexistenciasSessionBeanAdditional=null;
	
	public ProductosServiciosExistenciasSessionBeanAdditional getProductosServiciosExistenciasSessionBeanAdditional() {
		return this.productosserviciosexistenciasSessionBeanAdditional;
	}
	
	public void setProductosServiciosExistenciasSessionBeanAdditional(ProductosServiciosExistenciasSessionBeanAdditional productosserviciosexistenciasSessionBeanAdditional) {
		try {
			this.productosserviciosexistenciasSessionBeanAdditional=productosserviciosexistenciasSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional productosserviciosexistenciasBeanSwingJInternalFrameAdditional=null;
	//public class ProductosServiciosExistenciasBeanSwingJInternalFrame
	
	public ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional getProductosServiciosExistenciasBeanSwingJInternalFrameAdditional() {
		return this.productosserviciosexistenciasBeanSwingJInternalFrameAdditional;
	}
	
	public void setProductosServiciosExistenciasBeanSwingJInternalFrameAdditional(ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional productosserviciosexistenciasBeanSwingJInternalFrameAdditional) {
		try {
			this.productosserviciosexistenciasBeanSwingJInternalFrameAdditional=productosserviciosexistenciasBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ProductosServiciosExistenciasLogic productosserviciosexistenciasLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public ProductosServiciosExistencias productosserviciosexistenciasBean;
	public ProductosServiciosExistenciasConstantesFunciones productosserviciosexistenciasConstantesFunciones;
	//public ProductosServiciosExistenciasParameterReturnGeneral productosserviciosexistenciasReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public LineaLogic lineaLogic;
	public LineaLogic lineagrupoLogic;
	public LineaLogic lineacategoriaLogic;
	public LineaLogic lineamarcaLogic;
	public TipoProductoServicioLogic tipoproductoservicioLogic;
	
	//PARAMETROS
	
	
	//public List<ProductosServiciosExistencias> productosserviciosexistenciass;	
	//public List<ProductosServiciosExistencias> productosserviciosexistenciassEliminados;
	//public List<ProductosServiciosExistencias> productosserviciosexistenciassAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
	public Boolean isVisibilidadCeldaDuplicarProductosServiciosExistencias=true;
	public Boolean isVisibilidadCeldaCopiarProductosServiciosExistencias=true;
	public Boolean isVisibilidadCeldaVerFormProductosServiciosExistencias=true;
	public Boolean isVisibilidadCeldaOrdenProductosServiciosExistencias=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
	public Boolean isVisibilidadCeldaModificarProductosServiciosExistencias=false;
	public Boolean isVisibilidadCeldaActualizarProductosServiciosExistencias=false;
	public Boolean isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
	public Boolean isVisibilidadCeldaCancelarProductosServiciosExistencias=false;
	public Boolean isVisibilidadCeldaGuardarProductosServiciosExistencias=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;	
	
	
	public Boolean isVisibilidadBusquedaProductosServiciosExistencias=false;
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdLinea=false;
	public Boolean isVisibilidadFK_IdLineaCategoria=false;
	public Boolean isVisibilidadFK_IdLineaGrupo=false;
	public Boolean isVisibilidadFK_IdLineaMarca=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoProductoServicio=false;
	
	public Long getiIdNuevoProductosServiciosExistencias() {
		return this.iIdNuevoProductosServiciosExistencias;
	}

	public void setiIdNuevoProductosServiciosExistencias(Long iIdNuevoProductosServiciosExistencias) {
		this.iIdNuevoProductosServiciosExistencias = iIdNuevoProductosServiciosExistencias;
	}
	
	public Long getidProductosServiciosExistenciasActual() {
		return this.idProductosServiciosExistenciasActual;
	}

	public void setidProductosServiciosExistenciasActual(Long idProductosServiciosExistenciasActual) {
		this.idProductosServiciosExistenciasActual = idProductosServiciosExistenciasActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public ProductosServiciosExistencias getproductosserviciosexistencias() {
		return this.productosserviciosexistencias;
	}

	public void setproductosserviciosexistencias(ProductosServiciosExistencias productosserviciosexistencias) {
		this.productosserviciosexistencias = productosserviciosexistencias;
	}
	
	public ProductosServiciosExistencias getproductosserviciosexistenciasAux() {
		return this.productosserviciosexistenciasAux;
	}

	public void setproductosserviciosexistenciasAux(ProductosServiciosExistencias productosserviciosexistenciasAux) {
		this.productosserviciosexistenciasAux = productosserviciosexistenciasAux;
	}				
	
	public ProductosServiciosExistencias getproductosserviciosexistenciasAnterior() {
		return this.productosserviciosexistenciasAnterior;
	}

	public void setproductosserviciosexistenciasAnterior(ProductosServiciosExistencias productosserviciosexistenciasAnterior) {
		this.productosserviciosexistenciasAnterior = productosserviciosexistenciasAnterior;
	}	
	
	public ProductosServiciosExistencias getproductosserviciosexistenciasTotales() {
		return this.productosserviciosexistenciasTotales;
	}

	public void setproductosserviciosexistenciasTotales(ProductosServiciosExistencias productosserviciosexistenciasTotales) {
		this.productosserviciosexistenciasTotales = productosserviciosexistenciasTotales;
	}	
	
	public ProductosServiciosExistencias getproductosserviciosexistenciasBean() {
		return this.productosserviciosexistenciasBean;
	}

	public void setproductosserviciosexistenciasBean(ProductosServiciosExistencias productosserviciosexistenciasBean) {
		this.productosserviciosexistenciasBean = productosserviciosexistenciasBean;
	}	
	
	public ProductosServiciosExistenciasParameterReturnGeneral getproductosserviciosexistenciasReturnGeneral() {
		return this.productosserviciosexistenciasReturnGeneral;
	}

	public void setproductosserviciosexistenciasReturnGeneral(ProductosServiciosExistenciasParameterReturnGeneral productosserviciosexistenciasReturnGeneral) {
		this.productosserviciosexistenciasReturnGeneral = productosserviciosexistenciasReturnGeneral;
	}	
	
	
	public Long id_bodegaBusquedaProductosServiciosExistencias=-1L;

	public Long getid_bodegaBusquedaProductosServiciosExistencias() {
		return this.id_bodegaBusquedaProductosServiciosExistencias;
	}

	public void setid_bodegaBusquedaProductosServiciosExistencias(Long id_bodegaBusquedaProductosServiciosExistencias) {
		this.id_bodegaBusquedaProductosServiciosExistencias = id_bodegaBusquedaProductosServiciosExistencias;
	}

;
	public Long id_productoBusquedaProductosServiciosExistencias=-1L;

	public Long getid_productoBusquedaProductosServiciosExistencias() {
		return this.id_productoBusquedaProductosServiciosExistencias;
	}

	public void setid_productoBusquedaProductosServiciosExistencias(Long id_productoBusquedaProductosServiciosExistencias) {
		this.id_productoBusquedaProductosServiciosExistencias = id_productoBusquedaProductosServiciosExistencias;
	}

;
	public Long id_lineaBusquedaProductosServiciosExistencias=-1L;

	public Long getid_lineaBusquedaProductosServiciosExistencias() {
		return this.id_lineaBusquedaProductosServiciosExistencias;
	}

	public void setid_lineaBusquedaProductosServiciosExistencias(Long id_lineaBusquedaProductosServiciosExistencias) {
		this.id_lineaBusquedaProductosServiciosExistencias = id_lineaBusquedaProductosServiciosExistencias;
	}

;
	public Long id_linea_grupoBusquedaProductosServiciosExistencias=-1L;

	public Long getid_linea_grupoBusquedaProductosServiciosExistencias() {
		return this.id_linea_grupoBusquedaProductosServiciosExistencias;
	}

	public void setid_linea_grupoBusquedaProductosServiciosExistencias(Long id_linea_grupoBusquedaProductosServiciosExistencias) {
		this.id_linea_grupoBusquedaProductosServiciosExistencias = id_linea_grupoBusquedaProductosServiciosExistencias;
	}

;
	public Long id_linea_categoriaBusquedaProductosServiciosExistencias=-1L;

	public Long getid_linea_categoriaBusquedaProductosServiciosExistencias() {
		return this.id_linea_categoriaBusquedaProductosServiciosExistencias;
	}

	public void setid_linea_categoriaBusquedaProductosServiciosExistencias(Long id_linea_categoriaBusquedaProductosServiciosExistencias) {
		this.id_linea_categoriaBusquedaProductosServiciosExistencias = id_linea_categoriaBusquedaProductosServiciosExistencias;
	}

;
	public Long id_linea_marcaBusquedaProductosServiciosExistencias=-1L;

	public Long getid_linea_marcaBusquedaProductosServiciosExistencias() {
		return this.id_linea_marcaBusquedaProductosServiciosExistencias;
	}

	public void setid_linea_marcaBusquedaProductosServiciosExistencias(Long id_linea_marcaBusquedaProductosServiciosExistencias) {
		this.id_linea_marcaBusquedaProductosServiciosExistencias = id_linea_marcaBusquedaProductosServiciosExistencias;
	}

;
	public Long id_tipo_producto_servicioBusquedaProductosServiciosExistencias=-1L;

	public Long getid_tipo_producto_servicioBusquedaProductosServiciosExistencias() {
		return this.id_tipo_producto_servicioBusquedaProductosServiciosExistencias;
	}

	public void setid_tipo_producto_servicioBusquedaProductosServiciosExistencias(Long id_tipo_producto_servicioBusquedaProductosServiciosExistencias) {
		this.id_tipo_producto_servicioBusquedaProductosServiciosExistencias = id_tipo_producto_servicioBusquedaProductosServiciosExistencias;
	}

	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_lineaFK_IdLinea=-1L;

	public Long getid_lineaFK_IdLinea() {
		return this.id_lineaFK_IdLinea;
	}

	public void setid_lineaFK_IdLinea(Long id_lineaFK_IdLinea) {
		this.id_lineaFK_IdLinea = id_lineaFK_IdLinea;
	}

	public Long id_linea_categoriaFK_IdLineaCategoria=-1L;

	public Long getid_linea_categoriaFK_IdLineaCategoria() {
		return this.id_linea_categoriaFK_IdLineaCategoria;
	}

	public void setid_linea_categoriaFK_IdLineaCategoria(Long id_linea_categoriaFK_IdLineaCategoria) {
		this.id_linea_categoriaFK_IdLineaCategoria = id_linea_categoriaFK_IdLineaCategoria;
	}

	public Long id_linea_grupoFK_IdLineaGrupo=-1L;

	public Long getid_linea_grupoFK_IdLineaGrupo() {
		return this.id_linea_grupoFK_IdLineaGrupo;
	}

	public void setid_linea_grupoFK_IdLineaGrupo(Long id_linea_grupoFK_IdLineaGrupo) {
		this.id_linea_grupoFK_IdLineaGrupo = id_linea_grupoFK_IdLineaGrupo;
	}

	public Long id_linea_marcaFK_IdLineaMarca=-1L;

	public Long getid_linea_marcaFK_IdLineaMarca() {
		return this.id_linea_marcaFK_IdLineaMarca;
	}

	public void setid_linea_marcaFK_IdLineaMarca(Long id_linea_marcaFK_IdLineaMarca) {
		this.id_linea_marcaFK_IdLineaMarca = id_linea_marcaFK_IdLineaMarca;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_producto_servicioFK_IdTipoProductoServicio=-1L;

	public Long getid_tipo_producto_servicioFK_IdTipoProductoServicio() {
		return this.id_tipo_producto_servicioFK_IdTipoProductoServicio;
	}

	public void setid_tipo_producto_servicioFK_IdTipoProductoServicio(Long id_tipo_producto_servicioFK_IdTipoProductoServicio) {
		this.id_tipo_producto_servicioFK_IdTipoProductoServicio = id_tipo_producto_servicioFK_IdTipoProductoServicio;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ProductosServiciosExistenciasLogic getProductosServiciosExistenciasLogic()	{		
		return productosserviciosexistenciasLogic;
	}

	public void setProductosServiciosExistenciasLogic(ProductosServiciosExistenciasLogic productosserviciosexistenciasLogic) {
		this.productosserviciosexistenciasLogic = productosserviciosexistenciasLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoProductosServiciosExistencias() {
		return isEsNuevoProductosServiciosExistencias;
	}

	public void setIsEsNuevoProductosServiciosExistencias(Boolean isEsNuevoProductosServiciosExistencias) {
		this.isEsNuevoProductosServiciosExistencias = isEsNuevoProductosServiciosExistencias;
	}

	public Boolean getEsParaAccionDesdeFormularioProductosServiciosExistencias() {
		return esParaAccionDesdeFormularioProductosServiciosExistencias;
	}
	
	public void setEsParaAccionDesdeFormularioProductosServiciosExistencias(Boolean esParaAccionDesdeFormularioProductosServiciosExistencias) {
		this.esParaAccionDesdeFormularioProductosServiciosExistencias = esParaAccionDesdeFormularioProductosServiciosExistencias;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLineasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.lineasForeignKey=new ArrayList<Linea>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LineaLogic lineaLogic=new LineaLogic();

			//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionLinea()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

					lineaLogic.getTodosLineasWithConnection(sFinalQuery,new Pagination());

					this.lineasForeignKey=lineaLogic.getLineas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLinea(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					lineaLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidLineaActual());
					this.lineasForeignKey.add(lineaLogic.getLinea());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLineaGruposForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.lineagruposForeignKey=new ArrayList<Linea>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LineaLogic lineaLogic=new LineaLogic();

			//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionLineaGrupo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//lineagrupoLogic.getLineaDataAccess().setIsForForeingKeyData(true);

					lineaLogic.getTodosLineasWithConnection(sFinalQuery,new Pagination());

					this.lineagruposForeignKey=lineaLogic.getLineas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLineaGrupo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					lineaLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidLineaGrupoActual());
					this.lineagruposForeignKey.add(lineaLogic.getLinea());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLineaCategoriasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.lineacategoriasForeignKey=new ArrayList<Linea>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LineaLogic lineaLogic=new LineaLogic();

			//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionLineaCategoria()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//lineacategoriaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

					lineaLogic.getTodosLineasWithConnection(sFinalQuery,new Pagination());

					this.lineacategoriasForeignKey=lineaLogic.getLineas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLineaCategoria(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					lineaLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidLineaCategoriaActual());
					this.lineacategoriasForeignKey.add(lineaLogic.getLinea());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLineaMarcasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.lineamarcasForeignKey=new ArrayList<Linea>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LineaLogic lineaLogic=new LineaLogic();

			//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionLineaMarca()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//lineamarcaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

					lineaLogic.getTodosLineasWithConnection(sFinalQuery,new Pagination());

					this.lineamarcasForeignKey=lineaLogic.getLineas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLineaMarca(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					lineaLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidLineaMarcaActual());
					this.lineamarcasForeignKey.add(lineaLogic.getLinea());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoProductoServiciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoproductoserviciosForeignKey=new ArrayList<TipoProductoServicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoProductoServicioLogic tipoproductoservicioLogic=new TipoProductoServicioLogic();

			//tipoproductoservicioLogic.getTipoProductoServicioDataAccess().setIsForForeingKeyData(true);

			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionTipoProductoServicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoproductoservicioLogic.getTipoProductoServicioDataAccess().setIsForForeingKeyData(true);

					tipoproductoservicioLogic.getTodosTipoProductoServiciosWithConnection(sFinalQuery,new Pagination());

					this.tipoproductoserviciosForeignKey=tipoproductoservicioLogic.getTipoProductoServicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoProductoServicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoproductoservicioLogic.getEntityWithConnection(productosserviciosexistenciasSessionBean.getlidTipoProductoServicioActual());
					this.tipoproductoserviciosForeignKey.add(tipoproductoservicioLogic.getTipoProductoServicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaProductosServiciosExistencias.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaProductosServiciosExistenciasGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaProductosServiciosExistenciasGenerico!=null && jComboBoxid_empresaProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_empresaProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalProductosServiciosExistencias.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalProductosServiciosExistenciasGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalProductosServiciosExistenciasGenerico!=null && jComboBoxid_sucursalProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_sucursalProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaProductosServiciosExistencias.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
						jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
							//jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getItemCount()>0) {
								jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaProductosServiciosExistenciasGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaProductosServiciosExistenciasGenerico!=null && jComboBoxid_bodegaProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_bodegaProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoProductosServiciosExistencias.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
						jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
							//jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(productoTemp);
							if(jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getItemCount()>0) {
								jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoProductosServiciosExistenciasGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoProductosServiciosExistenciasGenerico!=null && jComboBoxid_productoProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_productoProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLineaForeignKey(Long idLineaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Linea  lineaTemp=null;

			for(Linea lineaAux:lineasForeignKey) {
				if(lineaAux.getId()!=null && lineaAux.getId().equals(idLineaSeleccionado)) {
					lineaTemp=lineaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(lineaTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setLinea(lineaTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setSelectedItem(lineaTemp);
					}
				} else {
					//jComboBoxid_lineaProductosServiciosExistencias.setSelectedItem(lineaTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){
					if(lineaTemp!=null && jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
						jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineaTemp);
					} else {
						if(jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
							//jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineaTemp);
							if(jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getItemCount()>0) {
								jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLineaForeignKeyDescripcion(Long idLineaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Linea  lineaTemp=null;

			for(Linea lineaAux:lineasForeignKey) {
				if(lineaAux.getId()!=null && lineaAux.getId().equals(idLineaSeleccionado)) {
					lineaTemp=lineaAux;
					break;
				}
			}


			sDescripcion=LineaConstantesFunciones.getLineaDescripcion(lineaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLineaForeignKeyGenerico(Long idLineaSeleccionado,JComboBox jComboBoxid_lineaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Linea  lineaTemp=null;

			for(Linea lineaAux:lineasForeignKey) {
				if(lineaAux.getId()!=null && lineaAux.getId().equals(idLineaSeleccionado)) {
					lineaTemp=lineaAux;
					break;
				}
			}

			if(lineaTemp!=null) {
				jComboBoxid_lineaProductosServiciosExistenciasGenerico.setSelectedItem(lineaTemp);
			} else {
				if(jComboBoxid_lineaProductosServiciosExistenciasGenerico!=null && jComboBoxid_lineaProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_lineaProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLineaGrupoForeignKey(Long idLineaGrupoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Linea  lineagrupoTemp=null;

			for(Linea lineagrupoAux:lineagruposForeignKey) {
				if(lineagrupoAux.getId()!=null && lineagrupoAux.getId().equals(idLineaGrupoSeleccionado)) {
					lineagrupoTemp=lineagrupoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(lineagrupoTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setLineaGrupo(lineagrupoTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setSelectedItem(lineagrupoTemp);
					}
				} else {
					//jComboBoxid_linea_grupoProductosServiciosExistencias.setSelectedItem(lineagrupoTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){
					if(lineagrupoTemp!=null && jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
						jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineagrupoTemp);
					} else {
						if(jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
							//jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineagrupoTemp);
							if(jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getItemCount()>0) {
								jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLineaGrupoForeignKeyDescripcion(Long idLineaGrupoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Linea  lineagrupoTemp=null;

			for(Linea lineagrupoAux:lineagruposForeignKey) {
				if(lineagrupoAux.getId()!=null && lineagrupoAux.getId().equals(idLineaGrupoSeleccionado)) {
					lineagrupoTemp=lineagrupoAux;
					break;
				}
			}


			sDescripcion=LineaConstantesFunciones.getLineaDescripcion(lineagrupoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLineaGrupoForeignKeyGenerico(Long idLineaGrupoSeleccionado,JComboBox jComboBoxid_linea_grupoProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Linea  lineagrupoTemp=null;

			for(Linea lineagrupoAux:lineagruposForeignKey) {
				if(lineagrupoAux.getId()!=null && lineagrupoAux.getId().equals(idLineaGrupoSeleccionado)) {
					lineagrupoTemp=lineagrupoAux;
					break;
				}
			}

			if(lineagrupoTemp!=null) {
				jComboBoxid_linea_grupoProductosServiciosExistenciasGenerico.setSelectedItem(lineagrupoTemp);
			} else {
				if(jComboBoxid_linea_grupoProductosServiciosExistenciasGenerico!=null && jComboBoxid_linea_grupoProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_linea_grupoProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLineaCategoriaForeignKey(Long idLineaCategoriaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Linea  lineacategoriaTemp=null;

			for(Linea lineacategoriaAux:lineacategoriasForeignKey) {
				if(lineacategoriaAux.getId()!=null && lineacategoriaAux.getId().equals(idLineaCategoriaSeleccionado)) {
					lineacategoriaTemp=lineacategoriaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(lineacategoriaTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setLineaCategoria(lineacategoriaTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setSelectedItem(lineacategoriaTemp);
					}
				} else {
					//jComboBoxid_linea_categoriaProductosServiciosExistencias.setSelectedItem(lineacategoriaTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){
					if(lineacategoriaTemp!=null && jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
						jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineacategoriaTemp);
					} else {
						if(jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
							//jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineacategoriaTemp);
							if(jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getItemCount()>0) {
								jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLineaCategoriaForeignKeyDescripcion(Long idLineaCategoriaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Linea  lineacategoriaTemp=null;

			for(Linea lineacategoriaAux:lineacategoriasForeignKey) {
				if(lineacategoriaAux.getId()!=null && lineacategoriaAux.getId().equals(idLineaCategoriaSeleccionado)) {
					lineacategoriaTemp=lineacategoriaAux;
					break;
				}
			}


			sDescripcion=LineaConstantesFunciones.getLineaDescripcion(lineacategoriaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLineaCategoriaForeignKeyGenerico(Long idLineaCategoriaSeleccionado,JComboBox jComboBoxid_linea_categoriaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Linea  lineacategoriaTemp=null;

			for(Linea lineacategoriaAux:lineacategoriasForeignKey) {
				if(lineacategoriaAux.getId()!=null && lineacategoriaAux.getId().equals(idLineaCategoriaSeleccionado)) {
					lineacategoriaTemp=lineacategoriaAux;
					break;
				}
			}

			if(lineacategoriaTemp!=null) {
				jComboBoxid_linea_categoriaProductosServiciosExistenciasGenerico.setSelectedItem(lineacategoriaTemp);
			} else {
				if(jComboBoxid_linea_categoriaProductosServiciosExistenciasGenerico!=null && jComboBoxid_linea_categoriaProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_linea_categoriaProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLineaMarcaForeignKey(Long idLineaMarcaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Linea  lineamarcaTemp=null;

			for(Linea lineamarcaAux:lineamarcasForeignKey) {
				if(lineamarcaAux.getId()!=null && lineamarcaAux.getId().equals(idLineaMarcaSeleccionado)) {
					lineamarcaTemp=lineamarcaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(lineamarcaTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setLineaMarca(lineamarcaTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setSelectedItem(lineamarcaTemp);
					}
				} else {
					//jComboBoxid_linea_marcaProductosServiciosExistencias.setSelectedItem(lineamarcaTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){
					if(lineamarcaTemp!=null && jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
						jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineamarcaTemp);
					} else {
						if(jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
							//jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineamarcaTemp);
							if(jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getItemCount()>0) {
								jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLineaMarcaForeignKeyDescripcion(Long idLineaMarcaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Linea  lineamarcaTemp=null;

			for(Linea lineamarcaAux:lineamarcasForeignKey) {
				if(lineamarcaAux.getId()!=null && lineamarcaAux.getId().equals(idLineaMarcaSeleccionado)) {
					lineamarcaTemp=lineamarcaAux;
					break;
				}
			}


			sDescripcion=LineaConstantesFunciones.getLineaDescripcion(lineamarcaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLineaMarcaForeignKeyGenerico(Long idLineaMarcaSeleccionado,JComboBox jComboBoxid_linea_marcaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Linea  lineamarcaTemp=null;

			for(Linea lineamarcaAux:lineamarcasForeignKey) {
				if(lineamarcaAux.getId()!=null && lineamarcaAux.getId().equals(idLineaMarcaSeleccionado)) {
					lineamarcaTemp=lineamarcaAux;
					break;
				}
			}

			if(lineamarcaTemp!=null) {
				jComboBoxid_linea_marcaProductosServiciosExistenciasGenerico.setSelectedItem(lineamarcaTemp);
			} else {
				if(jComboBoxid_linea_marcaProductosServiciosExistenciasGenerico!=null && jComboBoxid_linea_marcaProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_linea_marcaProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoProductoServicioForeignKey(Long idTipoProductoServicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoProductoServicio  tipoproductoservicioTemp=null;

			for(TipoProductoServicio tipoproductoservicioAux:tipoproductoserviciosForeignKey) {
				if(tipoproductoservicioAux.getId()!=null && tipoproductoservicioAux.getId().equals(idTipoProductoServicioSeleccionado)) {
					tipoproductoservicioTemp=tipoproductoservicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoproductoservicioTemp!=null) {

					if(this.productosserviciosexistencias!=null) {
						this.productosserviciosexistencias.setTipoProductoServicio(tipoproductoservicioTemp);
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setSelectedItem(tipoproductoservicioTemp);
					}
				} else {
					//jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setSelectedItem(tipoproductoservicioTemp);
					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoproductoservicioTemp!=null && jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
						jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(tipoproductoservicioTemp);
					} else {
						if(jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
							//jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(tipoproductoservicioTemp);
							if(jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getItemCount()>0) {
								jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoProductoServicioForeignKeyDescripcion(Long idTipoProductoServicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoProductoServicio  tipoproductoservicioTemp=null;

			for(TipoProductoServicio tipoproductoservicioAux:tipoproductoserviciosForeignKey) {
				if(tipoproductoservicioAux.getId()!=null && tipoproductoservicioAux.getId().equals(idTipoProductoServicioSeleccionado)) {
					tipoproductoservicioTemp=tipoproductoservicioAux;
					break;
				}
			}


			sDescripcion=TipoProductoServicioConstantesFunciones.getTipoProductoServicioDescripcion(tipoproductoservicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoProductoServicioForeignKeyGenerico(Long idTipoProductoServicioSeleccionado,JComboBox jComboBoxid_tipo_producto_servicioProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			TipoProductoServicio  tipoproductoservicioTemp=null;

			for(TipoProductoServicio tipoproductoservicioAux:tipoproductoserviciosForeignKey) {
				if(tipoproductoservicioAux.getId()!=null && tipoproductoservicioAux.getId().equals(idTipoProductoServicioSeleccionado)) {
					tipoproductoservicioTemp=tipoproductoservicioAux;
					break;
				}
			}

			if(tipoproductoservicioTemp!=null) {
				jComboBoxid_tipo_producto_servicioProductosServiciosExistenciasGenerico.setSelectedItem(tipoproductoservicioTemp);
			} else {
				if(jComboBoxid_tipo_producto_servicioProductosServiciosExistenciasGenerico!=null && jComboBoxid_tipo_producto_servicioProductosServiciosExistenciasGenerico.getItemCount()>0) {
					jComboBoxid_tipo_producto_servicioProductosServiciosExistenciasGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_empresaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaProductosServiciosExistenciasGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				productosserviciosexistencias.setid_empresa(empresaAux.getId());
				productosserviciosexistencias.setempresa_descripcion(ProductosServiciosExistenciasConstantesFunciones.getEmpresaDescripcion(empresaAux));
				productosserviciosexistencias.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_sucursalProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalProductosServiciosExistenciasGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				productosserviciosexistencias.setid_sucursal(sucursalAux.getId());
				productosserviciosexistencias.setsucursal_descripcion(ProductosServiciosExistenciasConstantesFunciones.getSucursalDescripcion(sucursalAux));
				productosserviciosexistencias.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_bodegaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaProductosServiciosExistenciasGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				productosserviciosexistencias.setid_bodega(bodegaAux.getId());
				productosserviciosexistencias.setbodega_descripcion(ProductosServiciosExistenciasConstantesFunciones.getBodegaDescripcion(bodegaAux));
				productosserviciosexistencias.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_productoProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoProductosServiciosExistenciasGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				productosserviciosexistencias.setid_producto(productoAux.getId());
				productosserviciosexistencias.setproducto_descripcion(ProductosServiciosExistenciasConstantesFunciones.getProductoDescripcion(productoAux));
				productosserviciosexistencias.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLineaForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_lineaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Linea  lineaAux=new Linea();

			if(jComboBoxid_lineaProductosServiciosExistenciasGenerico==null) {
				lineaAux=(Linea)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.getSelectedItem();
			} else {
				lineaAux=(Linea)jComboBoxid_lineaProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(lineaAux!=null && lineaAux.getId()!=null) {
				productosserviciosexistencias.setid_linea(lineaAux.getId());
				productosserviciosexistencias.setlinea_descripcion(ProductosServiciosExistenciasConstantesFunciones.getLineaDescripcion(lineaAux));
				productosserviciosexistencias.setLinea(lineaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLineaGrupoForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_linea_grupoProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Linea  lineaAux=new Linea();

			if(jComboBoxid_linea_grupoProductosServiciosExistenciasGenerico==null) {
				lineaAux=(Linea)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.getSelectedItem();
			} else {
				lineaAux=(Linea)jComboBoxid_linea_grupoProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(lineaAux!=null && lineaAux.getId()!=null) {
				productosserviciosexistencias.setid_linea_grupo(lineaAux.getId());
				productosserviciosexistencias.setlineagrupo_descripcion(ProductosServiciosExistenciasConstantesFunciones.getLineaGrupoDescripcion(lineaAux));
				productosserviciosexistencias.setLineaGrupo(lineaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLineaCategoriaForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_linea_categoriaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Linea  lineaAux=new Linea();

			if(jComboBoxid_linea_categoriaProductosServiciosExistenciasGenerico==null) {
				lineaAux=(Linea)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.getSelectedItem();
			} else {
				lineaAux=(Linea)jComboBoxid_linea_categoriaProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(lineaAux!=null && lineaAux.getId()!=null) {
				productosserviciosexistencias.setid_linea_categoria(lineaAux.getId());
				productosserviciosexistencias.setlineacategoria_descripcion(ProductosServiciosExistenciasConstantesFunciones.getLineaCategoriaDescripcion(lineaAux));
				productosserviciosexistencias.setLineaCategoria(lineaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLineaMarcaForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_linea_marcaProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			Linea  lineaAux=new Linea();

			if(jComboBoxid_linea_marcaProductosServiciosExistenciasGenerico==null) {
				lineaAux=(Linea)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.getSelectedItem();
			} else {
				lineaAux=(Linea)jComboBoxid_linea_marcaProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(lineaAux!=null && lineaAux.getId()!=null) {
				productosserviciosexistencias.setid_linea_marca(lineaAux.getId());
				productosserviciosexistencias.setlineamarca_descripcion(ProductosServiciosExistenciasConstantesFunciones.getLineaMarcaDescripcion(lineaAux));
				productosserviciosexistencias.setLineaMarca(lineaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoProductoServicioForeignKey(ProductosServiciosExistencias productosserviciosexistencias,JComboBox jComboBoxid_tipo_producto_servicioProductosServiciosExistenciasGenerico)throws Exception
	{
		try
		{
			TipoProductoServicio  tipoproductoservicioAux=new TipoProductoServicio();

			if(jComboBoxid_tipo_producto_servicioProductosServiciosExistenciasGenerico==null) {
				tipoproductoservicioAux=(TipoProductoServicio)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.getSelectedItem();
			} else {
				tipoproductoservicioAux=(TipoProductoServicio)jComboBoxid_tipo_producto_servicioProductosServiciosExistenciasGenerico.getSelectedItem();
			}

			if(tipoproductoservicioAux!=null && tipoproductoservicioAux.getId()!=null) {
				productosserviciosexistencias.setid_tipo_producto_servicio(tipoproductoservicioAux.getId());
				productosserviciosexistencias.settipoproductoservicio_descripcion(ProductosServiciosExistenciasConstantesFunciones.getTipoProductoServicioDescripcion(tipoproductoservicioAux));
				productosserviciosexistencias.setTipoProductoServicio(tipoproductoservicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addItem(bodega);
							}
						}

						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addItem(producto);
							}
						}

						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLineasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLinea=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.removeAllItems();

							for(Linea linea:this.lineasForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.addItem(linea);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.removeAllItems();

							for(Linea linea:this.lineasForeignKey) {
								this.jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addItem(linea);
							}
						}

						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLineaGruposForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLinea=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.removeAllItems();

							for(Linea lineagrupo:this.lineagruposForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.addItem(lineagrupo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.removeAllItems();

							for(Linea lineagrupo:this.lineagruposForeignKey) {
								this.jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addItem(lineagrupo);
							}
						}

						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLineaCategoriasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLinea=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.removeAllItems();

							for(Linea lineacategoria:this.lineacategoriasForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.addItem(lineacategoria);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.removeAllItems();

							for(Linea lineacategoria:this.lineacategoriasForeignKey) {
								this.jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addItem(lineacategoria);
							}
						}

						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLineaMarcasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLinea=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.removeAllItems();

							for(Linea lineamarca:this.lineamarcasForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.addItem(lineamarca);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.removeAllItems();

							for(Linea lineamarca:this.lineamarcasForeignKey) {
								this.jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addItem(lineamarca);
							}
						}

						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoProductoServiciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoProductoServicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.removeAllItems();

							for(TipoProductoServicio tipoproductoservicio:this.tipoproductoserviciosForeignKey) {
								this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.addItem(tipoproductoservicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { 
					}

					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("BusquedaProductosServiciosExistencias") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.removeAllItems();

							for(TipoProductoServicio tipoproductoservicio:this.tipoproductoserviciosForeignKey) {
								this.jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addItem(tipoproductoservicio);
							}
						}

						if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLineaForeignKey(Linea linea,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setSelectedItem(linea);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(linea);
						} else {
							this.jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLineaGrupoForeignKey(Linea lineagrupo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setSelectedItem(lineagrupo);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineagrupo);
						} else {
							this.jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLineaCategoriaForeignKey(Linea lineacategoria,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setSelectedItem(lineacategoria);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineacategoria);
						} else {
							this.jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLineaMarcaForeignKey(Linea lineamarca,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setSelectedItem(lineamarca);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(lineamarca);
						} else {
							this.jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoProductoServicioForeignKey(TipoProductoServicio tipoproductoservicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setSelectedItem(tipoproductoservicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedItem(tipoproductoservicio);
						} else {
							this.jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesProductosServiciosExistencias() throws Exception {
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ProductosServiciosExistenciasParameterReturnGeneral getProductosServiciosExistenciasParameterGeneral() {
		return this.productosserviciosexistenciasParameterGeneral;
	}
	
	public void setProductosServiciosExistenciasParameterGeneral(ProductosServiciosExistenciasParameterReturnGeneral productosserviciosexistenciasParameterGeneral) {
		this.productosserviciosexistenciasParameterGeneral = productosserviciosexistenciasParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoProductosServiciosExistencias() {
		return isPermisoTodoProductosServiciosExistencias;
	}

	public void setIsPermisoTodoProductosServiciosExistencias(Boolean isPermisoTodoProductosServiciosExistencias) {
		this.isPermisoTodoProductosServiciosExistencias = isPermisoTodoProductosServiciosExistencias;
	}

	public Boolean getIsPermisoNuevoProductosServiciosExistencias() {
		return isPermisoNuevoProductosServiciosExistencias;
	}

	public void setIsPermisoNuevoProductosServiciosExistencias(Boolean isPermisoNuevoProductosServiciosExistencias) {
		this.isPermisoNuevoProductosServiciosExistencias = isPermisoNuevoProductosServiciosExistencias;
	}

	public Boolean getIsPermisoActualizarProductosServiciosExistencias() {
		return isPermisoActualizarProductosServiciosExistencias;
	}

	public void setIsPermisoActualizarProductosServiciosExistencias(Boolean isPermisoActualizarProductosServiciosExistencias) {
		this.isPermisoActualizarProductosServiciosExistencias = isPermisoActualizarProductosServiciosExistencias;
	}

	public Boolean getIsPermisoEliminarProductosServiciosExistencias() {
		return isPermisoEliminarProductosServiciosExistencias;
	}

	public void setIsPermisoEliminarProductosServiciosExistencias(Boolean isPermisoEliminarProductosServiciosExistencias) {
		this.isPermisoEliminarProductosServiciosExistencias = isPermisoEliminarProductosServiciosExistencias;
	}

	public Boolean getIsPermisoGuardarCambiosProductosServiciosExistencias() {
		return isPermisoGuardarCambiosProductosServiciosExistencias;
	}

	public void setIsPermisoGuardarCambiosProductosServiciosExistencias(Boolean isPermisoGuardarCambiosProductosServiciosExistencias) {
		this.isPermisoGuardarCambiosProductosServiciosExistencias = isPermisoGuardarCambiosProductosServiciosExistencias;
	}
	
	public Boolean getIsPermisoConsultaProductosServiciosExistencias() {
		return isPermisoConsultaProductosServiciosExistencias;
	}

	public void setIsPermisoConsultaProductosServiciosExistencias(Boolean isPermisoConsultaProductosServiciosExistencias) {
		this.isPermisoConsultaProductosServiciosExistencias = isPermisoConsultaProductosServiciosExistencias;
	}

	public Boolean getIsPermisoBusquedaProductosServiciosExistencias() {
		return isPermisoBusquedaProductosServiciosExistencias;
	}

	public void setIsPermisoBusquedaProductosServiciosExistencias(Boolean isPermisoBusquedaProductosServiciosExistencias) {
		this.isPermisoBusquedaProductosServiciosExistencias = isPermisoBusquedaProductosServiciosExistencias;
	}

	public Boolean getIsPermisoReporteProductosServiciosExistencias() {
		return isPermisoReporteProductosServiciosExistencias;
	}

	public void setIsPermisoReporteProductosServiciosExistencias(Boolean isPermisoReporteProductosServiciosExistencias) {
		this.isPermisoReporteProductosServiciosExistencias = isPermisoReporteProductosServiciosExistencias;
	}
	
	public Boolean getIsPermisoPaginacionMedioProductosServiciosExistencias() {
		return isPermisoPaginacionMedioProductosServiciosExistencias;
	}

	public void setIsPermisoPaginacionMedioProductosServiciosExistencias(Boolean isPermisoPaginacionMedioProductosServiciosExistencias) {
		this.isPermisoPaginacionMedioProductosServiciosExistencias = isPermisoPaginacionMedioProductosServiciosExistencias;
	}
	
	public Boolean getIsPermisoPaginacionTodoProductosServiciosExistencias() {
		return isPermisoPaginacionTodoProductosServiciosExistencias;
	}

	public void setIsPermisoPaginacionTodoProductosServiciosExistencias(Boolean isPermisoPaginacionTodoProductosServiciosExistencias) {
		this.isPermisoPaginacionTodoProductosServiciosExistencias = isPermisoPaginacionTodoProductosServiciosExistencias;
	}
	
	public Boolean getIsPermisoPaginacionAltoProductosServiciosExistencias() {
		return isPermisoPaginacionAltoProductosServiciosExistencias;
	}

	public void setIsPermisoPaginacionAltoProductosServiciosExistencias(Boolean isPermisoPaginacionAltoProductosServiciosExistencias) {
		this.isPermisoPaginacionAltoProductosServiciosExistencias = isPermisoPaginacionAltoProductosServiciosExistencias;
	}
	
	public Boolean getIsPermisoCopiarProductosServiciosExistencias() {
		return isPermisoCopiarProductosServiciosExistencias;
	}

	public void setIsPermisoCopiarProductosServiciosExistencias(Boolean isPermisoCopiarProductosServiciosExistencias) {
		this.isPermisoCopiarProductosServiciosExistencias = isPermisoCopiarProductosServiciosExistencias;
	}
	
	public Boolean getIsPermisoVerFormProductosServiciosExistencias() {
		return isPermisoVerFormProductosServiciosExistencias;
	}

	public void setIsPermisoVerFormProductosServiciosExistencias(Boolean isPermisoVerFormProductosServiciosExistencias) {
		this.isPermisoVerFormProductosServiciosExistencias = isPermisoVerFormProductosServiciosExistencias;
	}
	
	public Boolean getIsPermisoDuplicarProductosServiciosExistencias() {
		return isPermisoDuplicarProductosServiciosExistencias;
	}

	public void setIsPermisoDuplicarProductosServiciosExistencias(Boolean isPermisoDuplicarProductosServiciosExistencias) {
		this.isPermisoDuplicarProductosServiciosExistencias = isPermisoDuplicarProductosServiciosExistencias;
	}
	
	public Boolean getIsPermisoOrdenProductosServiciosExistencias() {
		return isPermisoOrdenProductosServiciosExistencias;
	}

	public void setIsPermisoOrdenProductosServiciosExistencias(Boolean isPermisoOrdenProductosServiciosExistencias) {
		this.isPermisoOrdenProductosServiciosExistencias = isPermisoOrdenProductosServiciosExistencias;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoProductosServiciosExistencias() {
		return isVisibilidadCeldaNuevoProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaNuevoProductosServiciosExistencias(Boolean isVisibilidadCeldaNuevoProductosServiciosExistencias) {
		this.isVisibilidadCeldaNuevoProductosServiciosExistencias = isVisibilidadCeldaNuevoProductosServiciosExistencias;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarProductosServiciosExistencias() {
		return isVisibilidadCeldaDuplicarProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaDuplicarProductosServiciosExistencias(Boolean isVisibilidadCeldaDuplicarProductosServiciosExistencias) {
		this.isVisibilidadCeldaDuplicarProductosServiciosExistencias = isVisibilidadCeldaDuplicarProductosServiciosExistencias;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarProductosServiciosExistencias() {
		return isVisibilidadCeldaCopiarProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaCopiarProductosServiciosExistencias(Boolean isVisibilidadCeldaCopiarProductosServiciosExistencias) {
		this.isVisibilidadCeldaCopiarProductosServiciosExistencias = isVisibilidadCeldaCopiarProductosServiciosExistencias;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormProductosServiciosExistencias() {
		return isVisibilidadCeldaVerFormProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaVerFormProductosServiciosExistencias(Boolean isVisibilidadCeldaVerFormProductosServiciosExistencias) {
		this.isVisibilidadCeldaVerFormProductosServiciosExistencias = isVisibilidadCeldaVerFormProductosServiciosExistencias;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenProductosServiciosExistencias() {
		return isVisibilidadCeldaOrdenProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaOrdenProductosServiciosExistencias(Boolean isVisibilidadCeldaOrdenProductosServiciosExistencias) {
		this.isVisibilidadCeldaOrdenProductosServiciosExistencias = isVisibilidadCeldaOrdenProductosServiciosExistencias;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias() {
		return isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias(Boolean isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias) {
		this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias = isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias;
	}
	
	public Boolean getIsVisibilidadCeldaModificarProductosServiciosExistencias() {
		return isVisibilidadCeldaModificarProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaModificarProductosServiciosExistencias(Boolean isVisibilidadCeldaModificarProductosServiciosExistencias) {
		this.isVisibilidadCeldaModificarProductosServiciosExistencias = isVisibilidadCeldaModificarProductosServiciosExistencias;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarProductosServiciosExistencias() {
		return isVisibilidadCeldaActualizarProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaActualizarProductosServiciosExistencias(Boolean isVisibilidadCeldaActualizarProductosServiciosExistencias) {
		this.isVisibilidadCeldaActualizarProductosServiciosExistencias = isVisibilidadCeldaActualizarProductosServiciosExistencias;
	}

	public Boolean getIsVisibilidadCeldaEliminarProductosServiciosExistencias() {
		return isVisibilidadCeldaEliminarProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaEliminarProductosServiciosExistencias(Boolean isVisibilidadCeldaEliminarProductosServiciosExistencias) {
		this.isVisibilidadCeldaEliminarProductosServiciosExistencias = isVisibilidadCeldaEliminarProductosServiciosExistencias;
	}

	public Boolean getIsVisibilidadCeldaCancelarProductosServiciosExistencias() {
		return isVisibilidadCeldaCancelarProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaCancelarProductosServiciosExistencias(Boolean isVisibilidadCeldaCancelarProductosServiciosExistencias) {
		this.isVisibilidadCeldaCancelarProductosServiciosExistencias = isVisibilidadCeldaCancelarProductosServiciosExistencias;
	}

	public Boolean getIsVisibilidadCeldaGuardarProductosServiciosExistencias() {
		return isVisibilidadCeldaGuardarProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaGuardarProductosServiciosExistencias(Boolean isVisibilidadCeldaGuardarProductosServiciosExistencias) {
		this.isVisibilidadCeldaGuardarProductosServiciosExistencias = isVisibilidadCeldaGuardarProductosServiciosExistencias;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosProductosServiciosExistencias() {
		return isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias;
	}

	public void setIsVisibilidadCeldaGuardarCambiosProductosServiciosExistencias(Boolean isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias) {
		this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias = isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias;
	}
		
	public ProductosServiciosExistenciasSessionBean getproductosserviciosexistenciasSessionBean() {
		return this.productosserviciosexistenciasSessionBean;
	}
	
	public void setproductosserviciosexistenciasSessionBean(ProductosServiciosExistenciasSessionBean productosserviciosexistenciasSessionBean) {
		this.productosserviciosexistenciasSessionBean=productosserviciosexistenciasSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaProductosServiciosExistencias() {
		return this.isVisibilidadBusquedaProductosServiciosExistencias;
	}

	public void setisVisibilidadBusquedaProductosServiciosExistencias(Boolean isVisibilidadBusquedaProductosServiciosExistencias) {
		this.isVisibilidadBusquedaProductosServiciosExistencias=isVisibilidadBusquedaProductosServiciosExistencias;
	}

	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdLinea() {
		return this.isVisibilidadFK_IdLinea;
	}

	public void setisVisibilidadFK_IdLinea(Boolean isVisibilidadFK_IdLinea) {
		this.isVisibilidadFK_IdLinea=isVisibilidadFK_IdLinea;
	}

	public Boolean getisVisibilidadFK_IdLineaCategoria() {
		return this.isVisibilidadFK_IdLineaCategoria;
	}

	public void setisVisibilidadFK_IdLineaCategoria(Boolean isVisibilidadFK_IdLineaCategoria) {
		this.isVisibilidadFK_IdLineaCategoria=isVisibilidadFK_IdLineaCategoria;
	}

	public Boolean getisVisibilidadFK_IdLineaGrupo() {
		return this.isVisibilidadFK_IdLineaGrupo;
	}

	public void setisVisibilidadFK_IdLineaGrupo(Boolean isVisibilidadFK_IdLineaGrupo) {
		this.isVisibilidadFK_IdLineaGrupo=isVisibilidadFK_IdLineaGrupo;
	}

	public Boolean getisVisibilidadFK_IdLineaMarca() {
		return this.isVisibilidadFK_IdLineaMarca;
	}

	public void setisVisibilidadFK_IdLineaMarca(Boolean isVisibilidadFK_IdLineaMarca) {
		this.isVisibilidadFK_IdLineaMarca=isVisibilidadFK_IdLineaMarca;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoProductoServicio() {
		return this.isVisibilidadFK_IdTipoProductoServicio;
	}

	public void setisVisibilidadFK_IdTipoProductoServicio(Boolean isVisibilidadFK_IdTipoProductoServicio) {
		this.isVisibilidadFK_IdTipoProductoServicio=isVisibilidadFK_IdTipoProductoServicio;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(productosserviciosexistencias,null);
				this.setActualParaGuardarSucursalForeignKey(productosserviciosexistencias,null);
				this.setActualParaGuardarBodegaForeignKey(productosserviciosexistencias,null);
				this.setActualParaGuardarProductoForeignKey(productosserviciosexistencias,null);
				this.setActualParaGuardarLineaForeignKey(productosserviciosexistencias,null);
				this.setActualParaGuardarLineaGrupoForeignKey(productosserviciosexistencias,null);
				this.setActualParaGuardarLineaCategoriaForeignKey(productosserviciosexistencias,null);
				this.setActualParaGuardarLineaMarcaForeignKey(productosserviciosexistencias,null);
				this.setActualParaGuardarTipoProductoServicioForeignKey(productosserviciosexistencias,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(ProductosServiciosExistencias productosserviciosexistencias,ProductosServiciosExistencias productosserviciosexistenciasAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalProductosServiciosExistencias(productosserviciosexistencias);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		productosserviciosexistenciasAux.setId(productosserviciosexistencias.getId());
		productosserviciosexistenciasAux.setVersionRow(productosserviciosexistencias.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
	}	
	
	public void actualizarRelaciones(ProductosServiciosExistencias productosserviciosexistenciasLocal) throws Exception {
		
		if(this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(ProductosServiciosExistencias productosserviciosexistenciasLocal) throws Exception {	
		if(this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				productosserviciosexistenciasLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				productosserviciosexistenciasLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				productosserviciosexistenciasLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				productosserviciosexistenciasLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LineaDetalleFormJInternalFrame.class)) {
				LineaBeanSwingJInternalFrame lineaBeanSwingJInternalFrameLocal=(LineaBeanSwingJInternalFrame) ((LineaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				lineaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLinea(lineaBeanSwingJInternalFrameLocal.getlinea(),true);
				lineaBeanSwingJInternalFrameLocal.actualizarLista(lineaBeanSwingJInternalFrameLocal.linea,this.lineasForeignKey);

				lineaBeanSwingJInternalFrameLocal.actualizarRelaciones(lineaBeanSwingJInternalFrameLocal.linea);

				productosserviciosexistenciasLocal.setLinea(lineaBeanSwingJInternalFrameLocal.linea);

				this.addItemDefectoCombosForeignKeyLinea();
				this.cargarCombosFrameLineasForeignKey("Formulario");
				this.setActualLineaForeignKey(lineaBeanSwingJInternalFrameLocal.linea.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LineaDetalleFormJInternalFrame.class)) {
				LineaBeanSwingJInternalFrame lineagrupoBeanSwingJInternalFrameLocal=(LineaBeanSwingJInternalFrame) ((LineaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				lineagrupoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLinea(lineagrupoBeanSwingJInternalFrameLocal.getlinea(),true);
				lineagrupoBeanSwingJInternalFrameLocal.actualizarLista(lineagrupoBeanSwingJInternalFrameLocal.linea,this.lineagruposForeignKey);

				lineagrupoBeanSwingJInternalFrameLocal.actualizarRelaciones(lineagrupoBeanSwingJInternalFrameLocal.linea);

				productosserviciosexistenciasLocal.setLineaGrupo(lineagrupoBeanSwingJInternalFrameLocal.linea);

				this.addItemDefectoCombosForeignKeyLineaGrupo();
				this.cargarCombosFrameLineaGruposForeignKey("Formulario");
				this.setActualLineaGrupoForeignKey(lineagrupoBeanSwingJInternalFrameLocal.linea.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LineaDetalleFormJInternalFrame.class)) {
				LineaBeanSwingJInternalFrame lineacategoriaBeanSwingJInternalFrameLocal=(LineaBeanSwingJInternalFrame) ((LineaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				lineacategoriaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLinea(lineacategoriaBeanSwingJInternalFrameLocal.getlinea(),true);
				lineacategoriaBeanSwingJInternalFrameLocal.actualizarLista(lineacategoriaBeanSwingJInternalFrameLocal.linea,this.lineacategoriasForeignKey);

				lineacategoriaBeanSwingJInternalFrameLocal.actualizarRelaciones(lineacategoriaBeanSwingJInternalFrameLocal.linea);

				productosserviciosexistenciasLocal.setLineaCategoria(lineacategoriaBeanSwingJInternalFrameLocal.linea);

				this.addItemDefectoCombosForeignKeyLineaCategoria();
				this.cargarCombosFrameLineaCategoriasForeignKey("Formulario");
				this.setActualLineaCategoriaForeignKey(lineacategoriaBeanSwingJInternalFrameLocal.linea.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LineaDetalleFormJInternalFrame.class)) {
				LineaBeanSwingJInternalFrame lineamarcaBeanSwingJInternalFrameLocal=(LineaBeanSwingJInternalFrame) ((LineaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				lineamarcaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLinea(lineamarcaBeanSwingJInternalFrameLocal.getlinea(),true);
				lineamarcaBeanSwingJInternalFrameLocal.actualizarLista(lineamarcaBeanSwingJInternalFrameLocal.linea,this.lineamarcasForeignKey);

				lineamarcaBeanSwingJInternalFrameLocal.actualizarRelaciones(lineamarcaBeanSwingJInternalFrameLocal.linea);

				productosserviciosexistenciasLocal.setLineaMarca(lineamarcaBeanSwingJInternalFrameLocal.linea);

				this.addItemDefectoCombosForeignKeyLineaMarca();
				this.cargarCombosFrameLineaMarcasForeignKey("Formulario");
				this.setActualLineaMarcaForeignKey(lineamarcaBeanSwingJInternalFrameLocal.linea.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoProductoServicioDetalleFormJInternalFrame.class)) {
				TipoProductoServicioBeanSwingJInternalFrame tipoproductoservicioBeanSwingJInternalFrameLocal=(TipoProductoServicioBeanSwingJInternalFrame) ((TipoProductoServicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoproductoservicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoProductoServicio(tipoproductoservicioBeanSwingJInternalFrameLocal.gettipoproductoservicio(),true);
				tipoproductoservicioBeanSwingJInternalFrameLocal.actualizarLista(tipoproductoservicioBeanSwingJInternalFrameLocal.tipoproductoservicio,this.tipoproductoserviciosForeignKey);

				tipoproductoservicioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoproductoservicioBeanSwingJInternalFrameLocal.tipoproductoservicio);

				productosserviciosexistenciasLocal.setTipoProductoServicio(tipoproductoservicioBeanSwingJInternalFrameLocal.tipoproductoservicio);

				this.addItemDefectoCombosForeignKeyTipoProductoServicio();
				this.cargarCombosFrameTipoProductoServiciosForeignKey("Formulario");
				this.setActualTipoProductoServicioForeignKey(tipoproductoservicioBeanSwingJInternalFrameLocal.tipoproductoservicio.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarProductosServiciosExistenciasActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = productosserviciosexistenciasValidator.getInvalidValues(this.productosserviciosexistencias);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(ProductosServiciosExistencias productosserviciosexistencias,List<ProductosServiciosExistencias> productosserviciosexistenciass) throws Exception {
	}		
	
	public void actualizarSelectedLista(ProductosServiciosExistencias productosserviciosexistencias,List<ProductosServiciosExistencias> productosserviciosexistenciass) throws Exception {
		try	{			
			ProductosServiciosExistenciasConstantesFunciones.actualizarSelectedLista(productosserviciosexistencias,productosserviciosexistenciass);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<ProductosServiciosExistencias> productosserviciosexistenciassLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				productosserviciosexistenciassLocal=this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				productosserviciosexistenciassLocal=this.productosserviciosexistenciass;
			}
			//ARCHITECTURE
		
			for(ProductosServiciosExistencias productosserviciosexistenciasLocal:productosserviciosexistenciassLocal) {
				if(this.permiteMantenimiento(productosserviciosexistenciasLocal) && productosserviciosexistenciasLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.getProductosServiciosExistenciasLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBRESUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_sucursalProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBRELINEA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_lineaProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBRELINEAGRUPO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_grupoProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBRELINEACATEGORIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_categoriaProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBRELINEAMARCA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_marcaProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcodigoProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombreProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBRETIPOPRODUCTOSERVICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_tipo_producto_servicioProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBREBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_bodegaProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.NOMBREUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_unidadProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.CANTIDADDISPONIBLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_disponibleProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.CANTIDADRESERVADA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_reservadaProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.CANTIDADPEDIDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_pedidaProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.TOTALEGRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_egresoProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.TOTALCOMPRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_compraProductosServiciosExistencias,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductosServiciosExistenciasConstantesFunciones.TOTALDEVUELTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_devueltoProductosServiciosExistencias,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_sucursalProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_lineaProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_grupoProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_categoriaProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_marcaProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcodigoProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombreProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_tipo_producto_servicioProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_bodegaProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_unidadProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_disponibleProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_reservadaProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_pedidaProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_egresoProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_compraProductosServiciosExistencias,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_devueltoProductosServiciosExistencias,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoProductosServiciosExistencias--;	
		
		
		this.productosserviciosexistenciasAux=new ProductosServiciosExistencias();
		
		this.productosserviciosexistenciasAux.setId(this.iIdNuevoProductosServiciosExistencias);
		this.productosserviciosexistenciasAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().add(this.productosserviciosexistenciasAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.productosserviciosexistenciass.add(this.productosserviciosexistenciasAux);
		}
		//ARCHITECTURE
		
		this.productosserviciosexistencias=this.productosserviciosexistenciasAux;
		
		if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioProductosServiciosExistencias(this.productosserviciosexistencias);
			this.setVariablesObjetoActualToFormularioForeignKeyProductosServiciosExistencias(this.productosserviciosexistencias);
		}
				
		//this.setDefaultControlesProductosServiciosExistencias();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyProductosServiciosExistencias();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyProductosServiciosExistencias();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyProductosServiciosExistencias();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualProductosServiciosExistencias(this.productosserviciosexistenciasBean,this.productosserviciosexistencias,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanProductosServiciosExistencias(this.productosserviciosexistenciasReturnGeneral,this.productosserviciosexistenciasBean,false);
		
		if(this.productosserviciosexistenciasReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyProductosServiciosExistencias(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioProductosServiciosExistencias(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias());
		}
		
		if(this.productosserviciosexistenciasReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioProductosServiciosExistencias(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias(),classes);//this.productosserviciosexistenciasBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyProductosServiciosExistencias();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyProductosServiciosExistencias();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.RecargarFormProductosServiciosExistencias(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingProductosServiciosExistencias(false);
						
			if(productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualProductosServiciosExistencias();
			}
			
			this.actualizarVisualTableDatosProductosServiciosExistencias();
			
			this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(this.getIndiceNuevoProductosServiciosExistencias(), this.getIndiceNuevoProductosServiciosExistencias());
			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
						
			this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesProductosServiciosExistencias(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_sucursalProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombre_sucursalProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_lineaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombre_lineaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_grupoProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_grupoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_categoriaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_categoriaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_marcaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_marcaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcodigoProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarcodigoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombreProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombreProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_tipo_producto_servicioProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombre_tipo_producto_servicioProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_bodegaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombre_bodegaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldnombre_unidadProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarnombre_unidadProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_disponibleProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarcantidad_disponibleProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_reservadaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarcantidad_reservadaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_pedidaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarcantidad_pedidaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_egresoProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activartotal_egresoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_compraProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activartotal_compraProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_devueltoProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activartotal_devueltoProductosServiciosExistencias);	
		//
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_empresaProductosServiciosExistencias);//
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_sucursalProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_bodegaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_productoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_lineaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_linea_grupoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_linea_categoriaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_linea_marcaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setEnabled(isHabilitar && this.productosserviciosexistenciasConstantesFunciones.activarid_tipo_producto_servicioProductosServiciosExistencias);
	};
	
	public void setDefaultControlesProductosServiciosExistencias() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoProductosServiciosExistencias(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.productosserviciosexistenciasSessionBean.setConGuardarRelaciones(true);			
			this.productosserviciosexistenciasSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.setVisible(true);
			
					
		} else {
			//this.productosserviciosexistenciasSessionBean.setConGuardarRelaciones(false);			
			this.productosserviciosexistenciasSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoProductosServiciosExistencias() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
				if(productosserviciosexistenciasAux.getId().equals(this.iIdNuevoProductosServiciosExistencias)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciass) {
				if(productosserviciosexistenciasAux.getId().equals(this.iIdNuevoProductosServiciosExistencias)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
				if(productosserviciosexistenciasAux.getId().equals(productosserviciosexistencias.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciass) {
				if(productosserviciosexistenciasAux.getId().equals(productosserviciosexistencias.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistenciasOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
				if(productosserviciosexistenciasAux.getProductosServiciosExistenciasOriginal().getId().equals(productosserviciosexistenciasOriginal.getId())) {
					existe=true;
					productosserviciosexistenciasOriginal.setId(productosserviciosexistenciasAux.getId());
					productosserviciosexistenciasOriginal.setVersionRow(productosserviciosexistenciasAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciass) {
				if(productosserviciosexistenciasAux.getProductosServiciosExistenciasOriginal().getId().equals(productosserviciosexistenciasOriginal.getId())) {
					existe=true;
					productosserviciosexistenciasOriginal.setId(productosserviciosexistenciasAux.getId());
					productosserviciosexistenciasOriginal.setVersionRow(productosserviciosexistenciasAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosProductosServiciosExistencias(Boolean esParaCancelar) throws Exception {
		productosserviciosexistenciassAux=new ArrayList<ProductosServiciosExistencias>();
		productosserviciosexistenciasAux=new ProductosServiciosExistencias();
		
		if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
					if(productosserviciosexistenciasAux.getId()<0) {
						productosserviciosexistenciassAux.add(productosserviciosexistenciasAux);
					}		
				}
				this.iIdNuevoProductosServiciosExistencias=0L;
				this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().removeAll(productosserviciosexistenciassAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciass) {
					if(productosserviciosexistenciasAux.getId()<0) {
						productosserviciosexistenciassAux.add(productosserviciosexistenciasAux);
					}		
				}
				this.iIdNuevoProductosServiciosExistencias=0L;
				this.productosserviciosexistenciass.removeAll(productosserviciosexistenciassAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoProductosServiciosExistencias 
					&& this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().size()>0
					) {
					productosserviciosexistenciasAux=this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().get(this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().size() - 1);
				
					if(productosserviciosexistenciasAux.getId()<0) {
						this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().remove(productosserviciosexistenciasAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoProductosServiciosExistencias && this.productosserviciosexistenciass.size()>0) {
					productosserviciosexistenciasAux=this.productosserviciosexistenciass.get(this.productosserviciosexistenciass.size() - 1);
				
					if(productosserviciosexistenciasAux.getId()<0) {
						this.productosserviciosexistenciass.remove(productosserviciosexistenciasAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoProductosServiciosExistencias(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(productosserviciosexistencias.getId()<0) {
				this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().remove(this.productosserviciosexistencias);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(productosserviciosexistencias.getId()<0) {
				this.productosserviciosexistenciass.remove(this.productosserviciosexistencias);
			}
		}			
	}
	
	public void setEstadosInicialesProductosServiciosExistencias(List<ProductosServiciosExistencias> productosserviciosexistenciassAux) throws Exception {
		ProductosServiciosExistenciasConstantesFunciones.setEstadosInicialesProductosServiciosExistencias(productosserviciosexistenciassAux);
	}
	
	public void setEstadosInicialesProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistenciasAux) throws Exception {
		ProductosServiciosExistenciasConstantesFunciones.setEstadosInicialesProductosServiciosExistencias(productosserviciosexistenciasAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarProductosServiciosExistenciasActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarProductosServiciosExistenciasActual()) {
				if(!this.isEsNuevoProductosServiciosExistencias) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoProductosServiciosExistencias=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarProductosServiciosExistenciasActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Productos Servicios Existencias ?", "MANTENIMIENTO DE Productos Servicios Existencias", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(ProductosServiciosExistencias productosserviciosexistencias) throws Exception {
		ProductosServiciosExistenciasConstantesFunciones.seleccionarAsignar(this.productosserviciosexistencias,productosserviciosexistencias);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarProductosServiciosExistencias=this.isPermisoActualizarOriginalProductosServiciosExistencias;
			
			
			this.seleccionarAsignar(productosserviciosexistencias);
			
			
			
			
			
			this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.productosserviciosexistenciasSessionBean.setsFuncionBusquedaRapida(this.productosserviciosexistenciasSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoProductosServiciosExistencias) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosProductosServiciosExistencias(esParaCancelar);				
				this.cancelarNuevoProductosServiciosExistencias(esParaCancelar);								
			}
			
			this.productosserviciosexistencias=new ProductosServiciosExistencias();
			
			this.inicializarProductosServiciosExistencias();
			
			this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarProductosServiciosExistencias() throws Exception {
		try {
			ProductosServiciosExistenciasConstantesFunciones.inicializarProductosServiciosExistencias(this.productosserviciosexistencias);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteProductosServiciosExistenciass(String sAccionBusqueda,List<ProductosServiciosExistencias> productosserviciosexistenciassParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="ProductosServiciosExistencias"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ProductosServiciosExistenciasMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ProductosServiciosExistenciasMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="ProductosServiciosExistencias"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Productos Servicios Existenciases");		
		parameters.put("busquedapor", ProductosServiciosExistenciasConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceProductosServiciosExistencias=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ProductosServiciosExistenciasConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ProductosServiciosExistenciasConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceProductosServiciosExistencias=new JRBeanArrayDataSource(ProductosServiciosExistenciasJInternalFrame.TraerProductosServiciosExistenciasBeans(productosserviciosexistenciassParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceProductosServiciosExistencias);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ProductosServiciosExistenciasConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ProductosServiciosExistenciasConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ProductosServiciosExistenciasBean.TraerProductosServiciosExistenciasBeans(productosserviciosexistenciassParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteProductosServiciosExistenciass(sAccionBusqueda,sTipoArchivoReporte,productosserviciosexistenciassParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalProductosServiciosExistenciass(sAccionBusqueda,sTipoArchivoReporte,productosserviciosexistenciassParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoProductosServiciosExistenciasActionPerformed(null);
					//this.generarExcelReporteProductosServiciosExistenciass(sAccionBusqueda,sTipoArchivoReporte,productosserviciosexistenciassParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalProductosServiciosExistenciass(sAccionBusqueda,sTipoArchivoReporte,productosserviciosexistenciassParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesProductosServiciosExistenciass(sAccionBusqueda,sTipoArchivoReporte,productosserviciosexistenciassParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesProductosServiciosExistenciass(sAccionBusqueda,sTipoArchivoReporte,productosserviciosexistenciassParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteProductosServiciosExistenciass(String sAccionBusqueda,String sTipoArchivoReporte,List<ProductosServiciosExistencias> productosserviciosexistenciassParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productosserviciosexistencias";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ProductosServiciosExistenciass");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderProductosServiciosExistencias("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(ProductosServiciosExistencias productosserviciosexistencias : productosserviciosexistenciassParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ProductosServiciosExistenciasConstantesFunciones.generarExcelReporteDataProductosServiciosExistencias("NORMAL",row,workbook,productosserviciosexistencias,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderProductosServiciosExistencias(String sTipo,Row row,Workbook workbook) {
		
		ProductosServiciosExistenciasConstantesFunciones.generarExcelReporteHeaderProductosServiciosExistencias(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalProductosServiciosExistenciass(String sAccionBusqueda,String sTipoArchivoReporte,List<ProductosServiciosExistencias> productosserviciosexistenciassParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productosserviciosexistencias_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ProductosServiciosExistenciass");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(ProductosServiciosExistencias productosserviciosexistencias : productosserviciosexistenciassParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.getProductosServiciosExistenciasDescripcion(productosserviciosexistencias));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getlinea_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAGRUPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAGRUPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getlineagrupo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEACATEGORIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEACATEGORIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getlineacategoria_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAMARCA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAMARCA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getlineamarca_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.gettipoproductoservicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre_sucursal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre_linea());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre_linea_grupo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre_linea_categoria());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre_linea_marca());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre_tipo_producto_servicio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre_bodega());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getnombre_unidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getcantidad_disponible());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getcantidad_reservada());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.getcantidad_pedida());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.gettotal_egreso());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.gettotal_compra());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productosserviciosexistencias.gettotal_devuelto());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesProductosServiciosExistenciass(String sAccionBusqueda,String sTipoArchivoReporte,List<ProductosServiciosExistencias> productosserviciosexistenciassParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<ProductosServiciosExistencias> productosserviciosexistenciassRespaldo=null;
		
		classes=ProductosServiciosExistenciasConstantesFunciones.getClassesRelationshipsOfProductosServiciosExistencias(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.productosserviciosexistenciasLogic.setDatosCliente(this.datosCliente);
		this.productosserviciosexistenciasLogic.setDatosDeep(this.datosDeep);
		this.productosserviciosexistenciasLogic.setIsConDeep(true);
		
		productosserviciosexistenciassRespaldo=this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass();
		
		this.productosserviciosexistenciasLogic.setProductosServiciosExistenciass(productosserviciosexistenciassParaReportes);	
		this.productosserviciosexistenciasLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		productosserviciosexistenciassParaReportes=this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass();
		this.productosserviciosexistenciasLogic.setProductosServiciosExistenciass(productosserviciosexistenciassRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productosserviciosexistencias_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ProductosServiciosExistenciass");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderProductosServiciosExistencias("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(ProductosServiciosExistencias productosserviciosexistencias : productosserviciosexistenciassParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderProductosServiciosExistencias("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ProductosServiciosExistenciasConstantesFunciones.generarExcelReporteDataProductosServiciosExistencias("NORMAL",row,workbook,productosserviciosexistencias,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.getProductosServiciosExistenciasDescripcion(productosserviciosexistencias));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessProductosServiciosExistencias() throws Exception {		
		this.startProcessProductosServiciosExistencias(true);
	}
	
	public void startProcessProductosServiciosExistencias(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasProductosServiciosExistencias ,this.jPanelParametrosReportesProductosServiciosExistencias, this.jScrollPanelDatosProductosServiciosExistencias,this.jPanelPaginacionProductosServiciosExistencias, this.jScrollPanelDatosEdicionProductosServiciosExistencias, this.jPanelAccionesProductosServiciosExistencias,this.jPanelAccionesFormularioProductosServiciosExistencias,this.jmenuBarProductosServiciosExistencias,this.jmenuBarDetalleProductosServiciosExistencias,this.jTtoolBarProductosServiciosExistencias,this.jTtoolBarDetalleProductosServiciosExistencias);		
		
		final JTabbedPane jTabbedPaneBusquedasProductosServiciosExistencias=this.jTabbedPaneBusquedasProductosServiciosExistencias; 
		
		final JPanel jPanelParametrosReportesProductosServiciosExistencias=this.jPanelParametrosReportesProductosServiciosExistencias;
		//final JScrollPane jScrollPanelDatosProductosServiciosExistencias=this.jScrollPanelDatosProductosServiciosExistencias;
		final JTable jTableDatosProductosServiciosExistencias=this.jTableDatosProductosServiciosExistencias;		
		final JPanel jPanelPaginacionProductosServiciosExistencias=this.jPanelPaginacionProductosServiciosExistencias;
		//final JScrollPane jScrollPanelDatosEdicionProductosServiciosExistencias=this.jScrollPanelDatosEdicionProductosServiciosExistencias;
		final JPanel jPanelAccionesProductosServiciosExistencias=this.jPanelAccionesProductosServiciosExistencias;
		
		JPanel jPanelCamposAuxiliarProductosServiciosExistencias=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarProductosServiciosExistencias=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			jPanelCamposAuxiliarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelCamposProductosServiciosExistencias;
			jPanelAccionesFormularioAuxiliarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelAccionesFormularioProductosServiciosExistencias;
		}
		
		final JPanel jPanelCamposProductosServiciosExistencias=jPanelCamposAuxiliarProductosServiciosExistencias;
		final JPanel jPanelAccionesFormularioProductosServiciosExistencias=jPanelAccionesFormularioAuxiliarProductosServiciosExistencias;
		
		
		final JMenuBar jmenuBarProductosServiciosExistencias=this.jmenuBarProductosServiciosExistencias;
		final JToolBar jTtoolBarProductosServiciosExistencias=this.jTtoolBarProductosServiciosExistencias;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarProductosServiciosExistencias=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarProductosServiciosExistencias=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			jmenuBarDetalleAuxiliarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jmenuBarDetalleProductosServiciosExistencias;
			jTtoolBarDetalleAuxiliarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jTtoolBarDetalleProductosServiciosExistencias;
		}
		
		final JMenuBar jmenuBarDetalleProductosServiciosExistencias=jmenuBarDetalleAuxiliarProductosServiciosExistencias;
		final JToolBar jTtoolBarDetalleProductosServiciosExistencias=jTtoolBarDetalleAuxiliarProductosServiciosExistencias;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasProductosServiciosExistencias;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesProductosServiciosExistencias;
			processRunnable.jTableDatos=jTableDatosProductosServiciosExistencias;
			processRunnable.jPanelCampos=jPanelCamposProductosServiciosExistencias;
			processRunnable.jPanelPaginacion=jPanelPaginacionProductosServiciosExistencias;
			processRunnable.jPanelAcciones=jPanelAccionesProductosServiciosExistencias;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioProductosServiciosExistencias;
			
			
			processRunnable.jmenuBar=jmenuBarProductosServiciosExistencias;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleProductosServiciosExistencias;
			processRunnable.jTtoolBar=jTtoolBarProductosServiciosExistencias;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleProductosServiciosExistencias;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasProductosServiciosExistencias ,jPanelParametrosReportesProductosServiciosExistencias,jTableDatosProductosServiciosExistencias, /*jScrollPanelDatosProductosServiciosExistencias,*/jPanelCamposProductosServiciosExistencias,jPanelPaginacionProductosServiciosExistencias, /*jScrollPanelDatosEdicionProductosServiciosExistencias,*/ jPanelAccionesProductosServiciosExistencias,jPanelAccionesFormularioProductosServiciosExistencias,jmenuBarProductosServiciosExistencias,jmenuBarDetalleProductosServiciosExistencias,jTtoolBarProductosServiciosExistencias,jTtoolBarDetalleProductosServiciosExistencias);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasProductosServiciosExistencias ,jPanelParametrosReportesProductosServiciosExistencias, jScrollPanelDatosProductosServiciosExistencias,jPanelPaginacionProductosServiciosExistencias, jScrollPanelDatosEdicionProductosServiciosExistencias, jPanelAccionesProductosServiciosExistencias,jPanelAccionesFormularioProductosServiciosExistencias,jmenuBarProductosServiciosExistencias,jmenuBarDetalleProductosServiciosExistencias,jTtoolBarProductosServiciosExistencias,jTtoolBarDetalleProductosServiciosExistencias);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessProductosServiciosExistencias() {// throws Exception 
		this.finishProcessProductosServiciosExistencias(true);
	}
	
	public void finishProcessProductosServiciosExistencias(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasProductosServiciosExistencias ,this.jPanelParametrosReportesProductosServiciosExistencias, this.jScrollPanelDatosProductosServiciosExistencias,this.jPanelPaginacionProductosServiciosExistencias, this.jScrollPanelDatosEdicionProductosServiciosExistencias, this.jPanelAccionesProductosServiciosExistencias,this.jPanelAccionesFormularioProductosServiciosExistencias,this.jmenuBarProductosServiciosExistencias,this.jmenuBarDetalleProductosServiciosExistencias,this.jTtoolBarProductosServiciosExistencias,this.jTtoolBarDetalleProductosServiciosExistencias);		
		
		final JTabbedPane jTabbedPaneBusquedasProductosServiciosExistencias=this.jTabbedPaneBusquedasProductosServiciosExistencias; 
		
		final JPanel jPanelParametrosReportesProductosServiciosExistencias=this.jPanelParametrosReportesProductosServiciosExistencias;
		//final JScrollPane jScrollPanelDatosProductosServiciosExistencias=this.jScrollPanelDatosProductosServiciosExistencias;
		final JTable jTableDatosProductosServiciosExistencias=this.jTableDatosProductosServiciosExistencias;		
		final JPanel jPanelPaginacionProductosServiciosExistencias=this.jPanelPaginacionProductosServiciosExistencias;
		//final JScrollPane jScrollPanelDatosEdicionProductosServiciosExistencias=this.jScrollPanelDatosEdicionProductosServiciosExistencias;
		final JPanel jPanelAccionesProductosServiciosExistencias=this.jPanelAccionesProductosServiciosExistencias;
		
		JPanel jPanelCamposAuxiliarProductosServiciosExistencias=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarProductosServiciosExistencias=new JPanel();
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			jPanelCamposAuxiliarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelCamposProductosServiciosExistencias;
			jPanelAccionesFormularioAuxiliarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelAccionesFormularioProductosServiciosExistencias;
		}
		
		final JPanel jPanelCamposProductosServiciosExistencias=jPanelCamposAuxiliarProductosServiciosExistencias;
		final JPanel jPanelAccionesFormularioProductosServiciosExistencias=jPanelAccionesFormularioAuxiliarProductosServiciosExistencias;
		
		
		final JMenuBar jmenuBarProductosServiciosExistencias=this.jmenuBarProductosServiciosExistencias;		
		final JToolBar jTtoolBarProductosServiciosExistencias=this.jTtoolBarProductosServiciosExistencias;
				
		JMenuBar jmenuBarDetalleAuxiliarProductosServiciosExistencias=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarProductosServiciosExistencias=new JToolBar();
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			jmenuBarDetalleAuxiliarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jmenuBarDetalleProductosServiciosExistencias;
			jTtoolBarDetalleAuxiliarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jTtoolBarDetalleProductosServiciosExistencias;		
		}
		
		final JMenuBar jmenuBarDetalleProductosServiciosExistencias=jmenuBarDetalleAuxiliarProductosServiciosExistencias;
		final JToolBar jTtoolBarDetalleProductosServiciosExistencias=jTtoolBarDetalleAuxiliarProductosServiciosExistencias;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasProductosServiciosExistencias;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesProductosServiciosExistencias;
			processRunnable.jTableDatos=jTableDatosProductosServiciosExistencias;
			processRunnable.jPanelCampos=jPanelCamposProductosServiciosExistencias;
			processRunnable.jPanelPaginacion=jPanelPaginacionProductosServiciosExistencias;
			processRunnable.jPanelAcciones=jPanelAccionesProductosServiciosExistencias;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioProductosServiciosExistencias;
			
			
			processRunnable.jmenuBar=jmenuBarProductosServiciosExistencias;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleProductosServiciosExistencias;
			processRunnable.jTtoolBar=jTtoolBarProductosServiciosExistencias;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleProductosServiciosExistencias;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasProductosServiciosExistencias ,jPanelParametrosReportesProductosServiciosExistencias, jTableDatosProductosServiciosExistencias,/*jScrollPanelDatosProductosServiciosExistencias,*/jPanelCamposProductosServiciosExistencias,jPanelPaginacionProductosServiciosExistencias, /*jScrollPanelDatosEdicionProductosServiciosExistencias,*/ jPanelAccionesProductosServiciosExistencias,jPanelAccionesFormularioProductosServiciosExistencias,jmenuBarProductosServiciosExistencias,jmenuBarDetalleProductosServiciosExistencias,jTtoolBarProductosServiciosExistencias,jTtoolBarDetalleProductosServiciosExistencias));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesProductosServiciosExistencias(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarProductosServiciosExistencias(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuProductosServiciosExistencias(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarProductosServiciosExistencias(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarProductosServiciosExistencias,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleProductosServiciosExistencias,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuProductosServiciosExistencias(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarProductosServiciosExistencias,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleProductosServiciosExistencias,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.productosserviciosexistenciasConstantesFunciones.getsFinalQueryProductosServiciosExistencias();
		String  finalQueryPaginacionTodos=this.productosserviciosexistenciasConstantesFunciones.getsFinalQueryProductosServiciosExistencias();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ProductosServiciosExistenciasConstantesFunciones.getArrayColumnasGlobalesNoProductosServiciosExistencias(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ProductosServiciosExistenciasConstantesFunciones.getArrayColumnasGlobalesProductosServiciosExistencias(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ProductosServiciosExistenciasConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.productosserviciosexistenciassEliminados= new ArrayList<ProductosServiciosExistencias>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessProductosServiciosExistencias();
		
				///*ProductosServiciosExistenciasSessionBean*/this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			
			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ProductosServiciosExistenciasConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ProductosServiciosExistenciasConstantesFunciones.getClassesForeignKeysOfProductosServiciosExistencias(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/productosserviciosexistencias."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			productosserviciosexistenciassAux= new ArrayList<ProductosServiciosExistencias>();
			
				
			productosserviciosexistenciasLogic.setDatosCliente(this.datosCliente);
			productosserviciosexistenciasLogic.setDatosDeep(this.datosDeep);
			productosserviciosexistenciasLogic.setIsConDeep(true);
			
			
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaProductosServiciosExistencias")) {
				this.sDetalleReporte=ProductosServiciosExistenciasConstantesFunciones.getDetalleIndiceBusquedaProductosServiciosExistencias(id_bodegaBusquedaProductosServiciosExistencias,id_productoBusquedaProductosServiciosExistencias,id_lineaBusquedaProductosServiciosExistencias,id_linea_grupoBusquedaProductosServiciosExistencias,id_linea_categoriaBusquedaProductosServiciosExistencias,id_linea_marcaBusquedaProductosServiciosExistencias,id_tipo_producto_servicioBusquedaProductosServiciosExistencias);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productosserviciosexistenciasLogic.getProductosServiciosExistenciassBusquedaProductosServiciosExistencias(finalQueryGlobal,pagination,this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,id_bodegaBusquedaProductosServiciosExistencias,id_productoBusquedaProductosServiciosExistencias,id_lineaBusquedaProductosServiciosExistencias,id_linea_grupoBusquedaProductosServiciosExistencias,id_linea_categoriaBusquedaProductosServiciosExistencias,id_linea_marcaBusquedaProductosServiciosExistencias,id_tipo_producto_servicioBusquedaProductosServiciosExistencias);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductosServiciosExistenciasConstantesFunciones.getDetalleIndiceBusquedaProductosServiciosExistencias(id_bodegaBusquedaProductosServiciosExistencias,id_productoBusquedaProductosServiciosExistencias,id_lineaBusquedaProductosServiciosExistencias,id_linea_grupoBusquedaProductosServiciosExistencias,id_linea_categoriaBusquedaProductosServiciosExistencias,id_linea_marcaBusquedaProductosServiciosExistencias,id_tipo_producto_servicioBusquedaProductosServiciosExistencias);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductosServiciosExistenciasConstantesFunciones.getDetalleIndiceBusquedaProductosServiciosExistencias(id_bodegaBusquedaProductosServiciosExistencias,id_productoBusquedaProductosServiciosExistencias,id_lineaBusquedaProductosServiciosExistencias,id_linea_grupoBusquedaProductosServiciosExistencias,id_linea_categoriaBusquedaProductosServiciosExistencias,id_linea_marcaBusquedaProductosServiciosExistencias,id_tipo_producto_servicioBusquedaProductosServiciosExistencias);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productosserviciosexistenciasLogic.getProductosServiciosExistenciass()==null||productosserviciosexistenciasLogic.getProductosServiciosExistenciass().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productosserviciosexistenciass==null|| productosserviciosexistenciass.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productosserviciosexistenciassAux=new ArrayList<ProductosServiciosExistencias>();
						productosserviciosexistenciassAux.addAll(productosserviciosexistenciasLogic.getProductosServiciosExistenciass());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productosserviciosexistenciassAux=new ArrayList<ProductosServiciosExistencias>();
							productosserviciosexistenciassAux.addAll(productosserviciosexistenciass);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productosserviciosexistenciasLogic.getProductosServiciosExistenciassBusquedaProductosServiciosExistencias(finalQueryGlobal,pagination,this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,id_bodegaBusquedaProductosServiciosExistencias,id_productoBusquedaProductosServiciosExistencias,id_lineaBusquedaProductosServiciosExistencias,id_linea_grupoBusquedaProductosServiciosExistencias,id_linea_categoriaBusquedaProductosServiciosExistencias,id_linea_marcaBusquedaProductosServiciosExistencias,id_tipo_producto_servicioBusquedaProductosServiciosExistencias);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductosServiciosExistenciasConstantesFunciones.getDetalleIndiceBusquedaProductosServiciosExistencias(id_bodegaBusquedaProductosServiciosExistencias,id_productoBusquedaProductosServiciosExistencias,id_lineaBusquedaProductosServiciosExistencias,id_linea_grupoBusquedaProductosServiciosExistencias,id_linea_categoriaBusquedaProductosServiciosExistencias,id_linea_marcaBusquedaProductosServiciosExistencias,id_tipo_producto_servicioBusquedaProductosServiciosExistencias);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductosServiciosExistenciasConstantesFunciones.getDetalleIndiceBusquedaProductosServiciosExistencias(id_bodegaBusquedaProductosServiciosExistencias,id_productoBusquedaProductosServiciosExistencias,id_lineaBusquedaProductosServiciosExistencias,id_linea_grupoBusquedaProductosServiciosExistencias,id_linea_categoriaBusquedaProductosServiciosExistencias,id_linea_marcaBusquedaProductosServiciosExistencias,id_tipo_producto_servicioBusquedaProductosServiciosExistencias);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductosServiciosExistenciass("BusquedaProductosServiciosExistencias",productosserviciosexistenciasLogic.getProductosServiciosExistenciass());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductosServiciosExistenciass("BusquedaProductosServiciosExistencias",productosserviciosexistenciass);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productosserviciosexistenciasLogic.setProductosServiciosExistenciass(new ArrayList<ProductosServiciosExistencias>());
						productosserviciosexistenciasLogic.getProductosServiciosExistenciass().addAll(productosserviciosexistenciassAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productosserviciosexistenciass=new ArrayList<ProductosServiciosExistencias>();
							productosserviciosexistenciass.addAll(productosserviciosexistenciassAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesProductosServiciosExistencias();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessProductosServiciosExistencias();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=productosserviciosexistenciasLogic.getProductosServiciosExistenciass().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=productosserviciosexistenciass.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=productosserviciosexistenciasLogic.getProductosServiciosExistenciass().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=productosserviciosexistenciass.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(ProductosServiciosExistencias productosserviciosexistencias) {
		Boolean permite=true;
		
		if(this.productosserviciosexistencias.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ProductosServiciosExistenciasConstantesFunciones.getOrderByListaProductosServiciosExistencias();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ProductosServiciosExistenciasConstantesFunciones.getOrderByListaProductosServiciosExistencias();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
				if(productosserviciosexistencias.getsType().equals(Constantes2.S_TOTALES)) {
					productosserviciosexistenciasTotales=productosserviciosexistencias;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductosServiciosExistencias productosserviciosexistencias:this.productosserviciosexistenciass) {
				if(productosserviciosexistencias.getsType().equals(Constantes2.S_TOTALES)) {
					productosserviciosexistenciasTotales=productosserviciosexistencias;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.productosserviciosexistenciasAux=new ProductosServiciosExistencias();
			this.productosserviciosexistenciasAux.setsType(Constantes2.S_TOTALES);
			this.productosserviciosexistenciasAux.setIsNew(false);
			this.productosserviciosexistenciasAux.setIsChanged(false);
			this.productosserviciosexistenciasAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				//ProductosServiciosExistenciasConstantesFunciones.TotalizarValoresFilaProductosServiciosExistencias(this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass(),this.productosserviciosexistenciasAux);
				
				//this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().add(this.productosserviciosexistenciasAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ProductosServiciosExistenciasConstantesFunciones.TotalizarValoresFilaProductosServiciosExistencias(this.productosserviciosexistenciass,this.productosserviciosexistenciasAux);
				
				this.productosserviciosexistenciass.add(this.productosserviciosexistenciasAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		productosserviciosexistenciasTotales=new ProductosServiciosExistencias();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().remove(productosserviciosexistenciasTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.productosserviciosexistenciass.remove(productosserviciosexistenciasTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		productosserviciosexistenciasTotales=new ProductosServiciosExistencias();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
				if(productosserviciosexistencias.getsType().equals(Constantes2.S_TOTALES)) {
					productosserviciosexistenciasTotales=productosserviciosexistencias;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ProductosServiciosExistenciasConstantesFunciones.TotalizarValoresFilaProductosServiciosExistencias(this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass(),productosserviciosexistenciasTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductosServiciosExistencias productosserviciosexistencias:this.productosserviciosexistenciass) {
				if(productosserviciosexistencias.getsType().equals(Constantes2.S_TOTALES)) {
					productosserviciosexistenciasTotales=productosserviciosexistencias;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ProductosServiciosExistenciasConstantesFunciones.TotalizarValoresFilaProductosServiciosExistencias(this.productosserviciosexistenciass,productosserviciosexistenciasTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getProductosServiciosExistenciassBusquedaProductosServiciosExistencias()throws Exception {
		try {
			sAccionBusqueda="BusquedaProductosServiciosExistencias";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdLinea()throws Exception {
		try {
			sAccionBusqueda="FK_IdLinea";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdLineaCategoria()throws Exception {
		try {
			sAccionBusqueda="FK_IdLineaCategoria";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdLineaGrupo()throws Exception {
		try {
			sAccionBusqueda="FK_IdLineaGrupo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdLineaMarca()throws Exception {
		try {
			sAccionBusqueda="FK_IdLineaMarca";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductosServiciosExistenciassFK_IdTipoProductoServicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoProductoServicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getProductosServiciosExistenciassBusquedaProductosServiciosExistencias(String sFinalQuery,Long id_bodega,Long id_producto,Long id_linea,Long id_linea_grupo,Long id_linea_categoria,Long id_linea_marca,Long id_tipo_producto_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassBusquedaProductosServiciosExistencias(sFinalQuery,this.pagination,id_bodega,id_producto,id_linea,id_linea_grupo,id_linea_categoria,id_linea_marca,id_tipo_producto_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdLinea(String sFinalQuery,Long id_linea)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdLinea(sFinalQuery,this.pagination,id_linea);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdLineaCategoria(String sFinalQuery,Long id_linea_categoria)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdLineaCategoria(sFinalQuery,this.pagination,id_linea_categoria);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdLineaGrupo(String sFinalQuery,Long id_linea_grupo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdLineaGrupo(sFinalQuery,this.pagination,id_linea_grupo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdLineaMarca(String sFinalQuery,Long id_linea_marca)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdLineaMarca(sFinalQuery,this.pagination,id_linea_marca);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdProducto(String sFinalQuery,Long id_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdProducto(sFinalQuery,this.pagination,id_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductosServiciosExistenciassFK_IdTipoProductoServicio(String sFinalQuery,Long id_tipo_producto_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productosserviciosexistenciasLogic.getProductosServiciosExistenciassFK_IdTipoProductoServicio(sFinalQuery,this.pagination,id_tipo_producto_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			//this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosProductosServiciosExistencias() {
		this.isPermisoTodoProductosServiciosExistencias=false;
		this.isPermisoNuevoProductosServiciosExistencias=false;
		this.isPermisoActualizarProductosServiciosExistencias=false;
		this.isPermisoActualizarOriginalProductosServiciosExistencias=false;
		this.isPermisoEliminarProductosServiciosExistencias=false;
		this.isPermisoGuardarCambiosProductosServiciosExistencias=false;
		this.isPermisoConsultaProductosServiciosExistencias=true;
		this.isPermisoBusquedaProductosServiciosExistencias=true;
		this.isPermisoReporteProductosServiciosExistencias=true;
		this.isPermisoOrdenProductosServiciosExistencias=false;		
		this.isPermisoPaginacionMedioProductosServiciosExistencias=false;		
		this.isPermisoPaginacionAltoProductosServiciosExistencias=false;		
		this.isPermisoPaginacionTodoProductosServiciosExistencias=false;		
		this.isPermisoCopiarProductosServiciosExistencias=false;		
		this.isPermisoVerFormProductosServiciosExistencias=false;		
		this.isPermisoDuplicarProductosServiciosExistencias=false;
		this.isPermisoOrdenProductosServiciosExistencias=false;
	}
	
	public void setPermisosUsuarioProductosServiciosExistencias(Boolean isPermiso) {
		this.isPermisoTodoProductosServiciosExistencias=isPermiso;
		this.isPermisoNuevoProductosServiciosExistencias=isPermiso;
		this.isPermisoActualizarProductosServiciosExistencias=isPermiso;
		this.isPermisoActualizarOriginalProductosServiciosExistencias=isPermiso;
		this.isPermisoEliminarProductosServiciosExistencias=isPermiso;
		this.isPermisoGuardarCambiosProductosServiciosExistencias=isPermiso;
		this.isPermisoConsultaProductosServiciosExistencias=isPermiso;
		this.isPermisoBusquedaProductosServiciosExistencias=isPermiso;
		this.isPermisoReporteProductosServiciosExistencias=isPermiso;
		this.isPermisoOrdenProductosServiciosExistencias=isPermiso;		
		this.isPermisoPaginacionMedioProductosServiciosExistencias=isPermiso;		
		this.isPermisoPaginacionAltoProductosServiciosExistencias=isPermiso;		
		this.isPermisoPaginacionTodoProductosServiciosExistencias=isPermiso;		
		this.isPermisoCopiarProductosServiciosExistencias=isPermiso;		
		this.isPermisoVerFormProductosServiciosExistencias=isPermiso;		
		this.isPermisoDuplicarProductosServiciosExistencias=isPermiso;
		this.isPermisoOrdenProductosServiciosExistencias=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioProductosServiciosExistencias(Boolean isPermiso) {
		//this.isPermisoTodoProductosServiciosExistencias=isPermiso;
		this.isPermisoNuevoProductosServiciosExistencias=isPermiso;
		this.isPermisoActualizarProductosServiciosExistencias=isPermiso;
		this.isPermisoActualizarOriginalProductosServiciosExistencias=isPermiso;
		this.isPermisoEliminarProductosServiciosExistencias=isPermiso;
		this.isPermisoGuardarCambiosProductosServiciosExistencias=isPermiso;
		//this.isPermisoConsultaProductosServiciosExistencias=isPermiso;
		//this.isPermisoBusquedaProductosServiciosExistencias=isPermiso;
		//this.isPermisoReporteProductosServiciosExistencias=isPermiso;
		//this.isPermisoOrdenProductosServiciosExistencias=isPermiso;		
		//this.isPermisoPaginacionMedioProductosServiciosExistencias=isPermiso;		
		//this.isPermisoPaginacionAltoProductosServiciosExistencias=isPermiso;		
		//this.isPermisoPaginacionTodoProductosServiciosExistencias=isPermiso;		
		//this.isPermisoCopiarProductosServiciosExistencias=isPermiso;		
		//this.isPermisoDuplicarProductosServiciosExistencias=isPermiso;
		//this.isPermisoOrdenProductosServiciosExistencias=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioProductosServiciosExistenciasClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(ProductosServiciosExistenciasJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioProductosServiciosExistenciasClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioProductosServiciosExistenciasClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionProductosServiciosExistenciasClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioProductosServiciosExistenciasClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioProductosServiciosExistencias() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ProductosServiciosExistenciasJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ProductosServiciosExistenciasConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoProductosServiciosExistencias=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarProductosServiciosExistencias=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalProductosServiciosExistencias=this.isPermisoActualizarProductosServiciosExistencias;
			this.isPermisoEliminarProductosServiciosExistencias=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosProductosServiciosExistencias=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaProductosServiciosExistencias=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaProductosServiciosExistencias=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoProductosServiciosExistencias=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteProductosServiciosExistencias=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenProductosServiciosExistencias=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioProductosServiciosExistencias=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoProductosServiciosExistencias=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoProductosServiciosExistencias=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarProductosServiciosExistencias=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormProductosServiciosExistencias=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarProductosServiciosExistencias=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenProductosServiciosExistencias=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosProductosServiciosExistencias.setToolTipText(this.jTableDatosProductosServiciosExistencias.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioProductosServiciosExistencias(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioProductosServiciosExistencias(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ProductosServiciosExistenciasJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ProductosServiciosExistenciasJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioProductosServiciosExistencias() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyProductosServiciosExistenciasListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.lineasForeignKey=new ArrayList();
				this.lineagruposForeignKey=new ArrayList();
				this.lineacategoriasForeignKey=new ArrayList();
				this.lineamarcasForeignKey=new ArrayList();
				this.tipoproductoserviciosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyProductosServiciosExistenciasListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ProductosServiciosExistenciasJInternalFrame.ISLOAD_FKLOTE) {
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLineaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLineaGrupoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLineaCategoriaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLineaMarcaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoProductoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.lineasForeignKey==null||this.lineasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LineaConstantesFunciones.SFINALQUERY;

				this.cargarCombosLineasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaGrupoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.lineagruposForeignKey==null||this.lineagruposForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LineaConstantesFunciones.SFINALQUERY;

				this.cargarCombosLineaGruposForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaCategoriaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.lineacategoriasForeignKey==null||this.lineacategoriasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LineaConstantesFunciones.SFINALQUERY;

				this.cargarCombosLineaCategoriasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaMarcaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.lineamarcasForeignKey==null||this.lineamarcasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LineaConstantesFunciones.SFINALQUERY;

				this.cargarCombosLineaMarcasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoProductoServicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoproductoserviciosForeignKey==null||this.tipoproductoserviciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoProductoServicioConstantesFunciones.getArrayColumnasGlobalesTipoProductoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoProductoServicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoProductoServicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoProductoServiciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	
	public void addItemDefectoCombosTodosForeignKeyProductosServiciosExistencias()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyLinea();
			this.addItemDefectoCombosForeignKeyLineaGrupo();
			this.addItemDefectoCombosForeignKeyLineaCategoria();
			this.addItemDefectoCombosForeignKeyLineaMarca();
			this.addItemDefectoCombosForeignKeyTipoProductoServicio();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.productosserviciosexistenciasSessionBean==null) {
				this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean();
			}

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLinea()throws Exception {
		try {

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionLinea()) {
				Linea linea=new Linea();
				LineaConstantesFunciones.setLineaDescripcion(linea,Constantes.SMENSAJE_ESCOJA_OPCION);
				linea.setId(null);

				if(!LineaConstantesFunciones.ExisteEnLista(this.lineasForeignKey,linea,true)) {

					this.lineasForeignKey.add(0,linea);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLineaGrupo()throws Exception {
		try {

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionLineaGrupo()) {
				Linea lineagrupo=new Linea();
				LineaConstantesFunciones.setLineaDescripcion(lineagrupo,Constantes.SMENSAJE_ESCOJA_OPCION);
				lineagrupo.setId(null);

				if(!LineaConstantesFunciones.ExisteEnLista(this.lineagruposForeignKey,lineagrupo,true)) {

					this.lineagruposForeignKey.add(0,lineagrupo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLineaCategoria()throws Exception {
		try {

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionLineaCategoria()) {
				Linea lineacategoria=new Linea();
				LineaConstantesFunciones.setLineaDescripcion(lineacategoria,Constantes.SMENSAJE_ESCOJA_OPCION);
				lineacategoria.setId(null);

				if(!LineaConstantesFunciones.ExisteEnLista(this.lineacategoriasForeignKey,lineacategoria,true)) {

					this.lineacategoriasForeignKey.add(0,lineacategoria);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLineaMarca()throws Exception {
		try {

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionLineaMarca()) {
				Linea lineamarca=new Linea();
				LineaConstantesFunciones.setLineaDescripcion(lineamarca,Constantes.SMENSAJE_ESCOJA_OPCION);
				lineamarca.setId(null);

				if(!LineaConstantesFunciones.ExisteEnLista(this.lineamarcasForeignKey,lineamarca,true)) {

					this.lineamarcasForeignKey.add(0,lineamarca);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoProductoServicio()throws Exception {
		try {

			if(!this.productosserviciosexistenciasSessionBean.getisBusquedaDesdeForeignKeySesionTipoProductoServicio()) {
				TipoProductoServicio tipoproductoservicio=new TipoProductoServicio();
				TipoProductoServicioConstantesFunciones.setTipoProductoServicioDescripcion(tipoproductoservicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoproductoservicio.setId(null);

				if(!TipoProductoServicioConstantesFunciones.ExisteEnLista(this.tipoproductoserviciosForeignKey,tipoproductoservicio,true)) {

					this.tipoproductoserviciosForeignKey.add(0,tipoproductoservicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyProductosServiciosExistencias()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyProductosServiciosExistencias(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyProductosServiciosExistencias()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyProductosServiciosExistencias();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias)throws Exception {	
		try {
						
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyProductosServiciosExistencias()throws Exception {	
		try {
						
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyProductosServiciosExistencias()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyProductosServiciosExistencias()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyProductosServiciosExistencias()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroProductosServiciosExistencias()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyProductosServiciosExistencias()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameLineasForeignKey("Todos");
			this.cargarCombosFrameLineaGruposForeignKey("Todos");
			this.cargarCombosFrameLineaCategoriasForeignKey("Todos");
			this.cargarCombosFrameLineaMarcasForeignKey("Todos");
			this.cargarCombosFrameTipoProductoServiciosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyProductosServiciosExistencias(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLineasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLineaGruposForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLineaCategoriasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLineaMarcasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoProductoServiciosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyProductosServiciosExistencias()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	


















	
	

	public ProductosServiciosExistenciasBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ProductosServiciosExistenciasBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ProductosServiciosExistenciasBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.productosserviciosexistenciasSessionBean=new ProductosServiciosExistenciasSessionBean(); 
		this.productosserviciosexistenciasConstantesFunciones=new ProductosServiciosExistenciasConstantesFunciones(); 
		this.productosserviciosexistenciasBean=new ProductosServiciosExistencias();//(this.productosserviciosexistenciasConstantesFunciones); 		
		this.productosserviciosexistenciasReturnGeneral=new ProductosServiciosExistenciasParameterReturnGeneral(); 
		
		this.productosserviciosexistenciasSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.productosserviciosexistenciasSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ProductosServiciosExistenciasBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ProductosServiciosExistenciasBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ProductosServiciosExistenciasBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessProductosServiciosExistencias(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.productosserviciosexistenciasConstantesFunciones=new ProductosServiciosExistenciasConstantesFunciones(); 
			this.productosserviciosexistenciasBean=new ProductosServiciosExistencias();//this.productosserviciosexistenciasConstantesFunciones); 			
			this.productosserviciosexistenciasReturnGeneral=new ProductosServiciosExistenciasParameterReturnGeneral(); 
		
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Productos Servicios Existencias Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.productosserviciosexistencias=new ProductosServiciosExistencias();
			this.productosserviciosexistenciass = new ArrayList<ProductosServiciosExistencias>();
			this.productosserviciosexistenciassAux = new ArrayList<ProductosServiciosExistencias>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic=new ProductosServiciosExistenciasLogic();
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}
			
			//this.productosserviciosexistenciasSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.productosserviciosexistenciasSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormProductosServiciosExistencias);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoProductosServiciosExistencias);	
					}
					
					if(this.jInternalFrameImportacionProductosServiciosExistencias!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionProductosServiciosExistencias);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByProductosServiciosExistencias!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByProductosServiciosExistencias);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormProductosServiciosExistencias);
				this.jInternalFrameDetalleFormProductosServiciosExistencias.setVisible(false);
				this.jInternalFrameDetalleFormProductosServiciosExistencias.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoProductosServiciosExistencias);
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setVisible(false);
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionProductosServiciosExistencias!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionProductosServiciosExistencias);
					this.jInternalFrameImportacionProductosServiciosExistencias.setVisible(false);
					this.jInternalFrameImportacionProductosServiciosExistencias.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByProductosServiciosExistencias!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByProductosServiciosExistencias);
					this.jInternalFrameOrderByProductosServiciosExistencias.setVisible(false);
					this.jInternalFrameOrderByProductosServiciosExistencias.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idProductosServiciosExistenciasActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ProductosServiciosExistenciasConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.productosserviciosexistenciasReturnGeneral=new ProductosServiciosExistenciasParameterReturnGeneral();
			
			this.productosserviciosexistenciasParameterGeneral=new ProductosServiciosExistenciasParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.productosserviciosexistenciasLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ProductosServiciosExistenciasJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ProductosServiciosExistenciasConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ProductosServiciosExistenciasConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
			this.isVisibilidadCeldaDuplicarProductosServiciosExistencias=true;
			this.isVisibilidadCeldaCopiarProductosServiciosExistencias=true;
			this.isVisibilidadCeldaVerFormProductosServiciosExistencias=true;
			this.isVisibilidadCeldaOrdenProductosServiciosExistencias=true;
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;
			
			
			this.isVisibilidadBusquedaProductosServiciosExistencias=true;
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdLinea=true;
			this.isVisibilidadFK_IdLineaCategoria=true;
			this.isVisibilidadFK_IdLineaGrupo=true;
			this.isVisibilidadFK_IdLineaMarca=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoProductoServicio=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosProductosServiciosExistencias();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioProductosServiciosExistencias(false);
			
			this.setPermisosUsuarioProductosServiciosExistencias();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado() 
				|| (this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado() && this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioProductosServiciosExistenciasClasesRelacionadas();
			}
			
			if(this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioProductosServiciosExistenciasClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosProductosServiciosExistencias();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualProductosServiciosExistencias();
			}
			
			if(!this.isPermisoBusquedaProductosServiciosExistencias) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(true,true,true);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ProductosServiciosExistenciasConstantesFunciones.getTiposSeleccionarProductosServiciosExistencias());
				
				this.tiposColumnasSelect=ProductosServiciosExistenciasConstantesFunciones.getTiposSeleccionarProductosServiciosExistencias(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioProductosServiciosExistencias();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,false);
				this.setAccionesUsuarioProductosServiciosExistencias(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,false);							
				this.setAccionesUsuarioProductosServiciosExistencias(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesProductosServiciosExistencias() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.lineaLogic=new LineaLogic();
			this.lineagrupoLogic=new LineaLogic();
			this.lineacategoriaLogic=new LineaLogic();
			this.lineamarcaLogic=new LineaLogic();
			this.tipoproductoservicioLogic=new TipoProductoServicioLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				productosserviciosexistenciasImplementable= (ProductosServiciosExistenciasImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ProductosServiciosExistenciasConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				productosserviciosexistenciasImplementableHome= (ProductosServiciosExistenciasImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ProductosServiciosExistenciasConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.productosserviciosexistenciass= new ArrayList<ProductosServiciosExistencias>();
			this.productosserviciosexistenciassEliminados= new ArrayList<ProductosServiciosExistencias>();
						
			this.isEsNuevoProductosServiciosExistencias=false;
			this.esParaAccionDesdeFormularioProductosServiciosExistencias=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.lineasForeignKey=new ArrayList<Linea>() ;
			this.lineagruposForeignKey=new ArrayList<Linea>() ;
			this.lineacategoriasForeignKey=new ArrayList<Linea>() ;
			this.lineamarcasForeignKey=new ArrayList<Linea>() ;
			this.tipoproductoserviciosForeignKey=new ArrayList<TipoProductoServicio>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyProductosServiciosExistencias(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroProductosServiciosExistencias();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ProductosServiciosExistenciasConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingProductosServiciosExistencias(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioProductosServiciosExistencias();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioProductosServiciosExistencias();
			}
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasProductosServiciosExistencias.getTabCount(); i++) {
					this.jTabbedPaneBusquedasProductosServiciosExistencias.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasProductosServiciosExistencias.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessProductosServiciosExistencias(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga ProductosServiciosExistencias: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectProductosServiciosExistencias() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesProductosServiciosExistencias")) {
				iIndex=this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessProductosServiciosExistencias();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyProductosServiciosExistencias(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyProductosServiciosExistencias(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyProductosServiciosExistencias(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyProductosServiciosExistenciasListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyProductosServiciosExistencias();
		
		this.cargarCombosFrameForeignKeyProductosServiciosExistencias();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyProductosServiciosExistencias();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyProductosServiciosExistencias();
		}
	}
	
	

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLinea(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLineaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLinea();
				this.cargarCombosFrameLineasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLinea(this.lineasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaGrupo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLineaGrupoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLineaGrupo();
				this.cargarCombosFrameLineaGruposForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLineaGrupo(this.lineagruposForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaCategoria(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLineaCategoriaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLineaCategoria();
				this.cargarCombosFrameLineaCategoriasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLineaCategoria(this.lineacategoriasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaMarca(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLineaMarcaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLineaMarca();
				this.cargarCombosFrameLineaMarcasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLineaMarca(this.lineamarcasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoProductoServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoProductoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoProductoServicio();
				this.cargarCombosFrameTipoProductoServiciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoProductoServicio(this.tipoproductoserviciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoProductosServiciosExistenciasActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			
			if(jTableDatosProductosServiciosExistencias.getRowCount()>=1) {
				jTableDatosProductosServiciosExistencias.removeRowSelectionInterval(0, jTableDatosProductosServiciosExistencias.getRowCount()-1);						
			}
			
			this.isEsNuevoProductosServiciosExistencias=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoProductosServiciosExistencias(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesProductosServiciosExistencias(true);			
			//this.productosserviciosexistencias=new ProductosServiciosExistencias();
			//this.productosserviciosexistencias.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesProductosServiciosExistencias(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias() ;
			
			if(ProductosServiciosExistenciasJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleProductosServiciosExistencias(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.productosserviciosexistencias);	
			this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);				
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			if(this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar ProductosServiciosExistencias: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarProductosServiciosExistenciasActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosProductosServiciosExistencias.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosProductosServiciosExistencias.getSelectedRows().length;			
			}
			
			productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoProductosServiciosExistencias--;			
				//ProductosServiciosExistencias productosserviciosexistenciasAux= new ProductosServiciosExistencias();			
				//productosserviciosexistenciasAux.setId(this.iIdNuevoProductosServiciosExistencias);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//ProductosServiciosExistencias productosserviciosexistenciasOrigen=new ProductosServiciosExistencias();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(ProductosServiciosExistencias productosserviciosexistenciasOrigen : productosserviciosexistenciassSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							productosserviciosexistenciasOrigen =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productosserviciosexistenciasOrigen =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaProductosServiciosExistencias();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.productosserviciosexistencias.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosProductosServiciosExistencias(productosserviciosexistenciasOrigen,this.productosserviciosexistencias,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().add(this.productosserviciosexistenciasAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistenciass.add(this.productosserviciosexistenciasAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
				
				this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(this.getIndiceNuevoProductosServiciosExistencias(), this.getIndiceNuevoProductosServiciosExistencias());
				
				int iLastRow =  this.jTableDatosProductosServiciosExistencias.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosProductosServiciosExistencias.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosProductosServiciosExistencias.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();									
		
			ProductosServiciosExistencias productosserviciosexistenciasOrigen=new ProductosServiciosExistencias();
			ProductosServiciosExistencias productosserviciosexistenciasDestino=new ProductosServiciosExistencias();
				
			productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosProductosServiciosExistencias.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || productosserviciosexistenciassSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosProductosServiciosExistencias.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						productosserviciosexistenciasOrigen =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						productosserviciosexistenciasOrigen =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						productosserviciosexistenciasDestino =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						productosserviciosexistenciasDestino =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				productosserviciosexistenciasOrigen =productosserviciosexistenciassSeleccionados.get(0);
				productosserviciosexistenciasDestino =productosserviciosexistenciassSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosProductosServiciosExistencias(productosserviciosexistenciasOrigen,productosserviciosexistenciasDestino,true,false);
				
				productosserviciosexistenciasDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(productosserviciosexistenciasDestino,productosserviciosexistenciasLogic.getProductosServiciosExistenciass());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(productosserviciosexistenciasDestino,productosserviciosexistenciass);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
				
				//this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(this.getIndiceNuevoProductosServiciosExistencias(), this.getIndiceNuevoProductosServiciosExistencias());
				
				int iLastRow =  this.jTableDatosProductosServiciosExistencias.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosProductosServiciosExistencias.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosProductosServiciosExistencias.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormProductosServiciosExistencias.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesProductosServiciosExistencias.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(!isVisible);
			this.jPanelPaginacionProductosServiciosExistencias.setVisible(!isVisible);
			this.jPanelAccionesProductosServiciosExistencias.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameProductosServiciosExistencias();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoProductosServiciosExistencias();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionProductosServiciosExistencias();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByProductosServiciosExistencias();
			
			this.abrirFrameOrderByProductosServiciosExistencias();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByProductosServiciosExistencias();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleProductosServiciosExistencias(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormProductosServiciosExistencias);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormProductosServiciosExistencias.isMaximum()) {
					this.jInternalFrameDetalleFormProductosServiciosExistencias.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormProductosServiciosExistencias.setSize(this.jInternalFrameDetalleFormProductosServiciosExistencias.iWidthFormulario,this.jInternalFrameDetalleFormProductosServiciosExistencias.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormProductosServiciosExistencias.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormProductosServiciosExistencias.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormProductosServiciosExistencias.isMaximum()) {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jContentPaneDetalleProductosServiciosExistencias.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormProductosServiciosExistencias.jContentPaneDetalleProductosServiciosExistencias.getWidth(),ProductosServiciosExistenciasConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormProductosServiciosExistencias.jContentPaneDetalleProductosServiciosExistencias.getWidth(),ProductosServiciosExistenciasConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormProductosServiciosExistencias.jContentPaneDetalleProductosServiciosExistencias.getWidth(),ProductosServiciosExistenciasConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormProductosServiciosExistencias.setVisible(true);
	        this.jInternalFrameDetalleFormProductosServiciosExistencias.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByProductosServiciosExistencias() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByProductosServiciosExistencias==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByProductosServiciosExistencias=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByProductosServiciosExistencias,false,this);
				} else {
					this.jInternalFrameOrderByProductosServiciosExistencias=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByProductosServiciosExistencias,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByProductosServiciosExistencias);
				this.jInternalFrameOrderByProductosServiciosExistencias.setVisible(false);
				this.jInternalFrameOrderByProductosServiciosExistencias.setSelected(false);
				
				this.jInternalFrameOrderByProductosServiciosExistencias.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByProductosServiciosExistencias"));
				
				this.inicializarActualizarBindingTablaOrderByProductosServiciosExistencias();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionProductosServiciosExistencias() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionProductosServiciosExistencias==null) {
				
				this.jInternalFrameImportacionProductosServiciosExistencias=new ImportacionJInternalFrame(ProductosServiciosExistenciasConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionProductosServiciosExistencias);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionProductosServiciosExistencias);
				this.jInternalFrameImportacionProductosServiciosExistencias.setVisible(false);
				this.jInternalFrameImportacionProductosServiciosExistencias.setSelected(false);


				this.jInternalFrameImportacionProductosServiciosExistencias.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionProductosServiciosExistencias"));
				this.jInternalFrameImportacionProductosServiciosExistencias.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionProductosServiciosExistencias"));
				this.jInternalFrameImportacionProductosServiciosExistencias.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionProductosServiciosExistencias"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoProductosServiciosExistencias() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias==null) {
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias=new ReporteDinamicoJInternalFrame(ProductosServiciosExistenciasConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoProductosServiciosExistencias);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoProductosServiciosExistencias);
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setVisible(false);
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoProductosServiciosExistencias"));
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoProductosServiciosExistencias"));
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoProductosServiciosExistencias"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualProductosServiciosExistencias();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleProductosServiciosExistencias() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormProductosServiciosExistencias);
			
	       	this.jInternalFrameDetalleFormProductosServiciosExistencias.setVisible(false);
	        this.jInternalFrameDetalleFormProductosServiciosExistencias.setSelected(false);
			
			//this.jInternalFrameDetalleFormProductosServiciosExistencias.dispose();
			//this.jInternalFrameDetalleFormProductosServiciosExistencias=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoProductosServiciosExistencias() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setVisible(true);
	        this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionProductosServiciosExistencias() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionProductosServiciosExistencias.setVisible(true);
	        this.jInternalFrameImportacionProductosServiciosExistencias.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByProductosServiciosExistencias() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByProductosServiciosExistencias.setVisible(true);
	        this.jInternalFrameOrderByProductosServiciosExistencias.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByProductosServiciosExistencias() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByProductosServiciosExistencias.setVisible(false);
	        this.jInternalFrameOrderByProductosServiciosExistencias.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoProductosServiciosExistencias() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setVisible(false);
	        this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionProductosServiciosExistencias() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionProductosServiciosExistencias.setVisible(false);
	        this.jInternalFrameImportacionProductosServiciosExistencias.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarProductosServiciosExistencias(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarProductosServiciosExistencias(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesProductosServiciosExistencias(true);
			//this.isEsNuevoProductosServiciosExistencias=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesProductosServiciosExistencias(false) ;
			
			if(productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(ProductosServiciosExistenciasJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleProductosServiciosExistencias(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaProductosServiciosExistenciasActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarProductosServiciosExistencias(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesProductosServiciosExistencias(true);
			//this.isEsNuevoProductosServiciosExistencias=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.productosserviciosexistencias.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesProductosServiciosExistencias(false) ;
			
			if(ProductosServiciosExistenciasJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleProductosServiciosExistencias(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLinea(List<Linea> lineasForeignKey)throws Exception{
		TableColumn tableColumnLinea=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEA));
		TableCellEditor tableCellEditorLinea =tableColumnLinea.getCellEditor();

		LineaTableCell lineaTableCellFk=(LineaTableCell)tableCellEditorLinea;

		if(lineaTableCellFk!=null) {
			lineaTableCellFk.setlineasForeignKey(lineasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();

		//if(intSelectedRow<=0) {
			//lineaTableCellFk.setRowActual(intSelectedRow);
			//lineaTableCellFk.setlineasForeignKeyActual(lineasForeignKey);
		//}


		if(lineaTableCellFk!=null) {
			lineaTableCellFk.RecargarLineasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLineaGrupo(List<Linea> lineagruposForeignKey)throws Exception{
		TableColumn tableColumnLineaGrupo=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAGRUPO));
		TableCellEditor tableCellEditorLineaGrupo =tableColumnLineaGrupo.getCellEditor();

		LineaTableCell lineaTableCellFk=(LineaTableCell)tableCellEditorLineaGrupo;

		if(lineaTableCellFk!=null) {
			lineaTableCellFk.setlineasForeignKey(lineagruposForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();

		//if(intSelectedRow<=0) {
			//lineaTableCellFk.setRowActual(intSelectedRow);
			//lineaTableCellFk.setlineasForeignKeyActual(lineagruposForeignKey);
		//}


		if(lineaTableCellFk!=null) {
			lineaTableCellFk.RecargarLineasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLineaCategoria(List<Linea> lineacategoriasForeignKey)throws Exception{
		TableColumn tableColumnLineaCategoria=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEACATEGORIA));
		TableCellEditor tableCellEditorLineaCategoria =tableColumnLineaCategoria.getCellEditor();

		LineaTableCell lineaTableCellFk=(LineaTableCell)tableCellEditorLineaCategoria;

		if(lineaTableCellFk!=null) {
			lineaTableCellFk.setlineasForeignKey(lineacategoriasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();

		//if(intSelectedRow<=0) {
			//lineaTableCellFk.setRowActual(intSelectedRow);
			//lineaTableCellFk.setlineasForeignKeyActual(lineacategoriasForeignKey);
		//}


		if(lineaTableCellFk!=null) {
			lineaTableCellFk.RecargarLineasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLineaMarca(List<Linea> lineamarcasForeignKey)throws Exception{
		TableColumn tableColumnLineaMarca=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAMARCA));
		TableCellEditor tableCellEditorLineaMarca =tableColumnLineaMarca.getCellEditor();

		LineaTableCell lineaTableCellFk=(LineaTableCell)tableCellEditorLineaMarca;

		if(lineaTableCellFk!=null) {
			lineaTableCellFk.setlineasForeignKey(lineamarcasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();

		//if(intSelectedRow<=0) {
			//lineaTableCellFk.setRowActual(intSelectedRow);
			//lineaTableCellFk.setlineasForeignKeyActual(lineamarcasForeignKey);
		//}


		if(lineaTableCellFk!=null) {
			lineaTableCellFk.RecargarLineasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoProductoServicio(List<TipoProductoServicio> tipoproductoserviciosForeignKey)throws Exception{
		TableColumn tableColumnTipoProductoServicio=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO));
		TableCellEditor tableCellEditorTipoProductoServicio =tableColumnTipoProductoServicio.getCellEditor();

		TipoProductoServicioTableCell tipoproductoservicioTableCellFk=(TipoProductoServicioTableCell)tableCellEditorTipoProductoServicio;

		if(tipoproductoservicioTableCellFk!=null) {
			tipoproductoservicioTableCellFk.settipoproductoserviciosForeignKey(tipoproductoserviciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoproductoservicioTableCellFk.setRowActual(intSelectedRow);
			//tipoproductoservicioTableCellFk.settipoproductoserviciosForeignKeyActual(tipoproductoserviciosForeignKey);
		//}


		if(tipoproductoservicioTableCellFk!=null) {
			tipoproductoservicioTableCellFk.RecargarTipoProductoServiciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesProductosServiciosExistencias(false);
			
			//if(!this.isEsNuevoProductosServiciosExistencias) {								
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				
			}
			
			if(this.permiteMantenimiento(this.productosserviciosexistencias)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoProductosServiciosExistencias=true;
					this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
					this.isEsNuevoProductosServiciosExistencias=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoProductosServiciosExistencias=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoProductosServiciosExistencias=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesProductosServiciosExistencias(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias(false);
				
				this.habilitarDeshabilitarControlesProductosServiciosExistencias(false);
			
												
				
				if(ProductosServiciosExistenciasJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleProductosServiciosExistencias();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,productosserviciosexistenciasSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualProductosServiciosExistencias(this.productosserviciosexistencias,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,productosserviciosexistenciasSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.productosserviciosexistencias.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				this.productosserviciosexistencias.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				this.productosserviciosexistencias.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.productosserviciosexistencias)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ProductosServiciosExistenciasModel) this.jTableDatosProductosServiciosExistencias.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoProductosServiciosExistencias=true;
				this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
				this.isEsNuevoProductosServiciosExistencias=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesProductosServiciosExistencias(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias(false);
				
				this.habilitarDeshabilitarControlesProductosServiciosExistencias(false);
				
				
				
				if(ProductosServiciosExistenciasJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleProductosServiciosExistencias();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosProductosServiciosExistencias.getRowCount()>=1) {
				jTableDatosProductosServiciosExistencias.removeRowSelectionInterval(0, jTableDatosProductosServiciosExistencias.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesProductosServiciosExistencias(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesProductosServiciosExistencias(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias(false) ;
			
			this.isEsNuevoProductosServiciosExistencias=false;
			
			if(ProductosServiciosExistenciasJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleProductosServiciosExistencias();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingProductosServiciosExistencias(false);
				
				//SI ES MANUAL
				if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualProductosServiciosExistencias();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoProductosServiciosExistencias--;			
			//ProductosServiciosExistencias productosserviciosexistenciasAux= new ProductosServiciosExistencias();			
			//productosserviciosexistenciasAux.setId(this.iIdNuevoProductosServiciosExistencias);
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaProductosServiciosExistencias();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
			
			this.productosserviciosexistencias.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().add(this.productosserviciosexistenciasAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.productosserviciosexistenciass.add(this.productosserviciosexistenciasAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
			
			this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(this.getIndiceNuevoProductosServiciosExistencias(), this.getIndiceNuevoProductosServiciosExistencias());
			
			int iLastRow =  this.jTableDatosProductosServiciosExistencias.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosProductosServiciosExistencias.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosProductosServiciosExistencias.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingProductosServiciosExistencias(false);
			
			//SI ES MANUAL
			if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualProductosServiciosExistencias();
			}
			
			//this.abrirFrameTreeProductosServiciosExistencias();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionProductosServiciosExistencias.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionProductosServiciosExistencias.setFileImportacion(this.jInternalFrameImportacionProductosServiciosExistencias.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionProductosServiciosExistencias.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionProductosServiciosExistencias.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionProductosServiciosExistencias.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionProductosServiciosExistencias.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		

		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ProductosServiciosExistenciasBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ProductosServiciosExistenciasBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteProductosServiciosExistenciass("Todos",productosserviciosexistenciassSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreSucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreSucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreSucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreSucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreLinea_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreLinea_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreLinea_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreLinea_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreLineaGrupo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreLineaGrupo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreLineaGrupo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreLineaGrupo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreLineaCategoria_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreLineaCategoria_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreLineaCategoria_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreLineaCategoria_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreLineaMarca_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreLineaMarca_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreLineaMarca_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreLineaMarca_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreTipoProductoServicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreTipoProductoServicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreTipoProductoServicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreTipoProductoServicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreBodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreBodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreBodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreBodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreUnidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreUnidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreUnidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreUnidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidadDisponible_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidadDisponible_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidadDisponible_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidadDisponible_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidadReservada_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidadReservada_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidadReservada_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidadReservada_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidadPedida_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidadPedida_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidadPedida_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidadPedida_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talEgreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talEgreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talEgreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talEgreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talCompra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talCompra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talCompra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talCompra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talDevuelto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talDevuelto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talDevuelto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talDevuelto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL:
					sNombreCampoCategoria="nombre_sucursal";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA:
					sNombreCampoCategoria="nombre_linea";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO:
					sNombreCampoCategoria="nombre_linea_grupo";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA:
					sNombreCampoCategoria="nombre_linea_categoria";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA:
					sNombreCampoCategoria="nombre_linea_marca";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO:
					sNombreCampoCategoria="nombre_tipo_producto_servicio";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA:
					sNombreCampoCategoria="nombre_bodega";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD:
					sNombreCampoCategoria="nombre_unidad";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE:
					sNombreCampoCategoria="cantidad_disponible";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA:
					sNombreCampoCategoria="cantidad_reservada";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA:
					sNombreCampoCategoria="cantidad_pedida";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO:
					sNombreCampoCategoria="total_egreso";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA:
					sNombreCampoCategoria="total_compra";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO:
					sNombreCampoCategoria="total_devuelto";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL:
					sNombreCampoCategoriaValor="nombre_sucursal";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA:
					sNombreCampoCategoriaValor="nombre_linea";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO:
					sNombreCampoCategoriaValor="nombre_linea_grupo";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA:
					sNombreCampoCategoriaValor="nombre_linea_categoria";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA:
					sNombreCampoCategoriaValor="nombre_linea_marca";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO:
					sNombreCampoCategoriaValor="nombre_tipo_producto_servicio";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA:
					sNombreCampoCategoriaValor="nombre_bodega";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD:
					sNombreCampoCategoriaValor="nombre_unidad";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE:
					sNombreCampoCategoriaValor="cantidad_disponible";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA:
					sNombreCampoCategoriaValor="cantidad_reservada";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA:
					sNombreCampoCategoriaValor="cantidad_pedida";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO:
					sNombreCampoCategoriaValor="total_egreso";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA:
					sNombreCampoCategoriaValor="total_compra";
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO:
					sNombreCampoCategoriaValor="total_devuelto";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_sucursal");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Linea",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_linea");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Linea Grupo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_linea_grupo");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Linea Categoria",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_linea_categoria");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Linea Marca",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_linea_marca");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Tipo Producto Servicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_tipo_producto_servicio");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_bodega");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Unad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_unidad");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantad Disponible",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad_disponible");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantad Reservada",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad_reservada");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantad Peda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad_pedida");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Egreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_egreso");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Compra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_compra");
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Devuelto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_devuelto");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productosserviciosexistencias";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("ProductosServiciosExistenciass");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getlinea_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAGRUPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAGRUPO);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getlineagrupo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEACATEGORIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEACATEGORIA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getlineacategoria_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAMARCA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAMARCA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getlineamarca_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.gettipoproductoservicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre_sucursal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre_linea());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre_linea_grupo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre_linea_categoria());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre_linea_marca());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre_tipo_producto_servicio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre_bodega());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getnombre_unidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getcantidad_disponible());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getcantidad_reservada());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.getcantidad_pedida());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.gettotal_egreso());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.gettotal_compra());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO);
					iRow++;

					for(ProductosServiciosExistencias productosserviciosexistencias:productosserviciosexistenciassSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productosserviciosexistencias.gettotal_devuelto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelProductosServiciosExistencias(row);				
			//	iRow++;
			//}				
			
			//for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciassSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelProductosServiciosExistencias(productosserviciosexistenciasAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingProductosServiciosExistencias(false);
			
			//SI ES MANUAL
			if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualProductosServiciosExistencias();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingProductosServiciosExistencias(false);
			
			//SI ES MANUAL
			if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualProductosServiciosExistencias();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingProductosServiciosExistencias(false);
			
			//SI ES MANUAL
			if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualProductosServiciosExistencias();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaProductosServiciosExistencias() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosProductosServiciosExistencias.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosProductosServiciosExistencias.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosProductosServiciosExistencias.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosProductosServiciosExistencias.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosProductosServiciosExistencias.setMinimumSize(dimensionMinimum);
		this.jTableDatosProductosServiciosExistencias.setMaximumSize(dimensionMaximum);
		this.jTableDatosProductosServiciosExistencias.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingProductosServiciosExistencias(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingProductosServiciosExistencias(esInicializar,true);
	}
	
	public void inicializarActualizarBindingProductosServiciosExistencias(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaProductosServiciosExistencias(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesProductosServiciosExistencias(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasProductosServiciosExistencias(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesProductosServiciosExistencias(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesProductosServiciosExistencias(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualProductosServiciosExistencias() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaProductosServiciosExistencias();
		
		this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualProductosServiciosExistencias();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesProductosServiciosExistencias() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualProductosServiciosExistencias(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualProductosServiciosExistencias(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosProductosServiciosExistencias.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosProductosServiciosExistencias.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteProductosServiciosExistencias.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormProductosServiciosExistencias.jCheckBoxPostAccionNuevoProductosServiciosExistencias.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormProductosServiciosExistencias.jCheckBoxPostAccionSinCerrarProductosServiciosExistencias.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormProductosServiciosExistencias.jCheckBoxPostAccionSinMensajeProductosServiciosExistencias.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosProductosServiciosExistencias.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosProductosServiciosExistencias.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteProductosServiciosExistencias.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jCheckBoxPostAccionNuevoProductosServiciosExistencias.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jCheckBoxPostAccionSinCerrarProductosServiciosExistencias.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jCheckBoxPostAccionSinMensajeProductosServiciosExistencias.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionProductosServiciosExistencias.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionProductosServiciosExistencias.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesProductosServiciosExistencias.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesProductosServiciosExistencias.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesProductosServiciosExistencias.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarProductosServiciosExistencias.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesProductosServiciosExistencias.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesProductosServiciosExistencias.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralProductosServiciosExistencias.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesProductosServiciosExistencias(Boolean esInicializar) throws Exception {
		try	{	
			if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualProductosServiciosExistencias(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesProductosServiciosExistencias() throws Exception {
		try	{
			if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualProductosServiciosExistencias();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleProductosServiciosExistencias() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualProductosServiciosExistencias() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesProductosServiciosExistencias.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesProductosServiciosExistencias.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesProductosServiciosExistencias.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesProductosServiciosExistencias.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesProductosServiciosExistencias.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesProductosServiciosExistencias.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionProductosServiciosExistencias.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionProductosServiciosExistencias.addItem(reporte);
			}
			
			
			if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionProductosServiciosExistencias.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionProductosServiciosExistencias.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesProductosServiciosExistencias.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesProductosServiciosExistencias.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesProductosServiciosExistencias.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesProductosServiciosExistencias.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarProductosServiciosExistencias.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarProductosServiciosExistencias.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarProductosServiciosExistencias.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualProductosServiciosExistencias();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualProductosServiciosExistencias() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
				
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=ProductosServiciosExistenciasConstantesFunciones.getTiposSeleccionarProductosServiciosExistencias(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=ProductosServiciosExistenciasConstantesFunciones.getTiposSeleccionarProductosServiciosExistencias(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=ProductosServiciosExistenciasConstantesFunciones.getTiposSeleccionarProductosServiciosExistencias(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualProductosServiciosExistencias()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()!=null){this.id_bodegaBusquedaProductosServiciosExistencias=((Bodega)this.jComboBoxid_bodegaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()!=null){this.id_productoBusquedaProductosServiciosExistencias=((Producto)this.jComboBoxid_productoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()).getId();}
		if(this.jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()!=null){this.id_lineaBusquedaProductosServiciosExistencias=((Linea)this.jComboBoxid_lineaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()).getId();}
		if(this.jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()!=null){this.id_linea_grupoBusquedaProductosServiciosExistencias=((Linea)this.jComboBoxid_linea_grupoBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()).getId();}
		if(this.jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()!=null){this.id_linea_categoriaBusquedaProductosServiciosExistencias=((Linea)this.jComboBoxid_linea_categoriaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()).getId();}
		if(this.jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()!=null){this.id_linea_marcaBusquedaProductosServiciosExistencias=((Linea)this.jComboBoxid_linea_marcaBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()!=null){this.id_tipo_producto_servicioBusquedaProductosServiciosExistencias=((TipoProductoServicio)this.jComboBoxid_tipo_producto_servicioBusquedaProductosServiciosExistenciasProductosServiciosExistencias.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasProductosServiciosExistencias(Boolean esInicializar) throws Exception {				
		if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualProductosServiciosExistencias();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaProductosServiciosExistencias() throws Exception {
		this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByProductosServiciosExistencias() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosProductosServiciosExistenciasOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistenciasOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaProductosServiciosExistencias(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=productosserviciosexistenciasLogic.getProductosServiciosExistenciass().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=productosserviciosexistenciass.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosProductosServiciosExistencias.setModel(new ProductosServiciosExistenciasModel(this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosProductosServiciosExistencias.setModel(new ProductosServiciosExistenciasModel(this.productosserviciosexistenciass,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByProductosServiciosExistencias!=null && this.jInternalFrameOrderByProductosServiciosExistencias.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByProductosServiciosExistencias();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ProductosServiciosExistenciasConstantesFunciones.SCLASSWEBTITULO,productosserviciosexistenciasConstantesFunciones.resaltarSeleccionarProductosServiciosExistencias,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ProductosServiciosExistenciasConstantesFunciones.SCLASSWEBTITULO,productosserviciosexistenciasConstantesFunciones.resaltarSeleccionarProductosServiciosExistencias,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_ID));

		if(this.productosserviciosexistenciasConstantesFunciones.mostraridProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltaridProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activaridProductosServiciosExistencias,iSizeTabla,this,true,"idProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltaridProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activaridProductosServiciosExistencias,this,true,"idProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_sucursalProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_sucursalProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_sucursalProductosServiciosExistencias,iSizeTabla,this,true,"nombre_sucursalProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_sucursalProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_sucursalProductosServiciosExistencias,this,true,"nombre_sucursalProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_lineaProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_lineaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_lineaProductosServiciosExistencias,iSizeTabla,this,true,"nombre_lineaProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_lineaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_lineaProductosServiciosExistencias,this,true,"nombre_lineaProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_grupoProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_grupoProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_grupoProductosServiciosExistencias,iSizeTabla,this,true,"nombre_linea_grupoProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_grupoProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_grupoProductosServiciosExistencias,this,true,"nombre_linea_grupoProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_categoriaProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_categoriaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_categoriaProductosServiciosExistencias,iSizeTabla,this,true,"nombre_linea_categoriaProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_categoriaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_categoriaProductosServiciosExistencias,this,true,"nombre_linea_categoriaProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_marcaProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_marcaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_marcaProductosServiciosExistencias,iSizeTabla,this,true,"nombre_linea_marcaProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_marcaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_marcaProductosServiciosExistencias,this,true,"nombre_linea_marcaProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarcodigoProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarcodigoProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarcodigoProductosServiciosExistencias,iSizeTabla,this,true,"codigoProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarcodigoProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarcodigoProductosServiciosExistencias,this,true,"codigoProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombreProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombreProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombreProductosServiciosExistencias,iSizeTabla,this,true,"nombreProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombreProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombreProductosServiciosExistencias,this,true,"nombreProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_tipo_producto_servicioProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_tipo_producto_servicioProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_tipo_producto_servicioProductosServiciosExistencias,iSizeTabla,this,true,"nombre_tipo_producto_servicioProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_tipo_producto_servicioProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_tipo_producto_servicioProductosServiciosExistencias,this,true,"nombre_tipo_producto_servicioProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_bodegaProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_bodegaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_bodegaProductosServiciosExistencias,iSizeTabla,this,true,"nombre_bodegaProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_bodegaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_bodegaProductosServiciosExistencias,this,true,"nombre_bodegaProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_unidadProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_unidadProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_unidadProductosServiciosExistencias,iSizeTabla,this,true,"nombre_unidadProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_unidadProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarnombre_unidadProductosServiciosExistencias,this,true,"nombre_unidadProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_disponibleProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_disponibleProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarcantidad_disponibleProductosServiciosExistencias,iSizeTabla,this,true,"cantidad_disponibleProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_disponibleProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarcantidad_disponibleProductosServiciosExistencias,this,true,"cantidad_disponibleProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_reservadaProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_reservadaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarcantidad_reservadaProductosServiciosExistencias,iSizeTabla,this,true,"cantidad_reservadaProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_reservadaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarcantidad_reservadaProductosServiciosExistencias,this,true,"cantidad_reservadaProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_pedidaProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_pedidaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarcantidad_pedidaProductosServiciosExistencias,iSizeTabla,this,true,"cantidad_pedidaProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_pedidaProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activarcantidad_pedidaProductosServiciosExistencias,this,true,"cantidad_pedidaProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_egresoProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_egresoProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activartotal_egresoProductosServiciosExistencias,iSizeTabla,this,true,"total_egresoProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_egresoProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activartotal_egresoProductosServiciosExistencias,this,true,"total_egresoProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_compraProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_compraProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activartotal_compraProductosServiciosExistencias,iSizeTabla,this,true,"total_compraProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_compraProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activartotal_compraProductosServiciosExistencias,this,true,"total_compraProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO));

		if(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_devueltoProductosServiciosExistencias && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_devueltoProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activartotal_devueltoProductosServiciosExistencias,iSizeTabla,this,true,"total_devueltoProductosServiciosExistencias","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_devueltoProductosServiciosExistencias,this.productosserviciosexistenciasConstantesFunciones.activartotal_devueltoProductosServiciosExistencias,this,true,"total_devueltoProductosServiciosExistencias","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ProductosServiciosExistenciasPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosProductosServiciosExistencias.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosProductosServiciosExistencias.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosProductosServiciosExistencias.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosProductosServiciosExistencias.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosProductosServiciosExistencias.moveColumn(this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosProductosServiciosExistencias.moveColumn(this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosProductosServiciosExistencias.moveColumn(this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosProductosServiciosExistencias.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosProductosServiciosExistencias.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosProductosServiciosExistencias,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosProductosServiciosExistencias.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosProductosServiciosExistencias.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosProductosServiciosExistencias.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							//iSize=productosserviciosexistenciasLogic.getProductosServiciosExistenciass().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=productosserviciosexistenciass.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosProductosServiciosExistencias.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosProductosServiciosExistencias.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosProductosServiciosExistencias();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoProductosServiciosExistencias=false;
					
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
				if(this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosProductosServiciosExistencias.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.productosserviciosexistencias.getsType().equals("DUPLICADO")
				   || this.productosserviciosexistencias.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoProductosServiciosExistencias=true;
				
				} else {
					this.isEsNuevoProductosServiciosExistencias=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
					if(this.productosserviciosexistencias.getId()>=0 && !this.productosserviciosexistencias.getIsNew()) {						
						this.isEsNuevoProductosServiciosExistencias=false;
						
					} else {
						this.isEsNuevoProductosServiciosExistencias=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoProductosServiciosExistencias(esRelaciones);						
				
				this.seleccionarProductosServiciosExistencias(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.productosserviciosexistencias.getId()<0) {
					this.isEsNuevoProductosServiciosExistencias=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarProductosServiciosExistencias(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarProductosServiciosExistencias(evt,rowIndex);
				}	
				
				if(this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion ProductosServiciosExistencias: " + this.dDif); 
					}
				}								
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarProductosServiciosExistencias(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.productosserviciosexistencias)) {
					if(this.productosserviciosexistencias.getId()>0) {
						this.productosserviciosexistencias.setIsDeleted(true);
						
						this.productosserviciosexistenciassEliminados.add(this.productosserviciosexistencias);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().remove(this.productosserviciosexistencias);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistenciass.remove(this.productosserviciosexistencias);				
					}
					
					
					((ProductosServiciosExistenciasModel) this.jTableDatosProductosServiciosExistencias.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarProductosServiciosExistencias(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoProductosServiciosExistencias) {
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosProductosServiciosExistencias.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosProductosServiciosExistencias.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioProductosServiciosExistencias(this.productosserviciosexistencias);
				}
				
				//ARCHITECTURE
				try {
					
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesProductosServiciosExistencias("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesProductosServiciosExistencias(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoProductosServiciosExistencias(productosserviciosexistencias,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioProductosServiciosExistencias(productosserviciosexistencias);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyProductosServiciosExistencias(productosserviciosexistencias,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyProductosServiciosExistencias(productosserviciosexistencias);
	}
	
	public void setVariablesObjetoActualToFormularioProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.setText(productosserviciosexistencias.getId().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_sucursalProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_sucursal());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_lineaProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_linea());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_grupoProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_linea_grupo());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_categoriaProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_linea_categoria());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_marcaProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_linea_marca());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcodigoProductosServiciosExistencias.setText(productosserviciosexistencias.getcodigo());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombreProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_tipo_producto_servicioProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_tipo_producto_servicio());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_bodegaProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_bodega());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldnombre_unidadProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_unidad());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_disponibleProductosServiciosExistencias.setText(productosserviciosexistencias.getcantidad_disponible().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_reservadaProductosServiciosExistencias.setText(productosserviciosexistencias.getcantidad_reservada().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_pedidaProductosServiciosExistencias.setText(productosserviciosexistencias.getcantidad_pedida().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_egresoProductosServiciosExistencias.setText(productosserviciosexistencias.gettotal_egreso().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_compraProductosServiciosExistencias.setText(productosserviciosexistencias.gettotal_compra().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_devueltoProductosServiciosExistencias.setText(productosserviciosexistencias.gettotal_devuelto().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,ProductosServiciosExistencias productosserviciosexistenciasLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,productosserviciosexistenciasLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,ProductosServiciosExistencias productosserviciosexistenciasLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				productosserviciosexistenciasLocal=this.productosserviciosexistencias;
			} else {
				productosserviciosexistenciasLocal=this.productosserviciosexistenciasAnterior;
			}
		}
		
		if(this.permiteMantenimiento(productosserviciosexistenciasLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoProductosServiciosExistencias(productosserviciosexistenciasLocal,true);
					
					if(productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(productosserviciosexistenciasLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(productosserviciosexistenciasLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(productosserviciosexistencias,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(productosserviciosexistencias);
	}
	
	public void setVariablesFormularioToObjetoActualProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(productosserviciosexistencias,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.getText()==null || this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.getText()=="" || this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.getText()=="Id") {
				this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.setText("0");
			}

			if(conColumnasBase) {productosserviciosexistencias.setId(Long.parseLong(this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelIdProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre_sucursal(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_sucursalProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_sucursalProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre_linea(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_lineaProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_lineaProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre_linea_grupo(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_grupoProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_grupoProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre_linea_categoria(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_categoriaProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_categoriaProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre_linea_marca(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_marcaProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_linea_marcaProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setcodigo(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcodigoProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcodigoProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombreProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombreProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre_tipo_producto_servicio(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_tipo_producto_servicioProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_tipo_producto_servicioProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre_bodega(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_bodegaProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_bodegaProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setnombre_unidad(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldnombre_unidadProductosServiciosExistencias.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelnombre_unidadProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setcantidad_disponible(Integer.parseInt(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_disponibleProductosServiciosExistencias.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_disponibleProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setcantidad_reservada(Double.parseDouble(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_reservadaProductosServiciosExistencias.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_reservadaProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.setcantidad_pedida(Double.parseDouble(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_pedidaProductosServiciosExistencias.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelcantidad_pedidaProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.settotal_egreso(Double.parseDouble(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_egresoProductosServiciosExistencias.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_egresoProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.settotal_compra(Double.parseDouble(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_compraProductosServiciosExistencias.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_compraProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			productosserviciosexistencias.settotal_devuelto(Double.parseDouble(this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_devueltoProductosServiciosExistencias.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabeltotal_devueltoProductosServiciosExistencias,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistenciasBean,ProductosServiciosExistencias productosserviciosexistencias,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistenciasOrigen,ProductosServiciosExistencias productosserviciosexistencias,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getId()!=null && !productosserviciosexistenciasOrigen.getId().equals(0L))) {productosserviciosexistencias.setId(productosserviciosexistenciasOrigen.getId());}}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre_sucursal()!=null && !productosserviciosexistenciasOrigen.getnombre_sucursal().equals(""))) {productosserviciosexistencias.setnombre_sucursal(productosserviciosexistenciasOrigen.getnombre_sucursal());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre_linea()!=null && !productosserviciosexistenciasOrigen.getnombre_linea().equals(""))) {productosserviciosexistencias.setnombre_linea(productosserviciosexistenciasOrigen.getnombre_linea());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre_linea_grupo()!=null && !productosserviciosexistenciasOrigen.getnombre_linea_grupo().equals(""))) {productosserviciosexistencias.setnombre_linea_grupo(productosserviciosexistenciasOrigen.getnombre_linea_grupo());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre_linea_categoria()!=null && !productosserviciosexistenciasOrigen.getnombre_linea_categoria().equals(""))) {productosserviciosexistencias.setnombre_linea_categoria(productosserviciosexistenciasOrigen.getnombre_linea_categoria());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre_linea_marca()!=null && !productosserviciosexistenciasOrigen.getnombre_linea_marca().equals(""))) {productosserviciosexistencias.setnombre_linea_marca(productosserviciosexistenciasOrigen.getnombre_linea_marca());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getcodigo()!=null && !productosserviciosexistenciasOrigen.getcodigo().equals(""))) {productosserviciosexistencias.setcodigo(productosserviciosexistenciasOrigen.getcodigo());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre()!=null && !productosserviciosexistenciasOrigen.getnombre().equals(""))) {productosserviciosexistencias.setnombre(productosserviciosexistenciasOrigen.getnombre());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre_tipo_producto_servicio()!=null && !productosserviciosexistenciasOrigen.getnombre_tipo_producto_servicio().equals(""))) {productosserviciosexistencias.setnombre_tipo_producto_servicio(productosserviciosexistenciasOrigen.getnombre_tipo_producto_servicio());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre_bodega()!=null && !productosserviciosexistenciasOrigen.getnombre_bodega().equals(""))) {productosserviciosexistencias.setnombre_bodega(productosserviciosexistenciasOrigen.getnombre_bodega());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getnombre_unidad()!=null && !productosserviciosexistenciasOrigen.getnombre_unidad().equals(""))) {productosserviciosexistencias.setnombre_unidad(productosserviciosexistenciasOrigen.getnombre_unidad());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getcantidad_disponible()!=null && !productosserviciosexistenciasOrigen.getcantidad_disponible().equals(0))) {productosserviciosexistencias.setcantidad_disponible(productosserviciosexistenciasOrigen.getcantidad_disponible());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getcantidad_reservada()!=null && !productosserviciosexistenciasOrigen.getcantidad_reservada().equals(0.0))) {productosserviciosexistencias.setcantidad_reservada(productosserviciosexistenciasOrigen.getcantidad_reservada());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.getcantidad_pedida()!=null && !productosserviciosexistenciasOrigen.getcantidad_pedida().equals(0.0))) {productosserviciosexistencias.setcantidad_pedida(productosserviciosexistenciasOrigen.getcantidad_pedida());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.gettotal_egreso()!=null && !productosserviciosexistenciasOrigen.gettotal_egreso().equals(0.0))) {productosserviciosexistencias.settotal_egreso(productosserviciosexistenciasOrigen.gettotal_egreso());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.gettotal_compra()!=null && !productosserviciosexistenciasOrigen.gettotal_compra().equals(0.0))) {productosserviciosexistencias.settotal_compra(productosserviciosexistenciasOrigen.gettotal_compra());}
			if(conDefault || (!conDefault && productosserviciosexistenciasOrigen.gettotal_devuelto()!=null && !productosserviciosexistenciasOrigen.gettotal_devuelto().equals(0.0))) {productosserviciosexistencias.settotal_devuelto(productosserviciosexistenciasOrigen.gettotal_devuelto());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.setText(productosserviciosexistencias.getId().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_sucursalProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_sucursal());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_lineaProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_linea());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_grupoProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_linea_grupo());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_categoriaProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_linea_categoria());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_marcaProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_linea_marca());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcodigoProductosServiciosExistencias.setText(productosserviciosexistencias.getcodigo());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombreProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_tipo_producto_servicioProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_tipo_producto_servicio());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_bodegaProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_bodega());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldnombre_unidadProductosServiciosExistencias.setText(productosserviciosexistencias.getnombre_unidad());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_disponibleProductosServiciosExistencias.setText(productosserviciosexistencias.getcantidad_disponible().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_reservadaProductosServiciosExistencias.setText(productosserviciosexistencias.getcantidad_reservada().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_pedidaProductosServiciosExistencias.setText(productosserviciosexistencias.getcantidad_pedida().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_egresoProductosServiciosExistencias.setText(productosserviciosexistencias.gettotal_egreso().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_compraProductosServiciosExistencias.setText(productosserviciosexistencias.gettotal_compra().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_devueltoProductosServiciosExistencias.setText(productosserviciosexistencias.gettotal_devuelto().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioProductosServiciosExistencias(ProductosServiciosExistenciasBean productosserviciosexistenciasBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getId().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_sucursalProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre_sucursal());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_lineaProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre_linea());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_grupoProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre_linea_grupo());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_categoriaProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre_linea_categoria());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_marcaProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre_linea_marca());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcodigoProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getcodigo());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombreProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_tipo_producto_servicioProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre_tipo_producto_servicio());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_bodegaProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre_bodega());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldnombre_unidadProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getnombre_unidad());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_disponibleProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getcantidad_disponible().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_reservadaProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getcantidad_reservada().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_pedidaProductosServiciosExistencias.setText(productosserviciosexistenciasBean.getcantidad_pedida().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_egresoProductosServiciosExistencias.setText(productosserviciosexistenciasBean.gettotal_egreso().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_compraProductosServiciosExistencias.setText(productosserviciosexistenciasBean.gettotal_compra().toString());
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_devueltoProductosServiciosExistencias.setText(productosserviciosexistenciasBean.gettotal_devuelto().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanProductosServiciosExistencias(ProductosServiciosExistenciasParameterReturnGeneral productosserviciosexistenciasReturnGeneral,ProductosServiciosExistenciasBean productosserviciosexistenciasBean,Boolean conDefault) throws Exception { 
		try {
			ProductosServiciosExistencias productosserviciosexistenciasLocal=new ProductosServiciosExistencias();
			
			productosserviciosexistenciasLocal=productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getId()!=null && !productosserviciosexistenciasLocal.getId().equals(0L))) {productosserviciosexistenciasBean.setId(productosserviciosexistenciasLocal.getId());}}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre_sucursal()!=null && !productosserviciosexistenciasLocal.getnombre_sucursal().equals(""))) {productosserviciosexistenciasBean.setnombre_sucursal(productosserviciosexistenciasLocal.getnombre_sucursal());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre_linea()!=null && !productosserviciosexistenciasLocal.getnombre_linea().equals(""))) {productosserviciosexistenciasBean.setnombre_linea(productosserviciosexistenciasLocal.getnombre_linea());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre_linea_grupo()!=null && !productosserviciosexistenciasLocal.getnombre_linea_grupo().equals(""))) {productosserviciosexistenciasBean.setnombre_linea_grupo(productosserviciosexistenciasLocal.getnombre_linea_grupo());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre_linea_categoria()!=null && !productosserviciosexistenciasLocal.getnombre_linea_categoria().equals(""))) {productosserviciosexistenciasBean.setnombre_linea_categoria(productosserviciosexistenciasLocal.getnombre_linea_categoria());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre_linea_marca()!=null && !productosserviciosexistenciasLocal.getnombre_linea_marca().equals(""))) {productosserviciosexistenciasBean.setnombre_linea_marca(productosserviciosexistenciasLocal.getnombre_linea_marca());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getcodigo()!=null && !productosserviciosexistenciasLocal.getcodigo().equals(""))) {productosserviciosexistenciasBean.setcodigo(productosserviciosexistenciasLocal.getcodigo());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre()!=null && !productosserviciosexistenciasLocal.getnombre().equals(""))) {productosserviciosexistenciasBean.setnombre(productosserviciosexistenciasLocal.getnombre());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre_tipo_producto_servicio()!=null && !productosserviciosexistenciasLocal.getnombre_tipo_producto_servicio().equals(""))) {productosserviciosexistenciasBean.setnombre_tipo_producto_servicio(productosserviciosexistenciasLocal.getnombre_tipo_producto_servicio());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre_bodega()!=null && !productosserviciosexistenciasLocal.getnombre_bodega().equals(""))) {productosserviciosexistenciasBean.setnombre_bodega(productosserviciosexistenciasLocal.getnombre_bodega());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getnombre_unidad()!=null && !productosserviciosexistenciasLocal.getnombre_unidad().equals(""))) {productosserviciosexistenciasBean.setnombre_unidad(productosserviciosexistenciasLocal.getnombre_unidad());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getcantidad_disponible()!=null && !productosserviciosexistenciasLocal.getcantidad_disponible().equals(0))) {productosserviciosexistenciasBean.setcantidad_disponible(productosserviciosexistenciasLocal.getcantidad_disponible());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getcantidad_reservada()!=null && !productosserviciosexistenciasLocal.getcantidad_reservada().equals(0.0))) {productosserviciosexistenciasBean.setcantidad_reservada(productosserviciosexistenciasLocal.getcantidad_reservada());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.getcantidad_pedida()!=null && !productosserviciosexistenciasLocal.getcantidad_pedida().equals(0.0))) {productosserviciosexistenciasBean.setcantidad_pedida(productosserviciosexistenciasLocal.getcantidad_pedida());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.gettotal_egreso()!=null && !productosserviciosexistenciasLocal.gettotal_egreso().equals(0.0))) {productosserviciosexistenciasBean.settotal_egreso(productosserviciosexistenciasLocal.gettotal_egreso());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.gettotal_compra()!=null && !productosserviciosexistenciasLocal.gettotal_compra().equals(0.0))) {productosserviciosexistenciasBean.settotal_compra(productosserviciosexistenciasLocal.gettotal_compra());}
			if(conDefault || (!conDefault && productosserviciosexistenciasLocal.gettotal_devuelto()!=null && !productosserviciosexistenciasLocal.gettotal_devuelto().equals(0.0))) {productosserviciosexistenciasBean.settotal_devuelto(productosserviciosexistenciasLocal.gettotal_devuelto());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxProductosServiciosExistenciasGenerico(Long idProductosServiciosExistenciasSeleccionado,JComboBox jComboBoxProductosServiciosExistencias,List<ProductosServiciosExistencias> productosserviciosexistenciassLocal)throws Exception {
		try {
			ProductosServiciosExistencias  productosserviciosexistenciasTemp=null;

			for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciassLocal) {
				if(productosserviciosexistenciasAux.getId()!=null && productosserviciosexistenciasAux.getId().equals(idProductosServiciosExistenciasSeleccionado)) {
					productosserviciosexistenciasTemp=productosserviciosexistenciasAux;
					break;
				}
			}

			jComboBoxProductosServiciosExistencias.setSelectedItem(productosserviciosexistenciasTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxProductosServiciosExistenciasGenerico(JComboBox jComboBoxProductosServiciosExistencias,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxProductosServiciosExistencias.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxProductosServiciosExistencias.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxProductosServiciosExistencias.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxProductosServiciosExistencias.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxProductosServiciosExistencias.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxProductosServiciosExistencias.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxProductosServiciosExistencias.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxProductosServiciosExistencias.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxProductosServiciosExistencias.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxProductosServiciosExistencias.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			productosserviciosexistencias=(ProductosServiciosExistencias) productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			productosserviciosexistencias =(ProductosServiciosExistencias) productosserviciosexistenciass.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.getproducto_descripcion();
			} else {
				//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Linea")) {
			//sDescripcion=this.getActualLineaForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.getlinea_descripcion();
			} else {
				//sDescripcion=this.getActualLineaForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.getlinea_descripcion();
			}
		}

		if(sTipo.equals("LineaGrupo")) {
			//sDescripcion=this.getActualLineaGrupoForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.getlineagrupo_descripcion();
			} else {
				//sDescripcion=this.getActualLineaGrupoForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.getlineagrupo_descripcion();
			}
		}

		if(sTipo.equals("LineaCategoria")) {
			//sDescripcion=this.getActualLineaCategoriaForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.getlineacategoria_descripcion();
			} else {
				//sDescripcion=this.getActualLineaCategoriaForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.getlineacategoria_descripcion();
			}
		}

		if(sTipo.equals("LineaMarca")) {
			//sDescripcion=this.getActualLineaMarcaForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.getlineamarca_descripcion();
			} else {
				//sDescripcion=this.getActualLineaMarcaForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.getlineamarca_descripcion();
			}
		}

		if(sTipo.equals("TipoProductoServicio")) {
			//sDescripcion=this.getActualTipoProductoServicioForeignKeyDescripcion((Long)value);
			if(!productosserviciosexistencias.getIsNew() && !productosserviciosexistencias.getIsChanged() && !productosserviciosexistencias.getIsDeleted()) {
				sDescripcion=productosserviciosexistencias.gettipoproductoservicio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoProductoServicioForeignKeyDescripcion((Long)value);
				sDescripcion=productosserviciosexistencias.gettipoproductoservicio_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		ProductosServiciosExistencias productosserviciosexistenciasRow=new ProductosServiciosExistencias();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			productosserviciosexistenciasRow=(ProductosServiciosExistencias) productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			productosserviciosexistenciasRow=(ProductosServiciosExistencias) productosserviciosexistenciass.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualProductosServiciosExistencias(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias));			
			this.jButtonDuplicarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaDuplicarProductosServiciosExistencias && this.isPermisoDuplicarProductosServiciosExistencias));			
			this.jButtonCopiarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaCopiarProductosServiciosExistencias && this.isPermisoCopiarProductosServiciosExistencias));
			this.jButtonVerFormProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaVerFormProductosServiciosExistencias && this.isPermisoVerFormProductosServiciosExistencias));
			
			this.jButtonAbrirOrderByProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaOrdenProductosServiciosExistencias && this.isPermisoOrdenProductosServiciosExistencias));			
			
			this.jButtonNuevoRelacionesProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias));			
			this.jButtonNuevoGuardarCambiosProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaModificarProductosServiciosExistencias && this.isPermisoActualizarProductosServiciosExistencias));	
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaActualizarProductosServiciosExistencias && this.isPermisoActualizarProductosServiciosExistencias));	
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaEliminarProductosServiciosExistencias && this.isPermisoEliminarProductosServiciosExistencias));
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarProductosServiciosExistencias.setVisible(this.isVisibilidadCeldaCancelarProductosServiciosExistencias);							
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaGuardarProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));			
			
			}
						
			this.jButtonGuardarCambiosTablaProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias));						
			this.jButtonDuplicarToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaDuplicarProductosServiciosExistencias && this.isPermisoDuplicarProductosServiciosExistencias));						
			this.jButtonCopiarToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaCopiarProductosServiciosExistencias && this.isPermisoCopiarProductosServiciosExistencias));			
			this.jButtonVerFormToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaVerFormProductosServiciosExistencias && this.isPermisoVerFormProductosServiciosExistencias));			
			this.jButtonAbrirOrderByToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaOrdenProductosServiciosExistencias && this.isPermisoOrdenProductosServiciosExistencias));
			this.jButtonNuevoRelacionesToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias));			
			this.jButtonNuevoGuardarCambiosToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));			
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaModificarProductosServiciosExistencias && this.isPermisoActualizarProductosServiciosExistencias));	
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaActualizarProductosServiciosExistencias  && this.isPermisoActualizarProductosServiciosExistencias));	
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaEliminarProductosServiciosExistencias && this.isPermisoEliminarProductosServiciosExistencias));
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarToolBarProductosServiciosExistencias.setVisible(this.isVisibilidadCeldaCancelarProductosServiciosExistencias);				
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaGuardarProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias));			
			this.jMenuItemDuplicarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaDuplicarProductosServiciosExistencias && this.isPermisoDuplicarProductosServiciosExistencias));			
			this.jMenuItemCopiarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaCopiarProductosServiciosExistencias && this.isPermisoCopiarProductosServiciosExistencias));			
			this.jMenuItemVerFormProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaVerFormProductosServiciosExistencias && this.isPermisoVerFormProductosServiciosExistencias));			
			this.jMenuItemAbrirOrderByProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaOrdenProductosServiciosExistencias && this.isPermisoOrdenProductosServiciosExistencias));			
			//this.jMenuItemMostrarOcultarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaOrdenProductosServiciosExistencias && this.isPermisoOrdenProductosServiciosExistencias));
			this.jMenuItemDetalleAbrirOrderByProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaOrdenProductosServiciosExistencias && this.isPermisoOrdenProductosServiciosExistencias));			
			//this.jMenuItemDetalleMostrarOcultarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaOrdenProductosServiciosExistencias && this.isPermisoOrdenProductosServiciosExistencias));			
			this.jMenuItemNuevoRelacionesProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias));			
			this.jMenuItemNuevoGuardarCambiosProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaNuevoProductosServiciosExistencias && this.isPermisoNuevoProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));									
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemModificarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaModificarProductosServiciosExistencias && this.isPermisoActualizarProductosServiciosExistencias));	
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemActualizarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaActualizarProductosServiciosExistencias && this.isPermisoActualizarProductosServiciosExistencias));	
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemEliminarProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaEliminarProductosServiciosExistencias && this.isPermisoEliminarProductosServiciosExistencias));
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemCancelarProductosServiciosExistencias.setVisible(this.isVisibilidadCeldaCancelarProductosServiciosExistencias);				
			}
			
			this.jMenuItemGuardarCambiosProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaGuardarProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));						
			this.jMenuItemGuardarCambiosTablaProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=this.jButtonNuevoProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaDuplicarProductosServiciosExistencias=this.jButtonDuplicarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaCopiarProductosServiciosExistencias=this.jButtonCopiarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaVerFormProductosServiciosExistencias=this.jButtonVerFormProductosServiciosExistencias.isVisible();
			
			this.isVisibilidadCeldaOrdenProductosServiciosExistencias=this.jButtonAbrirOrderByProductosServiciosExistencias.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=this.jButtonNuevoRelacionesProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=this.jButtonModificarProductosServiciosExistencias.isVisible();
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaGuardarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosProductosServiciosExistencias.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=this.jButtonGuardarCambiosTablaProductosServiciosExistencias.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=this.jButtonNuevoToolBarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=this.jButtonNuevoRelacionesToolBarProductosServiciosExistencias.isVisible();
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarToolBarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarToolBarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarToolBarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarToolBarProductosServiciosExistencias.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarProductosServiciosExistencias=this.jButtonGuardarCambiosToolBarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=this.jButtonGuardarCambiosTablaToolBarProductosServiciosExistencias.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=this.jMenuItemNuevoProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=this.jMenuItemNuevoRelacionesProductosServiciosExistencias.isVisible();
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemModificarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemActualizarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemEliminarProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemCancelarProductosServiciosExistencias.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarProductosServiciosExistencias=this.jMenuItemGuardarCambiosProductosServiciosExistencias.isVisible();
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=this.jMenuItemGuardarCambiosTablaProductosServiciosExistencias.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesProductosServiciosExistencias(Boolean esInicializar) {
		if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {			
			if(this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
				//if(this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesProductosServiciosExistencias();
			}
			
			this.inicializarActualizarBindingBotonesManualProductosServiciosExistencias(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualProductosServiciosExistencias() {
		this.jButtonNuevoProductosServiciosExistencias.setVisible(this.isPermisoNuevoProductosServiciosExistencias);			
		this.jButtonDuplicarProductosServiciosExistencias.setVisible(this.isPermisoDuplicarProductosServiciosExistencias);			
		this.jButtonCopiarProductosServiciosExistencias.setVisible(this.isPermisoCopiarProductosServiciosExistencias);			
		this.jButtonVerFormProductosServiciosExistencias.setVisible(this.isPermisoVerFormProductosServiciosExistencias);			
		
		this.jButtonAbrirOrderByProductosServiciosExistencias.setVisible(this.isPermisoOrdenProductosServiciosExistencias);					
		
		this.jButtonNuevoRelacionesProductosServiciosExistencias.setVisible(this.isPermisoNuevoProductosServiciosExistencias);			
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarProductosServiciosExistencias.setVisible(this.isPermisoActualizarProductosServiciosExistencias);	
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarProductosServiciosExistencias.setVisible(this.isPermisoActualizarProductosServiciosExistencias);	
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarProductosServiciosExistencias.setVisible(this.isPermisoEliminarProductosServiciosExistencias);
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarProductosServiciosExistencias.setVisible(this.isVisibilidadCeldaCancelarProductosServiciosExistencias);						
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosProductosServiciosExistencias.setVisible(this.isPermisoGuardarCambiosProductosServiciosExistencias);							
		}
		
		this.jButtonGuardarCambiosTablaProductosServiciosExistencias.setVisible(this.isPermisoActualizarProductosServiciosExistencias);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleProductosServiciosExistencias() {
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarProductosServiciosExistencias.setVisible(this.isPermisoActualizarProductosServiciosExistencias);	
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarProductosServiciosExistencias.setVisible(this.isPermisoActualizarProductosServiciosExistencias);	
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarProductosServiciosExistencias.setVisible(this.isPermisoEliminarProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarProductosServiciosExistencias.setVisible(this.isVisibilidadCeldaCancelarProductosServiciosExistencias);							
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosProductosServiciosExistencias.setVisible((this.isVisibilidadCeldaGuardarProductosServiciosExistencias && this.isPermisoGuardarCambiosProductosServiciosExistencias));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosProductosServiciosExistencias() {
		if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualProductosServiciosExistencias();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesProductosServiciosExistencias() {
	}
	
	public void jTableDatosProductosServiciosExistenciasListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarProductosServiciosExistencias(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.productosserviciosexistencias.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.productosserviciosexistencias.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.productosserviciosexistencias.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.productosserviciosexistencias.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.productosserviciosexistencias.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_lineaProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolinea=true;

			idTienePermisolinea=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(LineaConstantesFunciones.CLASSNAME);

			if(idTienePermisolinea) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.lineaBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.lineaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.lineaBeanSwingJInternalFrame.getLineaLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_linea()!=null) {
					this.lineaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.lineaBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_linea());
					this.lineaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.lineaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.lineaBeanSwingJInternalFrame.inicializarActualizarBindingTablaLinea();
				}

				JInternalFrameBase jinternalFrame =this.lineaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBorderlinea=(TitledBorder)this.lineaBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

				titledBorderlinea.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> Linea");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_lineaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_linea()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_linea = "+this.productosserviciosexistencias.getid_linea().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_linea_grupoProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolineagrupo=true;

			idTienePermisolineagrupo=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(LineaConstantesFunciones.CLASSNAME);

			if(idTienePermisolineagrupo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.lineagrupoBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.lineagrupoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.lineagrupoBeanSwingJInternalFrame.getLineaLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_linea_grupo()!=null) {
					this.lineagrupoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.lineagrupoBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_linea_grupo());
					this.lineagrupoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.lineagrupoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.lineagrupoBeanSwingJInternalFrame.inicializarActualizarBindingTablaLinea();
				}

				JInternalFrameBase jinternalFrame =this.lineagrupoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBorderlineagrupo=(TitledBorder)this.lineagrupoBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

				titledBorderlineagrupo.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> Linea");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_linea_grupoProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_linea_grupo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_linea_grupo = "+this.productosserviciosexistencias.getid_linea_grupo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_linea_categoriaProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolineacategoria=true;

			idTienePermisolineacategoria=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(LineaConstantesFunciones.CLASSNAME);

			if(idTienePermisolineacategoria) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.lineacategoriaBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.lineacategoriaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.lineacategoriaBeanSwingJInternalFrame.getLineaLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_linea_categoria()!=null) {
					this.lineacategoriaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.lineacategoriaBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_linea_categoria());
					this.lineacategoriaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.lineacategoriaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.lineacategoriaBeanSwingJInternalFrame.inicializarActualizarBindingTablaLinea();
				}

				JInternalFrameBase jinternalFrame =this.lineacategoriaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBorderlineacategoria=(TitledBorder)this.lineacategoriaBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

				titledBorderlineacategoria.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> Linea");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_linea_categoriaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_linea_categoria()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_linea_categoria = "+this.productosserviciosexistencias.getid_linea_categoria().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_linea_marcaProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolineamarca=true;

			idTienePermisolineamarca=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(LineaConstantesFunciones.CLASSNAME);

			if(idTienePermisolineamarca) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.lineamarcaBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.lineamarcaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.lineamarcaBeanSwingJInternalFrame.getLineaLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_linea_marca()!=null) {
					this.lineamarcaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.lineamarcaBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_linea_marca());
					this.lineamarcaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.lineamarcaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.lineamarcaBeanSwingJInternalFrame.inicializarActualizarBindingTablaLinea();
				}

				JInternalFrameBase jinternalFrame =this.lineamarcaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBorderlineamarca=(TitledBorder)this.lineamarcaBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

				titledBorderlineamarca.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> Linea");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_linea_marcaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_linea_marca()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_linea_marca = "+this.productosserviciosexistencias.getid_linea_marca().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_producto_servicioProductosServiciosExistenciasUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoproductoservicio=true;

			idTienePermisotipoproductoservicio=this.tienePermisosUsuarioEnPaginaWebProductosServiciosExistencias(TipoProductoServicioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoproductoservicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductosServiciosExistencias.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductosServiciosExistencias.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);

				this.tipoproductoservicioBeanSwingJInternalFrame=new TipoProductoServicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoproductoservicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoproductoservicioBeanSwingJInternalFrame.getTipoProductoServicioLogic().setConnexion(this.productosserviciosexistenciasLogic.getConnexion());

				if(this.productosserviciosexistencias.getid_tipo_producto_servicio()!=null) {
					this.tipoproductoservicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoproductoservicioBeanSwingJInternalFrame.setIdActual(this.productosserviciosexistencias.getid_tipo_producto_servicio());
					this.tipoproductoservicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoproductoservicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoproductoservicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoProductoServicio();
				}

				JInternalFrameBase jinternalFrame =this.tipoproductoservicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductosServiciosExistencias=(TitledBorder)this.jScrollPanelDatosProductosServiciosExistencias.getBorder();
				TitledBorder titledBordertipoproductoservicio=(TitledBorder)this.tipoproductoservicioBeanSwingJInternalFrame.jScrollPanelDatosTipoProductoServicio.getBorder();

				titledBordertipoproductoservicio.setTitle(titledBorderProductosServiciosExistencias.getTitle() + " -> TIPOPRODUCTOSERVICIO");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_producto_servicioProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getid_tipo_producto_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_producto_servicio = "+this.productosserviciosexistencias.getid_tipo_producto_servicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_sucursalProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_sucursal like '%"+this.productosserviciosexistencias.getnombre_sucursal()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_lineaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre_linea()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_linea like '%"+this.productosserviciosexistencias.getnombre_linea()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_linea_grupoProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre_linea_grupo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_linea_grupo like '%"+this.productosserviciosexistencias.getnombre_linea_grupo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_linea_categoriaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre_linea_categoria()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_linea_categoria like '%"+this.productosserviciosexistencias.getnombre_linea_categoria()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_linea_marcaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre_linea_marca()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_linea_marca like '%"+this.productosserviciosexistencias.getnombre_linea_marca()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.productosserviciosexistencias.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombreProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.productosserviciosexistencias.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_tipo_producto_servicioProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre_tipo_producto_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_tipo_producto_servicio like '%"+this.productosserviciosexistencias.getnombre_tipo_producto_servicio()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_bodegaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_bodega like '%"+this.productosserviciosexistencias.getnombre_bodega()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_unidadProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getnombre_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_unidad like '%"+this.productosserviciosexistencias.getnombre_unidad()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidad_disponibleProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getcantidad_disponible()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad_disponible = "+this.productosserviciosexistencias.getcantidad_disponible().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidad_reservadaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getcantidad_reservada()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad_reservada = "+this.productosserviciosexistencias.getcantidad_reservada().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidad_pedidaProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.getcantidad_pedida()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad_pedida = "+this.productosserviciosexistencias.getcantidad_pedida().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_egresoProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.gettotal_egreso()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_egreso = "+this.productosserviciosexistencias.gettotal_egreso().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_compraProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.gettotal_compra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_compra = "+this.productosserviciosexistencias.gettotal_compra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_devueltoProductosServiciosExistenciasBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.getproductosserviciosexistencias(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productosserviciosexistencias==null) {
						this.productosserviciosexistencias = new ProductosServiciosExistencias();
					}

					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);
				}

				if(this.productosserviciosexistencias.gettotal_devuelto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_devuelto = "+this.productosserviciosexistencias.gettotal_devuelto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductosServiciosExistencias(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaProductosServiciosExistenciasProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassBusquedaProductosServiciosExistencias();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdBodegaProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdBodega();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdEmpresa();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLineaProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdLinea();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLineaCategoriaProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdLineaCategoria();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLineaGrupoProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdLineaGrupo();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLineaMarcaProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdLineaMarca();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProductoProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdProducto();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdSucursal();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoProductoServicioProductosServiciosExistenciasActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);

			this.getProductosServiciosExistenciassFK_IdTipoProductoServicio();

			this.inicializarActualizarBindingProductosServiciosExistencias(false);

			//if(ProductosServiciosExistenciasBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productosserviciosexistenciasLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameProductosServiciosExistencias() {
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.setVisible(false);	    			
			this.jInternalFrameDetalleFormProductosServiciosExistencias.dispose();
			this.jInternalFrameDetalleFormProductosServiciosExistencias=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
			this.jInternalFrameReporteDinamicoProductosServiciosExistencias.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoProductosServiciosExistencias.dispose();
			this.jInternalFrameReporteDinamicoProductosServiciosExistencias=null;
		}
		
		if(this.jInternalFrameImportacionProductosServiciosExistencias!=null) {
			this.jInternalFrameImportacionProductosServiciosExistencias.setVisible(false);	    			
			this.jInternalFrameImportacionProductosServiciosExistencias.dispose();
			this.jInternalFrameImportacionProductosServiciosExistencias=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessProductosServiciosExistencias();
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			
			if(sTipo.equals("NuevoProductosServiciosExistencias")) {
				jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarProductosServiciosExistencias")) {
				jButtonDuplicarProductosServiciosExistenciasActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarProductosServiciosExistencias")) {
				jButtonCopiarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("VerFormProductosServiciosExistencias")) {
				jButtonVerFormProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarProductosServiciosExistencias")) {
				jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarProductosServiciosExistencias")) {
				jButtonDuplicarProductosServiciosExistenciasActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoProductosServiciosExistencias")) {
				jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarProductosServiciosExistencias")) {
				jButtonDuplicarProductosServiciosExistenciasActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesProductosServiciosExistencias")) {
				jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarProductosServiciosExistencias")) {
				jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesProductosServiciosExistencias")) {
				jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarProductosServiciosExistencias")) {
				jButtonModificarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarProductosServiciosExistencias")) {
				jButtonModificarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarProductosServiciosExistencias")) {
				jButtonModificarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("ActualizarProductosServiciosExistencias")) {
				jButtonActualizarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarProductosServiciosExistencias")) {
				jButtonActualizarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarProductosServiciosExistencias")) {
				jButtonActualizarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("EliminarProductosServiciosExistencias")) {
				jButtonEliminarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarProductosServiciosExistencias")) {
				jButtonEliminarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarProductosServiciosExistencias")) {
				jButtonEliminarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("CancelarProductosServiciosExistencias")) {
				jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarProductosServiciosExistencias")) {
				jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarProductosServiciosExistencias")) {
				jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("CerrarProductosServiciosExistencias")) {
				jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarProductosServiciosExistencias")) {
				jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarProductosServiciosExistencias")) {
				jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarProductosServiciosExistencias")) {
				jButtonMostrarOcultarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarProductosServiciosExistencias")) {
				jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosProductosServiciosExistencias")) {
				jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarProductosServiciosExistencias")) {
				jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarProductosServiciosExistencias")) {
				jButtonCopiarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarProductosServiciosExistencias")) {
				jButtonVerFormProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosProductosServiciosExistencias")) {
				jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarProductosServiciosExistencias")) {
				jButtonCopiarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormProductosServiciosExistencias")) {
				jButtonVerFormProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaProductosServiciosExistencias")) {
				jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarProductosServiciosExistencias")) {
				jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaProductosServiciosExistencias")) {
				jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionProductosServiciosExistencias")) {
				jButtonRecargarInformacionProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarProductosServiciosExistencias")) {
				jButtonRecargarInformacionProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionProductosServiciosExistencias")) {
				jButtonRecargarInformacionProductosServiciosExistenciasActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresProductosServiciosExistencias")) {
				jButtonAnterioresProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarProductosServiciosExistencias")) {
				jButtonAnterioresProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreProductosServiciosExistencias")) {
				jButtonAnterioresProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("SiguientesProductosServiciosExistencias")) {
				jButtonSiguientesProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarProductosServiciosExistencias")) {
				jButtonSiguientesProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesProductosServiciosExistencias")) {
				jButtonSiguientesProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByProductosServiciosExistencias") || sTipo.equals("MenuItemDetalleAbrirOrderByProductosServiciosExistencias")) {
				jButtonAbrirOrderByProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarProductosServiciosExistencias") || sTipo.equals("MenuItemDetalleMostrarOcultarProductosServiciosExistencias")) {
				jButtonMostrarOcultarProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosProductosServiciosExistencias")) {
				jButtonNuevoGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarProductosServiciosExistencias")) {
				jButtonNuevoGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosProductosServiciosExistencias")) {
				jButtonNuevoGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoProductosServiciosExistencias")) {
				jButtonCerrarReporteDinamicoProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoProductosServiciosExistencias")) {
				jButtonGenerarReporteDinamicoProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoProductosServiciosExistencias")) {
				
				jButtonGenerarExcelReporteDinamicoProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionProductosServiciosExistencias")) {
				jButtonCerrarImportacionProductosServiciosExistenciasActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionProductosServiciosExistencias")) {
				
				jButtonGenerarImportacionProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionProductosServiciosExistencias")) {
				
				jButtonAbrirImportacionProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesProductosServiciosExistencias")) {
				jComboBoxTiposAccionesProductosServiciosExistenciasActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesProductosServiciosExistencias")) {
				jComboBoxTiposRelacionesProductosServiciosExistenciasActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioProductosServiciosExistencias")) {
				jComboBoxTiposAccionesProductosServiciosExistenciasActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarProductosServiciosExistencias")) {
				
				jComboBoxTiposSeleccionarProductosServiciosExistenciasActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralProductosServiciosExistencias")) {
				jTextFieldValorCampoGeneralProductosServiciosExistenciasActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByProductosServiciosExistencias")) {
				jButtonAbrirOrderByProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarProductosServiciosExistencias")) {
				jButtonAbrirOrderByProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByProductosServiciosExistencias")) {
				jButtonCerrarOrderByProductosServiciosExistenciasActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idProductosServiciosExistenciasBusqueda")) {
				this.jButtonidProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_empresaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_empresaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalProductosServiciosExistenciasUpdate")) {
				this.jButtonid_sucursalProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_sucursalProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_bodegaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_bodegaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoProductosServiciosExistenciasUpdate")) {
				this.jButtonid_productoProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_productoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_lineaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_lineaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_lineaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_lineaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_grupoProductosServiciosExistenciasUpdate")) {
				this.jButtonid_linea_grupoProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_grupoProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_linea_grupoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_categoriaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_linea_categoriaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_categoriaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_linea_categoriaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_marcaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_linea_marcaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_marcaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_linea_marcaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_producto_servicioProductosServiciosExistenciasUpdate")) {
				this.jButtonid_tipo_producto_servicioProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_producto_servicioProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_tipo_producto_servicioProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_sucursalProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_sucursalProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_lineaProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_lineaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_linea_grupoProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_linea_grupoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_linea_categoriaProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_linea_categoriaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_linea_marcaProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_linea_marcaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoProductosServiciosExistenciasBusqueda")) {
				this.jButtoncodigoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombreProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_tipo_producto_servicioProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_tipo_producto_servicioProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_bodegaProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_bodegaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_unidadProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_unidadProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_disponibleProductosServiciosExistenciasBusqueda")) {
				this.jButtoncantidad_disponibleProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_reservadaProductosServiciosExistenciasBusqueda")) {
				this.jButtoncantidad_reservadaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_pedidaProductosServiciosExistenciasBusqueda")) {
				this.jButtoncantidad_pedidaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_egresoProductosServiciosExistenciasBusqueda")) {
				this.jButtontotal_egresoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_compraProductosServiciosExistenciasBusqueda")) {
				this.jButtontotal_compraProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_devueltoProductosServiciosExistenciasBusqueda")) {
				this.jButtontotal_devueltoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("BusquedaProductosServiciosExistenciasProductosServiciosExistencias")) {
				this.jButtonBusquedaProductosServiciosExistenciasProductosServiciosExistenciasActionPerformed(evt);
			}
			
			;
			
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessProductosServiciosExistencias();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				


				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			ProductosServiciosExistencias productosserviciosexistenciasLocal=null;
			
			if(!this.getEsControlTabla()) {
				productosserviciosexistenciasLocal=this.productosserviciosexistencias;
			} else {
				productosserviciosexistenciasLocal=this.productosserviciosexistenciasAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
							
				
				


				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductosServiciosExistenciasActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
								
						
				


				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
								
				
				


				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
			
			this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
							
				
				


				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
			
			this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
								
				
				


				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
			
			this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductosServiciosExistenciasActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosProductosServiciosExistencias")) {
					jCheckBoxSeleccionarTodosProductosServiciosExistenciasItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosProductosServiciosExistencias")) {
					jCheckBoxSeleccionadosProductosServiciosExistenciasItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarProductosServiciosExistencias")) {
					
				}
				
				


				
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
												
				
				


				
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductosServiciosExistenciasActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productosserviciosexistencias);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productosserviciosexistencias);
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductosServiciosExistencias.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductosServiciosExistencias.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductosServiciosExistenciasActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productosserviciosexistenciasAnterior =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarProductosServiciosExistencias")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosProductosServiciosExistenciasListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosProductosServiciosExistencias.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.productosserviciosexistencias =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.productosserviciosexistencias);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarProductosServiciosExistencias")) {
				
				}
				
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarProductosServiciosExistencias")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosProductosServiciosExistencias.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarProductosServiciosExistencias")) {
			
			}
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessProductosServiciosExistencias();
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			if(sTipo.equals("NuevoProductosServiciosExistencias")) {
				jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarProductosServiciosExistencias")) {
				jButtonDuplicarProductosServiciosExistenciasActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarProductosServiciosExistencias")) {
				jButtonCopiarProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormProductosServiciosExistencias")) {
				jButtonVerFormProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesProductosServiciosExistencias")) {
				jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarProductosServiciosExistencias")) {
				jButtonModificarProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarProductosServiciosExistencias")) {
				jButtonActualizarProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarProductosServiciosExistencias")) {
				jButtonEliminarProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaProductosServiciosExistencias")) {
				jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarProductosServiciosExistencias")) {
				jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarProductosServiciosExistencias")) {
				jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosProductosServiciosExistencias")) {
				jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosProductosServiciosExistencias")) {
				jButtonNuevoGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByProductosServiciosExistencias")) {
				jButtonAbrirOrderByProductosServiciosExistenciasActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionProductosServiciosExistencias")) {
				jButtonRecargarInformacionProductosServiciosExistenciasActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresProductosServiciosExistencias")) {
				jButtonAnterioresProductosServiciosExistenciasActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesProductosServiciosExistencias")) {
				jButtonSiguientesProductosServiciosExistenciasActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idProductosServiciosExistenciasBusqueda")) {
				this.jButtonidProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_empresaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_empresaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalProductosServiciosExistenciasUpdate")) {
				this.jButtonid_sucursalProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_sucursalProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_bodegaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_bodegaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoProductosServiciosExistenciasUpdate")) {
				this.jButtonid_productoProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_productoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_lineaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_lineaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_lineaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_lineaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_grupoProductosServiciosExistenciasUpdate")) {
				this.jButtonid_linea_grupoProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_grupoProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_linea_grupoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_categoriaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_linea_categoriaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_categoriaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_linea_categoriaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_marcaProductosServiciosExistenciasUpdate")) {
				this.jButtonid_linea_marcaProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_marcaProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_linea_marcaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_producto_servicioProductosServiciosExistenciasUpdate")) {
				this.jButtonid_tipo_producto_servicioProductosServiciosExistenciasUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_producto_servicioProductosServiciosExistenciasBusqueda")) {
				this.jButtonid_tipo_producto_servicioProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_sucursalProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_sucursalProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_lineaProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_lineaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_linea_grupoProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_linea_grupoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_linea_categoriaProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_linea_categoriaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_linea_marcaProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_linea_marcaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoProductosServiciosExistenciasBusqueda")) {
				this.jButtoncodigoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombreProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_tipo_producto_servicioProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_tipo_producto_servicioProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_bodegaProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_bodegaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_unidadProductosServiciosExistenciasBusqueda")) {
				this.jButtonnombre_unidadProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_disponibleProductosServiciosExistenciasBusqueda")) {
				this.jButtoncantidad_disponibleProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_reservadaProductosServiciosExistenciasBusqueda")) {
				this.jButtoncantidad_reservadaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_pedidaProductosServiciosExistenciasBusqueda")) {
				this.jButtoncantidad_pedidaProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_egresoProductosServiciosExistenciasBusqueda")) {
				this.jButtontotal_egresoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_compraProductosServiciosExistenciasBusqueda")) {
				this.jButtontotal_compraProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_devueltoProductosServiciosExistenciasBusqueda")) {
				this.jButtontotal_devueltoProductosServiciosExistenciasBusquedaActionPerformed(evt);
			}
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessProductosServiciosExistencias();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameProductosServiciosExistencias")) {
				closingInternalFrameProductosServiciosExistencias();
				
			} else if(sTipo.equals("jButtonCancelarProductosServiciosExistencias")) {
				JInternalFrameBase jInternalFrameDetalleFormProductosServiciosExistencias = (JInternalFrameBase)evt.getSource();
	            	
	            ProductosServiciosExistenciasBeanSwingJInternalFrame jInternalFrameParent=(ProductosServiciosExistenciasBeanSwingJInternalFrame)jInternalFrameDetalleFormProductosServiciosExistencias.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarProductosServiciosExistenciasActionPerformed(null);
			}
			
			ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.productosserviciosexistencias,new Object(),this.productosserviciosexistenciasParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormProductosServiciosExistencias(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormProductosServiciosExistencias(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormProductosServiciosExistencias(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.productosserviciosexistencias)) {
			if(!esControlTabla) {
				if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);			
				}
				
				if(this.productosserviciosexistenciasSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,classes);				
				}
			
				if(conIrServidorAplicacion) {
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanProductosServiciosExistencias(this.productosserviciosexistenciasReturnGeneral,this.productosserviciosexistenciasBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.productosserviciosexistenciasSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanProductosServiciosExistencias(classes,this.productosserviciosexistenciasReturnGeneral,this.productosserviciosexistenciasBean,false);
					}
						
					if(this.productosserviciosexistenciasReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyProductosServiciosExistencias(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioProductosServiciosExistencias(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias());	
					}
						
					if(this.productosserviciosexistenciasReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioProductosServiciosExistencias(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias(),classes);//this.productosserviciosexistenciasBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioProductosServiciosExistencias(this.productosserviciosexistencias,classes);//this.productosserviciosexistenciasBean);									
				}
			
				if(ProductosServiciosExistenciasJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualProductosServiciosExistencias(this.productosserviciosexistencias,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysProductosServiciosExistencias(this.productosserviciosexistencias);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.productosserviciosexistenciasAnterior!=null) {
						this.productosserviciosexistencias=this.productosserviciosexistenciasAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.productosserviciosexistenciasSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias(),productosserviciosexistenciasLogic.getProductosServiciosExistenciass());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistencias(),this.productosserviciosexistenciass);
				}
				//ARCHITECTURE
				
				//this.jTableDatosProductosServiciosExistencias.repaint();
				
				//((AbstractTableModel) this.jTableDatosProductosServiciosExistencias.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosProductosServiciosExistencias();
			}
		}
	}
	
	public void actualizarVisualTableDatosProductosServiciosExistencias() throws Exception {
		
		ProductosServiciosExistenciasModel productosserviciosexistenciasModel=(ProductosServiciosExistenciasModel)this.jTableDatosProductosServiciosExistencias.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			productosserviciosexistenciasModel.productosserviciosexistenciass=this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			productosserviciosexistenciasModel.productosserviciosexistenciass=this.productosserviciosexistenciass;
		}
		
		
		((ProductosServiciosExistenciasModel) this.jTableDatosProductosServiciosExistencias.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaProductosServiciosExistencias() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getproductosserviciosexistenciasAnterior(),this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getproductosserviciosexistenciasAnterior(),this.productosserviciosexistenciass);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosProductosServiciosExistencias();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.productosserviciosexistencias,new Object(),generalEntityParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ProductosServiciosExistenciasConstantesFunciones.getClassesRelationshipsOfProductosServiciosExistencias(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ProductosServiciosExistenciasConstantesFunciones.getClassesRelationshipsFromStringsOfProductosServiciosExistencias(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormProductosServiciosExistencias(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.productosserviciosexistencias,new Object(),generalEntityParameterGeneral,this.productosserviciosexistenciasReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioProductosServiciosExistencias(ProductosServiciosExistenciasBean productosserviciosexistenciasBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanProductosServiciosExistencias(ArrayList<Classe> classes,ProductosServiciosExistenciasReturnGeneral productosserviciosexistenciasReturnGeneral,ProductosServiciosExistenciasBean productosserviciosexistenciasBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.productosserviciosexistencias)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias = new ProductosServiciosExistenciasDetalleFormJInternalFrame(jDesktopPane,this.productosserviciosexistenciasSessionBean.getConGuardarRelaciones(),this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.setVisible(false);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.setSelected(false);						
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.productosserviciosexistenciasLogic=this.productosserviciosexistenciasLogic;
		
		this.cargarCombosFrameForeignKeyProductosServiciosExistencias("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleProductosServiciosExistencias();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleProductosServiciosExistencias();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyProductosServiciosExistencias("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyProductosServiciosExistencias();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarProductosServiciosExistencias"));
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"ModificarProductosServiciosExistencias"));

		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarToolBarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"ModificarToolBarProductosServiciosExistencias"));
					
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemModificarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"MenuItemModificarProductosServiciosExistencias"));		
		
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"ActualizarProductosServiciosExistencias"));
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarToolBarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"ActualizarToolBarProductosServiciosExistencias"));
						
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemActualizarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemActualizarProductosServiciosExistencias"));		
		
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"EliminarProductosServiciosExistencias"));
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"EliminarToolBarProductosServiciosExistencias"));
								
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemEliminarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemEliminarProductosServiciosExistencias"));		
		
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"CancelarProductosServiciosExistencias"));
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"CancelarToolBarProductosServiciosExistencias"));
					
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemCancelarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemCancelarProductosServiciosExistencias"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemDetalleCerrarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarProductosServiciosExistencias"));		
		
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarProductosServiciosExistencias"));
		
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarProductosServiciosExistencias"));
		
		
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioProductosServiciosExistencias"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonidProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"idProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_empresaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_empresaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_empresaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_sucursalProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_sucursalProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_bodegaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_bodegaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_productoProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_productoProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_productoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_productoProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_lineaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_lineaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_lineaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_lineaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_grupoProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_grupoProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_grupoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_grupoProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_categoriaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_categoriaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_categoriaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_categoriaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_marcaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_marcaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_marcaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_marcaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_tipo_producto_servicioProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_tipo_producto_servicioProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_sucursalProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_sucursalProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_lineaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_lineaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_grupoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_grupoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_categoriaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_categoriaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_marcaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_marcaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncodigoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"codigoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombreProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombreProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_tipo_producto_servicioProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_tipo_producto_servicioProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_bodegaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_bodegaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_unidadProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_unidadProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_disponibleProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_disponibleProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_reservadaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_reservadaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_pedidaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pedidaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_egresoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_egresoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_compraProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_compraProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_devueltoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_devueltoProductosServiciosExistenciasBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesProductosServiciosExistencias"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameProductosServiciosExistencias"));
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarProductosServiciosExistencias"));
		}
		
		this.jTableDatosProductosServiciosExistencias.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarProductosServiciosExistencias"));
		
		this.jTableDatosProductosServiciosExistencias.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarProductosServiciosExistencias"));
		
		this.jButtonNuevoProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"NuevoProductosServiciosExistencias"));
		
		this.jButtonDuplicarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"DuplicarProductosServiciosExistencias"));
		
		this.jButtonCopiarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"CopiarProductosServiciosExistencias"));
		
		this.jButtonVerFormProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"VerFormProductosServiciosExistencias"));
		
		
		this.jButtonNuevoToolBarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"NuevoToolBarProductosServiciosExistencias"));
			
		this.jButtonDuplicarToolBarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"DuplicarToolBarProductosServiciosExistencias"));
			
		this.jMenuItemNuevoProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemNuevoProductosServiciosExistencias"));
			
		this.jMenuItemDuplicarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarProductosServiciosExistencias"));		
		
		
		this.jButtonNuevoRelacionesProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"NuevoRelacionesProductosServiciosExistencias"));
		
		
		this.jButtonNuevoRelacionesToolBarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarProductosServiciosExistencias"));
			
		this.jMenuItemNuevoRelacionesProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesProductosServiciosExistencias"));		
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"ModificarProductosServiciosExistencias"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonModificarToolBarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"ModificarToolBarProductosServiciosExistencias"));
			
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemModificarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"MenuItemModificarProductosServiciosExistencias"));		
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"ActualizarProductosServiciosExistencias"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonActualizarToolBarProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"ActualizarToolBarProductosServiciosExistencias"));
				
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemActualizarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemActualizarProductosServiciosExistencias"));		
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"EliminarProductosServiciosExistencias"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonEliminarToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"EliminarToolBarProductosServiciosExistencias"));
						
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemEliminarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemEliminarProductosServiciosExistencias"));		
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"CancelarProductosServiciosExistencias"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonCancelarToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"CancelarToolBarProductosServiciosExistencias"));
			
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemCancelarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemCancelarProductosServiciosExistencias"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarProductosServiciosExistencias"));		
		
		
		this.jButtonCerrarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"CerrarProductosServiciosExistencias"));
		
		
		this.jButtonCerrarToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"CerrarToolBarProductosServiciosExistencias"));
			
		this.jMenuItemCerrarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemCerrarProductosServiciosExistencias"));
			
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jMenuItemDetalleCerrarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarProductosServiciosExistencias"));		
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GuardarCambiosProductosServiciosExistencias"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarProductosServiciosExistencias"));
		}
		
		this.jButtonCopiarToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"CopiarToolBarProductosServiciosExistencias"));
			
		this.jButtonVerFormToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"VerFormToolBarProductosServiciosExistencias"));
		
		this.jMenuItemGuardarCambiosProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosProductosServiciosExistencias"));
			
		this.jMenuItemCopiarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemCopiarProductosServiciosExistencias"));		
		
		this.jMenuItemVerFormProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemVerFormProductosServiciosExistencias"));		
		
		
		this.jButtonGuardarCambiosTablaProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaProductosServiciosExistencias"));
		
		
		this.jButtonGuardarCambiosTablaToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarProductosServiciosExistencias"));
			
		this.jMenuItemGuardarCambiosTablaProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaProductosServiciosExistencias"));		
		
		
		
		this.jButtonRecargarInformacionProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"RecargarInformacionProductosServiciosExistencias"));
					
		this.jButtonRecargarInformacionToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarProductosServiciosExistencias"));
		
		this.jMenuItemRecargarInformacionProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionProductosServiciosExistencias"));		
		
		
		
		this.jButtonAnterioresProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"AnterioresProductosServiciosExistencias"));
		
		
		this.jButtonAnterioresToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"AnterioresToolBarProductosServiciosExistencias"));
		
		this.jMenuItemAnterioresProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresProductosServiciosExistencias"));		
		
		
		this.jButtonSiguientesProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"SiguientesProductosServiciosExistencias"));
		
		
		this.jButtonSiguientesToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"SiguientesToolBarProductosServiciosExistencias"));
			
		this.jMenuItemSiguientesProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesProductosServiciosExistencias"));
			
		this.jMenuItemAbrirOrderByProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByProductosServiciosExistencias"));
			
		this.jMenuItemMostrarOcultarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarProductosServiciosExistencias"));
			
		this.jMenuItemDetalleAbrirOrderByProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByProductosServiciosExistencias"));
			
		this.jMenuItemDetalleMostarOcultarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarProductosServiciosExistencias"));		
		
		
		this.jButtonNuevoGuardarCambiosProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosProductosServiciosExistencias"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarProductosServiciosExistencias"));
			
		this.jMenuItemNuevoGuardarCambiosProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosProductosServiciosExistencias"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosProductosServiciosExistencias.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosProductosServiciosExistencias"));

		this.jCheckBoxSeleccionadosProductosServiciosExistencias.addItemListener(new CheckBoxItemListener(this,"SeleccionadosProductosServiciosExistencias"));
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioProductosServiciosExistencias"));
		}
		
		
		this.jComboBoxTiposRelacionesProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"TiposRelacionesProductosServiciosExistencias"));
			
		this.jComboBoxTiposAccionesProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"TiposAccionesProductosServiciosExistencias"));
					
		this.jComboBoxTiposSeleccionarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"TiposSeleccionarProductosServiciosExistencias"));
			
		this.jTextFieldValorCampoGeneralProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralProductosServiciosExistencias"));		
		
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonidProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"idProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_empresaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_empresaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_empresaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_sucursalProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_sucursalProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_bodegaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_bodegaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_productoProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_productoProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_productoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_productoProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_lineaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_lineaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_lineaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_lineaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_grupoProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_grupoProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_grupoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_grupoProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_categoriaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_categoriaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_categoriaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_categoriaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_marcaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_marcaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_marcaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_marcaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_tipo_producto_servicioProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_tipo_producto_servicioProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_sucursalProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_sucursalProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_lineaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_lineaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_grupoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_grupoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_categoriaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_categoriaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_marcaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_marcaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncodigoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"codigoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombreProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombreProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_tipo_producto_servicioProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_tipo_producto_servicioProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_bodegaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_bodegaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_unidadProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_unidadProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_disponibleProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_disponibleProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_reservadaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_reservadaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_pedidaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pedidaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_egresoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_egresoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_compraProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_compraProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_devueltoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_devueltoProductosServiciosExistenciasBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"BusquedaProductosServiciosExistenciasProductosServiciosExistencias"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoProductosServiciosExistencias!=null) {
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoProductosServiciosExistencias"));
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoProductosServiciosExistencias"));
				this.jInternalFrameReporteDinamicoProductosServiciosExistencias.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoProductosServiciosExistencias"));
			}
			
			//this.jButtonCerrarReporteDinamicoProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoProductosServiciosExistencias"));				
			//this.jButtonGenerarReporteDinamicoProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoProductosServiciosExistencias"));
			//this.jButtonGenerarExcelReporteDinamicoProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoProductosServiciosExistencias"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionProductosServiciosExistencias!=null) {
				this.jInternalFrameImportacionProductosServiciosExistencias.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionProductosServiciosExistencias"));
				this.jInternalFrameImportacionProductosServiciosExistencias.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionProductosServiciosExistencias"));
				this.jInternalFrameImportacionProductosServiciosExistencias.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionProductosServiciosExistencias"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"AbrirOrderByProductosServiciosExistencias"));
			
			this.jButtonAbrirOrderByToolBarProductosServiciosExistencias.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarProductosServiciosExistencias"));			
			
			if(this.jInternalFrameOrderByProductosServiciosExistencias!=null) {
				this.jInternalFrameOrderByProductosServiciosExistencias.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByProductosServiciosExistencias"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductosServiciosExistencias.jTabbedPaneRelacionesProductosServiciosExistencias.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesProductosServiciosExistencias"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameProductosServiciosExistencias();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormProductosServiciosExistencias = (JInternalFrameBase)event.getSource();
	            	
	            ProductosServiciosExistenciasBeanSwingJInternalFrame jInternalFrameParent=(ProductosServiciosExistenciasBeanSwingJInternalFrame)jInternalFrameDetalleFormProductosServiciosExistencias.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarProductosServiciosExistenciasActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosProductosServiciosExistencias.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosProductosServiciosExistenciasListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosProductosServiciosExistencias.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosProductosServiciosExistencias.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoProductosServiciosExistencias";
		inputMap = this.jButtonNuevoProductosServiciosExistencias.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoProductosServiciosExistencias.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesProductosServiciosExistencias";
		inputMap = this.jButtonNuevoRelacionesProductosServiciosExistencias.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesProductosServiciosExistencias.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoProductosServiciosExistenciasActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarProductosServiciosExistencias";
		inputMap = this.jButtonModificarProductosServiciosExistencias.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarProductosServiciosExistencias.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarProductosServiciosExistenciasActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarProductosServiciosExistencias";
		inputMap = this.jButtonActualizarProductosServiciosExistencias.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarProductosServiciosExistencias.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarProductosServiciosExistenciasActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarProductosServiciosExistencias";
		inputMap = this.jButtonEliminarProductosServiciosExistencias.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarProductosServiciosExistencias.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarProductosServiciosExistenciasActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarProductosServiciosExistencias";
		inputMap = this.jButtonCancelarProductosServiciosExistencias.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarProductosServiciosExistencias.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarProductosServiciosExistencias";
		inputMap = this.jButtonCerrarProductosServiciosExistencias.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarProductosServiciosExistencias.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarProductosServiciosExistenciasActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosProductosServiciosExistencias";
		inputMap = this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosProductosServiciosExistencias.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonGuardarCambiosProductosServiciosExistencias.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosProductosServiciosExistencias.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosProductosServiciosExistenciasItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesProductosServiciosExistencias.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesProductosServiciosExistenciasActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarProductosServiciosExistencias.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarProductosServiciosExistenciasActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralProductosServiciosExistencias.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralProductosServiciosExistenciasActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonidProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"idProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_empresaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_empresaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_empresaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_sucursalProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_sucursalProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_bodegaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_bodegaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_productoProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_productoProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_productoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_productoProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_lineaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_lineaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_lineaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_lineaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_grupoProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_grupoProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_grupoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_grupoProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_categoriaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_categoriaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_categoriaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_categoriaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_marcaProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_linea_marcaProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_linea_marcaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_marcaProductosServiciosExistenciasBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_tipo_producto_servicioProductosServiciosExistenciasUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioProductosServiciosExistenciasUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonid_tipo_producto_servicioProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_sucursalProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_sucursalProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_lineaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_lineaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_grupoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_grupoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_categoriaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_categoriaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_linea_marcaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_linea_marcaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncodigoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"codigoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombreProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombreProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_tipo_producto_servicioProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_tipo_producto_servicioProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_bodegaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_bodegaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtonnombre_unidadProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"nombre_unidadProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_disponibleProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_disponibleProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_reservadaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_reservadaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtoncantidad_pedidaProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pedidaProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_egresoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_egresoProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_compraProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_compraProductosServiciosExistenciasBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jButtontotal_devueltoProductosServiciosExistenciasBusqueda.addActionListener(new ButtonActionListener(this,"total_devueltoProductosServiciosExistenciasBusqueda"));
		
		
		this.jButtonBusquedaProductosServiciosExistenciasProductosServiciosExistencias.addActionListener(new ButtonActionListener(this,"BusquedaProductosServiciosExistenciasProductosServiciosExistencias"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionProductosServiciosExistencias.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionProductosServiciosExistenciasActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarProductosServiciosExistenciasActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarProductosServiciosExistencias.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosProductosServiciosExistencias(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
					productosserviciosexistenciasAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciass) {
					productosserviciosexistenciasAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosProductosServiciosExistenciasItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
						productosserviciosexistenciasAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciass) {
						productosserviciosexistenciasAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciass) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosProductosServiciosExistencias.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosProductosServiciosExistencias.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosProductosServiciosExistenciasItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosProductosServiciosExistencias.getSelectedRows();
			
			ProductosServiciosExistencias productosserviciosexistenciasLocal=new ProductosServiciosExistencias();
			
			//this.seleccionarTodosProductosServiciosExistencias(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productosserviciosexistenciasLocal =(ProductosServiciosExistencias) this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass().toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					productosserviciosexistenciasLocal =(ProductosServiciosExistencias) this.productosserviciosexistenciass.toArray()[this.jTableDatosProductosServiciosExistencias.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				productosserviciosexistenciasLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
						productosserviciosexistenciasAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciass) {
						productosserviciosexistenciasAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosProductosServiciosExistencias.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosProductosServiciosExistencias.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosProductosServiciosExistencias,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualProductosServiciosExistenciasItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarProductosServiciosExistenciasParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralProductosServiciosExistenciasActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralProductosServiciosExistencias.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
				
						if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_sucursal(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_linea(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_linea_grupo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_linea_categoria(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_linea_marca(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							productosserviciosexistenciasAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_tipo_producto_servicio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_bodega(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_unidad(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE)) {
							existe=true;
							productosserviciosexistenciasAux.setcantidad_disponible(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA)) {
							existe=true;
							productosserviciosexistenciasAux.setcantidad_reservada(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA)) {
							existe=true;
							productosserviciosexistenciasAux.setcantidad_pedida(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO)) {
							existe=true;
							productosserviciosexistenciasAux.settotal_egreso(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA)) {
							existe=true;
							productosserviciosexistenciasAux.settotal_compra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO)) {
							existe=true;
							productosserviciosexistenciasAux.settotal_devuelto(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciass) {
					
						if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_sucursal(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_linea(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_linea_grupo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_linea_categoria(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_linea_marca(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							productosserviciosexistenciasAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_tipo_producto_servicio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_bodega(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD)) {
							existe=true;
							productosserviciosexistenciasAux.setnombre_unidad(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE)) {
							existe=true;
							productosserviciosexistenciasAux.setcantidad_disponible(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA)) {
							existe=true;
							productosserviciosexistenciasAux.setcantidad_reservada(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA)) {
							existe=true;
							productosserviciosexistenciasAux.setcantidad_pedida(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO)) {
							existe=true;
							productosserviciosexistenciasAux.settotal_egreso(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA)) {
							existe=true;
							productosserviciosexistenciasAux.settotal_compra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO)) {
							existe=true;
							productosserviciosexistenciasAux.settotal_devuelto(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesProductosServiciosExistenciasActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioProductosServiciosExistencias=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesProductosServiciosExistencias.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteProductosServiciosExistencias) {				
					conSplash=true;//false;										
					
					//this.startProcessProductosServiciosExistencias(conSplash);
				
					this.generarReporteProductosServiciosExistenciassSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoProductosServiciosExistenciassSeleccionados();
				//this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoProductosServiciosExistenciassSeleccionados(false);
				//this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoProductosServiciosExistenciassSeleccionados(true);
				//this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessProductosServiciosExistencias();
				
				this.exportarProductosServiciosExistenciassSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionProductosServiciosExistenciass();
				//this.importarProductosServiciosExistenciass();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessProductosServiciosExistencias();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelProductosServiciosExistenciassSeleccionados();
				//this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Productos Servicios Existencias", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessProductosServiciosExistencias();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoProductosServiciosExistencias)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyProductosServiciosExistencias(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.setSelectedIndex(0);					
				}	
			} 			
			else if(ProductosServiciosExistenciasBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteProductosServiciosExistencias) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessProductosServiciosExistencias(conSplash);
					
						//this.actualizarParametrosGeneralProductosServiciosExistencias();
						
						this.generarReporteProcesoAccionProductosServiciosExistenciassSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Productos Servicios ExistenciasES SELECCIONADOS?", "MANTENIMIENTO DE Productos Servicios Existencias", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessProductosServiciosExistencias();
				
						this.actualizarParametrosGeneralProductosServiciosExistencias();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.productosserviciosexistenciasReturnGeneral=productosserviciosexistenciasLogic.procesarAccionProductosServiciosExistenciassWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass(),this.productosserviciosexistenciasParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarProductosServiciosExistenciasReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralProductosServiciosExistencias();
					
					ProductosServiciosExistenciasBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarProductosServiciosExistenciasReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesProductosServiciosExistencias.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxTiposAccionesFormularioProductosServiciosExistencias.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessProductosServiciosExistencias(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesProductosServiciosExistenciasActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessProductosServiciosExistencias();
			
			if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		
			ProductosServiciosExistencias productosserviciosexistencias=new ProductosServiciosExistencias();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingProductosServiciosExistencias(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesProductosServiciosExistencias.getSelectedItem();
			
			
			
			
			productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
			//this.sTipoAccion;
			
			if(productosserviciosexistenciassSeleccionados.size()==1) {
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciassSeleccionados) {
					productosserviciosexistencias=productosserviciosexistenciasAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessProductosServiciosExistencias();
			
      		//this.finishProcessProductosServiciosExistencias(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarProductosServiciosExistenciasReturnGeneral() throws Exception {
		if(this.productosserviciosexistenciasReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.productosserviciosexistenciasReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.productosserviciosexistenciasReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.productosserviciosexistenciasReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.productosserviciosexistenciasReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.productosserviciosexistenciasReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingProductosServiciosExistencias(false);
		}
		
		if(this.productosserviciosexistenciasReturnGeneral.getConRetornoLista() || this.productosserviciosexistenciasReturnGeneral.getConRetornoObjeto()) {
			if(this.productosserviciosexistenciasReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.productosserviciosexistenciasLogic.setProductosServiciosExistenciass(this.productosserviciosexistenciasReturnGeneral.getProductosServiciosExistenciass());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			
			this.inicializarActualizarBindingProductosServiciosExistencias(false);
		}
	}
	
	public void actualizarParametrosGeneralProductosServiciosExistencias() throws Exception {
		
		
	}
	
	public ArrayList<ProductosServiciosExistencias> getProductosServiciosExistenciassSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioProductosServiciosExistencias) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciasLogic.getProductosServiciosExistenciass()) {
					if(productosserviciosexistenciasAux.getIsSelected()) {
						productosserviciosexistenciassSeleccionados.add(productosserviciosexistenciasAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ProductosServiciosExistencias productosserviciosexistenciasAux:this.productosserviciosexistenciass) {
					if(productosserviciosexistenciasAux.getIsSelected()) {
						productosserviciosexistenciassSeleccionados.add(productosserviciosexistenciasAux);				
					}
				}
			}
			
			if(productosserviciosexistenciassSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						productosserviciosexistenciassSeleccionados.addAll(this.productosserviciosexistenciasLogic.getProductosServiciosExistenciass());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						productosserviciosexistenciassSeleccionados.addAll(this.productosserviciosexistenciass);				
					}
				}
			}
		} else {
			productosserviciosexistenciassSeleccionados.add(this.productosserviciosexistencias);
		}
		
		return productosserviciosexistenciassSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteProductosServiciosExistenciassSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalProductosServiciosExistenciassSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoProductosServiciosExistenciassSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoProductosServiciosExistenciassSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoProductosServiciosExistenciassSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Productos Servicios Existencias",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesProductosServiciosExistenciassSeleccionados() throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteProductosServiciosExistenciass("Todos",productosserviciosexistenciassSeleccionados);
		
	}	
	
	public void generarReporteNormalProductosServiciosExistenciassSeleccionados() throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteProductosServiciosExistenciass("Todos",productosserviciosexistenciassSeleccionados);
	}		
	
	public void generarReporteProcesoAccionProductosServiciosExistenciassSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteProductosServiciosExistenciass("Todos",productosserviciosexistenciassSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoProductosServiciosExistenciassSeleccionados() throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		
		
		
		this.abrirInicializarFrameReporteDinamicoProductosServiciosExistencias();
		
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoProductosServiciosExistencias();
		
		
		//this.generarReporteProductosServiciosExistenciass("Todos",productosserviciosexistenciassSeleccionados ,productosserviciosexistenciasImplementable,productosserviciosexistenciasImplementableHome);
	}
	
	public void mostrarImportacionProductosServiciosExistenciass() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionProductosServiciosExistencias();
		
		this.abrirFrameImportacionProductosServiciosExistencias();		
		
			
		//this.generarReporteProductosServiciosExistenciass("Todos",productosserviciosexistenciassSeleccionados ,productosserviciosexistenciasImplementable,productosserviciosexistenciasImplementableHome);
	}
	
	public void importarProductosServiciosExistenciass() throws Exception {		
	
	}
	
	public void exportarProductosServiciosExistenciassSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelProductosServiciosExistenciassSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoProductosServiciosExistenciassSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlProductosServiciosExistenciassSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Productos Servicios Existencias",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoProductosServiciosExistenciassSeleccionados() throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productosserviciosexistencias."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarProductosServiciosExistencias(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciassSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarProductosServiciosExistencias(productosserviciosexistenciasAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//productosserviciosexistenciasAux.setsDetalleGeneralEntityReporte(productosserviciosexistenciasAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarProductosServiciosExistencias(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAGRUPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEACATEGORIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAMARCA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=productosserviciosexistencias.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getlinea_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getlineagrupo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getlineacategoria_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getlineamarca_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.gettipoproductoservicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre_sucursal();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre_linea();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre_linea_grupo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre_linea_categoria();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre_linea_marca();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre_tipo_producto_servicio();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre_bodega();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getnombre_unidad();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getcantidad_disponible().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getcantidad_reservada().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.getcantidad_pedida().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.gettotal_egreso().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.gettotal_compra().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productosserviciosexistencias.gettotal_devuelto().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelProductosServiciosExistenciassSeleccionados() throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productosserviciosexistencias.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("ProductosServiciosExistenciass");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelProductosServiciosExistencias(row);				
				iRow++;
			}				
			
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciassSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelProductosServiciosExistencias(productosserviciosexistenciasAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlProductosServiciosExistenciassSeleccionados() throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();		
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productosserviciosexistencias.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("productosserviciosexistenciass");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("productosserviciosexistencias");
			//elementRoot.appendChild(element);
		
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciassSeleccionados) {
				element = document.createElement("productosserviciosexistencias");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlProductosServiciosExistencias(productosserviciosexistenciasAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Productos Servicios Existencias",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelProductosServiciosExistencias(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAGRUPO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEACATEGORIA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAMARCA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADRESERVADA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADPEDIDA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALEGRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALCOMPRA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductosServiciosExistenciasConstantesFunciones.LABEL_TOTALDEVUELTO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getlinea_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getlineagrupo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getlineacategoria_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getlineamarca_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.gettipoproductoservicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre_sucursal());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre_linea());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre_linea_grupo());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre_linea_categoria());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre_linea_marca());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre_tipo_producto_servicio());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre_bodega());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getnombre_unidad());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getcantidad_disponible());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getcantidad_reservada());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.getcantidad_pedida());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.gettotal_egreso());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.gettotal_compra());
		cell = row.createCell(iColumn++);cell.setCellValue(productosserviciosexistencias.gettotal_devuelto());				
	}
	
	public void setFilaDatosExportarXmlProductosServiciosExistencias(ProductosServiciosExistencias productosserviciosexistencias,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ProductosServiciosExistenciasConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(productosserviciosexistencias.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ProductosServiciosExistenciasConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(productosserviciosexistencias.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementbodega_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementlinea_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDLINEA);
		elementlinea_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.getlinea_descripcion()));
		element.appendChild(elementlinea_descripcion);

		Element elementlineagrupo_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDLINEAGRUPO);
		elementlineagrupo_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.getlineagrupo_descripcion()));
		element.appendChild(elementlineagrupo_descripcion);

		Element elementlineacategoria_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDLINEACATEGORIA);
		elementlineacategoria_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.getlineacategoria_descripcion()));
		element.appendChild(elementlineacategoria_descripcion);

		Element elementlineamarca_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDLINEAMARCA);
		elementlineamarca_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.getlineamarca_descripcion()));
		element.appendChild(elementlineamarca_descripcion);

		Element elementtipoproductoservicio_descripcion = document.createElement(ProductosServiciosExistenciasConstantesFunciones.IDTIPOPRODUCTOSERVICIO);
		elementtipoproductoservicio_descripcion.appendChild(document.createTextNode(productosserviciosexistencias.gettipoproductoservicio_descripcion()));
		element.appendChild(elementtipoproductoservicio_descripcion);

		Element elementnombre_sucursal = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBRESUCURSAL);
		elementnombre_sucursal.appendChild(document.createTextNode(productosserviciosexistencias.getnombre_sucursal().trim()));
		element.appendChild(elementnombre_sucursal);

		Element elementnombre_linea = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBRELINEA);
		elementnombre_linea.appendChild(document.createTextNode(productosserviciosexistencias.getnombre_linea().trim()));
		element.appendChild(elementnombre_linea);

		Element elementnombre_linea_grupo = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBRELINEAGRUPO);
		elementnombre_linea_grupo.appendChild(document.createTextNode(productosserviciosexistencias.getnombre_linea_grupo().trim()));
		element.appendChild(elementnombre_linea_grupo);

		Element elementnombre_linea_categoria = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBRELINEACATEGORIA);
		elementnombre_linea_categoria.appendChild(document.createTextNode(productosserviciosexistencias.getnombre_linea_categoria().trim()));
		element.appendChild(elementnombre_linea_categoria);

		Element elementnombre_linea_marca = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBRELINEAMARCA);
		elementnombre_linea_marca.appendChild(document.createTextNode(productosserviciosexistencias.getnombre_linea_marca().trim()));
		element.appendChild(elementnombre_linea_marca);

		Element elementcodigo = document.createElement(ProductosServiciosExistenciasConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(productosserviciosexistencias.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnombre = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(productosserviciosexistencias.getnombre().trim()));
		element.appendChild(elementnombre);

		Element elementnombre_tipo_producto_servicio = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBRETIPOPRODUCTOSERVICIO);
		elementnombre_tipo_producto_servicio.appendChild(document.createTextNode(productosserviciosexistencias.getnombre_tipo_producto_servicio().trim()));
		element.appendChild(elementnombre_tipo_producto_servicio);

		Element elementnombre_bodega = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBREBODEGA);
		elementnombre_bodega.appendChild(document.createTextNode(productosserviciosexistencias.getnombre_bodega().trim()));
		element.appendChild(elementnombre_bodega);

		Element elementnombre_unidad = document.createElement(ProductosServiciosExistenciasConstantesFunciones.NOMBREUNIDAD);
		elementnombre_unidad.appendChild(document.createTextNode(productosserviciosexistencias.getnombre_unidad().trim()));
		element.appendChild(elementnombre_unidad);

		Element elementcantidad_disponible = document.createElement(ProductosServiciosExistenciasConstantesFunciones.CANTIDADDISPONIBLE);
		elementcantidad_disponible.appendChild(document.createTextNode(productosserviciosexistencias.getcantidad_disponible().toString().trim()));
		element.appendChild(elementcantidad_disponible);

		Element elementcantidad_reservada = document.createElement(ProductosServiciosExistenciasConstantesFunciones.CANTIDADRESERVADA);
		elementcantidad_reservada.appendChild(document.createTextNode(productosserviciosexistencias.getcantidad_reservada().toString().trim()));
		element.appendChild(elementcantidad_reservada);

		Element elementcantidad_pedida = document.createElement(ProductosServiciosExistenciasConstantesFunciones.CANTIDADPEDIDA);
		elementcantidad_pedida.appendChild(document.createTextNode(productosserviciosexistencias.getcantidad_pedida().toString().trim()));
		element.appendChild(elementcantidad_pedida);

		Element elementtotal_egreso = document.createElement(ProductosServiciosExistenciasConstantesFunciones.TOTALEGRESO);
		elementtotal_egreso.appendChild(document.createTextNode(productosserviciosexistencias.gettotal_egreso().toString().trim()));
		element.appendChild(elementtotal_egreso);

		Element elementtotal_compra = document.createElement(ProductosServiciosExistenciasConstantesFunciones.TOTALCOMPRA);
		elementtotal_compra.appendChild(document.createTextNode(productosserviciosexistencias.gettotal_compra().toString().trim()));
		element.appendChild(elementtotal_compra);

		Element elementtotal_devuelto = document.createElement(ProductosServiciosExistenciasConstantesFunciones.TOTALDEVUELTO);
		elementtotal_devuelto.appendChild(document.createTextNode(productosserviciosexistencias.gettotal_devuelto().toString().trim()));
		element.appendChild(elementtotal_devuelto);
	}
	
	public void generarReporteGroupGenericoProductosServiciosExistenciassSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados=new ArrayList<ProductosServiciosExistencias>();
		
		productosserviciosexistenciassSeleccionados=this.getProductosServiciosExistenciassSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoProductosServiciosExistencias(productosserviciosexistenciassSeleccionados);
		
		this.generarReporteProductosServiciosExistenciass("Todos",productosserviciosexistenciassSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoProductosServiciosExistencias(ArrayList<ProductosServiciosExistencias> productosserviciosexistenciassSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(ProductosServiciosExistencias productosserviciosexistenciasAux:productosserviciosexistenciassSeleccionados) {
				productosserviciosexistenciasAux.setsDetalleGeneralEntityReporte(productosserviciosexistenciasAux.toString());
			
				if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getlinea_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAGRUPO)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getlineagrupo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEACATEGORIA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getlineacategoria_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDLINEAMARCA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getlineamarca_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.gettipoproductoservicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRESUCURSAL)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre_sucursal());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre_linea());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAGRUPO)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre_linea_grupo());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEACATEGORIA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre_linea_categoria());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRELINEAMARCA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre_linea_marca());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBRETIPOPRODUCTOSERVICIO)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre_tipo_producto_servicio());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREBODEGA)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre_bodega());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_NOMBREUNIDAD)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getnombre_unidad());
				}
				 else if(sTipoSeleccionar.equals(ProductosServiciosExistenciasConstantesFunciones.LABEL_CANTIDADDISPONIBLE)) {
					existe=true;
					productosserviciosexistenciasAux.setsDescripcionGeneralEntityReporte1(productosserviciosexistenciasAux.getcantidad_disponible().toString());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductosServiciosExistenciasConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesProductosServiciosExistencias(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoProductosServiciosExistencias=true;
				this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=true;
				this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=true;
			}
			
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=true;
				} else {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=true;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=true;
				} else {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=true;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=true;
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=true;
				} else {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=true;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				} else {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=true;
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=true;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=true;
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=true;
				} else {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				} else {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;
			this.isVisibilidadCeldaModificarProductosServiciosExistencias=true;
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaCancelarProductosServiciosExistencias=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				} else {
					this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ProductosServiciosExistenciasJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=true;
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=true;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=true;
		} else {
			this.actualizarEstadoPanelsProductosServiciosExistencias(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarProductosServiciosExistencias=false;
			//this.isVisibilidadCeldaVerFormProductosServiciosExistencias=false;
			this.isVisibilidadCeldaDuplicarProductosServiciosExistencias=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
		} else {
			this.isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
			this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
			if(!productosserviciosexistenciasSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;												
			}
			
			this.jButtonCerrarProductosServiciosExistencias.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
		}
		
		if(!this.permiteMantenimiento(this.productosserviciosexistencias)) {
			this.isVisibilidadCeldaActualizarProductosServiciosExistencias=false;
			this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
		}
		
		
		//SE DESHABILITA SIEMPRE
		this.isVisibilidadCeldaNuevoProductosServiciosExistencias=false;
		this.isVisibilidadCeldaNuevoRelacionesProductosServiciosExistencias=false;
		this.isVisibilidadCeldaGuardarCambiosProductosServiciosExistencias=false;
		//this.isVisibilidadCeldaModificarProductosServiciosExistencias=true;
		this.isVisibilidadCeldaActualizarProductosServiciosExistencias=false;
		this.isVisibilidadCeldaEliminarProductosServiciosExistencias=false;
		//this.isVisibilidadCeldaCancelarProductosServiciosExistencias=true;			
		this.isVisibilidadCeldaGuardarProductosServiciosExistencias=false;
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesProductosServiciosExistencias() {
	}
	
	public void actualizarEstadoPanelsProductosServiciosExistencias(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosEdicionProductosServiciosExistencias.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosProductosServiciosExistencias.setVisible(true);
			}
			
			if(this.jPanelPaginacionProductosServiciosExistencias!=null) {
				this.jPanelPaginacionProductosServiciosExistencias.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosEdicionProductosServiciosExistencias.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosProductosServiciosExistencias.setVisible(false);
			}
			
			if(this.jPanelPaginacionProductosServiciosExistencias!=null) {
				this.jPanelPaginacionProductosServiciosExistencias.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosEdicionProductosServiciosExistencias.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosProductosServiciosExistencias.setVisible(false);
			}
			
			if(this.jPanelPaginacionProductosServiciosExistencias!=null) {
				this.jPanelPaginacionProductosServiciosExistencias.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosEdicionProductosServiciosExistencias.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosProductosServiciosExistencias.setVisible(false);
			}
			
			if(this.jPanelPaginacionProductosServiciosExistencias!=null) {
				this.jPanelPaginacionProductosServiciosExistencias.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosEdicionProductosServiciosExistencias.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosProductosServiciosExistencias.setVisible(true);
			}
			
			if(this.jPanelPaginacionProductosServiciosExistencias!=null) {
				this.jPanelPaginacionProductosServiciosExistencias.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosEdicionProductosServiciosExistencias.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosProductosServiciosExistencias.setVisible(true);
			}
			
			if(this.jPanelPaginacionProductosServiciosExistencias!=null) {
				this.jPanelPaginacionProductosServiciosExistencias.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosEdicionProductosServiciosExistencias.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosProductosServiciosExistencias!=null) {
				this.jScrollPanelDatosProductosServiciosExistencias.setVisible(true);
			}
			
			if(this.jPanelPaginacionProductosServiciosExistencias!=null) {
				this.jPanelPaginacionProductosServiciosExistencias.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
					this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.productosserviciosexistenciasSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductosServiciosExistencias!=null) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesProductosServiciosExistencias!=null) {
				this.jPanelParametrosReportesProductosServiciosExistencias.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaBodega;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaProducto;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}

	public void setVisibilidadBusquedasParaLinea(Boolean isParaLinea){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLineaNegation=!isParaLinea;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaLinea;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}

	public void setVisibilidadBusquedasParaLineaGrupo(Boolean isParaLineaGrupo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLineaGrupoNegation=!isParaLineaGrupo;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaLineaGrupo;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}

	public void setVisibilidadBusquedasParaLineaCategoria(Boolean isParaLineaCategoria){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLineaCategoriaNegation=!isParaLineaCategoria;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaLineaCategoria;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}

	public void setVisibilidadBusquedasParaLineaMarca(Boolean isParaLineaMarca){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLineaMarcaNegation=!isParaLineaMarca;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaLineaMarca;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoProductoServicio(Boolean isParaTipoProductoServicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoProductoServicioNegation=!isParaTipoProductoServicio;

			this.isVisibilidadBusquedaProductosServiciosExistencias=isParaTipoProductoServicio;
			if(!this.isVisibilidadBusquedaProductosServiciosExistencias) {this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);}
		}
		
	}
	
	
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaProductosServiciosExistencias(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioProductosServiciosExistencias() {
		this.updateBorderResaltarBusquedasFormularioProductosServiciosExistencias();
		this.updateVisibilidadBusquedasFormularioProductosServiciosExistencias();
		this.updateHabilitarBusquedasFormularioProductosServiciosExistencias();
	}
	
	public void updateBorderResaltarBusquedasFormularioProductosServiciosExistencias() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasProductosServiciosExistencias.getComponents().length>0) {
	

		if(this.productosserviciosexistenciasConstantesFunciones.resaltarBusquedaProductosServiciosExistenciasProductosServiciosExistencias!=null) {
			index= this.jTabbedPaneBusquedasProductosServiciosExistencias.indexOfComponent(this.jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductosServiciosExistencias.getComponent(index);
				jPanel.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarBusquedaProductosServiciosExistenciasProductosServiciosExistencias);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioProductosServiciosExistencias() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasProductosServiciosExistencias.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasProductosServiciosExistencias.indexOfComponent(this.jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductosServiciosExistencias.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarBusquedaProductosServiciosExistenciasProductosServiciosExistencias);
			if(!this.productosserviciosexistenciasConstantesFunciones.mostrarBusquedaProductosServiciosExistenciasProductosServiciosExistencias && index>-1) {
				this.jTabbedPaneBusquedasProductosServiciosExistencias.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioProductosServiciosExistencias() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasProductosServiciosExistencias.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasProductosServiciosExistencias.indexOfComponent(this.jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductosServiciosExistencias.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarBusquedaProductosServiciosExistenciasProductosServiciosExistencias);
				this.jTabbedPaneBusquedasProductosServiciosExistencias.setEnabledAt(index,this.productosserviciosexistenciasConstantesFunciones.activarBusquedaProductosServiciosExistenciasProductosServiciosExistencias);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaProductosServiciosExistencias(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaProductosServiciosExistencias")) {
			index= this.jTabbedPaneBusquedasProductosServiciosExistencias.indexOfComponent(this.jPanelBusquedaProductosServiciosExistenciasProductosServiciosExistencias);

			this.jTabbedPaneBusquedasProductosServiciosExistencias.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductosServiciosExistencias.getComponent(index);

			this.productosserviciosexistenciasConstantesFunciones.setResaltarBusquedaProductosServiciosExistenciasProductosServiciosExistencias(resaltar);

			jPanel.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarBusquedaProductosServiciosExistenciasProductosServiciosExistencias);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarProductosServiciosExistencias.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioProductosServiciosExistencias() throws Exception {

		if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioProductosServiciosExistencias();
		this.updateVisibilidadResaltarControlesFormularioProductosServiciosExistencias();
		this.updateHabilitarResaltarControlesFormularioProductosServiciosExistencias();
		
	}
	
	public void updateBorderResaltarControlesFormularioProductosServiciosExistencias() throws Exception {
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.productosserviciosexistenciasConstantesFunciones.resaltaridProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltaridProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_empresaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_empresaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_sucursalProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_sucursalProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_bodegaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_bodegaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_productoProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_productoProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_lineaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_lineaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_linea_grupoProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_linea_grupoProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_linea_categoriaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_linea_categoriaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_linea_marcaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_linea_marcaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarid_tipo_producto_servicioProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarid_tipo_producto_servicioProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_sucursalProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_sucursalProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_sucursalProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_lineaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_lineaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_lineaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_grupoProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_grupoProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_grupoProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_categoriaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_categoriaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_categoriaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_marcaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_marcaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_linea_marcaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarcodigoProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcodigoProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarcodigoProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombreProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombreProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombreProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_tipo_producto_servicioProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_tipo_producto_servicioProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_tipo_producto_servicioProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_bodegaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_bodegaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_bodegaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_unidadProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldnombre_unidadProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarnombre_unidadProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_disponibleProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_disponibleProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_disponibleProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_reservadaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_reservadaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_reservadaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_pedidaProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_pedidaProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltarcantidad_pedidaProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_egresoProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_egresoProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_egresoProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_compraProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_compraProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_compraProductosServiciosExistencias);}
		if(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_devueltoProductosServiciosExistencias!=null && this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_devueltoProductosServiciosExistencias.setBorder(this.productosserviciosexistenciasConstantesFunciones.resaltartotal_devueltoProductosServiciosExistencias);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioProductosServiciosExistencias() throws Exception {		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
	
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostraridProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelidProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostraridProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_empresaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_empresaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_empresaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_sucursalProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_sucursalProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_sucursalProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_bodegaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_bodegaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_bodegaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_productoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_productoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_productoProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_lineaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_lineaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_lineaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_linea_grupoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_linea_grupoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_linea_grupoProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_linea_categoriaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_linea_categoriaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_linea_categoriaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_linea_marcaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_linea_marcaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_linea_marcaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_tipo_producto_servicioProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelid_tipo_producto_servicioProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarid_tipo_producto_servicioProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_sucursalProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_sucursalProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombre_sucursalProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_sucursalProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_lineaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_lineaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombre_lineaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_lineaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_grupoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_grupoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombre_linea_grupoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_grupoProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_categoriaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_categoriaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombre_linea_categoriaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_categoriaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_marcaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_marcaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombre_linea_marcaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_linea_marcaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcodigoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarcodigoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelcodigoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarcodigoProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombreProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombreProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombreProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombreProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_tipo_producto_servicioProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_tipo_producto_servicioProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombre_tipo_producto_servicioProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_tipo_producto_servicioProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_bodegaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_bodegaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombre_bodegaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_bodegaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldnombre_unidadProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_unidadProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelnombre_unidadProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarnombre_unidadProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_disponibleProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_disponibleProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelcantidad_disponibleProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_disponibleProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_reservadaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_reservadaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelcantidad_reservadaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_reservadaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_pedidaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_pedidaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPanelcantidad_pedidaProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrarcantidad_pedidaProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_egresoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_egresoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPaneltotal_egresoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_egresoProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_compraProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_compraProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPaneltotal_compraProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_compraProductosServiciosExistencias);
		//this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_devueltoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_devueltoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jPaneltotal_devueltoProductosServiciosExistencias.setVisible(this.productosserviciosexistenciasConstantesFunciones.mostrartotal_devueltoProductosServiciosExistencias);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioProductosServiciosExistencias() throws Exception {
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormProductosServiciosExistencias!=null) {
	
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jLabelidProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activaridProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_empresaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_empresaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_sucursalProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_sucursalProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_bodegaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_bodegaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_productoProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_productoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_lineaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_lineaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_grupoProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_linea_grupoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_categoriaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_linea_categoriaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_linea_marcaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_linea_marcaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jComboBoxid_tipo_producto_servicioProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarid_tipo_producto_servicioProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_sucursalProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombre_sucursalProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_lineaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombre_lineaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_grupoProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_grupoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_categoriaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_categoriaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_linea_marcaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombre_linea_marcaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcodigoProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarcodigoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombreProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombreProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_tipo_producto_servicioProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombre_tipo_producto_servicioProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextAreanombre_bodegaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombre_bodegaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldnombre_unidadProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarnombre_unidadProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_disponibleProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarcantidad_disponibleProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_reservadaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarcantidad_reservadaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldcantidad_pedidaProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activarcantidad_pedidaProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_egresoProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activartotal_egresoProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_compraProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activartotal_compraProductosServiciosExistencias);
		this.jInternalFrameDetalleFormProductosServiciosExistencias.jTextFieldtotal_devueltoProductosServiciosExistencias.setEnabled(this.productosserviciosexistenciasConstantesFunciones.activartotal_devueltoProductosServiciosExistencias);
		}
	}
	
		
}