/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.TransferenciaConstantesFunciones;
import com.bydan.erp.inventario.util.TransferenciaParameterReturnGeneral;
//import com.bydan.erp.inventario.util.TransferenciaParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.TransferenciaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class TransferenciaBeanSwingJInternalFrame extends TransferenciaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(TransferenciaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<Transferencia> transferenciaValidator = new ClassValidator<Transferencia>(Transferencia.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public Transferencia transferencia;	
	public Transferencia transferenciaAux;
	public Transferencia transferenciaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public Transferencia transferenciaTotales;
	public Long idTransferenciaActual;
	public Long iIdNuevoTransferencia=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboTipoCambio="";

	public List<TipoCambio> tipocambiosForeignKey;

	public List<TipoCambio> gettipocambiosForeignKey() {
		return tipocambiosForeignKey;
	}

	public void settipocambiosForeignKey(List<TipoCambio> tipocambiosForeignKey) {
		this.tipocambiosForeignKey = tipocambiosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCambio tipocambioForeignKey;

	public TipoCambio gettipocambioForeignKey() {
		return tipocambioForeignKey;
	}

	public void settipocambioForeignKey(TipoCambio tipocambioForeignKey) {
		this.tipocambioForeignKey = tipocambioForeignKey;
	}

	public String sFinalQueryComboEstadoInventario="";

	public List<EstadoInventario> estadoinventariosForeignKey;

	public List<EstadoInventario> getestadoinventariosForeignKey() {
		return estadoinventariosForeignKey;
	}

	public void setestadoinventariosForeignKey(List<EstadoInventario> estadoinventariosForeignKey) {
		this.estadoinventariosForeignKey = estadoinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoInventario estadoinventarioForeignKey;

	public EstadoInventario getestadoinventarioForeignKey() {
		return estadoinventarioForeignKey;
	}

	public void setestadoinventarioForeignKey(EstadoInventario estadoinventarioForeignKey) {
		this.estadoinventarioForeignKey = estadoinventarioForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboTransportista="";

	public List<Transportista> transportistasForeignKey;

	public List<Transportista> gettransportistasForeignKey() {
		return transportistasForeignKey;
	}

	public void settransportistasForeignKey(List<Transportista> transportistasForeignKey) {
		this.transportistasForeignKey = transportistasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transportista transportistaForeignKey;

	public Transportista gettransportistaForeignKey() {
		return transportistaForeignKey;
	}

	public void settransportistaForeignKey(Transportista transportistaForeignKey) {
		this.transportistaForeignKey = transportistaForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboTipoTransaccionModulo="";

	public List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey;

	public List<TipoTransaccionModulo> gettipotransaccionmodulosForeignKey() {
		return tipotransaccionmodulosForeignKey;
	}

	public void settipotransaccionmodulosForeignKey(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey) {
		this.tipotransaccionmodulosForeignKey = tipotransaccionmodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTransaccionModulo tipotransaccionmoduloForeignKey;

	public TipoTransaccionModulo gettipotransaccionmoduloForeignKey() {
		return tipotransaccionmoduloForeignKey;
	}

	public void settipotransaccionmoduloForeignKey(TipoTransaccionModulo tipotransaccionmoduloForeignKey) {
		this.tipotransaccionmoduloForeignKey = tipotransaccionmoduloForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idTipoCambioActual=0L;

	public Long getidTipoCambioActual() {
		return idTipoCambioActual;
	}

	public void setidTipoCambioActual(Long idTipoCambioActual) {
		this.idTipoCambioActual= idTipoCambioActual;
	}
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	
	

	public Boolean isTienePermisosDetalleTransferencia=false;

	public Boolean getIsTienePermisosDetalleTransferencia() {
		return isTienePermisosDetalleTransferencia;
	}

	public void setIsTienePermisosDetalleTransferencia(Boolean isTienePermisosDetalleTransferencia) {
		this.isTienePermisosDetalleTransferencia= isTienePermisosDetalleTransferencia;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoTransferencia;
	public Boolean isPermisoNuevoTransferencia;
	public Boolean isPermisoActualizarTransferencia;
	public Boolean isPermisoActualizarOriginalTransferencia;
	public Boolean isPermisoEliminarTransferencia;
	public Boolean isPermisoGuardarCambiosTransferencia;
	public Boolean isPermisoConsultaTransferencia;
	public Boolean isPermisoBusquedaTransferencia;
	public Boolean isPermisoReporteTransferencia;
	public Boolean isPermisoPaginacionMedioTransferencia;
	public Boolean isPermisoPaginacionAltoTransferencia;
	public Boolean isPermisoPaginacionTodoTransferencia;
	public Boolean isPermisoCopiarTransferencia;
	public Boolean isPermisoVerFormTransferencia;
	public Boolean isPermisoDuplicarTransferencia;
	public Boolean isPermisoOrdenTransferencia;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public TransferenciaParameterReturnGeneral transferenciaReturnGeneral;
	public TransferenciaParameterReturnGeneral transferenciaParameterGeneral;
	
	

	public DetalleTransferenciaLogic detalletransferenciaLogic=null;

	public DetalleTransferenciaLogic getDetalleTransferenciaLogic() {
		return detalletransferenciaLogic;
	}

	public void setDetalleTransferenciaLogic(DetalleTransferenciaLogic detalletransferenciaLogic) {
		this.detalletransferenciaLogic = detalletransferenciaLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoTransferencia=false;
	public Boolean esParaAccionDesdeFormularioTransferencia=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected TransferenciaSessionBeanAdditional transferenciaSessionBeanAdditional=null;
	
	public TransferenciaSessionBeanAdditional getTransferenciaSessionBeanAdditional() {
		return this.transferenciaSessionBeanAdditional;
	}
	
	public void setTransferenciaSessionBeanAdditional(TransferenciaSessionBeanAdditional transferenciaSessionBeanAdditional) {
		try {
			this.transferenciaSessionBeanAdditional=transferenciaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected TransferenciaBeanSwingJInternalFrameAdditional transferenciaBeanSwingJInternalFrameAdditional=null;
	//public class TransferenciaBeanSwingJInternalFrame
	
	public TransferenciaBeanSwingJInternalFrameAdditional getTransferenciaBeanSwingJInternalFrameAdditional() {
		return this.transferenciaBeanSwingJInternalFrameAdditional;
	}
	
	public void setTransferenciaBeanSwingJInternalFrameAdditional(TransferenciaBeanSwingJInternalFrameAdditional transferenciaBeanSwingJInternalFrameAdditional) {
		try {
			this.transferenciaBeanSwingJInternalFrameAdditional=transferenciaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public TransferenciaLogic transferenciaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public Transferencia transferenciaBean;
	public TransferenciaConstantesFunciones transferenciaConstantesFunciones;
	//public TransferenciaParameterReturnGeneral transferenciaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public ModuloLogic moduloLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public UsuarioLogic usuarioLogic;
	public MonedaLogic monedaLogic;
	public TipoCambioLogic tipocambioLogic;
	public EstadoInventarioLogic estadoinventarioLogic;
	public FormatoLogic formatoLogic;
	public TransportistaLogic transportistaLogic;
	public EmpleadoLogic empleadoLogic;
	public TipoTransaccionModuloLogic tipotransaccionmoduloLogic;
	public AsientoContableLogic asientocontableLogic;
	
	//PARAMETROS
	
	
	//public List<Transferencia> transferencias;	
	//public List<Transferencia> transferenciasEliminados;
	//public List<Transferencia> transferenciasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoTransferencia=false;
	public Boolean isVisibilidadCeldaDuplicarTransferencia=true;
	public Boolean isVisibilidadCeldaCopiarTransferencia=true;
	public Boolean isVisibilidadCeldaVerFormTransferencia=true;
	public Boolean isVisibilidadCeldaOrdenTransferencia=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesTransferencia=false;
	public Boolean isVisibilidadCeldaModificarTransferencia=false;
	public Boolean isVisibilidadCeldaActualizarTransferencia=false;
	public Boolean isVisibilidadCeldaEliminarTransferencia=false;
	public Boolean isVisibilidadCeldaCancelarTransferencia=false;
	public Boolean isVisibilidadCeldaGuardarTransferencia=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosTransferencia=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoInventario=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoCambio=false;
	public Boolean isVisibilidadFK_IdTipoTransaccionModulo=false;
	public Boolean isVisibilidadFK_IdTransportista=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	
	public Long getiIdNuevoTransferencia() {
		return this.iIdNuevoTransferencia;
	}

	public void setiIdNuevoTransferencia(Long iIdNuevoTransferencia) {
		this.iIdNuevoTransferencia = iIdNuevoTransferencia;
	}
	
	public Long getidTransferenciaActual() {
		return this.idTransferenciaActual;
	}

	public void setidTransferenciaActual(Long idTransferenciaActual) {
		this.idTransferenciaActual = idTransferenciaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public Transferencia gettransferencia() {
		return this.transferencia;
	}

	public void settransferencia(Transferencia transferencia) {
		this.transferencia = transferencia;
	}
	
	public Transferencia gettransferenciaAux() {
		return this.transferenciaAux;
	}

	public void settransferenciaAux(Transferencia transferenciaAux) {
		this.transferenciaAux = transferenciaAux;
	}				
	
	public Transferencia gettransferenciaAnterior() {
		return this.transferenciaAnterior;
	}

	public void settransferenciaAnterior(Transferencia transferenciaAnterior) {
		this.transferenciaAnterior = transferenciaAnterior;
	}	
	
	public Transferencia gettransferenciaTotales() {
		return this.transferenciaTotales;
	}

	public void settransferenciaTotales(Transferencia transferenciaTotales) {
		this.transferenciaTotales = transferenciaTotales;
	}	
	
	public Transferencia gettransferenciaBean() {
		return this.transferenciaBean;
	}

	public void settransferenciaBean(Transferencia transferenciaBean) {
		this.transferenciaBean = transferenciaBean;
	}	
	
	public TransferenciaParameterReturnGeneral gettransferenciaReturnGeneral() {
		return this.transferenciaReturnGeneral;
	}

	public void settransferenciaReturnGeneral(TransferenciaParameterReturnGeneral transferenciaReturnGeneral) {
		this.transferenciaReturnGeneral = transferenciaReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_asiento_contableFK_IdAsientoContable=null;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_inventarioFK_IdEstadoInventario=-1L;

	public Long getid_estado_inventarioFK_IdEstadoInventario() {
		return this.id_estado_inventarioFK_IdEstadoInventario;
	}

	public void setid_estado_inventarioFK_IdEstadoInventario(Long id_estado_inventarioFK_IdEstadoInventario) {
		this.id_estado_inventarioFK_IdEstadoInventario = id_estado_inventarioFK_IdEstadoInventario;
	}

	public Long id_formatoFK_IdFormato=-1L;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_cambioFK_IdTipoCambio=null;

	public Long getid_tipo_cambioFK_IdTipoCambio() {
		return this.id_tipo_cambioFK_IdTipoCambio;
	}

	public void setid_tipo_cambioFK_IdTipoCambio(Long id_tipo_cambioFK_IdTipoCambio) {
		this.id_tipo_cambioFK_IdTipoCambio = id_tipo_cambioFK_IdTipoCambio;
	}

	public Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=null;

	public Long getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo() {
		return this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public void setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo) {
		this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo = id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public Long id_transportistaFK_IdTransportista=null;

	public Long getid_transportistaFK_IdTransportista() {
		return this.id_transportistaFK_IdTransportista;
	}

	public void setid_transportistaFK_IdTransportista(Long id_transportistaFK_IdTransportista) {
		this.id_transportistaFK_IdTransportista = id_transportistaFK_IdTransportista;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public TransferenciaLogic getTransferenciaLogic()	{		
		return transferenciaLogic;
	}

	public void setTransferenciaLogic(TransferenciaLogic transferenciaLogic) {
		this.transferenciaLogic = transferenciaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoTransferencia() {
		return isEsNuevoTransferencia;
	}

	public void setIsEsNuevoTransferencia(Boolean isEsNuevoTransferencia) {
		this.isEsNuevoTransferencia = isEsNuevoTransferencia;
	}

	public Boolean getEsParaAccionDesdeFormularioTransferencia() {
		return esParaAccionDesdeFormularioTransferencia;
	}
	
	public void setEsParaAccionDesdeFormularioTransferencia(Boolean esParaAccionDesdeFormularioTransferencia) {
		this.esParaAccionDesdeFormularioTransferencia = esParaAccionDesdeFormularioTransferencia;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(transferenciaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(transferenciaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(transferenciaSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(transferenciaSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(transferenciaSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(transferenciaSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(transferenciaSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(transferenciaSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(transferenciaSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCambiosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCambio tipocambioNulo = new TipoCambio();

			TipoCambioLogic tipocambioLogic=new TipoCambioLogic();

			//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

					tipocambioLogic.getTodosTipoCambiosWithConnection(sFinalQuery,new Pagination());

					this.tipocambiosForeignKey=tipocambioLogic.getTipoCambios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tipocambiosForeignKey.add(0, tipocambioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCambio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(transferenciaSessionBean.getlidTipoCambioActual());
					this.tipocambiosForeignKey.add(tipocambioLogic.getTipoCambio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadoinventariosForeignKey=new ArrayList<EstadoInventario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoInventarioLogic estadoinventarioLogic=new EstadoInventarioLogic();

			//estadoinventarioLogic.getEstadoInventarioDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadoinventarioLogic.getEstadoInventarioDataAccess().setIsForForeingKeyData(true);

					estadoinventarioLogic.getTodosEstadoInventariosWithConnection(sFinalQuery,new Pagination());

					this.estadoinventariosForeignKey=estadoinventarioLogic.getEstadoInventarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadoinventarioLogic.getEntityWithConnection(transferenciaSessionBean.getlidEstadoInventarioActual());
					this.estadoinventariosForeignKey.add(estadoinventarioLogic.getEstadoInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(transferenciaSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportistasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportistasForeignKey=new ArrayList<Transportista>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Transportista transportistaNulo = new Transportista();

			TransportistaLogic transportistaLogic=new TransportistaLogic();

			//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

					transportistaLogic.getTodosTransportistasWithConnection(sFinalQuery,new Pagination());

					this.transportistasForeignKey=transportistaLogic.getTransportistas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.transportistasForeignKey.add(0, transportistaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransportista(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transportistaLogic.getEntityWithConnection(transferenciaSessionBean.getlidTransportistaActual());
					this.transportistasForeignKey.add(transportistaLogic.getTransportista());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(transferenciaSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTransaccionModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTransaccionModuloLogic tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();

			//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

					tipotransaccionmoduloLogic.getTodosTipoTransaccionModulosWithConnection(sFinalQuery,new Pagination());

					this.tipotransaccionmodulosForeignKey=tipotransaccionmoduloLogic.getTipoTransaccionModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTransaccionModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotransaccionmoduloLogic.getEntityWithConnection(transferenciaSessionBean.getlidTipoTransaccionModuloActual());
					this.tipotransaccionmodulosForeignKey.add(tipotransaccionmoduloLogic.getTipoTransaccionModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(transferenciaSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaTransferencia.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaTransferenciaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaTransferenciaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaTransferenciaGenerico!=null && jComboBoxid_empresaTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_empresaTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalTransferencia.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalTransferenciaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalTransferenciaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalTransferenciaGenerico!=null && jComboBoxid_sucursalTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloTransferencia.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloTransferenciaGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloTransferenciaGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloTransferenciaGenerico!=null && jComboBoxid_moduloTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_moduloTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioTransferencia.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioTransferenciaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioTransferenciaGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioTransferenciaGenerico!=null && jComboBoxid_ejercicioTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoTransferencia.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoTransferenciaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoTransferenciaGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoTransferenciaGenerico!=null && jComboBoxid_periodoTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_periodoTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioTransferencia.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioTransferenciaGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioTransferenciaGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioTransferenciaGenerico!=null && jComboBoxid_anioTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_anioTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesTransferencia.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesTransferenciaGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesTransferenciaGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesTransferenciaGenerico!=null && jComboBoxid_mesTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_mesTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioTransferencia.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioTransferenciaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioTransferenciaGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioTransferenciaGenerico!=null && jComboBoxid_usuarioTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_usuarioTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaTransferencia.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaTransferenciaGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaTransferenciaGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaTransferenciaGenerico!=null && jComboBoxid_monedaTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_monedaTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCambioForeignKey(Long idTipoCambioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocambioTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setTipoCambio(tipocambioTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setSelectedItem(tipocambioTemp);
					}
				} else {
					//jComboBoxid_tipo_cambioTransferencia.setSelectedItem(tipocambioTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCambioForeignKeyDescripcion(Long idTipoCambioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}


			sDescripcion=TipoCambioConstantesFunciones.getTipoCambioDescripcion(tipocambioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCambioForeignKeyGenerico(Long idTipoCambioSeleccionado,JComboBox jComboBoxid_tipo_cambioTransferenciaGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(tipocambioTemp!=null) {
				jComboBoxid_tipo_cambioTransferenciaGenerico.setSelectedItem(tipocambioTemp);
			} else {
				if(jComboBoxid_tipo_cambioTransferenciaGenerico!=null && jComboBoxid_tipo_cambioTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cambioTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoInventarioForeignKey(Long idEstadoInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoInventario  estadoinventarioTemp=null;

			for(EstadoInventario estadoinventarioAux:estadoinventariosForeignKey) {
				if(estadoinventarioAux.getId()!=null && estadoinventarioAux.getId().equals(idEstadoInventarioSeleccionado)) {
					estadoinventarioTemp=estadoinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadoinventarioTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setEstadoInventario(estadoinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setSelectedItem(estadoinventarioTemp);
					}
				} else {
					//jComboBoxid_estado_inventarioTransferencia.setSelectedItem(estadoinventarioTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadoinventarioTemp!=null && jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia!=null) {
						jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.setSelectedItem(estadoinventarioTemp);
					} else {
						if(jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia!=null) {
							//jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.setSelectedItem(estadoinventarioTemp);
							if(jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.getItemCount()>0) {
								jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoInventarioForeignKeyDescripcion(Long idEstadoInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoInventario  estadoinventarioTemp=null;

			for(EstadoInventario estadoinventarioAux:estadoinventariosForeignKey) {
				if(estadoinventarioAux.getId()!=null && estadoinventarioAux.getId().equals(idEstadoInventarioSeleccionado)) {
					estadoinventarioTemp=estadoinventarioAux;
					break;
				}
			}


			sDescripcion=EstadoInventarioConstantesFunciones.getEstadoInventarioDescripcion(estadoinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoInventarioForeignKeyGenerico(Long idEstadoInventarioSeleccionado,JComboBox jComboBoxid_estado_inventarioTransferenciaGenerico)throws Exception
	{
		try
		{
			EstadoInventario  estadoinventarioTemp=null;

			for(EstadoInventario estadoinventarioAux:estadoinventariosForeignKey) {
				if(estadoinventarioAux.getId()!=null && estadoinventarioAux.getId().equals(idEstadoInventarioSeleccionado)) {
					estadoinventarioTemp=estadoinventarioAux;
					break;
				}
			}

			if(estadoinventarioTemp!=null) {
				jComboBoxid_estado_inventarioTransferenciaGenerico.setSelectedItem(estadoinventarioTemp);
			} else {
				if(jComboBoxid_estado_inventarioTransferenciaGenerico!=null && jComboBoxid_estado_inventarioTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_estado_inventarioTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoTransferencia.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoTransferenciaGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoTransferenciaGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoTransferenciaGenerico!=null && jComboBoxid_formatoTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_formatoTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransportistaForeignKey(Long idTransportistaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transportistaTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setTransportista(transportistaTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setSelectedItem(transportistaTemp);
					}
				} else {
					//jComboBoxid_transportistaTransferencia.setSelectedItem(transportistaTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransportistaForeignKeyDescripcion(Long idTransportistaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}


			sDescripcion=TransportistaConstantesFunciones.getTransportistaDescripcion(transportistaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransportistaForeignKeyGenerico(Long idTransportistaSeleccionado,JComboBox jComboBoxid_transportistaTransferenciaGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(transportistaTemp!=null) {
				jComboBoxid_transportistaTransferenciaGenerico.setSelectedItem(transportistaTemp);
			} else {
				if(jComboBoxid_transportistaTransferenciaGenerico!=null && jComboBoxid_transportistaTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_transportistaTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoTransferencia.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(empleadoTemp!=null && jComboBoxid_empleadoFK_IdEmpleadoTransferencia!=null) {
						jComboBoxid_empleadoFK_IdEmpleadoTransferencia.setSelectedItem(empleadoTemp);
					} else {
						if(jComboBoxid_empleadoFK_IdEmpleadoTransferencia!=null) {
							//jComboBoxid_empleadoFK_IdEmpleadoTransferencia.setSelectedItem(empleadoTemp);
							if(jComboBoxid_empleadoFK_IdEmpleadoTransferencia.getItemCount()>0) {
								jComboBoxid_empleadoFK_IdEmpleadoTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoTransferenciaGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoTransferenciaGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoTransferenciaGenerico!=null && jComboBoxid_empleadoTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_empleadoTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTransaccionModuloForeignKey(Long idTipoTransaccionModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotransaccionmoduloTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setTipoTransaccionModulo(tipotransaccionmoduloTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setSelectedItem(tipotransaccionmoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_transaccion_moduloTransferencia.setSelectedItem(tipotransaccionmoduloTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotransaccionmoduloTemp!=null && jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia!=null) {
						jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.setSelectedItem(tipotransaccionmoduloTemp);
					} else {
						if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia!=null) {
							//jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.setSelectedItem(tipotransaccionmoduloTemp);
							if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.getItemCount()>0) {
								jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTransaccionModuloForeignKeyDescripcion(Long idTipoTransaccionModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}


			sDescripcion=TipoTransaccionModuloConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTransaccionModuloForeignKeyGenerico(Long idTipoTransaccionModuloSeleccionado,JComboBox jComboBoxid_tipo_transaccion_moduloTransferenciaGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(tipotransaccionmoduloTemp!=null) {
				jComboBoxid_tipo_transaccion_moduloTransferenciaGenerico.setSelectedItem(tipotransaccionmoduloTemp);
			} else {
				if(jComboBoxid_tipo_transaccion_moduloTransferenciaGenerico!=null && jComboBoxid_tipo_transaccion_moduloTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_transaccion_moduloTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.transferencia!=null) {
						this.transferencia.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableTransferencia.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormTransferencia!=null) {
						if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableTransferenciaGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableTransferenciaGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableTransferenciaGenerico!=null && jComboBoxid_asiento_contableTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(Transferencia transferencia,JComboBox jComboBoxid_empresaTransferenciaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaTransferenciaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaTransferenciaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				transferencia.setid_empresa(empresaAux.getId());
				transferencia.setempresa_descripcion(TransferenciaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				transferencia.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(Transferencia transferencia,JComboBox jComboBoxid_sucursalTransferenciaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalTransferenciaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalTransferenciaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				transferencia.setid_sucursal(sucursalAux.getId());
				transferencia.setsucursal_descripcion(TransferenciaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				transferencia.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(Transferencia transferencia,JComboBox jComboBoxid_moduloTransferenciaGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloTransferenciaGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloTransferenciaGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				transferencia.setid_modulo(moduloAux.getId());
				transferencia.setmodulo_descripcion(TransferenciaConstantesFunciones.getModuloDescripcion(moduloAux));
				transferencia.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(Transferencia transferencia,JComboBox jComboBoxid_ejercicioTransferenciaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioTransferenciaGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioTransferenciaGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				transferencia.setid_ejercicio(ejercicioAux.getId());
				transferencia.setejercicio_descripcion(TransferenciaConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				transferencia.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(Transferencia transferencia,JComboBox jComboBoxid_periodoTransferenciaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoTransferenciaGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoTransferenciaGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				transferencia.setid_periodo(periodoAux.getId());
				transferencia.setperiodo_descripcion(TransferenciaConstantesFunciones.getPeriodoDescripcion(periodoAux));
				transferencia.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(Transferencia transferencia,JComboBox jComboBoxid_anioTransferenciaGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioTransferenciaGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioTransferenciaGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				transferencia.setid_anio(anioAux.getId());
				transferencia.setanio_descripcion(TransferenciaConstantesFunciones.getAnioDescripcion(anioAux));
				transferencia.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(Transferencia transferencia,JComboBox jComboBoxid_mesTransferenciaGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesTransferenciaGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesTransferenciaGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				transferencia.setid_mes(mesAux.getId());
				transferencia.setmes_descripcion(TransferenciaConstantesFunciones.getMesDescripcion(mesAux));
				transferencia.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(Transferencia transferencia,JComboBox jComboBoxid_usuarioTransferenciaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioTransferenciaGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioTransferenciaGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				transferencia.setid_usuario(usuarioAux.getId());
				transferencia.setusuario_descripcion(TransferenciaConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				transferencia.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(Transferencia transferencia,JComboBox jComboBoxid_monedaTransferenciaGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaTransferenciaGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaTransferenciaGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				transferencia.setid_moneda(monedaAux.getId());
				transferencia.setmoneda_descripcion(TransferenciaConstantesFunciones.getMonedaDescripcion(monedaAux));
				transferencia.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCambioForeignKey(Transferencia transferencia,JComboBox jComboBoxid_tipo_cambioTransferenciaGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioAux=new TipoCambio();

			if(jComboBoxid_tipo_cambioTransferenciaGenerico==null) {
				tipocambioAux=(TipoCambio)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.getSelectedItem();
			} else {
				tipocambioAux=(TipoCambio)jComboBoxid_tipo_cambioTransferenciaGenerico.getSelectedItem();
			}

			if(tipocambioAux!=null) {
				transferencia.setid_tipo_cambio(tipocambioAux.getId());
				transferencia.settipocambio_descripcion(TransferenciaConstantesFunciones.getTipoCambioDescripcion(tipocambioAux));
				transferencia.setTipoCambio(tipocambioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoInventarioForeignKey(Transferencia transferencia,JComboBox jComboBoxid_estado_inventarioTransferenciaGenerico)throws Exception
	{
		try
		{
			EstadoInventario  estadoinventarioAux=new EstadoInventario();

			if(jComboBoxid_estado_inventarioTransferenciaGenerico==null) {
				estadoinventarioAux=(EstadoInventario)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.getSelectedItem();
			} else {
				estadoinventarioAux=(EstadoInventario)jComboBoxid_estado_inventarioTransferenciaGenerico.getSelectedItem();
			}

			if(estadoinventarioAux!=null && estadoinventarioAux.getId()!=null) {
				transferencia.setid_estado_inventario(estadoinventarioAux.getId());
				transferencia.setestadoinventario_descripcion(TransferenciaConstantesFunciones.getEstadoInventarioDescripcion(estadoinventarioAux));
				transferencia.setEstadoInventario(estadoinventarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(Transferencia transferencia,JComboBox jComboBoxid_formatoTransferenciaGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoTransferenciaGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoTransferenciaGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				transferencia.setid_formato(formatoAux.getId());
				transferencia.setformato_descripcion(TransferenciaConstantesFunciones.getFormatoDescripcion(formatoAux));
				transferencia.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransportistaForeignKey(Transferencia transferencia,JComboBox jComboBoxid_transportistaTransferenciaGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaAux=new Transportista();

			if(jComboBoxid_transportistaTransferenciaGenerico==null) {
				transportistaAux=(Transportista)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.getSelectedItem();
			} else {
				transportistaAux=(Transportista)jComboBoxid_transportistaTransferenciaGenerico.getSelectedItem();
			}

			if(transportistaAux!=null) {
				transferencia.setid_transportista(transportistaAux.getId());
				transferencia.settransportista_descripcion(TransferenciaConstantesFunciones.getTransportistaDescripcion(transportistaAux));
				transferencia.setTransportista(transportistaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(Transferencia transferencia,JComboBox jComboBoxid_empleadoTransferenciaGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoTransferenciaGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoTransferenciaGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				transferencia.setid_empleado(empleadoAux.getId());
				transferencia.setempleado_descripcion(TransferenciaConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				transferencia.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTransaccionModuloForeignKey(Transferencia transferencia,JComboBox jComboBoxid_tipo_transaccion_moduloTransferenciaGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloAux=new TipoTransaccionModulo();

			if(jComboBoxid_tipo_transaccion_moduloTransferenciaGenerico==null) {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.getSelectedItem();
			} else {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)jComboBoxid_tipo_transaccion_moduloTransferenciaGenerico.getSelectedItem();
			}

			if(tipotransaccionmoduloAux!=null) {
				transferencia.setid_tipo_transaccion_modulo(tipotransaccionmoduloAux.getId());
				transferencia.settipotransaccionmodulo_descripcion(TransferenciaConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloAux));
				transferencia.setTipoTransaccionModulo(tipotransaccionmoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(Transferencia transferencia,JComboBox jComboBoxid_asiento_contableTransferenciaGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableTransferenciaGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableTransferenciaGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null) {
				transferencia.setid_asiento_contable(asientocontableAux.getId());
				transferencia.setasientocontable_descripcion(TransferenciaConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				transferencia.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCambiosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCambio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.removeAllItems();

							for(TipoCambio tipocambio:this.tipocambiosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.addItem(tipocambio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoInventario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.removeAllItems();

							for(EstadoInventario estadoinventario:this.estadoinventariosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.addItem(estadoinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.removeAllItems();

							for(EstadoInventario estadoinventario:this.estadoinventariosForeignKey) {
								this.jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.addItem(estadoinventario);
							}
						}

						if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportistasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransportista=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.addItem(transportista);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoTransferencia.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jComboBoxid_empleadoFK_IdEmpleadoTransferencia.addItem(empleado);
							}
						}

						if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTransaccionModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTransaccionModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.addItem(tipotransaccionmodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.addItem(tipotransaccionmodulo);
							}
						}

						if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) { 
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTransferencia!=null) { 
					}

					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.addItem(asientocontable);
							}
						}

						if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCambioForeignKey(TipoCambio tipocambio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setSelectedItem(tipocambio);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoInventarioForeignKey(EstadoInventario estadoinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setSelectedItem(estadoinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.setSelectedItem(estadoinventario);
						} else {
							this.jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransportistaForeignKey(Transportista transportista,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setSelectedItem(transportista);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empleadoFK_IdEmpleadoTransferencia.setSelectedItem(empleado);
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoTransferencia.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTransaccionModuloForeignKey(TipoTransaccionModulo tipotransaccionmodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setSelectedItem(tipotransaccionmodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.setSelectedItem(tipotransaccionmodulo);
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormTransferencia!=null) {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesTransferencia() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			TransferenciaConstantesFunciones.refrescarForeignKeysDescripcionesTransferencia(this.transferenciaLogic.getTransferencias());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			TransferenciaConstantesFunciones.refrescarForeignKeysDescripcionesTransferencia(this.transferencias);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(TipoCambio.class));
		classes.add(new Classe(EstadoInventario.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(Transportista.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(TipoTransaccionModulo.class));
		classes.add(new Classe(AsientoContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//transferenciaLogic.setTransferencias(this.transferencias);
			transferenciaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public TransferenciaParameterReturnGeneral getTransferenciaParameterGeneral() {
		return this.transferenciaParameterGeneral;
	}
	
	public void setTransferenciaParameterGeneral(TransferenciaParameterReturnGeneral transferenciaParameterGeneral) {
		this.transferenciaParameterGeneral = transferenciaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoTransferencia() {
		return isPermisoTodoTransferencia;
	}

	public void setIsPermisoTodoTransferencia(Boolean isPermisoTodoTransferencia) {
		this.isPermisoTodoTransferencia = isPermisoTodoTransferencia;
	}

	public Boolean getIsPermisoNuevoTransferencia() {
		return isPermisoNuevoTransferencia;
	}

	public void setIsPermisoNuevoTransferencia(Boolean isPermisoNuevoTransferencia) {
		this.isPermisoNuevoTransferencia = isPermisoNuevoTransferencia;
	}

	public Boolean getIsPermisoActualizarTransferencia() {
		return isPermisoActualizarTransferencia;
	}

	public void setIsPermisoActualizarTransferencia(Boolean isPermisoActualizarTransferencia) {
		this.isPermisoActualizarTransferencia = isPermisoActualizarTransferencia;
	}

	public Boolean getIsPermisoEliminarTransferencia() {
		return isPermisoEliminarTransferencia;
	}

	public void setIsPermisoEliminarTransferencia(Boolean isPermisoEliminarTransferencia) {
		this.isPermisoEliminarTransferencia = isPermisoEliminarTransferencia;
	}

	public Boolean getIsPermisoGuardarCambiosTransferencia() {
		return isPermisoGuardarCambiosTransferencia;
	}

	public void setIsPermisoGuardarCambiosTransferencia(Boolean isPermisoGuardarCambiosTransferencia) {
		this.isPermisoGuardarCambiosTransferencia = isPermisoGuardarCambiosTransferencia;
	}
	
	public Boolean getIsPermisoConsultaTransferencia() {
		return isPermisoConsultaTransferencia;
	}

	public void setIsPermisoConsultaTransferencia(Boolean isPermisoConsultaTransferencia) {
		this.isPermisoConsultaTransferencia = isPermisoConsultaTransferencia;
	}

	public Boolean getIsPermisoBusquedaTransferencia() {
		return isPermisoBusquedaTransferencia;
	}

	public void setIsPermisoBusquedaTransferencia(Boolean isPermisoBusquedaTransferencia) {
		this.isPermisoBusquedaTransferencia = isPermisoBusquedaTransferencia;
	}

	public Boolean getIsPermisoReporteTransferencia() {
		return isPermisoReporteTransferencia;
	}

	public void setIsPermisoReporteTransferencia(Boolean isPermisoReporteTransferencia) {
		this.isPermisoReporteTransferencia = isPermisoReporteTransferencia;
	}
	
	public Boolean getIsPermisoPaginacionMedioTransferencia() {
		return isPermisoPaginacionMedioTransferencia;
	}

	public void setIsPermisoPaginacionMedioTransferencia(Boolean isPermisoPaginacionMedioTransferencia) {
		this.isPermisoPaginacionMedioTransferencia = isPermisoPaginacionMedioTransferencia;
	}
	
	public Boolean getIsPermisoPaginacionTodoTransferencia() {
		return isPermisoPaginacionTodoTransferencia;
	}

	public void setIsPermisoPaginacionTodoTransferencia(Boolean isPermisoPaginacionTodoTransferencia) {
		this.isPermisoPaginacionTodoTransferencia = isPermisoPaginacionTodoTransferencia;
	}
	
	public Boolean getIsPermisoPaginacionAltoTransferencia() {
		return isPermisoPaginacionAltoTransferencia;
	}

	public void setIsPermisoPaginacionAltoTransferencia(Boolean isPermisoPaginacionAltoTransferencia) {
		this.isPermisoPaginacionAltoTransferencia = isPermisoPaginacionAltoTransferencia;
	}
	
	public Boolean getIsPermisoCopiarTransferencia() {
		return isPermisoCopiarTransferencia;
	}

	public void setIsPermisoCopiarTransferencia(Boolean isPermisoCopiarTransferencia) {
		this.isPermisoCopiarTransferencia = isPermisoCopiarTransferencia;
	}
	
	public Boolean getIsPermisoVerFormTransferencia() {
		return isPermisoVerFormTransferencia;
	}

	public void setIsPermisoVerFormTransferencia(Boolean isPermisoVerFormTransferencia) {
		this.isPermisoVerFormTransferencia = isPermisoVerFormTransferencia;
	}
	
	public Boolean getIsPermisoDuplicarTransferencia() {
		return isPermisoDuplicarTransferencia;
	}

	public void setIsPermisoDuplicarTransferencia(Boolean isPermisoDuplicarTransferencia) {
		this.isPermisoDuplicarTransferencia = isPermisoDuplicarTransferencia;
	}
	
	public Boolean getIsPermisoOrdenTransferencia() {
		return isPermisoOrdenTransferencia;
	}

	public void setIsPermisoOrdenTransferencia(Boolean isPermisoOrdenTransferencia) {
		this.isPermisoOrdenTransferencia = isPermisoOrdenTransferencia;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoTransferencia() {
		return isVisibilidadCeldaNuevoTransferencia;
	}

	public void setIsVisibilidadCeldaNuevoTransferencia(Boolean isVisibilidadCeldaNuevoTransferencia) {
		this.isVisibilidadCeldaNuevoTransferencia = isVisibilidadCeldaNuevoTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarTransferencia() {
		return isVisibilidadCeldaDuplicarTransferencia;
	}

	public void setIsVisibilidadCeldaDuplicarTransferencia(Boolean isVisibilidadCeldaDuplicarTransferencia) {
		this.isVisibilidadCeldaDuplicarTransferencia = isVisibilidadCeldaDuplicarTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarTransferencia() {
		return isVisibilidadCeldaCopiarTransferencia;
	}

	public void setIsVisibilidadCeldaCopiarTransferencia(Boolean isVisibilidadCeldaCopiarTransferencia) {
		this.isVisibilidadCeldaCopiarTransferencia = isVisibilidadCeldaCopiarTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormTransferencia() {
		return isVisibilidadCeldaVerFormTransferencia;
	}

	public void setIsVisibilidadCeldaVerFormTransferencia(Boolean isVisibilidadCeldaVerFormTransferencia) {
		this.isVisibilidadCeldaVerFormTransferencia = isVisibilidadCeldaVerFormTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenTransferencia() {
		return isVisibilidadCeldaOrdenTransferencia;
	}

	public void setIsVisibilidadCeldaOrdenTransferencia(Boolean isVisibilidadCeldaOrdenTransferencia) {
		this.isVisibilidadCeldaOrdenTransferencia = isVisibilidadCeldaOrdenTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesTransferencia() {
		return isVisibilidadCeldaNuevoRelacionesTransferencia;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesTransferencia(Boolean isVisibilidadCeldaNuevoRelacionesTransferencia) {
		this.isVisibilidadCeldaNuevoRelacionesTransferencia = isVisibilidadCeldaNuevoRelacionesTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaModificarTransferencia() {
		return isVisibilidadCeldaModificarTransferencia;
	}

	public void setIsVisibilidadCeldaModificarTransferencia(Boolean isVisibilidadCeldaModificarTransferencia) {
		this.isVisibilidadCeldaModificarTransferencia = isVisibilidadCeldaModificarTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarTransferencia() {
		return isVisibilidadCeldaActualizarTransferencia;
	}

	public void setIsVisibilidadCeldaActualizarTransferencia(Boolean isVisibilidadCeldaActualizarTransferencia) {
		this.isVisibilidadCeldaActualizarTransferencia = isVisibilidadCeldaActualizarTransferencia;
	}

	public Boolean getIsVisibilidadCeldaEliminarTransferencia() {
		return isVisibilidadCeldaEliminarTransferencia;
	}

	public void setIsVisibilidadCeldaEliminarTransferencia(Boolean isVisibilidadCeldaEliminarTransferencia) {
		this.isVisibilidadCeldaEliminarTransferencia = isVisibilidadCeldaEliminarTransferencia;
	}

	public Boolean getIsVisibilidadCeldaCancelarTransferencia() {
		return isVisibilidadCeldaCancelarTransferencia;
	}

	public void setIsVisibilidadCeldaCancelarTransferencia(Boolean isVisibilidadCeldaCancelarTransferencia) {
		this.isVisibilidadCeldaCancelarTransferencia = isVisibilidadCeldaCancelarTransferencia;
	}

	public Boolean getIsVisibilidadCeldaGuardarTransferencia() {
		return isVisibilidadCeldaGuardarTransferencia;
	}

	public void setIsVisibilidadCeldaGuardarTransferencia(Boolean isVisibilidadCeldaGuardarTransferencia) {
		this.isVisibilidadCeldaGuardarTransferencia = isVisibilidadCeldaGuardarTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosTransferencia() {
		return isVisibilidadCeldaGuardarCambiosTransferencia;
	}

	public void setIsVisibilidadCeldaGuardarCambiosTransferencia(Boolean isVisibilidadCeldaGuardarCambiosTransferencia) {
		this.isVisibilidadCeldaGuardarCambiosTransferencia = isVisibilidadCeldaGuardarCambiosTransferencia;
	}
		
	public TransferenciaSessionBean gettransferenciaSessionBean() {
		return this.transferenciaSessionBean;
	}
	
	public void settransferenciaSessionBean(TransferenciaSessionBean transferenciaSessionBean) {
		this.transferenciaSessionBean=transferenciaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoInventario() {
		return this.isVisibilidadFK_IdEstadoInventario;
	}

	public void setisVisibilidadFK_IdEstadoInventario(Boolean isVisibilidadFK_IdEstadoInventario) {
		this.isVisibilidadFK_IdEstadoInventario=isVisibilidadFK_IdEstadoInventario;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoCambio() {
		return this.isVisibilidadFK_IdTipoCambio;
	}

	public void setisVisibilidadFK_IdTipoCambio(Boolean isVisibilidadFK_IdTipoCambio) {
		this.isVisibilidadFK_IdTipoCambio=isVisibilidadFK_IdTipoCambio;
	}

	public Boolean getisVisibilidadFK_IdTipoTransaccionModulo() {
		return this.isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public void setisVisibilidadFK_IdTipoTransaccionModulo(Boolean isVisibilidadFK_IdTipoTransaccionModulo) {
		this.isVisibilidadFK_IdTipoTransaccionModulo=isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public Boolean getisVisibilidadFK_IdTransportista() {
		return this.isVisibilidadFK_IdTransportista;
	}

	public void setisVisibilidadFK_IdTransportista(Boolean isVisibilidadFK_IdTransportista) {
		this.isVisibilidadFK_IdTransportista=isVisibilidadFK_IdTransportista;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysTransferencia(Transferencia transferencia)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(transferencia,null);
				this.setActualParaGuardarSucursalForeignKey(transferencia,null);
				this.setActualParaGuardarModuloForeignKey(transferencia,null);
				this.setActualParaGuardarEjercicioForeignKey(transferencia,null);
				this.setActualParaGuardarPeriodoForeignKey(transferencia,null);
				this.setActualParaGuardarAnioForeignKey(transferencia,null);
				this.setActualParaGuardarMesForeignKey(transferencia,null);
				this.setActualParaGuardarUsuarioForeignKey(transferencia,null);
				this.setActualParaGuardarMonedaForeignKey(transferencia,null);
				this.setActualParaGuardarTipoCambioForeignKey(transferencia,null);
				this.setActualParaGuardarEstadoInventarioForeignKey(transferencia,null);
				this.setActualParaGuardarFormatoForeignKey(transferencia,null);
				this.setActualParaGuardarTransportistaForeignKey(transferencia,null);
				this.setActualParaGuardarEmpleadoForeignKey(transferencia,null);
				this.setActualParaGuardarTipoTransaccionModuloForeignKey(transferencia,null);
				this.setActualParaGuardarAsientoContableForeignKey(transferencia,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(Transferencia transferencia,Transferencia transferenciaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalTransferencia(transferencia);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		transferenciaAux.setId(transferencia.getId());
		transferenciaAux.setVersionRow(transferencia.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessTransferencia();
		
			int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = transferenciaValidator.getInvalidValues(this.transferencia);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			transferenciaLogic.setDatosCliente(datosCliente);
			transferenciaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				transferenciaAux=new  Transferencia();
				
				transferenciaAux.setIsNew(true);
				transferenciaAux.setIsChanged(true);
				
				transferenciaAux.setTransferenciaOriginal(this.transferencia);
				
				transferenciaAux.setId(this.transferencia.getId());	
				transferenciaAux.setVersionRow(this.transferencia.getVersionRow());	
				transferenciaAux.setid_empresa(this.transferencia.getid_empresa());	
				transferenciaAux.setid_sucursal(this.transferencia.getid_sucursal());	
				transferenciaAux.setid_modulo(this.transferencia.getid_modulo());	
				transferenciaAux.setid_ejercicio(this.transferencia.getid_ejercicio());	
				transferenciaAux.setid_periodo(this.transferencia.getid_periodo());	
				transferenciaAux.setid_anio(this.transferencia.getid_anio());	
				transferenciaAux.setid_mes(this.transferencia.getid_mes());	
				transferenciaAux.setid_usuario(this.transferencia.getid_usuario());	
				transferenciaAux.setfecha_emision(this.transferencia.getfecha_emision());	
				transferenciaAux.setfecha_entrega(this.transferencia.getfecha_entrega());	
				transferenciaAux.setnumero_secuencial(this.transferencia.getnumero_secuencial());	
				transferenciaAux.setid_moneda(this.transferencia.getid_moneda());	
				
				if(this.transferencia.getid_tipo_cambio()!=null && this.transferencia.getid_tipo_cambio()>0L) {
					transferenciaAux.setid_tipo_cambio(this.transferencia.getid_tipo_cambio());
				} else {
					transferenciaAux.setid_tipo_cambio(null);
				}	
				transferenciaAux.setid_estado_inventario(this.transferencia.getid_estado_inventario());	
				transferenciaAux.setid_formato(this.transferencia.getid_formato());	
				
				if(this.transferencia.getid_transportista()!=null && this.transferencia.getid_transportista()>0L) {
					transferenciaAux.setid_transportista(this.transferencia.getid_transportista());
				} else {
					transferenciaAux.setid_transportista(null);
				}	
				transferenciaAux.setid_empleado(this.transferencia.getid_empleado());	
				transferenciaAux.setdescripcion(this.transferencia.getdescripcion());	
				transferenciaAux.setporcentaje_descuento(this.transferencia.getporcentaje_descuento());	
				transferenciaAux.setsuman(this.transferencia.getsuman());	
				transferenciaAux.setice(this.transferencia.getice());	
				transferenciaAux.setvalor_descuento(this.transferencia.getvalor_descuento());	
				transferenciaAux.settotal_descuento(this.transferencia.gettotal_descuento());	
				transferenciaAux.setiva(this.transferencia.getiva());	
				transferenciaAux.setstock(this.transferencia.getstock());	
				transferenciaAux.setsub_total(this.transferencia.getsub_total());	
				transferenciaAux.settotal_otro(this.transferencia.gettotal_otro());	
				transferenciaAux.setultimo_costo(this.transferencia.getultimo_costo());	
				transferenciaAux.setnumero_items(this.transferencia.getnumero_items());	
				transferenciaAux.setretencion(this.transferencia.getretencion());	
				transferenciaAux.settotal(this.transferencia.gettotal());	
				transferenciaAux.setflete(this.transferencia.getflete());	
				transferenciaAux.setimpuesto(this.transferencia.getimpuesto());	
				transferenciaAux.setid_tipo_transaccion_modulo(this.transferencia.getid_tipo_transaccion_modulo());	
				transferenciaAux.setid_asiento_contable(this.transferencia.getid_asiento_contable());	
				transferenciaAux.setnumero_comprobante(this.transferencia.getnumero_comprobante());	
				transferenciaAux.setfecha(this.transferencia.getfecha());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.transferenciaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(transferenciaAux,transferenciaLogic.getTransferencias());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(transferenciaAux,transferencias);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.transferenciaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.transferenciaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.saveTransferencias();//WithConnection
						//transferenciaLogic.getSetVersionRowTransferencias();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.transferencia,transferenciaAux);
					
					this.refrescarForeignKeysDescripcionesTransferencia();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias().addAll(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferencias.addAll(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciasEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								transferenciaLogic.saveTransferenciaRelaciones(transferenciaAux,this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias());//WithConnection
								//transferenciaLogic.getSetVersionRowTransferencias();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.transferencia,transferenciaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferencias= new ArrayList<DetalleTransferencia>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();}
							transferenciaAux.setDetalleTransferencias(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.transferenciaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(transferenciaAux,transferenciaLogic.getTransferencias());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(transferenciaAux,transferencias);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.transferencia,transferenciaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				transferenciaAux=new  Transferencia();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.transferenciaSessionBean.getEsGuardarRelacionado() 
					|| (this.transferenciaSessionBean.getEsGuardarRelacionado() && this.transferencia.getId()>=0)) {
						
					transferenciaAux.setIsNew(false);
				}
				
				transferenciaAux.setIsDeleted(false);
			
				transferenciaAux.setId(this.transferencia.getId());	
				transferenciaAux.setVersionRow(this.transferencia.getVersionRow());	
				transferenciaAux.setid_empresa(this.transferencia.getid_empresa());	
				transferenciaAux.setid_sucursal(this.transferencia.getid_sucursal());	
				transferenciaAux.setid_modulo(this.transferencia.getid_modulo());	
				transferenciaAux.setid_ejercicio(this.transferencia.getid_ejercicio());	
				transferenciaAux.setid_periodo(this.transferencia.getid_periodo());	
				transferenciaAux.setid_anio(this.transferencia.getid_anio());	
				transferenciaAux.setid_mes(this.transferencia.getid_mes());	
				transferenciaAux.setid_usuario(this.transferencia.getid_usuario());	
				transferenciaAux.setfecha_emision(this.transferencia.getfecha_emision());	
				transferenciaAux.setfecha_entrega(this.transferencia.getfecha_entrega());	
				transferenciaAux.setnumero_secuencial(this.transferencia.getnumero_secuencial());	
				transferenciaAux.setid_moneda(this.transferencia.getid_moneda());	
				
				if(this.transferencia.getid_tipo_cambio()!=null && this.transferencia.getid_tipo_cambio()>0L) {
					transferenciaAux.setid_tipo_cambio(this.transferencia.getid_tipo_cambio());
				} else {
					transferenciaAux.setid_tipo_cambio(null);
				}	
				transferenciaAux.setid_estado_inventario(this.transferencia.getid_estado_inventario());	
				transferenciaAux.setid_formato(this.transferencia.getid_formato());	
				
				if(this.transferencia.getid_transportista()!=null && this.transferencia.getid_transportista()>0L) {
					transferenciaAux.setid_transportista(this.transferencia.getid_transportista());
				} else {
					transferenciaAux.setid_transportista(null);
				}	
				transferenciaAux.setid_empleado(this.transferencia.getid_empleado());	
				transferenciaAux.setdescripcion(this.transferencia.getdescripcion());	
				transferenciaAux.setporcentaje_descuento(this.transferencia.getporcentaje_descuento());	
				transferenciaAux.setsuman(this.transferencia.getsuman());	
				transferenciaAux.setice(this.transferencia.getice());	
				transferenciaAux.setvalor_descuento(this.transferencia.getvalor_descuento());	
				transferenciaAux.settotal_descuento(this.transferencia.gettotal_descuento());	
				transferenciaAux.setiva(this.transferencia.getiva());	
				transferenciaAux.setstock(this.transferencia.getstock());	
				transferenciaAux.setsub_total(this.transferencia.getsub_total());	
				transferenciaAux.settotal_otro(this.transferencia.gettotal_otro());	
				transferenciaAux.setultimo_costo(this.transferencia.getultimo_costo());	
				transferenciaAux.setnumero_items(this.transferencia.getnumero_items());	
				transferenciaAux.setretencion(this.transferencia.getretencion());	
				transferenciaAux.settotal(this.transferencia.gettotal());	
				transferenciaAux.setflete(this.transferencia.getflete());	
				transferenciaAux.setimpuesto(this.transferencia.getimpuesto());	
				transferenciaAux.setid_tipo_transaccion_modulo(this.transferencia.getid_tipo_transaccion_modulo());	
				transferenciaAux.setid_asiento_contable(this.transferencia.getid_asiento_contable());	
				transferenciaAux.setnumero_comprobante(this.transferencia.getnumero_comprobante());	
				transferenciaAux.setfecha(this.transferencia.getfecha());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(transferenciaAux,transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(transferenciaAux,transferencias);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.transferenciaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.transferenciaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.saveTransferencias();//WithConnection
						//transferenciaLogic.getSetVersionRowTransferencias();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.transferencia,transferenciaAux);
					
					this.refrescarForeignKeysDescripcionesTransferencia();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias().addAll(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferencias.addAll(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciasEliminados);
						}
						//ARCHITECTURE
						
						if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								transferenciaLogic.saveTransferenciaRelaciones(transferenciaAux,this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias());//WithConnection
								//transferenciaLogic.getSetVersionRowTransferencias();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.transferencia,transferenciaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferencias= new ArrayList<DetalleTransferencia>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();}
							transferenciaAux.setDetalleTransferencias(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.transferenciaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(transferenciaAux,transferenciaLogic.getTransferencias());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(transferenciaAux,transferencias);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.transferencia,transferenciaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				transferenciaAux=new  Transferencia();
				
				transferenciaAux.setIsNew(false);
				transferenciaAux.setIsChanged(false);
				
				transferenciaAux.setIsDeleted(true);
				
				transferenciaAux.setId(this.transferencia.getId());	
				transferenciaAux.setVersionRow(this.transferencia.getVersionRow());	
				transferenciaAux.setid_empresa(this.transferencia.getid_empresa());	
				transferenciaAux.setid_sucursal(this.transferencia.getid_sucursal());	
				transferenciaAux.setid_modulo(this.transferencia.getid_modulo());	
				transferenciaAux.setid_ejercicio(this.transferencia.getid_ejercicio());	
				transferenciaAux.setid_periodo(this.transferencia.getid_periodo());	
				transferenciaAux.setid_anio(this.transferencia.getid_anio());	
				transferenciaAux.setid_mes(this.transferencia.getid_mes());	
				transferenciaAux.setid_usuario(this.transferencia.getid_usuario());	
				transferenciaAux.setfecha_emision(this.transferencia.getfecha_emision());	
				transferenciaAux.setfecha_entrega(this.transferencia.getfecha_entrega());	
				transferenciaAux.setnumero_secuencial(this.transferencia.getnumero_secuencial());	
				transferenciaAux.setid_moneda(this.transferencia.getid_moneda());	
				
				if(this.transferencia.getid_tipo_cambio()!=null && this.transferencia.getid_tipo_cambio()>0L) {
					transferenciaAux.setid_tipo_cambio(this.transferencia.getid_tipo_cambio());
				} else {
					transferenciaAux.setid_tipo_cambio(null);
				}	
				transferenciaAux.setid_estado_inventario(this.transferencia.getid_estado_inventario());	
				transferenciaAux.setid_formato(this.transferencia.getid_formato());	
				
				if(this.transferencia.getid_transportista()!=null && this.transferencia.getid_transportista()>0L) {
					transferenciaAux.setid_transportista(this.transferencia.getid_transportista());
				} else {
					transferenciaAux.setid_transportista(null);
				}	
				transferenciaAux.setid_empleado(this.transferencia.getid_empleado());	
				transferenciaAux.setdescripcion(this.transferencia.getdescripcion());	
				transferenciaAux.setporcentaje_descuento(this.transferencia.getporcentaje_descuento());	
				transferenciaAux.setsuman(this.transferencia.getsuman());	
				transferenciaAux.setice(this.transferencia.getice());	
				transferenciaAux.setvalor_descuento(this.transferencia.getvalor_descuento());	
				transferenciaAux.settotal_descuento(this.transferencia.gettotal_descuento());	
				transferenciaAux.setiva(this.transferencia.getiva());	
				transferenciaAux.setstock(this.transferencia.getstock());	
				transferenciaAux.setsub_total(this.transferencia.getsub_total());	
				transferenciaAux.settotal_otro(this.transferencia.gettotal_otro());	
				transferenciaAux.setultimo_costo(this.transferencia.getultimo_costo());	
				transferenciaAux.setnumero_items(this.transferencia.getnumero_items());	
				transferenciaAux.setretencion(this.transferencia.getretencion());	
				transferenciaAux.settotal(this.transferencia.gettotal());	
				transferenciaAux.setflete(this.transferencia.getflete());	
				transferenciaAux.setimpuesto(this.transferencia.getimpuesto());	
				transferenciaAux.setid_tipo_transaccion_modulo(this.transferencia.getid_tipo_transaccion_modulo());	
				transferenciaAux.setid_asiento_contable(this.transferencia.getid_asiento_contable());	
				transferenciaAux.setnumero_comprobante(this.transferencia.getnumero_comprobante());	
				transferenciaAux.setfecha(this.transferencia.getfecha());	
				
				if(this.transferenciaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.transferenciaAux.getId()>=0) {	
						this.transferenciasEliminados.add(transferenciaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(transferenciaAux,transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(transferenciaAux,transferencias);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.transferenciaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.transferenciaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.saveTransferencias();//WithConnection
						//transferenciaLogic.getSetVersionRowTransferencias();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias().addAll(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferencias.addAll(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciasEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								transferenciaLogic.saveTransferenciaRelaciones(transferenciaAux,this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias());//WithConnection
								//transferenciaLogic.getSetVersionRowTransferencias();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferencias= new ArrayList<DetalleTransferencia>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.quitarFilaTotales();}
							transferenciaAux.setDetalleTransferencias(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.transferenciaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(transferenciaAux,transferenciaLogic.getTransferencias());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(transferenciaAux,transferencias);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getTransferencias().addAll(this.transferenciasEliminados);
					
					transferenciaLogic.saveTransferencias();//WithConnection
					//transferenciaLogic.getSetVersionRowTransferencias();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesTransferencia();
				
				this.transferenciasEliminados= new ArrayList<Transferencia>();		
			}
			
			if(this.transferenciaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Transferencia GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.transferencia=transferenciaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessTransferencia();
      	}
		
	}	
	
	public void actualizarRelaciones(Transferencia transferenciaLocal) throws Exception {
		
		if(this.transferenciaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				transferenciaLocal.setDetalleTransferencias(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias());
			
			} else {
			
				transferenciaLocal.setDetalleTransferencias(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferencias);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(Transferencia transferenciaLocal) throws Exception {	
		if(this.transferenciaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				transferenciaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				transferenciaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				transferenciaLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				transferenciaLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				transferenciaLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				transferenciaLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				transferenciaLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				transferenciaLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				transferenciaLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCambioDetalleFormJInternalFrame.class)) {
				TipoCambioBeanSwingJInternalFrame tipocambioBeanSwingJInternalFrameLocal=(TipoCambioBeanSwingJInternalFrame) ((TipoCambioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocambioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCambio(tipocambioBeanSwingJInternalFrameLocal.gettipocambio(),true);
				tipocambioBeanSwingJInternalFrameLocal.actualizarLista(tipocambioBeanSwingJInternalFrameLocal.tipocambio,this.tipocambiosForeignKey);

				tipocambioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				transferenciaLocal.setTipoCambio(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey("Formulario");
				this.setActualTipoCambioForeignKey(tipocambioBeanSwingJInternalFrameLocal.tipocambio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoInventarioDetalleFormJInternalFrame.class)) {
				EstadoInventarioBeanSwingJInternalFrame estadoinventarioBeanSwingJInternalFrameLocal=(EstadoInventarioBeanSwingJInternalFrame) ((EstadoInventarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadoinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoInventario(estadoinventarioBeanSwingJInternalFrameLocal.getestadoinventario(),true);
				estadoinventarioBeanSwingJInternalFrameLocal.actualizarLista(estadoinventarioBeanSwingJInternalFrameLocal.estadoinventario,this.estadoinventariosForeignKey);

				estadoinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(estadoinventarioBeanSwingJInternalFrameLocal.estadoinventario);

				transferenciaLocal.setEstadoInventario(estadoinventarioBeanSwingJInternalFrameLocal.estadoinventario);

				this.addItemDefectoCombosForeignKeyEstadoInventario();
				this.cargarCombosFrameEstadoInventariosForeignKey("Formulario");
				this.setActualEstadoInventarioForeignKey(estadoinventarioBeanSwingJInternalFrameLocal.estadoinventario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				transferenciaLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransportistaDetalleFormJInternalFrame.class)) {
				TransportistaBeanSwingJInternalFrame transportistaBeanSwingJInternalFrameLocal=(TransportistaBeanSwingJInternalFrame) ((TransportistaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transportistaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransportista(transportistaBeanSwingJInternalFrameLocal.gettransportista(),true);
				transportistaBeanSwingJInternalFrameLocal.actualizarLista(transportistaBeanSwingJInternalFrameLocal.transportista,this.transportistasForeignKey);

				transportistaBeanSwingJInternalFrameLocal.actualizarRelaciones(transportistaBeanSwingJInternalFrameLocal.transportista);

				transferenciaLocal.setTransportista(transportistaBeanSwingJInternalFrameLocal.transportista);

				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey("Formulario");
				this.setActualTransportistaForeignKey(transportistaBeanSwingJInternalFrameLocal.transportista.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				transferenciaLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTransaccionModuloDetalleFormJInternalFrame.class)) {
				TipoTransaccionModuloBeanSwingJInternalFrame tipotransaccionmoduloBeanSwingJInternalFrameLocal=(TipoTransaccionModuloBeanSwingJInternalFrame) ((TipoTransaccionModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.gettipotransaccionmodulo(),true);
				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarLista(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo,this.tipotransaccionmodulosForeignKey);

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				transferenciaLocal.setTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey("Formulario");
				this.setActualTipoTransaccionModuloForeignKey(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				transferenciaLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarTransferenciaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = transferenciaValidator.getInvalidValues(this.transferencia);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(Transferencia transferencia,List<Transferencia> transferencias) throws Exception {
		try	{		
			TransferenciaConstantesFunciones.actualizarLista(transferencia,transferencias,this.transferenciaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(Transferencia transferencia,List<Transferencia> transferencias) throws Exception {
		try	{			
			TransferenciaConstantesFunciones.actualizarSelectedLista(transferencia,transferencias);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<Transferencia> transferenciasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				transferenciasLocal=this.transferenciaLogic.getTransferencias();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				transferenciasLocal=this.transferencias;
			}
			//ARCHITECTURE
		
			for(Transferencia transferenciaLocal:transferenciasLocal) {
				if(this.permiteMantenimiento(transferenciaLocal) && transferenciaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+TransferenciaConstantesFunciones.getTransferenciaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_empresaTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_sucursalTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_moduloTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_ejercicioTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_periodoTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_anioTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_mesTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_usuarioTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelfecha_emisionTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.FECHAENTREGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelfecha_entregaTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.NUMEROSECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelnumero_secuencialTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_monedaTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDTIPOCAMBIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_tipo_cambioTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDESTADOINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_estado_inventarioTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_formatoTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDTRANSPORTISTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_transportistaTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_empleadoTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeldescripcionTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.PORCENTAJEDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelporcentaje_descuentoTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.SUMAN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelsumanTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeliceTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.VALORDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelvalor_descuentoTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.TOTALDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeltotal_descuentoTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelivaTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.STOCK)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelstockTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelsub_totalTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.TOTALOTRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeltotal_otroTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.ULTIMOCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelultimo_costoTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.NUMEROITEMS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelnumero_itemsTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.RETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelretencionTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeltotalTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.FLETE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelfleteTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IMPUESTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelimpuestoTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDTIPOTRANSACCIONMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_tipo_transaccion_moduloTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelid_asiento_contableTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.NUMEROCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelnumero_comprobanteTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TransferenciaConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelfechaTransferencia,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_empresaTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_sucursalTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_moduloTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_ejercicioTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_periodoTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_anioTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_mesTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_usuarioTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelfecha_emisionTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelfecha_entregaTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelnumero_secuencialTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_monedaTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_tipo_cambioTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_estado_inventarioTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_formatoTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_transportistaTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_empleadoTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabeldescripcionTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelporcentaje_descuentoTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelsumanTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabeliceTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelvalor_descuentoTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabeltotal_descuentoTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelivaTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelstockTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelsub_totalTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabeltotal_otroTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelultimo_costoTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelnumero_itemsTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelretencionTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabeltotalTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelfleteTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelimpuestoTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_tipo_transaccion_moduloTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelid_asiento_contableTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelnumero_comprobanteTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTransferencia.jLabelfechaTransferencia,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetalleTransferencia")) {
			if(this.transferencia==null) {
				this.transferencia= new Transferencia();
			}

			if(this.transferenciaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoTransferencia
				this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.getdetalletransferencia().setTransferencia(this.transferencia);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoTransferencia--;	
		
		
		this.transferenciaAux=new Transferencia();
		
		this.transferenciaAux.setId(this.iIdNuevoTransferencia);
		this.transferenciaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.transferenciaLogic.getTransferencias().add(this.transferenciaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.transferencias.add(this.transferenciaAux);
		}
		//ARCHITECTURE
		
		this.transferencia=this.transferenciaAux;
		
		if(TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioTransferencia(this.transferencia);
			this.setVariablesObjetoActualToFormularioForeignKeyTransferencia(this.transferencia);
		}
				
		//this.setDefaultControlesTransferencia();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyTransferencia();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyTransferencia();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyTransferencia();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualTransferencia(this.transferenciaBean,this.transferencia,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(TransferenciaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.transferenciaSessionBean.getConGuardarRelaciones()) {
			classes=TransferenciaConstantesFunciones.getClassesRelationshipsOfTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.transferenciaReturnGeneral=transferenciaLogic.procesarEventosTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.transferenciaLogic.getTransferencias(),this.transferencia,this.transferenciaParameterGeneral,this.isEsNuevoTransferencia,classes);//this.transferenciaLogic.getTransferencia()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanTransferencia(this.transferenciaReturnGeneral,this.transferenciaBean,false);
		
		if(this.transferenciaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyTransferencia(this.transferenciaReturnGeneral.getTransferencia());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioTransferencia(this.transferenciaReturnGeneral.getTransferencia());
		}
		
		if(this.transferenciaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioTransferencia(this.transferenciaReturnGeneral.getTransferencia(),classes);//this.transferenciaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyTransferencia();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyTransferencia();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			TransferenciaBeanSwingJInternalFrameAdditional.RecargarFormTransferencia(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingTransferencia(false);
						
			if(transferenciaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaSessionBean.getEsGuardarRelacionado() && DetalleTransferenciaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleTransferenciaActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualTransferencia();
			}
			
			this.actualizarVisualTableDatosTransferencia();
			
			this.jTableDatosTransferencia.setRowSelectionInterval(this.getIndiceNuevoTransferencia(), this.getIndiceNuevoTransferencia());
			
			this.seleccionarFilaTablaTransferenciaActual();
						
			this.actualizarEstadoCeldasBotonesTransferencia("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesTransferencia(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_emisionTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarfecha_emisionTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_entregaTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarfecha_entregaTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_secuencialTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarnumero_secuencialTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextAreadescripcionTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activardescripcionTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldporcentaje_descuentoTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarporcentaje_descuentoTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldsumanTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarsumanTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldiceTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activariceTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldvalor_descuentoTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarvalor_descuentoTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_descuentoTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activartotal_descuentoTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldivaTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarivaTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldstockTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarstockTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldsub_totalTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarsub_totalTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_otroTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activartotal_otroTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldultimo_costoTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarultimo_costoTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_itemsTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarnumero_itemsTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldretencionTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarretencionTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldtotalTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activartotalTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldfleteTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarfleteTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldimpuestoTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarimpuestoTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_comprobanteTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarnumero_comprobanteTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jDateChooserfechaTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarfechaTransferencia);	
		//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_empresaTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_sucursalTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_moduloTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_ejercicioTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_periodoTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_anioTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_mesTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_usuarioTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_monedaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_tipo_cambioTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_estado_inventarioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_formatoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_transportistaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_empleadoTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_tipo_transaccion_moduloTransferencia);//
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setEnabled(isHabilitar && this.transferenciaConstantesFunciones.activarid_asiento_contableTransferencia);
	};
	
	public void setDefaultControlesTransferencia() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoTransferencia(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.transferenciaSessionBean.setConGuardarRelaciones(true);			
			this.transferenciaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.transferenciaSessionBean.setConGuardarRelaciones(false);			
			this.transferenciaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoTransferencia() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
				if(transferenciaAux.getId().equals(this.iIdNuevoTransferencia)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Transferencia transferenciaAux:this.transferencias) {
				if(transferenciaAux.getId().equals(this.iIdNuevoTransferencia)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualTransferencia(Transferencia transferencia,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
				if(transferenciaAux.getId().equals(transferencia.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Transferencia transferenciaAux:this.transferencias) {
				if(transferenciaAux.getId().equals(transferencia.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalTransferencia(Transferencia transferenciaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
				if(transferenciaAux.getTransferenciaOriginal().getId().equals(transferenciaOriginal.getId())) {
					existe=true;
					transferenciaOriginal.setId(transferenciaAux.getId());
					transferenciaOriginal.setVersionRow(transferenciaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Transferencia transferenciaAux:this.transferencias) {
				if(transferenciaAux.getTransferenciaOriginal().getId().equals(transferenciaOriginal.getId())) {
					existe=true;
					transferenciaOriginal.setId(transferenciaAux.getId());
					transferenciaOriginal.setVersionRow(transferenciaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosTransferencia(Boolean esParaCancelar) throws Exception {
		transferenciasAux=new ArrayList<Transferencia>();
		transferenciaAux=new Transferencia();
		
		if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
					if(transferenciaAux.getId()<0) {
						transferenciasAux.add(transferenciaAux);
					}		
				}
				this.iIdNuevoTransferencia=0L;
				this.transferenciaLogic.getTransferencias().removeAll(transferenciasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Transferencia transferenciaAux:this.transferencias) {
					if(transferenciaAux.getId()<0) {
						transferenciasAux.add(transferenciaAux);
					}		
				}
				this.iIdNuevoTransferencia=0L;
				this.transferencias.removeAll(transferenciasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoTransferencia 
					&& this.transferenciaLogic.getTransferencias().size()>0
					) {
					transferenciaAux=this.transferenciaLogic.getTransferencias().get(this.transferenciaLogic.getTransferencias().size() - 1);
				
					if(transferenciaAux.getId()<0) {
						this.transferenciaLogic.getTransferencias().remove(transferenciaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoTransferencia && this.transferencias.size()>0) {
					transferenciaAux=this.transferencias.get(this.transferencias.size() - 1);
				
					if(transferenciaAux.getId()<0) {
						this.transferencias.remove(transferenciaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoTransferencia(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(transferencia.getId()<0) {
				this.transferenciaLogic.getTransferencias().remove(this.transferencia);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(transferencia.getId()<0) {
				this.transferencias.remove(this.transferencia);
			}
		}			
	}
	
	public void setEstadosInicialesTransferencia(List<Transferencia> transferenciasAux) throws Exception {
		TransferenciaConstantesFunciones.setEstadosInicialesTransferencia(transferenciasAux);
	}
	
	public void setEstadosInicialesTransferencia(Transferencia transferenciaAux) throws Exception {
		TransferenciaConstantesFunciones.setEstadosInicialesTransferencia(transferenciaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarTransferenciaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarTransferenciaActual()) {
				if(!this.isEsNuevoTransferencia) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoTransferencia=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarTransferenciaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Transferencia ?", "MANTENIMIENTO DE Transferencia", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(Transferencia transferencia) throws Exception {
		TransferenciaConstantesFunciones.seleccionarAsignar(this.transferencia,transferencia);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarTransferencia=this.isPermisoActualizarOriginalTransferencia;
			
			
			this.seleccionarAsignar(transferencia);
			
			

			idTipoCambioActual=transferencia.getid_tipo_cambio();
			this.seleccionarTipoCambioActual();

			idEmpleadoActual=transferencia.getid_empleado();
			this.seleccionarEmpleadoActual();

			idAsientoContableActual=transferencia.getid_asiento_contable();
			this.seleccionarAsientoContableActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			TransferenciaConstantesFunciones.quitarEspaciosTransferencia(this.transferencia,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesTransferencia("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.transferenciaSessionBean.setsFuncionBusquedaRapida(this.transferenciaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarTipoCambioActual() throws Exception {
		try	{
			TipoCambio tipocambioAux=new TipoCambio();

			if(this.idTipoCambioActual != null && this.idTipoCambioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(this.idTipoCambioActual);
					tipocambioAux= tipocambioLogic.getTipoCambio();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				tipocambiosForeignKey=new ArrayList<TipoCambio>();
				tipocambiosForeignKey.add(tipocambioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoTransferencia) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosTransferencia(esParaCancelar);				
				this.cancelarNuevoTransferencia(esParaCancelar);								
			}
			
			this.transferencia=new Transferencia();
			
			this.inicializarTransferencia();
			
			this.actualizarEstadoCeldasBotonesTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarTransferencia() throws Exception {
		try {
			TransferenciaConstantesFunciones.inicializarTransferencia(this.transferencia);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.transferenciaLogic.getTransferencias().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteTransferencias(String sAccionBusqueda,List<Transferencia> transferenciasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="Transferencia"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="TransferenciaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("TransferenciaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="Transferencia"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Transferencias");		
		parameters.put("busquedapor", TransferenciaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetalleTransferencia.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					TransferenciaLogic transferenciaLogicAuxiliar=new TransferenciaLogic();
					transferenciaLogicAuxiliar.setDatosCliente(transferenciaLogic.getDatosCliente());				
					transferenciaLogicAuxiliar.setTransferencias(transferenciasParaReportes);
					
					transferenciaLogicAuxiliar.cargarRelacionesLoteForeignKeyTransferenciaWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					transferenciasParaReportes=transferenciaLogicAuxiliar.getTransferencias();
					
					//transferenciaLogic.getNewConnexionToDeep();
					
					//for (Transferencia transferencia:transferenciasParaReportes) {
					//	transferenciaLogic.deepLoad(transferencia, false, DeepLoadType.INCLUDE, classes);
					//}						
					//transferenciaLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//transferenciaLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetalleTransferencia = AuxiliarReportes.class.getResourceAsStream("DetalleTransferenciaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detalletransferencia", reportFileDetalleTransferencia);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceTransferencia=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			TransferenciaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			TransferenciaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceTransferencia=new JRBeanArrayDataSource(TransferenciaJInternalFrame.TraerTransferenciaBeans(transferenciasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceTransferencia);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+TransferenciaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+TransferenciaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(TransferenciaBean.TraerTransferenciaBeans(transferenciasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteTransferencias(sAccionBusqueda,sTipoArchivoReporte,transferenciasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalTransferencias(sAccionBusqueda,sTipoArchivoReporte,transferenciasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoTransferenciaActionPerformed(null);
					//this.generarExcelReporteTransferencias(sAccionBusqueda,sTipoArchivoReporte,transferenciasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalTransferencias(sAccionBusqueda,sTipoArchivoReporte,transferenciasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesTransferencias(sAccionBusqueda,sTipoArchivoReporte,transferenciasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesTransferencias(sAccionBusqueda,sTipoArchivoReporte,transferenciasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteTransferencias(String sAccionBusqueda,String sTipoArchivoReporte,List<Transferencia> transferenciasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"transferencia";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Transferencias");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderTransferencia("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(Transferencia transferencia : transferenciasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			TransferenciaConstantesFunciones.generarExcelReporteDataTransferencia("NORMAL",row,workbook,transferencia,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderTransferencia(String sTipo,Row row,Workbook workbook) {
		
		TransferenciaConstantesFunciones.generarExcelReporteHeaderTransferencia(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalTransferencias(String sAccionBusqueda,String sTipoArchivoReporte,List<Transferencia> transferenciasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"transferencia_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Transferencias");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(Transferencia transferencia : transferenciasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(TransferenciaConstantesFunciones.getTransferenciaDescripcion(transferencia));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_FECHAENTREGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHAENTREGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getfecha_entrega());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getnumero_secuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.gettipocambio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getestadoinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.gettransportista_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getporcentaje_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_SUMAN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_SUMAN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getsuman());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getvalor_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.gettotal_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_STOCK))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_STOCK);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getstock());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_TOTALOTRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTALOTRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.gettotal_otro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getultimo_costo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_NUMEROITEMS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROITEMS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getnumero_items());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_RETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_RETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getretencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_FLETE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FLETE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getflete());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IMPUESTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IMPUESTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getimpuesto());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.gettipotransaccionmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getnumero_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TransferenciaConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(transferencia.getfecha());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesTransferencias(String sAccionBusqueda,String sTipoArchivoReporte,List<Transferencia> transferenciasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<Transferencia> transferenciasRespaldo=null;
		
		classes=TransferenciaConstantesFunciones.getClassesRelationshipsOfTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.transferenciaLogic.setDatosCliente(this.datosCliente);
		this.transferenciaLogic.setDatosDeep(this.datosDeep);
		this.transferenciaLogic.setIsConDeep(true);
		
		transferenciasRespaldo=this.transferenciaLogic.getTransferencias();
		
		this.transferenciaLogic.setTransferencias(transferenciasParaReportes);	
		this.transferenciaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		transferenciasParaReportes=this.transferenciaLogic.getTransferencias();
		this.transferenciaLogic.setTransferencias(transferenciasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"transferencia_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Transferencias");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderTransferencia("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(Transferencia transferencia : transferenciasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderTransferencia("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			TransferenciaConstantesFunciones.generarExcelReporteDataTransferencia("NORMAL",row,workbook,transferencia,cellStyleDataAux);
		
			
			


				//DetalleTransferencia
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO))) {

				if(transferencia.getDetalleTransferencias()!=null && transferencia.getDetalleTransferencias().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleTransferenciaConstantesFunciones.generarExcelReporteHeaderDetalleTransferencia("RELACIONADO",row,workbook);
				}

				if(transferencia.getDetalleTransferencias()!=null) {
					i2=0;
					for(DetalleTransferencia detalletransferencia : transferencia.getDetalleTransferencias()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleTransferenciaConstantesFunciones.generarExcelReporteDataDetalleTransferencia("RELACIONADO",row,workbook,detalletransferencia,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(TransferenciaConstantesFunciones.getTransferenciaDescripcion(transferencia));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoTransferencia.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessTransferencia() throws Exception {		
		this.startProcessTransferencia(true);
	}
	
	public void startProcessTransferencia(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasTransferencia ,this.jPanelParametrosReportesTransferencia, this.jScrollPanelDatosTransferencia,this.jPanelPaginacionTransferencia, this.jScrollPanelDatosEdicionTransferencia, this.jPanelAccionesTransferencia,this.jPanelAccionesFormularioTransferencia,this.jmenuBarTransferencia,this.jmenuBarDetalleTransferencia,this.jTtoolBarTransferencia,this.jTtoolBarDetalleTransferencia);		
		
		final JTabbedPane jTabbedPaneBusquedasTransferencia=this.jTabbedPaneBusquedasTransferencia; 
		
		final JPanel jPanelParametrosReportesTransferencia=this.jPanelParametrosReportesTransferencia;
		//final JScrollPane jScrollPanelDatosTransferencia=this.jScrollPanelDatosTransferencia;
		final JTable jTableDatosTransferencia=this.jTableDatosTransferencia;		
		final JPanel jPanelPaginacionTransferencia=this.jPanelPaginacionTransferencia;
		//final JScrollPane jScrollPanelDatosEdicionTransferencia=this.jScrollPanelDatosEdicionTransferencia;
		final JPanel jPanelAccionesTransferencia=this.jPanelAccionesTransferencia;
		
		JPanel jPanelCamposAuxiliarTransferencia=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarTransferencia=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
			jPanelCamposAuxiliarTransferencia=this.jInternalFrameDetalleFormTransferencia.jPanelCamposTransferencia;
			jPanelAccionesFormularioAuxiliarTransferencia=this.jInternalFrameDetalleFormTransferencia.jPanelAccionesFormularioTransferencia;
		}
		
		final JPanel jPanelCamposTransferencia=jPanelCamposAuxiliarTransferencia;
		final JPanel jPanelAccionesFormularioTransferencia=jPanelAccionesFormularioAuxiliarTransferencia;
		
		
		final JMenuBar jmenuBarTransferencia=this.jmenuBarTransferencia;
		final JToolBar jTtoolBarTransferencia=this.jTtoolBarTransferencia;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarTransferencia=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarTransferencia=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
			jmenuBarDetalleAuxiliarTransferencia=this.jInternalFrameDetalleFormTransferencia.jmenuBarDetalleTransferencia;
			jTtoolBarDetalleAuxiliarTransferencia=this.jInternalFrameDetalleFormTransferencia.jTtoolBarDetalleTransferencia;
		}
		
		final JMenuBar jmenuBarDetalleTransferencia=jmenuBarDetalleAuxiliarTransferencia;
		final JToolBar jTtoolBarDetalleTransferencia=jTtoolBarDetalleAuxiliarTransferencia;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasTransferencia;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesTransferencia;
			processRunnable.jTableDatos=jTableDatosTransferencia;
			processRunnable.jPanelCampos=jPanelCamposTransferencia;
			processRunnable.jPanelPaginacion=jPanelPaginacionTransferencia;
			processRunnable.jPanelAcciones=jPanelAccionesTransferencia;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioTransferencia;
			
			
			processRunnable.jmenuBar=jmenuBarTransferencia;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleTransferencia;
			processRunnable.jTtoolBar=jTtoolBarTransferencia;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleTransferencia;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasTransferencia ,jPanelParametrosReportesTransferencia,jTableDatosTransferencia, /*jScrollPanelDatosTransferencia,*/jPanelCamposTransferencia,jPanelPaginacionTransferencia, /*jScrollPanelDatosEdicionTransferencia,*/ jPanelAccionesTransferencia,jPanelAccionesFormularioTransferencia,jmenuBarTransferencia,jmenuBarDetalleTransferencia,jTtoolBarTransferencia,jTtoolBarDetalleTransferencia);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasTransferencia ,jPanelParametrosReportesTransferencia, jScrollPanelDatosTransferencia,jPanelPaginacionTransferencia, jScrollPanelDatosEdicionTransferencia, jPanelAccionesTransferencia,jPanelAccionesFormularioTransferencia,jmenuBarTransferencia,jmenuBarDetalleTransferencia,jTtoolBarTransferencia,jTtoolBarDetalleTransferencia);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessTransferencia() {// throws Exception 
		this.finishProcessTransferencia(true);
	}
	
	public void finishProcessTransferencia(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasTransferencia ,this.jPanelParametrosReportesTransferencia, this.jScrollPanelDatosTransferencia,this.jPanelPaginacionTransferencia, this.jScrollPanelDatosEdicionTransferencia, this.jPanelAccionesTransferencia,this.jPanelAccionesFormularioTransferencia,this.jmenuBarTransferencia,this.jmenuBarDetalleTransferencia,this.jTtoolBarTransferencia,this.jTtoolBarDetalleTransferencia);		
		
		final JTabbedPane jTabbedPaneBusquedasTransferencia=this.jTabbedPaneBusquedasTransferencia; 
		
		final JPanel jPanelParametrosReportesTransferencia=this.jPanelParametrosReportesTransferencia;
		//final JScrollPane jScrollPanelDatosTransferencia=this.jScrollPanelDatosTransferencia;
		final JTable jTableDatosTransferencia=this.jTableDatosTransferencia;		
		final JPanel jPanelPaginacionTransferencia=this.jPanelPaginacionTransferencia;
		//final JScrollPane jScrollPanelDatosEdicionTransferencia=this.jScrollPanelDatosEdicionTransferencia;
		final JPanel jPanelAccionesTransferencia=this.jPanelAccionesTransferencia;
		
		JPanel jPanelCamposAuxiliarTransferencia=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarTransferencia=new JPanel();
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
			jPanelCamposAuxiliarTransferencia=this.jInternalFrameDetalleFormTransferencia.jPanelCamposTransferencia;
			jPanelAccionesFormularioAuxiliarTransferencia=this.jInternalFrameDetalleFormTransferencia.jPanelAccionesFormularioTransferencia;
		}
		
		final JPanel jPanelCamposTransferencia=jPanelCamposAuxiliarTransferencia;
		final JPanel jPanelAccionesFormularioTransferencia=jPanelAccionesFormularioAuxiliarTransferencia;
		
		
		final JMenuBar jmenuBarTransferencia=this.jmenuBarTransferencia;		
		final JToolBar jTtoolBarTransferencia=this.jTtoolBarTransferencia;
				
		JMenuBar jmenuBarDetalleAuxiliarTransferencia=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarTransferencia=new JToolBar();
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
			jmenuBarDetalleAuxiliarTransferencia=this.jInternalFrameDetalleFormTransferencia.jmenuBarDetalleTransferencia;
			jTtoolBarDetalleAuxiliarTransferencia=this.jInternalFrameDetalleFormTransferencia.jTtoolBarDetalleTransferencia;		
		}
		
		final JMenuBar jmenuBarDetalleTransferencia=jmenuBarDetalleAuxiliarTransferencia;
		final JToolBar jTtoolBarDetalleTransferencia=jTtoolBarDetalleAuxiliarTransferencia;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasTransferencia;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesTransferencia;
			processRunnable.jTableDatos=jTableDatosTransferencia;
			processRunnable.jPanelCampos=jPanelCamposTransferencia;
			processRunnable.jPanelPaginacion=jPanelPaginacionTransferencia;
			processRunnable.jPanelAcciones=jPanelAccionesTransferencia;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioTransferencia;
			
			
			processRunnable.jmenuBar=jmenuBarTransferencia;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleTransferencia;
			processRunnable.jTtoolBar=jTtoolBarTransferencia;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleTransferencia;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasTransferencia ,jPanelParametrosReportesTransferencia, jTableDatosTransferencia,/*jScrollPanelDatosTransferencia,*/jPanelCamposTransferencia,jPanelPaginacionTransferencia, /*jScrollPanelDatosEdicionTransferencia,*/ jPanelAccionesTransferencia,jPanelAccionesFormularioTransferencia,jmenuBarTransferencia,jmenuBarDetalleTransferencia,jTtoolBarTransferencia,jTtoolBarDetalleTransferencia));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesTransferencia(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarTransferencia(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuTransferencia(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarTransferencia(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarTransferencia,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleTransferencia,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuTransferencia(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarTransferencia,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleTransferencia,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.transferenciaConstantesFunciones.getsFinalQueryTransferencia();
		String  finalQueryPaginacionTodos=this.transferenciaConstantesFunciones.getsFinalQueryTransferencia();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=TransferenciaConstantesFunciones.getArrayColumnasGlobalesNoTransferencia(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=TransferenciaConstantesFunciones.getArrayColumnasGlobalesTransferencia(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,TransferenciaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.transferenciasEliminados= new ArrayList<Transferencia>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessTransferencia();
		
				///*TransferenciaSessionBean*/this.transferenciaSessionBean=new TransferenciaSessionBean();
			
			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=TransferenciaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=TransferenciaConstantesFunciones.getClassesForeignKeysOfTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/transferencia."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			transferenciasAux= new ArrayList<Transferencia>();
			
				
			transferenciaLogic.setDatosCliente(this.datosCliente);
			transferenciaLogic.setDatosDeep(this.datosDeep);
			transferenciaLogic.setIsConDeep(true);
			
			
			transferenciaLogic.getTransferenciaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					transferenciaLogic.getTodosTransferencias(finalQueryGlobal,pagination);
					
					//transferenciaLogic.getTodosTransferenciasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(transferenciaLogic.getTransferencias()==null|| transferenciaLogic.getTransferencias().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							transferenciasAux= new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferenciaLogic.getTransferencias());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux= new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							transferenciaLogic.getTodosTransferencias(finalQueryGlobal+"",this.pagination);												
							
							//transferenciaLogic.getTodosTransferenciasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteTransferencias("Todos",transferenciaLogic.getTransferencias() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());					
							transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idTransferencia=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idTransferencia=this.idActual;
				
				} else if(this.idTransferenciaActual!=null && this.idTransferenciaActual!=0L) {
					idTransferencia=idTransferenciaActual;
				}
				
					
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndicePorId(idTransferencia);
				
				this.transferencias=new ArrayList<Transferencia>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					transferenciaLogic.getEntity(idTransferencia);
					
					//transferenciaLogic.getEntityWithConnection(idTransferencia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
					transferenciaLogic.getTransferencias().add(transferenciaLogic.getTransferencia());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencias=new ArrayList<Transferencia>();
					this.transferencias.add(transferencia);
				}
				
				if(transferenciaLogic.getTransferencia()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdAsientoContable",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdAsientoContable",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdEjercicio",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdEjercicio",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpleado")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdEmpleado",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdEmpleado",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdEmpresa",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdEmpresa",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoInventario")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoInventario(id_estado_inventarioFK_IdEstadoInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdEstadoInventario(finalQueryGlobal,pagination,id_estado_inventarioFK_IdEstadoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoInventario(id_estado_inventarioFK_IdEstadoInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoInventario(id_estado_inventarioFK_IdEstadoInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdEstadoInventario(finalQueryGlobal,pagination,id_estado_inventarioFK_IdEstadoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoInventario(id_estado_inventarioFK_IdEstadoInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoInventario(id_estado_inventarioFK_IdEstadoInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdEstadoInventario",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdEstadoInventario",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdModulo",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdModulo",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdPeriodo",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdPeriodo",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdSucursal",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdSucursal",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTransaccionModulo")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdTipoTransaccionModulo",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdTipoTransaccionModulo",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					transferenciaLogic.getTransferenciasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=transferenciaLogic.getTransferencias()==null||transferenciaLogic.getTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=transferencias==null|| transferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciasAux=new ArrayList<Transferencia>();
						transferenciasAux.addAll(transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciasAux=new ArrayList<Transferencia>();
							transferenciasAux.addAll(transferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							transferenciaLogic.getTransferenciasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TransferenciaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTransferencias("FK_IdUsuario",transferenciaLogic.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTransferencias("FK_IdUsuario",transferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaLogic.setTransferencias(new ArrayList<Transferencia>());
						transferenciaLogic.getTransferencias().addAll(transferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferencias=new ArrayList<Transferencia>();
							transferencias.addAll(transferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesTransferencia();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessTransferencia();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=transferenciaLogic.getTransferencias().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=transferencias.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=transferenciaLogic.getTransferencias().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=transferencias.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(Transferencia transferencia) {
		Boolean permite=true;
		
		if(this.transferencia.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=TransferenciaConstantesFunciones.getOrderByListaTransferencia();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=TransferenciaConstantesFunciones.getOrderByListaTransferencia();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Transferencia transferencia:transferenciaLogic.getTransferencias()) {
				if(transferencia.getsType().equals(Constantes2.S_TOTALES)) {
					transferenciaTotales=transferencia;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Transferencia transferencia:this.transferencias) {
				if(transferencia.getsType().equals(Constantes2.S_TOTALES)) {
					transferenciaTotales=transferencia;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.transferenciaAux=new Transferencia();
			this.transferenciaAux.setsType(Constantes2.S_TOTALES);
			this.transferenciaAux.setIsNew(false);
			this.transferenciaAux.setIsChanged(false);
			this.transferenciaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				TransferenciaConstantesFunciones.TotalizarValoresFilaTransferencia(this.transferenciaLogic.getTransferencias(),this.transferenciaAux);
				
				this.transferenciaLogic.getTransferencias().add(this.transferenciaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				TransferenciaConstantesFunciones.TotalizarValoresFilaTransferencia(this.transferencias,this.transferenciaAux);
				
				this.transferencias.add(this.transferenciaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		transferenciaTotales=new Transferencia();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.transferenciaLogic.getTransferencias().remove(transferenciaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.transferencias.remove(transferenciaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		transferenciaTotales=new Transferencia();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Transferencia transferencia:transferenciaLogic.getTransferencias()) {
				if(transferencia.getsType().equals(Constantes2.S_TOTALES)) {
					transferenciaTotales=transferencia;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				TransferenciaConstantesFunciones.TotalizarValoresFilaTransferencia(this.transferenciaLogic.getTransferencias(),transferenciaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Transferencia transferencia:this.transferencias) {
				if(transferencia.getsType().equals(Constantes2.S_TOTALES)) {
					transferenciaTotales=transferencia;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				TransferenciaConstantesFunciones.TotalizarValoresFilaTransferencia(this.transferencias,transferenciaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getTransferenciasFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdEstadoInventario()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoInventario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdTipoCambio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCambio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdTipoTransaccionModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTransaccionModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdTransportista()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransportista";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTransferenciasFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getTransferenciasFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdAsientoContable(String sFinalQuery,Long id_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdAsientoContable(sFinalQuery,this.pagination,id_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdEstadoInventario(String sFinalQuery,Long id_estado_inventario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdEstadoInventario(sFinalQuery,this.pagination,id_estado_inventario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdModulo(String sFinalQuery,Long id_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdModulo(sFinalQuery,this.pagination,id_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdTipoCambio(String sFinalQuery,Long id_tipo_cambio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdTipoCambio(sFinalQuery,this.pagination,id_tipo_cambio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdTipoTransaccionModulo(String sFinalQuery,Long id_tipo_transaccion_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdTipoTransaccionModulo(sFinalQuery,this.pagination,id_tipo_transaccion_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdTransportista(String sFinalQuery,Long id_transportista)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdTransportista(sFinalQuery,this.pagination,id_transportista);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTransferenciasFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciasFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosTransferencia() {
		this.isPermisoTodoTransferencia=false;
		this.isPermisoNuevoTransferencia=false;
		this.isPermisoActualizarTransferencia=false;
		this.isPermisoActualizarOriginalTransferencia=false;
		this.isPermisoEliminarTransferencia=false;
		this.isPermisoGuardarCambiosTransferencia=false;
		this.isPermisoConsultaTransferencia=false;
		this.isPermisoBusquedaTransferencia=false;
		this.isPermisoReporteTransferencia=false;		
		this.isPermisoOrdenTransferencia=false;		
		this.isPermisoPaginacionMedioTransferencia=false;		
		this.isPermisoPaginacionAltoTransferencia=false;
		this.isPermisoPaginacionTodoTransferencia=false;
		this.isPermisoCopiarTransferencia=false;		
		this.isPermisoVerFormTransferencia=false;		
		this.isPermisoDuplicarTransferencia=false;		
		this.isPermisoOrdenTransferencia=false;		
	}
	
	public void setPermisosUsuarioTransferencia(Boolean isPermiso) {
		this.isPermisoTodoTransferencia=isPermiso;
		this.isPermisoNuevoTransferencia=isPermiso;
		this.isPermisoActualizarTransferencia=isPermiso;
		this.isPermisoActualizarOriginalTransferencia=isPermiso;
		this.isPermisoEliminarTransferencia=isPermiso;
		this.isPermisoGuardarCambiosTransferencia=isPermiso;
		this.isPermisoConsultaTransferencia=isPermiso;
		this.isPermisoBusquedaTransferencia=isPermiso;
		this.isPermisoReporteTransferencia=isPermiso;
		this.isPermisoOrdenTransferencia=isPermiso;		
		this.isPermisoPaginacionMedioTransferencia=isPermiso;		
		this.isPermisoPaginacionAltoTransferencia=isPermiso;		
		this.isPermisoPaginacionTodoTransferencia=isPermiso;		
		this.isPermisoCopiarTransferencia=isPermiso;		
		this.isPermisoVerFormTransferencia=isPermiso;		
		this.isPermisoDuplicarTransferencia=isPermiso;
		this.isPermisoOrdenTransferencia=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioTransferencia(Boolean isPermiso) {
		//this.isPermisoTodoTransferencia=isPermiso;
		this.isPermisoNuevoTransferencia=isPermiso;
		this.isPermisoActualizarTransferencia=isPermiso;
		this.isPermisoActualizarOriginalTransferencia=isPermiso;
		this.isPermisoEliminarTransferencia=isPermiso;
		this.isPermisoGuardarCambiosTransferencia=isPermiso;
		//this.isPermisoConsultaTransferencia=isPermiso;
		//this.isPermisoBusquedaTransferencia=isPermiso;
		//this.isPermisoReporteTransferencia=isPermiso;
		//this.isPermisoOrdenTransferencia=isPermiso;		
		//this.isPermisoPaginacionMedioTransferencia=isPermiso;		
		//this.isPermisoPaginacionAltoTransferencia=isPermiso;		
		//this.isPermisoPaginacionTodoTransferencia=isPermiso;		
		//this.isPermisoCopiarTransferencia=isPermiso;		
		//this.isPermisoDuplicarTransferencia=isPermiso;
		//this.isPermisoOrdenTransferencia=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioTransferenciaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetalleTransferenciaConstantesFunciones.SNOMBREOPCION);
		
		if(TransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetalleTransferencia=false;
		this.isTienePermisosDetalleTransferencia=this.verificarGetPermisosUsuarioOpcionTransferenciaClaseRelacionada(this.opcionsRelacionadas,DetalleTransferenciaConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebTransferencia(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioTransferenciaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetalleTransferencia=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioTransferenciaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionTransferenciaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioTransferenciaClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetalleTransferencia && this.jInternalFrameDetalleFormTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.remove(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioTransferencia() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(TransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.transferenciaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, TransferenciaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoTransferencia=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarTransferencia=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalTransferencia=this.isPermisoActualizarTransferencia;
			this.isPermisoEliminarTransferencia=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosTransferencia=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaTransferencia=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaTransferencia=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoTransferencia=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteTransferencia=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenTransferencia=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioTransferencia=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoTransferencia=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoTransferencia=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarTransferencia=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormTransferencia=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarTransferencia=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenTransferencia=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.transferenciaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosTransferencia.setToolTipText(this.jTableDatosTransferencia.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioTransferencia(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioTransferencia(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(TransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(TransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioTransferencia() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetalleTransferencia && this.transferenciaConstantesFunciones.mostrarDetalleTransferenciaTransferencia && !TransferenciaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Transferencia");
			reporte.setsDescripcion("Detalle Transferencia");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyTransferenciaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.modulosForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.tipocambiosForeignKey=new ArrayList();
				this.estadoinventariosForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.transportistasForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.tipotransaccionmodulosForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyTransferenciaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(TransferenciaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyTransferenciaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCambioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadoinventariosForeignKey==null||this.estadoinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoInventarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoInventarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportistaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransportistaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyTransferenciaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			TransferenciaParameterReturnGeneral transferenciaReturnGeneral=new TransferenciaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_empresaTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_empresaTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_sucursalTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_sucursalTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_moduloTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_moduloTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_ejercicioTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_ejercicioTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_periodoTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_periodoTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_anioTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_anioTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_mesTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_mesTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_usuarioTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_usuarioTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_monedaTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_monedaTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalTipoCambio="";

				if(((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_tipo_cambioTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_tipo_cambioTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCambio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCambio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCambio, "");
						finalQueryGlobalTipoCambio+=TipoCambioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCambio=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidTipoCambioActual();
					}
				} else {
					finalQueryGlobalTipoCambio="NONE";
				}


				String finalQueryGlobalEstadoInventario="";

				if(((this.estadoinventariosForeignKey==null||this.estadoinventariosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_estado_inventarioTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_estado_inventarioTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoInventarioConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoInventario, "");
						finalQueryGlobalEstadoInventario+=EstadoInventarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoInventario=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidEstadoInventarioActual();
					}
				} else {
					finalQueryGlobalEstadoInventario="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_formatoTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_formatoTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalTransportista="";

				if(((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_transportistaTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_transportistaTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransportista=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

						finalQueryGlobalTransportista=Funciones.GetFinalQueryAppend(finalQueryGlobalTransportista, "");
						finalQueryGlobalTransportista+=TransportistaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransportista=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidTransportistaActual();
					}
				} else {
					finalQueryGlobalTransportista="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_empleadoTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_empleadoTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalTipoTransaccionModulo="";

				if(((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_tipo_transaccion_moduloTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_tipo_transaccion_moduloTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTransaccionModulo, "");
						finalQueryGlobalTipoTransaccionModulo+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTransaccionModulo=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidTipoTransaccionModuloActual();
					}
				} else {
					finalQueryGlobalTipoTransaccionModulo="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.transferenciaConstantesFunciones.cargarid_asiento_contableTransferencia)
					 || (this.esRecargarFks && this.transferenciaConstantesFunciones.cargarid_asiento_contableTransferencia)) {

					if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+transferenciaSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				transferenciaReturnGeneral=transferenciaLogic.cargarCombosLoteForeignKeyTransferencia(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalModulo,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalUsuario,finalQueryGlobalMoneda,finalQueryGlobalTipoCambio,finalQueryGlobalEstadoInventario,finalQueryGlobalFormato,finalQueryGlobalTransportista,finalQueryGlobalEmpleado,finalQueryGlobalTipoTransaccionModulo,finalQueryGlobalAsientoContable);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=transferenciaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=transferenciaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=transferenciaReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=transferenciaReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=transferenciaReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=transferenciaReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=transferenciaReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=transferenciaReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=transferenciaReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalTipoCambio.equals("NONE")) {
				this.tipocambiosForeignKey=transferenciaReturnGeneral.gettipocambiosForeignKey();
			}

			if(!finalQueryGlobalEstadoInventario.equals("NONE")) {
				this.estadoinventariosForeignKey=transferenciaReturnGeneral.getestadoinventariosForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=transferenciaReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalTransportista.equals("NONE")) {
				this.transportistasForeignKey=transferenciaReturnGeneral.gettransportistasForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=transferenciaReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalTipoTransaccionModulo.equals("NONE")) {
				this.tipotransaccionmodulosForeignKey=transferenciaReturnGeneral.gettipotransaccionmodulosForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=transferenciaReturnGeneral.getasientocontablesForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyTransferencia()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyTipoCambio();
			this.addItemDefectoCombosForeignKeyEstadoInventario();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyTransportista();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
			this.addItemDefectoCombosForeignKeyAsientoContable();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCambio()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				TipoCambio tipocambio=new TipoCambio();
				TipoCambioConstantesFunciones.setTipoCambioDescripcion(tipocambio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocambio.setId(null);

				if(!TipoCambioConstantesFunciones.ExisteEnLista(this.tipocambiosForeignKey,tipocambio,true)) {

					this.tipocambiosForeignKey.add(0,tipocambio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoInventario()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoInventario()) {
				EstadoInventario estadoinventario=new EstadoInventario();
				EstadoInventarioConstantesFunciones.setEstadoInventarioDescripcion(estadoinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadoinventario.setId(null);

				if(!EstadoInventarioConstantesFunciones.ExisteEnLista(this.estadoinventariosForeignKey,estadoinventario,true)) {

					this.estadoinventariosForeignKey.add(0,estadoinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransportista()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				Transportista transportista=new Transportista();
				TransportistaConstantesFunciones.setTransportistaDescripcion(transportista,Constantes.SMENSAJE_ESCOJA_OPCION);
				transportista.setId(null);

				if(!TransportistaConstantesFunciones.ExisteEnLista(this.transportistasForeignKey,transportista,true)) {

					this.transportistasForeignKey.add(0,transportista);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTransaccionModulo()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				TipoTransaccionModulo tipotransaccionmodulo=new TipoTransaccionModulo();
				TipoTransaccionModuloConstantesFunciones.setTipoTransaccionModuloDescripcion(tipotransaccionmodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotransaccionmodulo.setId(null);

				if(!TipoTransaccionModuloConstantesFunciones.ExisteEnLista(this.tipotransaccionmodulosForeignKey,tipotransaccionmodulo,true)) {

					this.tipotransaccionmodulosForeignKey.add(0,tipotransaccionmodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.transferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyTransferencia()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyTransferencia(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyTransferencia()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualModuloForeignKey(this.moduloActual.getId(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.transferencia.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.transferencia.setfecha_entrega(this.parametroGeneralUsuario.getfecha_sistema());
				this.transferencia.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyTransferencia();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyTransferencia(Transferencia transferencia)throws Exception {	
		try {
			
			this.setActualTipoCambioForeignKey(transferencia.getid_tipo_cambio(),false,"Formulario");
			this.setActualEstadoInventarioForeignKey(transferencia.getid_estado_inventario(),false,"Formulario");
			this.setActualFormatoForeignKey(transferencia.getid_formato(),false,"Formulario");
			this.setActualTransportistaForeignKey(transferencia.getid_transportista(),false,"Formulario");
			this.setActualEmpleadoForeignKey(transferencia.getid_empleado(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(transferencia.getid_tipo_transaccion_modulo(),false,"Formulario");
			this.setActualAsientoContableForeignKey(transferencia.getid_asiento_contable(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyTransferencia(Transferencia transferencia,String sTipoEvento)throws Exception {	
		try {
			
			

				if(transferencia.getTipoCambio()!=null && !sTipoEvento.equals("id_tipo_cambioTransferencia")) { //sTipoEvento Evita Bucle Infinito

					this.tipocambiosForeignKey=new ArrayList<TipoCambio>();
					this.tipocambiosForeignKey.add(transferencia.getTipoCambio());

					this.addItemDefectoCombosForeignKeyTipoCambio();
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				if(transferencia.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoTransferencia")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(transferencia.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				if(transferencia.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableTransferencia")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(transferencia.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyTransferencia()throws Exception {	
		try {
			
			this.setActualTipoCambioForeignKey(this.transferenciaConstantesFunciones.getid_tipo_cambio(),false,"Formulario");
			this.setActualEstadoInventarioForeignKey(this.transferenciaConstantesFunciones.getid_estado_inventario(),false,"Formulario");
			this.setActualFormatoForeignKey(this.transferenciaConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualTransportistaForeignKey(this.transferenciaConstantesFunciones.getid_transportista(),false,"Formulario");
			this.setActualEmpleadoForeignKey(this.transferenciaConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(this.transferenciaConstantesFunciones.getid_tipo_transaccion_modulo(),false,"Formulario");
			this.setActualAsientoContableForeignKey(this.transferenciaConstantesFunciones.getid_asiento_contable(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyTransferencia()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormTransferencia!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormTransferencia!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyTransferencia()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyTransferencia()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroTransferencia()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyTransferencia()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameTipoCambiosForeignKey("Todos");
			this.cargarCombosFrameEstadoInventariosForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameTransportistasForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyTransferencia(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyTransferencia()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia!=null && this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	
































	
	

	public TransferenciaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public TransferenciaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public TransferenciaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.transferenciaSessionBean=new TransferenciaSessionBean(); 
		this.transferenciaConstantesFunciones=new TransferenciaConstantesFunciones(); 
		this.transferenciaBean=new Transferencia();//(this.transferenciaConstantesFunciones); 		
		this.transferenciaReturnGeneral=new TransferenciaParameterReturnGeneral(); 
		
		this.transferenciaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.transferenciaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public TransferenciaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public TransferenciaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public TransferenciaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessTransferencia(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.transferenciaConstantesFunciones=new TransferenciaConstantesFunciones(); 
			this.transferenciaBean=new Transferencia();//this.transferenciaConstantesFunciones); 			
			this.transferenciaReturnGeneral=new TransferenciaParameterReturnGeneral(); 
		
			TransferenciaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Transferencia Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.transferencia=new Transferencia();
			this.transferencias = new ArrayList<Transferencia>();
			this.transferenciasAux = new ArrayList<Transferencia>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic=new TransferenciaLogic();
				this.transferenciaLogic.getNewConnexionToDeep("");
			}
			
			//this.transferenciaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.transferenciaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormTransferencia);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoTransferencia);	
					}
					
					if(this.jInternalFrameImportacionTransferencia!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionTransferencia);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByTransferencia!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByTransferencia);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormTransferencia!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormTransferencia);
				this.jInternalFrameDetalleFormTransferencia.setVisible(false);
				this.jInternalFrameDetalleFormTransferencia.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoTransferencia);
					this.jInternalFrameReporteDinamicoTransferencia.setVisible(false);
					this.jInternalFrameReporteDinamicoTransferencia.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionTransferencia!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionTransferencia);
					this.jInternalFrameImportacionTransferencia.setVisible(false);
					this.jInternalFrameImportacionTransferencia.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByTransferencia!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByTransferencia);
					this.jInternalFrameOrderByTransferencia.setVisible(false);
					this.jInternalFrameOrderByTransferencia.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idTransferenciaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=TransferenciaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.transferenciaReturnGeneral=new TransferenciaParameterReturnGeneral();
			
			this.transferenciaParameterGeneral=new TransferenciaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.transferenciaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(TransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.transferenciaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetalleTransferenciaConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,TransferenciaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.transferenciaSessionBean.getEsGuardarRelacionado(),this.transferenciaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,TransferenciaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.transferenciaSessionBean.getEsGuardarRelacionado(),this.transferenciaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoTransferencia=false;
			this.isVisibilidadCeldaDuplicarTransferencia=true;
			this.isVisibilidadCeldaCopiarTransferencia=true;
			this.isVisibilidadCeldaVerFormTransferencia=true;
			this.isVisibilidadCeldaOrdenTransferencia=true;
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;
			this.isVisibilidadCeldaModificarTransferencia=false;
			this.isVisibilidadCeldaActualizarTransferencia=false;
			this.isVisibilidadCeldaEliminarTransferencia=false;
			this.isVisibilidadCeldaCancelarTransferencia=false;
			this.isVisibilidadCeldaGuardarTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoInventario=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoCambio=true;
			this.isVisibilidadFK_IdTipoTransaccionModulo=true;
			this.isVisibilidadFK_IdTransportista=true;
			this.isVisibilidadFK_IdUsuario=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosTransferencia();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioTransferencia(false);
			
			this.setPermisosUsuarioTransferencia();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.transferenciaSessionBean.getEsGuardarRelacionado() 
				|| (this.transferenciaSessionBean.getEsGuardarRelacionado() && this.transferenciaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioTransferenciaClasesRelacionadas();
			}
			
			if(this.transferenciaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioTransferenciaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosTransferencia();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualTransferencia();
			}
			
			if(!this.isPermisoBusquedaTransferencia) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasTransferencia.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioTransferencia,this.isPermisoPaginacionMedioTransferencia,this.isPermisoPaginacionTodoTransferencia);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(TransferenciaConstantesFunciones.getTiposSeleccionarTransferencia());
				
				this.tiposColumnasSelect=TransferenciaConstantesFunciones.getTiposSeleccionarTransferencia(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectTransferencia();				
				//this.tiposRelacionesSelect=TransferenciaConstantesFunciones.getTiposRelacionesTransferencia(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioTransferencia();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioTransferencia(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioTransferencia(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesTransferencia() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detalletransferenciaLogic=new DetalleTransferenciaLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.moduloLogic=new ModuloLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.monedaLogic=new MonedaLogic();
			this.tipocambioLogic=new TipoCambioLogic();
			this.estadoinventarioLogic=new EstadoInventarioLogic();
			this.formatoLogic=new FormatoLogic();
			this.transportistaLogic=new TransportistaLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				transferenciaImplementable= (TransferenciaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+TransferenciaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				transferenciaImplementableHome= (TransferenciaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+TransferenciaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.transferencias= new ArrayList<Transferencia>();
			this.transferenciasEliminados= new ArrayList<Transferencia>();
						
			this.isEsNuevoTransferencia=false;
			this.esParaAccionDesdeFormularioTransferencia=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idTipoCambioActual=0L;
			this.idEmpleadoActual=0L;
			this.idAsientoContableActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>() ;
			this.estadoinventariosForeignKey=new ArrayList<EstadoInventario>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.transportistasForeignKey=new ArrayList<Transportista>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyTransferencia(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroTransferencia();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			TransferenciaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=TransferenciaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingTransferencia(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormTransferencia!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioTransferencia();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioTransferencia();
			}
			
			TransferenciaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasTransferencia.getTabCount(); i++) {
					this.jTabbedPaneBusquedasTransferencia.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasTransferencia.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessTransferencia(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga Transferencia: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectTransferencia() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesTransferencia")) {
				iIndex=this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Transferencias")) {
					if(!DetalleTransferenciaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessTransferencia();

						this.cargarParteTabPanelRelacionadaDetalleTransferencia(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessTransferencia();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetalleTransferencia(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormTransferencia.cargarSessionConBeanSwingJInternalFrameDetalleTransferencia(false,true,iIndex);
		this.jButtonDetalleTransferenciaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleTransferencia();

		//this.jTabbedPaneRelacionesTransferencia.updateUI();
		//this.jTabbedPaneRelacionesTransferencia.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesTransferencia.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetalleTransferencia")) {
				int row=this.jTableDatosTransferencia.getSelectedRow();
				jButtonDetalleTransferenciaActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Detalle Transferencia")) {

					if(this.isTienePermisosDetalleTransferencia && this.transferenciaConstantesFunciones.mostrarDetalleTransferenciaTransferencia && !TransferenciaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Transferencias"+"("+DetalleTransferenciaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Transferencias");

						if(transferenciaConstantesFunciones.resaltarDetalleTransferenciaTransferencia!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(transferenciaConstantesFunciones.resaltarDetalleTransferenciaTransferencia);
						}

						jmenuItem.setEnabled(this.transferenciaConstantesFunciones.activarDetalleTransferenciaTransferencia);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleTransferencia"));

						

						this.jInternalFrameDetalleFormTransferencia.jmenuDetalleTransferencia.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyTransferencia(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyTransferencia(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyTransferencia(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyTransferenciaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyTransferencia();
		
		this.cargarCombosFrameForeignKeyTransferencia();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyTransferencia();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyTransferencia();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoInventario();
				this.cargarCombosFrameEstadoInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoInventario(this.estadoinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportista(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransportista(this.transportistasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoTransaccionModulo(this.tipotransaccionmodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoTransferenciaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.transferenciaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			
			if(jTableDatosTransferencia.getRowCount()>=1) {
				jTableDatosTransferencia.removeRowSelectionInterval(0, jTableDatosTransferencia.getRowCount()-1);						
			}
			
			this.isEsNuevoTransferencia=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoTransferencia(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesTransferencia(true);			
			//this.transferencia=new Transferencia();
			//this.transferencia.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesTransferencia(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualTransferencia() ;
			
			if(TransferenciaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleTransferencia(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.transferencia);	
			this.actualizarInformacion("INFO_PADRE",false,this.transferencia);				
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			if(this.transferenciaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar Transferencia: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarTransferenciaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosTransferencia.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosTransferencia.getSelectedRows().length;			
			}
			
			transferenciasSeleccionados=this.getTransferenciasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoTransferencia--;			
				//Transferencia transferenciaAux= new Transferencia();			
				//transferenciaAux.setId(this.iIdNuevoTransferencia);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//Transferencia transferenciaOrigen=new Transferencia();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(Transferencia transferenciaOrigen : transferenciasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							transferenciaOrigen =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							transferenciaOrigen =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaTransferencia();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.transferencia.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosTransferencia(transferenciaOrigen,this.transferencia,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.transferenciaLogic.getTransferencias().add(this.transferenciaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.transferencias.add(this.transferenciaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaTransferencia(false);
				
				this.jTableDatosTransferencia.setRowSelectionInterval(this.getIndiceNuevoTransferencia(), this.getIndiceNuevoTransferencia());
				
				int iLastRow =  this.jTableDatosTransferencia.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosTransferencia.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosTransferencia.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaTransferencia(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();									
		
			Transferencia transferenciaOrigen=new Transferencia();
			Transferencia transferenciaDestino=new Transferencia();
				
			transferenciasSeleccionados=this.getTransferenciasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosTransferencia.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || transferenciasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosTransferencia.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaOrigen =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						transferenciaOrigen =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						transferenciaDestino =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						transferenciaDestino =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				transferenciaOrigen =transferenciasSeleccionados.get(0);
				transferenciaDestino =transferenciasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosTransferencia(transferenciaOrigen,transferenciaDestino,true,false);
				
				transferenciaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(transferenciaDestino,transferenciaLogic.getTransferencias());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(transferenciaDestino,transferencias);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaTransferencia(false);
				
				//this.jTableDatosTransferencia.setRowSelectionInterval(this.getIndiceNuevoTransferencia(), this.getIndiceNuevoTransferencia());
				
				int iLastRow =  this.jTableDatosTransferencia.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosTransferencia.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosTransferencia.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaTransferencia(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormTransferencia.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesTransferencia.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasTransferencia.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesTransferencia.setVisible(!isVisible);
			this.jPanelPaginacionTransferencia.setVisible(!isVisible);
			this.jPanelAccionesTransferencia.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameTransferencia();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoTransferencia();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionTransferencia();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByTransferencia();
			
			this.abrirFrameOrderByTransferencia();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByTransferencia();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleTransferencia(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormTransferencia);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormTransferencia.isMaximum()) {
					this.jInternalFrameDetalleFormTransferencia.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormTransferencia.setSize(this.jInternalFrameDetalleFormTransferencia.iWidthFormulario,this.jInternalFrameDetalleFormTransferencia.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormTransferencia.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormTransferencia.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormTransferencia.isMaximum()) {
						this.jInternalFrameDetalleFormTransferencia.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormTransferencia.jContentPaneDetalleTransferencia.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormTransferencia.jContentPaneDetalleTransferencia.getWidth(),TransferenciaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormTransferencia.jContentPaneDetalleTransferencia.getWidth(),TransferenciaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormTransferencia.jContentPaneDetalleTransferencia.getWidth(),TransferenciaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetalleTransferenciaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleTransferencia();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormTransferencia.setVisible(true);
	        this.jInternalFrameDetalleFormTransferencia.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByTransferencia() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByTransferencia==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByTransferencia=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByTransferencia,false,this);
				} else {
					this.jInternalFrameOrderByTransferencia=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByTransferencia,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByTransferencia);
				this.jInternalFrameOrderByTransferencia.setVisible(false);
				this.jInternalFrameOrderByTransferencia.setSelected(false);
				
				this.jInternalFrameOrderByTransferencia.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByTransferencia"));
				
				this.inicializarActualizarBindingTablaOrderByTransferencia();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionTransferencia() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionTransferencia==null) {
				
				this.jInternalFrameImportacionTransferencia=new ImportacionJInternalFrame(TransferenciaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionTransferencia);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionTransferencia);
				this.jInternalFrameImportacionTransferencia.setVisible(false);
				this.jInternalFrameImportacionTransferencia.setSelected(false);


				this.jInternalFrameImportacionTransferencia.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionTransferencia"));
				this.jInternalFrameImportacionTransferencia.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionTransferencia"));
				this.jInternalFrameImportacionTransferencia.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionTransferencia"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoTransferencia() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoTransferencia==null) {
				this.jInternalFrameReporteDinamicoTransferencia=new ReporteDinamicoJInternalFrame(TransferenciaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoTransferencia);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoTransferencia);
				this.jInternalFrameReporteDinamicoTransferencia.setVisible(false);
				this.jInternalFrameReporteDinamicoTransferencia.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoTransferencia.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoTransferencia"));
				this.jInternalFrameReporteDinamicoTransferencia.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoTransferencia"));
				this.jInternalFrameReporteDinamicoTransferencia.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoTransferencia"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualTransferencia();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetalleTransferencia() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.jScrollPanelDatosDetalleTransferencia.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormTransferencia.jContentPaneDetalleTransferencia.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.jScrollPanelDatosDetalleTransferencia.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.jScrollPanelDatosDetalleTransferencia.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.jScrollPanelDatosDetalleTransferencia.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleTransferencia() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormTransferencia);
			
	       	this.jInternalFrameDetalleFormTransferencia.setVisible(false);
	        this.jInternalFrameDetalleFormTransferencia.setSelected(false);
			
			//this.jInternalFrameDetalleFormTransferencia.dispose();
			//this.jInternalFrameDetalleFormTransferencia=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoTransferencia() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoTransferencia.setVisible(true);
	        this.jInternalFrameReporteDinamicoTransferencia.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionTransferencia() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionTransferencia.setVisible(true);
	        this.jInternalFrameImportacionTransferencia.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByTransferencia() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByTransferencia.setVisible(true);
	        this.jInternalFrameOrderByTransferencia.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByTransferencia() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByTransferencia.setVisible(false);
	        this.jInternalFrameOrderByTransferencia.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoTransferencia() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoTransferencia.setVisible(false);
	        this.jInternalFrameReporteDinamicoTransferencia.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionTransferencia() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionTransferencia.setVisible(false);
	        this.jInternalFrameImportacionTransferencia.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarTransferencia(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarTransferencia(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesTransferencia(true);
			//this.isEsNuevoTransferencia=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesTransferencia("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesTransferencia(false) ;
			
			if(transferenciaSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaSessionBean.getEsGuardarRelacionado() && DetalleTransferenciaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleTransferenciaActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(TransferenciaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleTransferencia(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualTransferencia(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaTransferenciaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarTransferencia(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesTransferencia(true);
			//this.isEsNuevoTransferencia=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.transferencia.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesTransferencia("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesTransferencia(false) ;
			
			if(TransferenciaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleTransferencia(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualTransferencia(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("TipoCambio")) {
				if(!this.transferenciaConstantesFunciones.cargarid_tipo_cambioTransferencia) {
					this.cargarCombosTipoCambiosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingTransferencia(false,false);
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_tipo_cambio (id);

				this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

			}
			
			if(sType.equals("Empleado")) {
				if(!this.transferenciaConstantesFunciones.cargarid_empleadoTransferencia) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingTransferencia(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
			
			if(sType.equals("AsientoContable")) {
				if(!this.transferenciaConstantesFunciones.cargarid_asiento_contableTransferencia) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingTransferencia(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
						
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaTipoCambio(List<TipoCambio> tipocambiosForeignKey)throws Exception{
		TableColumn tableColumnTipoCambio=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO));
		TableCellEditor tableCellEditorTipoCambio =tableColumnTipoCambio.getCellEditor();

		TipoCambioTableCell tipocambioTableCellFk=(TipoCambioTableCell)tableCellEditorTipoCambio;

		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.settipocambiosForeignKey(tipocambiosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocambioTableCellFk.setRowActual(intSelectedRow);
			//tipocambioTableCellFk.settipocambiosForeignKeyActual(tipocambiosForeignKey);
		//}


		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.RecargarTipoCambiosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoInventario(List<EstadoInventario> estadoinventariosForeignKey)throws Exception{
		TableColumn tableColumnEstadoInventario=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO));
		TableCellEditor tableCellEditorEstadoInventario =tableColumnEstadoInventario.getCellEditor();

		EstadoInventarioTableCell estadoinventarioTableCellFk=(EstadoInventarioTableCell)tableCellEditorEstadoInventario;

		if(estadoinventarioTableCellFk!=null) {
			estadoinventarioTableCellFk.setestadoinventariosForeignKey(estadoinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadoinventarioTableCellFk.setRowActual(intSelectedRow);
			//estadoinventarioTableCellFk.setestadoinventariosForeignKeyActual(estadoinventariosForeignKey);
		//}


		if(estadoinventarioTableCellFk!=null) {
			estadoinventarioTableCellFk.RecargarEstadoInventariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransportista(List<Transportista> transportistasForeignKey)throws Exception{
		TableColumn tableColumnTransportista=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA));
		TableCellEditor tableCellEditorTransportista =tableColumnTransportista.getCellEditor();

		TransportistaTableCell transportistaTableCellFk=(TransportistaTableCell)tableCellEditorTransportista;

		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.settransportistasForeignKey(transportistasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transportistaTableCellFk.setRowActual(intSelectedRow);
			//transportistaTableCellFk.settransportistasForeignKeyActual(transportistasForeignKey);
		//}


		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.RecargarTransportistasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTransaccionModulo(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoTransaccionModulo=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO));
		TableCellEditor tableCellEditorTipoTransaccionModulo =tableColumnTipoTransaccionModulo.getCellEditor();

		TipoTransaccionModuloTableCell tipotransaccionmoduloTableCellFk=(TipoTransaccionModuloTableCell)tableCellEditorTipoTransaccionModulo;

		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKey(tipotransaccionmodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotransaccionmoduloTableCellFk.setRowActual(intSelectedRow);
			//tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKeyActual(tipotransaccionmodulosForeignKey);
		//}


		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.RecargarTipoTransaccionModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_tipo_cambio (Long id) throws Exception {
		this.setActualTipoCambioForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesTransferencia(false);
			
			//if(!this.isEsNuevoTransferencia) {								
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				
			}
			
			if(this.permiteMantenimiento(this.transferencia)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoTransferencia=true;
					this.inicializarActualizarBindingTablaTransferencia(false);
					this.isEsNuevoTransferencia=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoTransferencia=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoTransferencia=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesTransferencia(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualTransferencia(false);
				
				this.habilitarDeshabilitarControlesTransferencia(false);
			
												
				
				if(TransferenciaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleTransferencia();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoTransferenciaActionPerformed(evt,transferenciaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualTransferencia(this.transferencia,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,transferenciaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.transferencia.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				this.transferencia.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				this.transferencia.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.transferencia)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((TransferenciaModel) this.jTableDatosTransferencia.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoTransferencia=true;
				this.inicializarActualizarBindingTablaTransferencia(false);
				this.isEsNuevoTransferencia=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesTransferencia(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualTransferencia(false);
				
				this.habilitarDeshabilitarControlesTransferencia(false);
				
				
				
				if(TransferenciaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleTransferencia();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarTransferenciaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosTransferencia.getRowCount()>=1) {
				jTableDatosTransferencia.removeRowSelectionInterval(0, jTableDatosTransferencia.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesTransferencia(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaTransferencia(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesTransferencia(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualTransferencia(false) ;
			
			this.isEsNuevoTransferencia=false;
			
			if(TransferenciaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleTransferencia();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingTransferencia(false);
				
				//SI ES MANUAL
				if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualTransferencia();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoTransferencia--;			
			//Transferencia transferenciaAux= new Transferencia();			
			//transferenciaAux.setId(this.iIdNuevoTransferencia);
			
			if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaTransferencia();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
			
			this.transferencia.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.transferenciaLogic.getTransferencias().add(this.transferenciaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.transferencias.add(this.transferenciaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaTransferencia(false);
			
			this.jTableDatosTransferencia.setRowSelectionInterval(this.getIndiceNuevoTransferencia(), this.getIndiceNuevoTransferencia());
			
			int iLastRow =  this.jTableDatosTransferencia.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosTransferencia.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosTransferencia.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaTransferencia(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingTransferencia(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingTransferencia(false);
			
			//SI ES MANUAL
			if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualTransferencia();
			}
			
			//this.abrirFrameTreeTransferencia();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionTransferenciaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE TransferenciaS ?", "MANTENIMIENTO DE Transferencia", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionTransferencia.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralTransferencia();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.transferenciaReturnGeneral=transferenciaLogic.procesarImportacionTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.transferenciaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarTransferenciaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionTransferenciaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionTransferencia.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionTransferencia.setFileImportacion(this.jInternalFrameImportacionTransferencia.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionTransferencia.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionTransferencia.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionTransferencia.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionTransferencia.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		

		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("TransferenciaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"TransferenciaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteTransferencias("Todos",transferenciasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case TransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAENTREGA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEntrega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEntrega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEntrega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEntrega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroSecuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroSecuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroSecuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroSecuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCambio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCambio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCambio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCambio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transportista_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transportista_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transportista_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transportista_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rcentajeDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rcentajeDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rcentajeDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rcentajeDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_SUMAN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_man_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_man_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_man_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_man_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_STOCK:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ock_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ock_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ock_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ock_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALOTRO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talOtro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talOtro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talOtro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talOtro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_timoCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_timoCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_timoCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_timoCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROITEMS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroItems_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroItems_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroItems_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroItems_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_RETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_FLETE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ete_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ete_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ete_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ete_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IMPUESTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_puesto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_puesto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_puesto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_puesto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTransaccionModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTransaccionModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTransaccionModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTransaccionModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TransferenciaConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoTransferencia.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case TransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAENTREGA:
					sNombreCampoCategoria="fecha_entrega";
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					sNombreCampoCategoria="numero_secuencial";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoria="id_tipo_cambio";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO:
					sNombreCampoCategoria="id_estado_inventario";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoria="id_transportista";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case TransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					sNombreCampoCategoria="porcentaje_descuento";
					break;

				case TransferenciaConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoria="suman";
					break;

				case TransferenciaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO:
					sNombreCampoCategoria="valor_descuento";
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO:
					sNombreCampoCategoria="total_descuento";
					break;

				case TransferenciaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case TransferenciaConstantesFunciones.LABEL_STOCK:
					sNombreCampoCategoria="stock";
					break;

				case TransferenciaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALOTRO:
					sNombreCampoCategoria="total_otro";
					break;

				case TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO:
					sNombreCampoCategoria="ultimo_costo";
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROITEMS:
					sNombreCampoCategoria="numero_items";
					break;

				case TransferenciaConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoria="retencion";
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case TransferenciaConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoria="flete";
					break;

				case TransferenciaConstantesFunciones.LABEL_IMPUESTO:
					sNombreCampoCategoria="impuesto";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoria="id_tipo_transaccion_modulo";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoria="numero_comprobante";
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case TransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAENTREGA:
					sNombreCampoCategoriaValor="fecha_entrega";
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					sNombreCampoCategoriaValor="numero_secuencial";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoriaValor="id_tipo_cambio";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO:
					sNombreCampoCategoriaValor="id_estado_inventario";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoriaValor="id_transportista";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case TransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					sNombreCampoCategoriaValor="porcentaje_descuento";
					break;

				case TransferenciaConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoriaValor="suman";
					break;

				case TransferenciaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO:
					sNombreCampoCategoriaValor="valor_descuento";
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO:
					sNombreCampoCategoriaValor="total_descuento";
					break;

				case TransferenciaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case TransferenciaConstantesFunciones.LABEL_STOCK:
					sNombreCampoCategoriaValor="stock";
					break;

				case TransferenciaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALOTRO:
					sNombreCampoCategoriaValor="total_otro";
					break;

				case TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO:
					sNombreCampoCategoriaValor="ultimo_costo";
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROITEMS:
					sNombreCampoCategoriaValor="numero_items";
					break;

				case TransferenciaConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoriaValor="retencion";
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case TransferenciaConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoriaValor="flete";
					break;

				case TransferenciaConstantesFunciones.LABEL_IMPUESTO:
					sNombreCampoCategoriaValor="impuesto";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoriaValor="id_tipo_transaccion_modulo";
					break;

				case TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_comprobante";
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case TransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAENTREGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F Entrega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_entrega");
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_secuencial");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T Cambio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cambio");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_inventario");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transportista",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transportista");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case TransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"porcentaje_descuento");
					break;

				case TransferenciaConstantesFunciones.LABEL_SUMAN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Suman",sNombreCampoCategoria,sNombreCampoCategoriaValor,"suman");
					break;

				case TransferenciaConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_descuento");
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_descuento");
					break;

				case TransferenciaConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case TransferenciaConstantesFunciones.LABEL_STOCK:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Stock",sNombreCampoCategoria,sNombreCampoCategoriaValor,"stock");
					break;

				case TransferenciaConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALOTRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Otro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_otro");
					break;

				case TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ultimo Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ultimo_costo");
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROITEMS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Items",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_items");
					break;

				case TransferenciaConstantesFunciones.LABEL_RETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"retencion");
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case TransferenciaConstantesFunciones.LABEL_FLETE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Flete",sNombreCampoCategoria,sNombreCampoCategoriaValor,"flete");
					break;

				case TransferenciaConstantesFunciones.LABEL_IMPUESTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Impuesto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"impuesto");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Transaccion Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_transaccion_modulo");
					break;

				case TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_comprobante");
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoTransferenciaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"transferencia";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("Transferencias");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case TransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHAENTREGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHAENTREGA);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getfecha_entrega());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getnumero_secuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.gettipocambio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getestadoinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.gettransportista_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getporcentaje_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_SUMAN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_SUMAN);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getsuman());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_ICE);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getvalor_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.gettotal_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IVA);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_STOCK:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_STOCK);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getstock());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTALOTRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTALOTRO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.gettotal_otro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getultimo_costo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROITEMS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROITEMS);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getnumero_items());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_RETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_RETENCION);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getretencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_FLETE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FLETE);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getflete());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IMPUESTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IMPUESTO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getimpuesto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.gettipotransaccionmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getnumero_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TransferenciaConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(Transferencia transferencia:transferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(transferencia.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelTransferencia(row);				
			//	iRow++;
			//}				
			
			//for(Transferencia transferenciaAux:transferenciasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelTransferencia(transferenciaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingTransferencia(false);
			
			//SI ES MANUAL
			if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualTransferencia();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingTransferencia(false);
			
			//SI ES MANUAL
			if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualTransferencia();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingTransferencia(false);
			
			//SI ES MANUAL
			if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualTransferencia();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaTransferencia() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosTransferencia.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosTransferencia.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosTransferencia.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosTransferencia.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosTransferencia.setMinimumSize(dimensionMinimum);
		this.jTableDatosTransferencia.setMaximumSize(dimensionMaximum);
		this.jTableDatosTransferencia.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingTransferencia(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingTransferencia(esInicializar,true);
	}
	
	public void inicializarActualizarBindingTransferencia(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaTransferencia(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesTransferencia(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasTransferencia(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesTransferencia(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesTransferencia(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!TransferenciaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualTransferencia() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaTransferencia();
		
		this.inicializarActualizarBindingBotonesManualTransferencia(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualTransferencia();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesTransferencia() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualTransferencia(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualTransferencia(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosTransferencia.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosTransferencia.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteTransferencia.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormTransferencia!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormTransferencia.jCheckBoxPostAccionNuevoTransferencia.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormTransferencia.jCheckBoxPostAccionSinCerrarTransferencia.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormTransferencia.jCheckBoxPostAccionSinMensajeTransferencia.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosTransferencia.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosTransferencia.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteTransferencia.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormTransferencia!=null) {
				this.jInternalFrameDetalleFormTransferencia.jCheckBoxPostAccionNuevoTransferencia.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormTransferencia.jCheckBoxPostAccionSinCerrarTransferencia.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormTransferencia.jCheckBoxPostAccionSinMensajeTransferencia.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionTransferencia.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionTransferencia.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormTransferencia!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesTransferencia.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesTransferencia.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesTransferencia.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarTransferencia.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesTransferencia.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesTransferencia.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralTransferencia.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesTransferencia(Boolean esInicializar) throws Exception {
		try	{	
			if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualTransferencia(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesTransferencia() throws Exception {
		try	{
			if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualTransferencia();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleTransferencia() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualTransferencia() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesTransferencia.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesTransferencia.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesTransferencia.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionTransferencia.addItem(reporte);
			}
			
			
			if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionTransferencia.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionTransferencia.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesTransferencia.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesTransferencia.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarTransferencia.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarTransferencia.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualTransferencia();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualTransferencia() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
				this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
				this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
				
				if(this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoTransferencia.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoTransferencia.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoTransferencia.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=TransferenciaConstantesFunciones.getTiposSeleccionarTransferencia(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=TransferenciaConstantesFunciones.getTiposSeleccionarTransferencia(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=TransferenciaConstantesFunciones.getTiposSeleccionarTransferencia(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoTransferencia.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoTransferencia.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualTransferencia()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_empleadoFK_IdEmpleadoTransferencia.getSelectedItem()!=null){this.id_empleadoFK_IdEmpleado=((Empleado)this.jComboBoxid_empleadoFK_IdEmpleadoTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.getSelectedItem()!=null){this.id_estado_inventarioFK_IdEstadoInventario=((EstadoInventario)this.jComboBoxid_estado_inventarioFK_IdEstadoInventarioTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.getSelectedItem()!=null){this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=((TipoTransaccionModulo)this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloTransferencia.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasTransferencia(Boolean esInicializar) throws Exception {				
		if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualTransferencia();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaTransferencia() throws Exception {
		this.inicializarActualizarBindingTablaTransferencia(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByTransferencia() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosTransferenciaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferenciaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaTransferencia(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=transferenciaLogic.getTransferencias().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=transferencias.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosTransferencia.setModel(new TransferenciaModel(this.transferenciaLogic.getTransferencias(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosTransferencia.setModel(new TransferenciaModel(this.transferencias,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByTransferencia!=null && this.jInternalFrameOrderByTransferencia.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByTransferencia();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+TransferenciaConstantesFunciones.SCLASSWEBTITULO,transferenciaConstantesFunciones.resaltarSeleccionarTransferencia,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+TransferenciaConstantesFunciones.SCLASSWEBTITULO,transferenciaConstantesFunciones.resaltarSeleccionarTransferencia,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_ID));

		if(this.transferenciaConstantesFunciones.mostraridTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltaridTransferencia,this.transferenciaConstantesFunciones.activaridTransferencia,iSizeTabla,this,true,"idTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltaridTransferencia,this.transferenciaConstantesFunciones.activaridTransferencia,this,true,"idTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.transferenciaConstantesFunciones.mostrarid_empresaTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.transferenciaConstantesFunciones.resaltarid_empresaTransferencia,this,this.transferenciaConstantesFunciones.activarid_empresaTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.transferenciaConstantesFunciones.resaltarid_empresaTransferencia,this,this.transferenciaConstantesFunciones.activarid_empresaTransferencia,false,"id_empresaTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.transferenciaConstantesFunciones.mostrarid_sucursalTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.transferenciaConstantesFunciones.resaltarid_sucursalTransferencia,this,this.transferenciaConstantesFunciones.activarid_sucursalTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.transferenciaConstantesFunciones.resaltarid_sucursalTransferencia,this,this.transferenciaConstantesFunciones.activarid_sucursalTransferencia,false,"id_sucursalTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDMODULO));

		if(this.transferenciaConstantesFunciones.mostrarid_moduloTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.transferenciaConstantesFunciones.resaltarid_moduloTransferencia,this,this.transferenciaConstantesFunciones.activarid_moduloTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.transferenciaConstantesFunciones.resaltarid_moduloTransferencia,this,this.transferenciaConstantesFunciones.activarid_moduloTransferencia,false,"id_moduloTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.transferenciaConstantesFunciones.mostrarid_ejercicioTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.transferenciaConstantesFunciones.resaltarid_ejercicioTransferencia,this,this.transferenciaConstantesFunciones.activarid_ejercicioTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.transferenciaConstantesFunciones.resaltarid_ejercicioTransferencia,this,this.transferenciaConstantesFunciones.activarid_ejercicioTransferencia,false,"id_ejercicioTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDPERIODO));

		if(this.transferenciaConstantesFunciones.mostrarid_periodoTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.transferenciaConstantesFunciones.resaltarid_periodoTransferencia,this,this.transferenciaConstantesFunciones.activarid_periodoTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.transferenciaConstantesFunciones.resaltarid_periodoTransferencia,this,this.transferenciaConstantesFunciones.activarid_periodoTransferencia,false,"id_periodoTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDANIO));

		if(this.transferenciaConstantesFunciones.mostrarid_anioTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.transferenciaConstantesFunciones.resaltarid_anioTransferencia,this,this.transferenciaConstantesFunciones.activarid_anioTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.transferenciaConstantesFunciones.resaltarid_anioTransferencia,this,this.transferenciaConstantesFunciones.activarid_anioTransferencia,true,"id_anioTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDMES));

		if(this.transferenciaConstantesFunciones.mostrarid_mesTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.transferenciaConstantesFunciones.resaltarid_mesTransferencia,this,this.transferenciaConstantesFunciones.activarid_mesTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.transferenciaConstantesFunciones.resaltarid_mesTransferencia,this,this.transferenciaConstantesFunciones.activarid_mesTransferencia,true,"id_mesTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDUSUARIO));

		if(this.transferenciaConstantesFunciones.mostrarid_usuarioTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.transferenciaConstantesFunciones.resaltarid_usuarioTransferencia,this,this.transferenciaConstantesFunciones.activarid_usuarioTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.transferenciaConstantesFunciones.resaltarid_usuarioTransferencia,this,this.transferenciaConstantesFunciones.activarid_usuarioTransferencia,false,"id_usuarioTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_FECHAEMISION));

		if(this.transferenciaConstantesFunciones.mostrarfecha_emisionTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.transferenciaConstantesFunciones.resaltarfecha_emisionTransferencia,this.transferenciaConstantesFunciones.activarfecha_emisionTransferencia,iSizeTabla,this,true,"fecha_emisionTransferencia","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.transferenciaConstantesFunciones.resaltarfecha_emisionTransferencia,this.transferenciaConstantesFunciones.activarfecha_emisionTransferencia,this,true,"fecha_emisionTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_FECHAENTREGA));

		if(this.transferenciaConstantesFunciones.mostrarfecha_entregaTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_FECHAENTREGA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.transferenciaConstantesFunciones.resaltarfecha_entregaTransferencia,this.transferenciaConstantesFunciones.activarfecha_entregaTransferencia,iSizeTabla,this,true,"fecha_entregaTransferencia","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.transferenciaConstantesFunciones.resaltarfecha_entregaTransferencia,this.transferenciaConstantesFunciones.activarfecha_entregaTransferencia,this,true,"fecha_entregaTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL));

		if(this.transferenciaConstantesFunciones.mostrarnumero_secuencialTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.transferenciaConstantesFunciones.resaltarnumero_secuencialTransferencia,this.transferenciaConstantesFunciones.activarnumero_secuencialTransferencia,iSizeTabla,this,true,"numero_secuencialTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarnumero_secuencialTransferencia,this.transferenciaConstantesFunciones.activarnumero_secuencialTransferencia,this,true,"numero_secuencialTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDMONEDA));

		if(this.transferenciaConstantesFunciones.mostrarid_monedaTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.transferenciaConstantesFunciones.resaltarid_monedaTransferencia,this,this.transferenciaConstantesFunciones.activarid_monedaTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.transferenciaConstantesFunciones.resaltarid_monedaTransferencia,this,this.transferenciaConstantesFunciones.activarid_monedaTransferencia,false,"id_monedaTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO));

		if(this.transferenciaConstantesFunciones.mostrarid_tipo_cambioTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoCambioTableCell(this.tipocambiosForeignKey,this.transferenciaConstantesFunciones.resaltarid_tipo_cambioTransferencia,this,this.transferenciaConstantesFunciones.activarid_tipo_cambioTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new TipoCambioTableCell(this.tipocambiosForeignKey,this.transferenciaConstantesFunciones.resaltarid_tipo_cambioTransferencia,this,this.transferenciaConstantesFunciones.activarid_tipo_cambioTransferencia,true,"id_tipo_cambioTransferencia","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO));

		if(this.transferenciaConstantesFunciones.mostrarid_estado_inventarioTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoInventarioTableCell(this.estadoinventariosForeignKey,this.transferenciaConstantesFunciones.resaltarid_estado_inventarioTransferencia,this,this.transferenciaConstantesFunciones.activarid_estado_inventarioTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new EstadoInventarioTableCell(this.estadoinventariosForeignKey,this.transferenciaConstantesFunciones.resaltarid_estado_inventarioTransferencia,this,this.transferenciaConstantesFunciones.activarid_estado_inventarioTransferencia,true,"id_estado_inventarioTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDFORMATO));

		if(this.transferenciaConstantesFunciones.mostrarid_formatoTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.transferenciaConstantesFunciones.resaltarid_formatoTransferencia,this,this.transferenciaConstantesFunciones.activarid_formatoTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.transferenciaConstantesFunciones.resaltarid_formatoTransferencia,this,this.transferenciaConstantesFunciones.activarid_formatoTransferencia,true,"id_formatoTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA));

		if(this.transferenciaConstantesFunciones.mostrarid_transportistaTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransportistaTableCell(this.transportistasForeignKey,this.transferenciaConstantesFunciones.resaltarid_transportistaTransferencia,this,this.transferenciaConstantesFunciones.activarid_transportistaTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new TransportistaTableCell(this.transportistasForeignKey,this.transferenciaConstantesFunciones.resaltarid_transportistaTransferencia,this,this.transferenciaConstantesFunciones.activarid_transportistaTransferencia,true,"id_transportistaTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.transferenciaConstantesFunciones.mostrarid_empleadoTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.transferenciaConstantesFunciones.resaltarid_empleadoTransferencia,this,this.transferenciaConstantesFunciones.activarid_empleadoTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.transferenciaConstantesFunciones.resaltarid_empleadoTransferencia,this,this.transferenciaConstantesFunciones.activarid_empleadoTransferencia,true,"id_empleadoTransferencia","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.transferenciaConstantesFunciones.mostrardescripcionTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.transferenciaConstantesFunciones.resaltardescripcionTransferencia,this.transferenciaConstantesFunciones.activardescripcionTransferencia,iSizeTabla,this,true,"descripcionTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltardescripcionTransferencia,this.transferenciaConstantesFunciones.activardescripcionTransferencia,this,true,"descripcionTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO));

		if(this.transferenciaConstantesFunciones.mostrarporcentaje_descuentoTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarporcentaje_descuentoTransferencia,this.transferenciaConstantesFunciones.activarporcentaje_descuentoTransferencia,iSizeTabla,this,true,"porcentaje_descuentoTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarporcentaje_descuentoTransferencia,this.transferenciaConstantesFunciones.activarporcentaje_descuentoTransferencia,this,true,"porcentaje_descuentoTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_SUMAN));

		if(this.transferenciaConstantesFunciones.mostrarsumanTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_SUMAN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarsumanTransferencia,this.transferenciaConstantesFunciones.activarsumanTransferencia,iSizeTabla,this,true,"sumanTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarsumanTransferencia,this.transferenciaConstantesFunciones.activarsumanTransferencia,this,true,"sumanTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_ICE));

		if(this.transferenciaConstantesFunciones.mostrariceTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltariceTransferencia,this.transferenciaConstantesFunciones.activariceTransferencia,iSizeTabla,this,true,"iceTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltariceTransferencia,this.transferenciaConstantesFunciones.activariceTransferencia,this,true,"iceTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO));

		if(this.transferenciaConstantesFunciones.mostrarvalor_descuentoTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarvalor_descuentoTransferencia,this.transferenciaConstantesFunciones.activarvalor_descuentoTransferencia,iSizeTabla,this,true,"valor_descuentoTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarvalor_descuentoTransferencia,this.transferenciaConstantesFunciones.activarvalor_descuentoTransferencia,this,true,"valor_descuentoTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO));

		if(this.transferenciaConstantesFunciones.mostrartotal_descuentoTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltartotal_descuentoTransferencia,this.transferenciaConstantesFunciones.activartotal_descuentoTransferencia,iSizeTabla,this,true,"total_descuentoTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltartotal_descuentoTransferencia,this.transferenciaConstantesFunciones.activartotal_descuentoTransferencia,this,true,"total_descuentoTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_IVA));

		if(this.transferenciaConstantesFunciones.mostrarivaTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarivaTransferencia,this.transferenciaConstantesFunciones.activarivaTransferencia,iSizeTabla,this,true,"ivaTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarivaTransferencia,this.transferenciaConstantesFunciones.activarivaTransferencia,this,true,"ivaTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_STOCK));

		if(this.transferenciaConstantesFunciones.mostrarstockTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_STOCK,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarstockTransferencia,this.transferenciaConstantesFunciones.activarstockTransferencia,iSizeTabla,this,true,"stockTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarstockTransferencia,this.transferenciaConstantesFunciones.activarstockTransferencia,this,true,"stockTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_SUBTOTAL));

		if(this.transferenciaConstantesFunciones.mostrarsub_totalTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarsub_totalTransferencia,this.transferenciaConstantesFunciones.activarsub_totalTransferencia,iSizeTabla,this,true,"sub_totalTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarsub_totalTransferencia,this.transferenciaConstantesFunciones.activarsub_totalTransferencia,this,true,"sub_totalTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_TOTALOTRO));

		if(this.transferenciaConstantesFunciones.mostrartotal_otroTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_TOTALOTRO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltartotal_otroTransferencia,this.transferenciaConstantesFunciones.activartotal_otroTransferencia,iSizeTabla,this,true,"total_otroTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltartotal_otroTransferencia,this.transferenciaConstantesFunciones.activartotal_otroTransferencia,this,true,"total_otroTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO));

		if(this.transferenciaConstantesFunciones.mostrarultimo_costoTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarultimo_costoTransferencia,this.transferenciaConstantesFunciones.activarultimo_costoTransferencia,iSizeTabla,this,true,"ultimo_costoTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarultimo_costoTransferencia,this.transferenciaConstantesFunciones.activarultimo_costoTransferencia,this,true,"ultimo_costoTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_NUMEROITEMS));

		if(this.transferenciaConstantesFunciones.mostrarnumero_itemsTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_NUMEROITEMS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarnumero_itemsTransferencia,this.transferenciaConstantesFunciones.activarnumero_itemsTransferencia,iSizeTabla,this,true,"numero_itemsTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarnumero_itemsTransferencia,this.transferenciaConstantesFunciones.activarnumero_itemsTransferencia,this,true,"numero_itemsTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_RETENCION));

		if(this.transferenciaConstantesFunciones.mostrarretencionTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_RETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltarretencionTransferencia,this.transferenciaConstantesFunciones.activarretencionTransferencia,iSizeTabla,this,true,"retencionTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltarretencionTransferencia,this.transferenciaConstantesFunciones.activarretencionTransferencia,this,true,"retencionTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,TransferenciaConstantesFunciones.LABEL_TOTAL));

		if(this.transferenciaConstantesFunciones.mostrartotalTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TransferenciaConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.transferenciaConstantesFunciones.resaltartotalTransferencia,this.transferenciaConstantesFunciones.activartotalTransferencia,iSizeTabla,this,true,"totalTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.transferenciaConstantesFunciones.resaltartotalTransferencia,this.transferenciaConstantesFunciones.activartotalTransferencia,this,true,"totalTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.transferenciaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetalleTransferencia && this.transferenciaConstantesFunciones.mostrarDetalleTransferenciaTransferencia && !TransferenciaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Transferencias");
				tableColumn.setHeaderValue("Detalle Transferencias");
				tableColumn.setCellRenderer(new DetalleTransferenciaTableCell(transferenciaConstantesFunciones.resaltarDetalleTransferenciaTransferencia,this,this.transferenciaConstantesFunciones.activarDetalleTransferenciaTransferencia));
				tableColumn.setCellEditor(new DetalleTransferenciaTableCell(transferenciaConstantesFunciones.resaltarDetalleTransferenciaTransferencia,this,this.transferenciaConstantesFunciones.activarDetalleTransferenciaTransferencia));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosTransferencia.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.transferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.transferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosTransferencia.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.transferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.transferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosTransferencia.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarTransferencia && this.isPermisoGuardarCambiosTransferencia) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.transferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.transferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosTransferencia.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.transferenciaSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosTransferencia.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosTransferencia.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarTransferencia && this.isPermisoGuardarCambiosTransferencia) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.transferenciaSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarTransferencia && this.isPermisoGuardarCambiosTransferencia) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosTransferencia.moveColumn(this.jTableDatosTransferencia.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosTransferencia.moveColumn(this.jTableDatosTransferencia.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.transferenciaSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosTransferencia.moveColumn(this.jTableDatosTransferencia.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosTransferencia.moveColumn(this.jTableDatosTransferencia.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosTransferencia.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosTransferencia.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosTransferencia,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosTransferencia.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosTransferencia.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosTransferencia.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosTransferencia.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosTransferencia.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=transferenciaLogic.getTransferencias().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=transferencias.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosTransferencia.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosTransferencia();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoTransferencia=false;
					
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
				if(this.transferenciaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormTransferencia==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosTransferencia.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.transferencia.getsType().equals("DUPLICADO")
				   || this.transferencia.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoTransferencia=true;
				
				} else {
					this.isEsNuevoTransferencia=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.transferenciaSessionBean.getEsGuardarRelacionado()) {
					if(this.transferencia.getId()>=0 && !this.transferencia.getIsNew()) {						
						this.isEsNuevoTransferencia=false;
						
					} else {
						this.isEsNuevoTransferencia=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoTransferencia(esRelaciones);						
				
				this.seleccionarTransferencia(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.transferencia.getId()<0) {
					this.isEsNuevoTransferencia=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarTransferencia(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarTransferencia(evt,rowIndex);
				}	
				
				if(this.transferenciaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion Transferencia: " + this.dDif); 
					}
				}								
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarTransferencia(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.transferencia)) {
					if(this.transferencia.getId()>0) {
						this.transferencia.setIsDeleted(true);
						
						this.transferenciasEliminados.add(this.transferencia);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.transferenciaLogic.getTransferencias().remove(this.transferencia);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.transferencias.remove(this.transferencia);				
					}
					
					
					((TransferenciaModel) this.jTableDatosTransferencia.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaTransferencia(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarTransferencia(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoTransferencia) {
			
			if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosTransferencia.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosTransferencia.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioTransferencia(this.transferencia);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.transferenciaConstantesFunciones.cargarid_empresaTransferencia || this.transferenciaConstantesFunciones.event_dependid_empresaTransferencia) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.transferencia.getid_empresa());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(transferencia.getEmpresa()!=null) {
							this.empresasForeignKey.add(transferencia.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.transferencia.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.transferenciaConstantesFunciones.cargarid_sucursalTransferencia || this.transferenciaConstantesFunciones.event_dependid_sucursalTransferencia) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.transferencia.getid_sucursal());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(transferencia.getSucursal()!=null) {
							this.sucursalsForeignKey.add(transferencia.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.transferencia.getid_sucursal(),false,"Formulario");

					//Modulo
					if(!this.transferenciaConstantesFunciones.cargarid_moduloTransferencia || this.transferenciaConstantesFunciones.event_dependid_moduloTransferencia) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.transferencia.getid_modulo());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(transferencia.getModulo()!=null) {
							this.modulosForeignKey.add(transferencia.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.transferencia.getid_modulo(),false,"Formulario");

					//Ejercicio
					if(!this.transferenciaConstantesFunciones.cargarid_ejercicioTransferencia || this.transferenciaConstantesFunciones.event_dependid_ejercicioTransferencia) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.transferencia.getid_ejercicio());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(transferencia.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(transferencia.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.transferencia.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.transferenciaConstantesFunciones.cargarid_periodoTransferencia || this.transferenciaConstantesFunciones.event_dependid_periodoTransferencia) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.transferencia.getid_periodo());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(transferencia.getPeriodo()!=null) {
							this.periodosForeignKey.add(transferencia.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.transferencia.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.transferenciaConstantesFunciones.cargarid_anioTransferencia || this.transferenciaConstantesFunciones.event_dependid_anioTransferencia) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.transferencia.getid_anio());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(transferencia.getAnio()!=null) {
							this.aniosForeignKey.add(transferencia.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.transferencia.getid_anio(),false,"Formulario");

					//Mes
					if(!this.transferenciaConstantesFunciones.cargarid_mesTransferencia || this.transferenciaConstantesFunciones.event_dependid_mesTransferencia) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.transferencia.getid_mes());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(transferencia.getMes()!=null) {
							this.messForeignKey.add(transferencia.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.transferencia.getid_mes(),false,"Formulario");

					//Usuario
					if(!this.transferenciaConstantesFunciones.cargarid_usuarioTransferencia || this.transferenciaConstantesFunciones.event_dependid_usuarioTransferencia) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.transferencia.getid_usuario());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(transferencia.getUsuario()!=null) {
							this.usuariosForeignKey.add(transferencia.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.transferencia.getid_usuario(),false,"Formulario");

					//Moneda
					if(!this.transferenciaConstantesFunciones.cargarid_monedaTransferencia || this.transferenciaConstantesFunciones.event_dependid_monedaTransferencia) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.transferencia.getid_moneda());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(transferencia.getMoneda()!=null) {
							this.monedasForeignKey.add(transferencia.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.transferencia.getid_moneda(),false,"Formulario");

					//TipoCambio
					if(!this.transferenciaConstantesFunciones.cargarid_tipo_cambioTransferencia || this.transferenciaConstantesFunciones.event_dependid_tipo_cambioTransferencia) {
						//this.cargarCombosTipoCambiosForeignKeyLista(" where id="+this.transferencia.getid_tipo_cambio());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

						if(transferencia.getTipoCambio()!=null) {
							this.tipocambiosForeignKey.add(transferencia.getTipoCambio());
						}

						this.addItemDefectoCombosForeignKeyTipoCambio();
						this.cargarCombosFrameTipoCambiosForeignKey("Todos");
					}
					this.setActualTipoCambioForeignKey(this.transferencia.getid_tipo_cambio(),false,"Formulario");

					//EstadoInventario
					if(!this.transferenciaConstantesFunciones.cargarid_estado_inventarioTransferencia || this.transferenciaConstantesFunciones.event_dependid_estado_inventarioTransferencia) {
						//this.cargarCombosEstadoInventariosForeignKeyLista(" where id="+this.transferencia.getid_estado_inventario());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.estadoinventariosForeignKey=new ArrayList<EstadoInventario>();

						if(transferencia.getEstadoInventario()!=null) {
							this.estadoinventariosForeignKey.add(transferencia.getEstadoInventario());
						}

						this.addItemDefectoCombosForeignKeyEstadoInventario();
						this.cargarCombosFrameEstadoInventariosForeignKey("Todos");
					}
					this.setActualEstadoInventarioForeignKey(this.transferencia.getid_estado_inventario(),false,"Formulario");

					//Formato
					if(!this.transferenciaConstantesFunciones.cargarid_formatoTransferencia || this.transferenciaConstantesFunciones.event_dependid_formatoTransferencia) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.transferencia.getid_formato());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(transferencia.getFormato()!=null) {
							this.formatosForeignKey.add(transferencia.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.transferencia.getid_formato(),false,"Formulario");

					//Transportista
					if(!this.transferenciaConstantesFunciones.cargarid_transportistaTransferencia || this.transferenciaConstantesFunciones.event_dependid_transportistaTransferencia) {
						//this.cargarCombosTransportistasForeignKeyLista(" where id="+this.transferencia.getid_transportista());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.transportistasForeignKey=new ArrayList<Transportista>();

						if(transferencia.getTransportista()!=null) {
							this.transportistasForeignKey.add(transferencia.getTransportista());
						}

						this.addItemDefectoCombosForeignKeyTransportista();
						this.cargarCombosFrameTransportistasForeignKey("Todos");
					}
					this.setActualTransportistaForeignKey(this.transferencia.getid_transportista(),false,"Formulario");

					//Empleado
					if(!this.transferenciaConstantesFunciones.cargarid_empleadoTransferencia || this.transferenciaConstantesFunciones.event_dependid_empleadoTransferencia) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.transferencia.getid_empleado());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(transferencia.getEmpleado()!=null) {
							this.empleadosForeignKey.add(transferencia.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.transferencia.getid_empleado(),false,"Formulario");

					//TipoTransaccionModulo
					if(!this.transferenciaConstantesFunciones.cargarid_tipo_transaccion_moduloTransferencia || this.transferenciaConstantesFunciones.event_dependid_tipo_transaccion_moduloTransferencia) {
						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(" where id="+this.transferencia.getid_tipo_transaccion_modulo());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

						if(transferencia.getTipoTransaccionModulo()!=null) {
							this.tipotransaccionmodulosForeignKey.add(transferencia.getTipoTransaccionModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
						this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
					}
					this.setActualTipoTransaccionModuloForeignKey(this.transferencia.getid_tipo_transaccion_modulo(),false,"Formulario");

					//AsientoContable
					if(!this.transferenciaConstantesFunciones.cargarid_asiento_contableTransferencia || this.transferenciaConstantesFunciones.event_dependid_asiento_contableTransferencia) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.transferencia.getid_asiento_contable());
									//this.inicializarActualizarBindingTransferencia(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(transferencia.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(transferencia.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.transferencia.getid_asiento_contable(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesTransferencia("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesTransferencia(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualTransferencia() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoTransferencia(Transferencia transferencia) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoTransferencia(transferencia,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoTransferencia(Transferencia transferencia,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioTransferencia(transferencia);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyTransferencia(transferencia,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyTransferencia(transferencia);
	}
	
	public void setVariablesObjetoActualToFormularioTransferencia(Transferencia transferencia) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.setText(transferencia.getId().toString());
			this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_emisionTransferencia.setDate(transferencia.getfecha_emision());
			this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_entregaTransferencia.setDate(transferencia.getfecha_entrega());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_secuencialTransferencia.setText(transferencia.getnumero_secuencial());
			this.jInternalFrameDetalleFormTransferencia.jTextAreadescripcionTransferencia.setText(transferencia.getdescripcion());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldporcentaje_descuentoTransferencia.setText(transferencia.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldsumanTransferencia.setText(transferencia.getsuman().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldiceTransferencia.setText(transferencia.getice().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldvalor_descuentoTransferencia.setText(transferencia.getvalor_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_descuentoTransferencia.setText(transferencia.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldivaTransferencia.setText(transferencia.getiva().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldstockTransferencia.setText(transferencia.getstock().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldsub_totalTransferencia.setText(transferencia.getsub_total().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_otroTransferencia.setText(transferencia.gettotal_otro().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldultimo_costoTransferencia.setText(transferencia.getultimo_costo().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_itemsTransferencia.setText(transferencia.getnumero_items().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldretencionTransferencia.setText(transferencia.getretencion().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotalTransferencia.setText(transferencia.gettotal().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,Transferencia transferenciaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,transferenciaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,Transferencia transferenciaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				transferenciaLocal=this.transferencia;
			} else {
				transferenciaLocal=this.transferenciaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(transferenciaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoTransferencia(transferenciaLocal,true);
					
					if(transferenciaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(transferenciaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.transferenciaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(transferenciaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoTransferencia(Transferencia transferencia,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualTransferencia(transferencia,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(transferencia);
	}
	
	public void setVariablesFormularioToObjetoActualTransferencia(Transferencia transferencia,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualTransferencia(transferencia,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualTransferencia(Transferencia transferencia,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.getText()==null || this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.getText()=="" || this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.getText()=="Id") {
				this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.setText("0");
			}

			if(conColumnasBase) {transferencia.setId(Long.parseLong(this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelIdTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setfecha_emision(this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_emisionTransferencia.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelfecha_emisionTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setfecha_entrega(this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_entregaTransferencia.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_FECHAENTREGA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelfecha_entregaTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setnumero_secuencial(this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_secuencialTransferencia.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelnumero_secuencialTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setdescripcion(this.jInternalFrameDetalleFormTransferencia.jTextAreadescripcionTransferencia.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeldescripcionTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setporcentaje_descuento(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldporcentaje_descuentoTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelporcentaje_descuentoTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setsuman(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldsumanTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_SUMAN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelsumanTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setice(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldiceTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeliceTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setvalor_descuento(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldvalor_descuentoTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelvalor_descuentoTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.settotal_descuento(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_descuentoTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeltotal_descuentoTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setiva(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldivaTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelivaTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setstock(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldstockTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_STOCK+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelstockTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldsub_totalTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelsub_totalTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.settotal_otro(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_otroTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_TOTALOTRO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeltotal_otroTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setultimo_costo(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldultimo_costoTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelultimo_costoTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setnumero_items(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_itemsTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_NUMEROITEMS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelnumero_itemsTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.setretencion(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldretencionTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_RETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabelretencionTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			transferencia.settotal(Double.parseDouble(this.jInternalFrameDetalleFormTransferencia.jTextFieldtotalTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TransferenciaConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTransferencia.jLabeltotalTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualTransferencia(Transferencia transferenciaBean,Transferencia transferencia,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosTransferencia(Transferencia transferenciaOrigen,Transferencia transferencia,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && transferenciaOrigen.getId()!=null && !transferenciaOrigen.getId().equals(0L))) {transferencia.setId(transferenciaOrigen.getId());}}
			if(conDefault || (!conDefault && transferenciaOrigen.getfecha_emision()!=null && !transferenciaOrigen.getfecha_emision().equals(new Date()))) {transferencia.setfecha_emision(transferenciaOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && transferenciaOrigen.getfecha_entrega()!=null && !transferenciaOrigen.getfecha_entrega().equals(new Date()))) {transferencia.setfecha_entrega(transferenciaOrigen.getfecha_entrega());}
			if(conDefault || (!conDefault && transferenciaOrigen.getnumero_secuencial()!=null && !transferenciaOrigen.getnumero_secuencial().equals(""))) {transferencia.setnumero_secuencial(transferenciaOrigen.getnumero_secuencial());}
			if(conDefault || (!conDefault && transferenciaOrigen.getdescripcion()!=null && !transferenciaOrigen.getdescripcion().equals(""))) {transferencia.setdescripcion(transferenciaOrigen.getdescripcion());}
			if(conDefault || (!conDefault && transferenciaOrigen.getporcentaje_descuento()!=null && !transferenciaOrigen.getporcentaje_descuento().equals(0.0))) {transferencia.setporcentaje_descuento(transferenciaOrigen.getporcentaje_descuento());}
			if(conDefault || (!conDefault && transferenciaOrigen.getsuman()!=null && !transferenciaOrigen.getsuman().equals(0.0))) {transferencia.setsuman(transferenciaOrigen.getsuman());}
			if(conDefault || (!conDefault && transferenciaOrigen.getice()!=null && !transferenciaOrigen.getice().equals(0.0))) {transferencia.setice(transferenciaOrigen.getice());}
			if(conDefault || (!conDefault && transferenciaOrigen.getvalor_descuento()!=null && !transferenciaOrigen.getvalor_descuento().equals(0.0))) {transferencia.setvalor_descuento(transferenciaOrigen.getvalor_descuento());}
			if(conDefault || (!conDefault && transferenciaOrigen.gettotal_descuento()!=null && !transferenciaOrigen.gettotal_descuento().equals(0.0))) {transferencia.settotal_descuento(transferenciaOrigen.gettotal_descuento());}
			if(conDefault || (!conDefault && transferenciaOrigen.getiva()!=null && !transferenciaOrigen.getiva().equals(0.0))) {transferencia.setiva(transferenciaOrigen.getiva());}
			if(conDefault || (!conDefault && transferenciaOrigen.getstock()!=null && !transferenciaOrigen.getstock().equals(0.0))) {transferencia.setstock(transferenciaOrigen.getstock());}
			if(conDefault || (!conDefault && transferenciaOrigen.getsub_total()!=null && !transferenciaOrigen.getsub_total().equals(0.0))) {transferencia.setsub_total(transferenciaOrigen.getsub_total());}
			if(conDefault || (!conDefault && transferenciaOrigen.gettotal_otro()!=null && !transferenciaOrigen.gettotal_otro().equals(0.0))) {transferencia.settotal_otro(transferenciaOrigen.gettotal_otro());}
			if(conDefault || (!conDefault && transferenciaOrigen.getultimo_costo()!=null && !transferenciaOrigen.getultimo_costo().equals(0.0))) {transferencia.setultimo_costo(transferenciaOrigen.getultimo_costo());}
			if(conDefault || (!conDefault && transferenciaOrigen.getnumero_items()!=null && !transferenciaOrigen.getnumero_items().equals(0.0))) {transferencia.setnumero_items(transferenciaOrigen.getnumero_items());}
			if(conDefault || (!conDefault && transferenciaOrigen.getretencion()!=null && !transferenciaOrigen.getretencion().equals(0.0))) {transferencia.setretencion(transferenciaOrigen.getretencion());}
			if(conDefault || (!conDefault && transferenciaOrigen.gettotal()!=null && !transferenciaOrigen.gettotal().equals(0.0))) {transferencia.settotal(transferenciaOrigen.gettotal());}
			if(conDefault || (!conDefault && transferenciaOrigen.getflete()!=null && !transferenciaOrigen.getflete().equals(0.0))) {transferencia.setflete(transferenciaOrigen.getflete());}
			if(conDefault || (!conDefault && transferenciaOrigen.getimpuesto()!=null && !transferenciaOrigen.getimpuesto().equals(0.0))) {transferencia.setimpuesto(transferenciaOrigen.getimpuesto());}
			if(conDefault || (!conDefault && transferenciaOrigen.getnumero_comprobante()!=null && !transferenciaOrigen.getnumero_comprobante().equals(""))) {transferencia.setnumero_comprobante(transferenciaOrigen.getnumero_comprobante());}
			if(conDefault || (!conDefault && transferenciaOrigen.getfecha()!=null && !transferenciaOrigen.getfecha().equals(new Date()))) {transferencia.setfecha(transferenciaOrigen.getfecha());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioTransferencia(Transferencia transferencia) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.setText(transferencia.getId().toString());
			this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_emisionTransferencia.setDate(transferencia.getfecha_emision());
			this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_entregaTransferencia.setDate(transferencia.getfecha_entrega());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_secuencialTransferencia.setText(transferencia.getnumero_secuencial());
			this.jInternalFrameDetalleFormTransferencia.jTextAreadescripcionTransferencia.setText(transferencia.getdescripcion());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldporcentaje_descuentoTransferencia.setText(transferencia.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldsumanTransferencia.setText(transferencia.getsuman().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldiceTransferencia.setText(transferencia.getice().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldvalor_descuentoTransferencia.setText(transferencia.getvalor_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_descuentoTransferencia.setText(transferencia.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldivaTransferencia.setText(transferencia.getiva().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldstockTransferencia.setText(transferencia.getstock().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldsub_totalTransferencia.setText(transferencia.getsub_total().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_otroTransferencia.setText(transferencia.gettotal_otro().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldultimo_costoTransferencia.setText(transferencia.getultimo_costo().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_itemsTransferencia.setText(transferencia.getnumero_items().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldretencionTransferencia.setText(transferencia.getretencion().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotalTransferencia.setText(transferencia.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioTransferencia(TransferenciaBean transferenciaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.setText(transferenciaBean.getId().toString());
			this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_emisionTransferencia.setDate(transferenciaBean.getfecha_emision());
			this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_entregaTransferencia.setDate(transferenciaBean.getfecha_entrega());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_secuencialTransferencia.setText(transferenciaBean.getnumero_secuencial());
			this.jInternalFrameDetalleFormTransferencia.jTextAreadescripcionTransferencia.setText(transferenciaBean.getdescripcion());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldporcentaje_descuentoTransferencia.setText(transferenciaBean.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldsumanTransferencia.setText(transferenciaBean.getsuman().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldiceTransferencia.setText(transferenciaBean.getice().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldvalor_descuentoTransferencia.setText(transferenciaBean.getvalor_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_descuentoTransferencia.setText(transferenciaBean.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldivaTransferencia.setText(transferenciaBean.getiva().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldstockTransferencia.setText(transferenciaBean.getstock().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldsub_totalTransferencia.setText(transferenciaBean.getsub_total().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_otroTransferencia.setText(transferenciaBean.gettotal_otro().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldultimo_costoTransferencia.setText(transferenciaBean.getultimo_costo().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_itemsTransferencia.setText(transferenciaBean.getnumero_items().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldretencionTransferencia.setText(transferenciaBean.getretencion().toString());
			this.jInternalFrameDetalleFormTransferencia.jTextFieldtotalTransferencia.setText(transferenciaBean.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanTransferencia(TransferenciaParameterReturnGeneral transferenciaReturnGeneral,TransferenciaBean transferenciaBean,Boolean conDefault) throws Exception { 
		try {
			Transferencia transferenciaLocal=new Transferencia();
			
			transferenciaLocal=transferenciaReturnGeneral.getTransferencia();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && transferenciaLocal.getId()!=null && !transferenciaLocal.getId().equals(0L))) {transferenciaBean.setId(transferenciaLocal.getId());}}
			if(conDefault || (!conDefault && transferenciaLocal.getfecha_emision()!=null && !transferenciaLocal.getfecha_emision().equals(new Date()))) {transferenciaBean.setfecha_emision(transferenciaLocal.getfecha_emision());}
			if(conDefault || (!conDefault && transferenciaLocal.getfecha_entrega()!=null && !transferenciaLocal.getfecha_entrega().equals(new Date()))) {transferenciaBean.setfecha_entrega(transferenciaLocal.getfecha_entrega());}
			if(conDefault || (!conDefault && transferenciaLocal.getnumero_secuencial()!=null && !transferenciaLocal.getnumero_secuencial().equals(""))) {transferenciaBean.setnumero_secuencial(transferenciaLocal.getnumero_secuencial());}
			if(conDefault || (!conDefault && transferenciaLocal.getdescripcion()!=null && !transferenciaLocal.getdescripcion().equals(""))) {transferenciaBean.setdescripcion(transferenciaLocal.getdescripcion());}
			if(conDefault || (!conDefault && transferenciaLocal.getporcentaje_descuento()!=null && !transferenciaLocal.getporcentaje_descuento().equals(0.0))) {transferenciaBean.setporcentaje_descuento(transferenciaLocal.getporcentaje_descuento());}
			if(conDefault || (!conDefault && transferenciaLocal.getsuman()!=null && !transferenciaLocal.getsuman().equals(0.0))) {transferenciaBean.setsuman(transferenciaLocal.getsuman());}
			if(conDefault || (!conDefault && transferenciaLocal.getice()!=null && !transferenciaLocal.getice().equals(0.0))) {transferenciaBean.setice(transferenciaLocal.getice());}
			if(conDefault || (!conDefault && transferenciaLocal.getvalor_descuento()!=null && !transferenciaLocal.getvalor_descuento().equals(0.0))) {transferenciaBean.setvalor_descuento(transferenciaLocal.getvalor_descuento());}
			if(conDefault || (!conDefault && transferenciaLocal.gettotal_descuento()!=null && !transferenciaLocal.gettotal_descuento().equals(0.0))) {transferenciaBean.settotal_descuento(transferenciaLocal.gettotal_descuento());}
			if(conDefault || (!conDefault && transferenciaLocal.getiva()!=null && !transferenciaLocal.getiva().equals(0.0))) {transferenciaBean.setiva(transferenciaLocal.getiva());}
			if(conDefault || (!conDefault && transferenciaLocal.getstock()!=null && !transferenciaLocal.getstock().equals(0.0))) {transferenciaBean.setstock(transferenciaLocal.getstock());}
			if(conDefault || (!conDefault && transferenciaLocal.getsub_total()!=null && !transferenciaLocal.getsub_total().equals(0.0))) {transferenciaBean.setsub_total(transferenciaLocal.getsub_total());}
			if(conDefault || (!conDefault && transferenciaLocal.gettotal_otro()!=null && !transferenciaLocal.gettotal_otro().equals(0.0))) {transferenciaBean.settotal_otro(transferenciaLocal.gettotal_otro());}
			if(conDefault || (!conDefault && transferenciaLocal.getultimo_costo()!=null && !transferenciaLocal.getultimo_costo().equals(0.0))) {transferenciaBean.setultimo_costo(transferenciaLocal.getultimo_costo());}
			if(conDefault || (!conDefault && transferenciaLocal.getnumero_items()!=null && !transferenciaLocal.getnumero_items().equals(0.0))) {transferenciaBean.setnumero_items(transferenciaLocal.getnumero_items());}
			if(conDefault || (!conDefault && transferenciaLocal.getretencion()!=null && !transferenciaLocal.getretencion().equals(0.0))) {transferenciaBean.setretencion(transferenciaLocal.getretencion());}
			if(conDefault || (!conDefault && transferenciaLocal.gettotal()!=null && !transferenciaLocal.gettotal().equals(0.0))) {transferenciaBean.settotal(transferenciaLocal.gettotal());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxTransferenciaGenerico(Long idTransferenciaSeleccionado,JComboBox jComboBoxTransferencia,List<Transferencia> transferenciasLocal)throws Exception {
		try {
			Transferencia  transferenciaTemp=null;

			for(Transferencia transferenciaAux:transferenciasLocal) {
				if(transferenciaAux.getId()!=null && transferenciaAux.getId().equals(idTransferenciaSeleccionado)) {
					transferenciaTemp=transferenciaAux;
					break;
				}
			}

			jComboBoxTransferencia.setSelectedItem(transferenciaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxTransferenciaGenerico(JComboBox jComboBoxTransferencia,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxTransferencia.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxTransferencia.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxTransferencia.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxTransferencia.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxTransferencia.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxTransferencia.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxTransferencia.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxTransferencia.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxTransferencia.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxTransferencia.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetalleTransferencia")) {
			jButtonDetalleTransferenciaActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			transferencia=(Transferencia) transferenciaLogic.getTransferencias().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			transferencia =(Transferencia) transferencias.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getmes_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getusuario_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("TipoCambio")) {
			//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.gettipocambio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.gettipocambio_descripcion();
			}
		}

		if(sTipo.equals("EstadoInventario")) {
			//sDescripcion=this.getActualEstadoInventarioForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getestadoinventario_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getestadoinventario_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getformato_descripcion();
			}
		}

		if(sTipo.equals("Transportista")) {
			//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.gettransportista_descripcion();
			} else {
				//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.gettransportista_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getempleado_descripcion();
			}
		}

		if(sTipo.equals("TipoTransaccionModulo")) {
			//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.gettipotransaccionmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.gettipotransaccionmodulo_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!transferencia.getIsNew() && !transferencia.getIsChanged() && !transferencia.getIsDeleted()) {
				sDescripcion=transferencia.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=transferencia.getasientocontable_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		Transferencia transferenciaRow=new Transferencia();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			transferenciaRow=(Transferencia) transferenciaLogic.getTransferencias().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			transferenciaRow=(Transferencia) transferencias.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetalleTransferenciaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Transferencia transferencia) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormTransferencia==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia = (Transferencia)this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.transferencia = (Transferencia)this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(transferencia!=null) {
						this.transferencia = transferencia;
					} else {
						this.transferencia = new Transferencia();
					}
				}

				if(this.isTienePermisosDetalleTransferencia && this.permiteMantenimiento(this.transferencia)) {
					DetalleTransferenciaBeanSwingJInternalFrame detalletransferenciaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFramePopup=new DetalleTransferenciaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detalletransferenciaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFramePopup;
					} else {
						detalletransferenciaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame;
					}

					List<Transferencia> transferencias=new ArrayList<Transferencia>();
					transferencias.add(this.transferencia);
					if(!esRelacionado) {
						//detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaSessionBean.setConGuardarRelaciones(false);
						//detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detalletransferenciaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormTransferencia.cargarDetalleTransferenciaBeanSwingJInternalFrame(transferencias,this.transferencia,detalletransferenciaBeanSwingJInternalFrame,/*conInicializar,*/detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaSessionBean.getConGuardarRelaciones(),detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaSessionBean.getEsGuardarRelacionado());
					detalletransferenciaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detalletransferenciaBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleTransferencia("no_relacionado");

						detalletransferenciaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleTransferenciaConstantesFunciones.ITAMANIOFILATABLA + (DetalleTransferenciaConstantesFunciones.ITAMANIOFILATABLA/2));

						detalletransferenciaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
						TitledBorder titledBorderDetalleTransferencia=(TitledBorder)detalletransferenciaBeanSwingJInternalFrame.jScrollPanelDatosDetalleTransferencia.getBorder();

						titledBorderDetalleTransferencia.setTitle(titledBorderTransferencia.getTitle() + " -> Detalle Transferencia");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detalletransferenciaBeanSwingJInternalFrame);
						}

						detalletransferenciaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detalletransferenciaBeanSwingJInternalFrame);

						detalletransferenciaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.transferenciaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Transferencia",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualTransferencia(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoTransferencia.setVisible((this.isVisibilidadCeldaNuevoTransferencia && this.isPermisoNuevoTransferencia));			
			this.jButtonDuplicarTransferencia.setVisible((this.isVisibilidadCeldaDuplicarTransferencia && this.isPermisoDuplicarTransferencia));			
			this.jButtonCopiarTransferencia.setVisible((this.isVisibilidadCeldaCopiarTransferencia && this.isPermisoCopiarTransferencia));
			this.jButtonVerFormTransferencia.setVisible((this.isVisibilidadCeldaVerFormTransferencia && this.isPermisoVerFormTransferencia));
			
			this.jButtonAbrirOrderByTransferencia.setVisible((this.isVisibilidadCeldaOrdenTransferencia && this.isPermisoOrdenTransferencia));			
			
			this.jButtonNuevoRelacionesTransferencia.setVisible((this.isVisibilidadCeldaNuevoRelacionesTransferencia && this.isPermisoNuevoTransferencia));			
			this.jButtonNuevoGuardarCambiosTransferencia.setVisible((this.isVisibilidadCeldaNuevoTransferencia && this.isPermisoNuevoTransferencia && this.isPermisoGuardarCambiosTransferencia));
			
			if(this.jInternalFrameDetalleFormTransferencia!=null) {
			this.jInternalFrameDetalleFormTransferencia.jButtonModificarTransferencia.setVisible((this.isVisibilidadCeldaModificarTransferencia && this.isPermisoActualizarTransferencia));	
			this.jInternalFrameDetalleFormTransferencia.jButtonActualizarTransferencia.setVisible((this.isVisibilidadCeldaActualizarTransferencia && this.isPermisoActualizarTransferencia));	
			this.jInternalFrameDetalleFormTransferencia.jButtonEliminarTransferencia.setVisible((this.isVisibilidadCeldaEliminarTransferencia && this.isPermisoEliminarTransferencia));
			this.jInternalFrameDetalleFormTransferencia.jButtonCancelarTransferencia.setVisible(this.isVisibilidadCeldaCancelarTransferencia);							
			this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosTransferencia.setVisible((this.isVisibilidadCeldaGuardarTransferencia && this.isPermisoGuardarCambiosTransferencia));			
			
			}
						
			this.jButtonGuardarCambiosTablaTransferencia.setVisible((this.isVisibilidadCeldaGuardarCambiosTransferencia && this.isPermisoGuardarCambiosTransferencia));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarTransferencia.setVisible((this.isVisibilidadCeldaNuevoTransferencia && this.isPermisoNuevoTransferencia));						
			this.jButtonDuplicarToolBarTransferencia.setVisible((this.isVisibilidadCeldaDuplicarTransferencia && this.isPermisoDuplicarTransferencia));						
			this.jButtonCopiarToolBarTransferencia.setVisible((this.isVisibilidadCeldaCopiarTransferencia && this.isPermisoCopiarTransferencia));			
			this.jButtonVerFormToolBarTransferencia.setVisible((this.isVisibilidadCeldaVerFormTransferencia && this.isPermisoVerFormTransferencia));			
			this.jButtonAbrirOrderByToolBarTransferencia.setVisible((this.isVisibilidadCeldaOrdenTransferencia && this.isPermisoOrdenTransferencia));
			this.jButtonNuevoRelacionesToolBarTransferencia.setVisible((this.isVisibilidadCeldaNuevoRelacionesTransferencia && this.isPermisoNuevoTransferencia));			
			this.jButtonNuevoGuardarCambiosToolBarTransferencia.setVisible((this.isVisibilidadCeldaNuevoTransferencia && this.isPermisoNuevoTransferencia && this.isPermisoGuardarCambiosTransferencia));			
			
			if(this.jInternalFrameDetalleFormTransferencia!=null) {
			this.jInternalFrameDetalleFormTransferencia.jButtonModificarToolBarTransferencia.setVisible((this.isVisibilidadCeldaModificarTransferencia && this.isPermisoActualizarTransferencia));	
			this.jInternalFrameDetalleFormTransferencia.jButtonActualizarToolBarTransferencia.setVisible((this.isVisibilidadCeldaActualizarTransferencia  && this.isPermisoActualizarTransferencia));	
			this.jInternalFrameDetalleFormTransferencia.jButtonEliminarToolBarTransferencia.setVisible((this.isVisibilidadCeldaEliminarTransferencia && this.isPermisoEliminarTransferencia));
			this.jInternalFrameDetalleFormTransferencia.jButtonCancelarToolBarTransferencia.setVisible(this.isVisibilidadCeldaCancelarTransferencia);				
			this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosToolBarTransferencia.setVisible((this.isVisibilidadCeldaGuardarTransferencia && this.isPermisoGuardarCambiosTransferencia));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarTransferencia.setVisible((this.isVisibilidadCeldaGuardarCambiosTransferencia && this.isPermisoGuardarCambiosTransferencia));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoTransferencia.setVisible((this.isVisibilidadCeldaNuevoTransferencia && this.isPermisoNuevoTransferencia));			
			this.jMenuItemDuplicarTransferencia.setVisible((this.isVisibilidadCeldaDuplicarTransferencia && this.isPermisoDuplicarTransferencia));			
			this.jMenuItemCopiarTransferencia.setVisible((this.isVisibilidadCeldaCopiarTransferencia && this.isPermisoCopiarTransferencia));			
			this.jMenuItemVerFormTransferencia.setVisible((this.isVisibilidadCeldaVerFormTransferencia && this.isPermisoVerFormTransferencia));			
			this.jMenuItemAbrirOrderByTransferencia.setVisible((this.isVisibilidadCeldaOrdenTransferencia && this.isPermisoOrdenTransferencia));			
			//this.jMenuItemMostrarOcultarTransferencia.setVisible((this.isVisibilidadCeldaOrdenTransferencia && this.isPermisoOrdenTransferencia));
			this.jMenuItemDetalleAbrirOrderByTransferencia.setVisible((this.isVisibilidadCeldaOrdenTransferencia && this.isPermisoOrdenTransferencia));			
			//this.jMenuItemDetalleMostrarOcultarTransferencia.setVisible((this.isVisibilidadCeldaOrdenTransferencia && this.isPermisoOrdenTransferencia));			
			this.jMenuItemNuevoRelacionesTransferencia.setVisible((this.isVisibilidadCeldaNuevoRelacionesTransferencia && this.isPermisoNuevoTransferencia));			
			this.jMenuItemNuevoGuardarCambiosTransferencia.setVisible((this.isVisibilidadCeldaNuevoTransferencia && this.isPermisoNuevoTransferencia && this.isPermisoGuardarCambiosTransferencia));									
			
			if(this.jInternalFrameDetalleFormTransferencia!=null) {
			this.jInternalFrameDetalleFormTransferencia.jMenuItemModificarTransferencia.setVisible((this.isVisibilidadCeldaModificarTransferencia && this.isPermisoActualizarTransferencia));	
			this.jInternalFrameDetalleFormTransferencia.jMenuItemActualizarTransferencia.setVisible((this.isVisibilidadCeldaActualizarTransferencia && this.isPermisoActualizarTransferencia));	
			this.jInternalFrameDetalleFormTransferencia.jMenuItemEliminarTransferencia.setVisible((this.isVisibilidadCeldaEliminarTransferencia && this.isPermisoEliminarTransferencia));
			this.jInternalFrameDetalleFormTransferencia.jMenuItemCancelarTransferencia.setVisible(this.isVisibilidadCeldaCancelarTransferencia);				
			}
			
			this.jMenuItemGuardarCambiosTransferencia.setVisible((this.isVisibilidadCeldaGuardarTransferencia && this.isPermisoGuardarCambiosTransferencia));						
			this.jMenuItemGuardarCambiosTablaTransferencia.setVisible((this.isVisibilidadCeldaGuardarCambiosTransferencia && this.isPermisoGuardarCambiosTransferencia));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoTransferencia=this.jButtonNuevoTransferencia.isVisible();
			this.isVisibilidadCeldaDuplicarTransferencia=this.jButtonDuplicarTransferencia.isVisible();
			this.isVisibilidadCeldaCopiarTransferencia=this.jButtonCopiarTransferencia.isVisible();
			this.isVisibilidadCeldaVerFormTransferencia=this.jButtonVerFormTransferencia.isVisible();
			
			this.isVisibilidadCeldaOrdenTransferencia=this.jButtonAbrirOrderByTransferencia.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=this.jButtonNuevoRelacionesTransferencia.isVisible();
			this.isVisibilidadCeldaModificarTransferencia=this.jButtonModificarTransferencia.isVisible();
			
			if(this.jInternalFrameDetalleFormTransferencia!=null) {
			this.isVisibilidadCeldaActualizarTransferencia=this.jInternalFrameDetalleFormTransferencia.jButtonActualizarTransferencia.isVisible();
			this.isVisibilidadCeldaEliminarTransferencia=this.jInternalFrameDetalleFormTransferencia.jButtonEliminarTransferencia.isVisible();
			this.isVisibilidadCeldaCancelarTransferencia=this.jInternalFrameDetalleFormTransferencia.jButtonCancelarTransferencia.isVisible();
			this.isVisibilidadCeldaGuardarTransferencia=this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosTransferencia.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosTransferencia=this.jButtonGuardarCambiosTablaTransferencia.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoTransferencia=this.jButtonNuevoToolBarTransferencia.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=this.jButtonNuevoRelacionesToolBarTransferencia.isVisible();
			
			if(this.jInternalFrameDetalleFormTransferencia!=null) {
			this.isVisibilidadCeldaModificarTransferencia=this.jInternalFrameDetalleFormTransferencia.jButtonModificarToolBarTransferencia.isVisible();
			this.isVisibilidadCeldaActualizarTransferencia=this.jInternalFrameDetalleFormTransferencia.jButtonActualizarToolBarTransferencia.isVisible();
			this.isVisibilidadCeldaEliminarTransferencia=this.jInternalFrameDetalleFormTransferencia.jButtonEliminarToolBarTransferencia.isVisible();
			this.isVisibilidadCeldaCancelarTransferencia=this.jInternalFrameDetalleFormTransferencia.jButtonCancelarToolBarTransferencia.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarTransferencia=this.jButtonGuardarCambiosToolBarTransferencia.isVisible();
			this.isVisibilidadCeldaGuardarCambiosTransferencia=this.jButtonGuardarCambiosTablaToolBarTransferencia.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoTransferencia=this.jMenuItemNuevoTransferencia.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=this.jMenuItemNuevoRelacionesTransferencia.isVisible();
			
			if(this.jInternalFrameDetalleFormTransferencia!=null) {
			this.isVisibilidadCeldaModificarTransferencia=this.jInternalFrameDetalleFormTransferencia.jMenuItemModificarTransferencia.isVisible();
			this.isVisibilidadCeldaActualizarTransferencia=this.jInternalFrameDetalleFormTransferencia.jMenuItemActualizarTransferencia.isVisible();
			this.isVisibilidadCeldaEliminarTransferencia=this.jInternalFrameDetalleFormTransferencia.jMenuItemEliminarTransferencia.isVisible();
			this.isVisibilidadCeldaCancelarTransferencia=this.jInternalFrameDetalleFormTransferencia.jMenuItemCancelarTransferencia.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarTransferencia=this.jMenuItemGuardarCambiosTransferencia.isVisible();
			this.isVisibilidadCeldaGuardarCambiosTransferencia=this.jMenuItemGuardarCambiosTablaTransferencia.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesTransferencia(Boolean esInicializar) {
		if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.transferenciaSessionBean.getConGuardarRelaciones()) {
				//if(this.transferenciaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesTransferencia();
			}
			
			this.inicializarActualizarBindingBotonesManualTransferencia(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualTransferencia() {
		this.jButtonNuevoTransferencia.setVisible(this.isPermisoNuevoTransferencia);			
		this.jButtonDuplicarTransferencia.setVisible(this.isPermisoDuplicarTransferencia);			
		this.jButtonCopiarTransferencia.setVisible(this.isPermisoCopiarTransferencia);			
		this.jButtonVerFormTransferencia.setVisible(this.isPermisoVerFormTransferencia);			
		
		this.jButtonAbrirOrderByTransferencia.setVisible(this.isPermisoOrdenTransferencia);					
		
		this.jButtonNuevoRelacionesTransferencia.setVisible(this.isPermisoNuevoTransferencia);			
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonModificarTransferencia.setVisible(this.isPermisoActualizarTransferencia);	
			this.jInternalFrameDetalleFormTransferencia.jButtonActualizarTransferencia.setVisible(this.isPermisoActualizarTransferencia);	
			this.jInternalFrameDetalleFormTransferencia.jButtonEliminarTransferencia.setVisible(this.isPermisoEliminarTransferencia);
			this.jInternalFrameDetalleFormTransferencia.jButtonCancelarTransferencia.setVisible(this.isVisibilidadCeldaCancelarTransferencia);						
			this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosTransferencia.setVisible(this.isPermisoGuardarCambiosTransferencia);							
		}
		
		this.jButtonGuardarCambiosTablaTransferencia.setVisible(this.isPermisoActualizarTransferencia);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleTransferencia() {
		this.jInternalFrameDetalleFormTransferencia.jButtonModificarTransferencia.setVisible(this.isPermisoActualizarTransferencia);	
		this.jInternalFrameDetalleFormTransferencia.jButtonActualizarTransferencia.setVisible(this.isPermisoActualizarTransferencia);	
		this.jInternalFrameDetalleFormTransferencia.jButtonEliminarTransferencia.setVisible(this.isPermisoEliminarTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jButtonCancelarTransferencia.setVisible(this.isVisibilidadCeldaCancelarTransferencia);							
		this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosTransferencia.setVisible((this.isVisibilidadCeldaGuardarTransferencia && this.isPermisoGuardarCambiosTransferencia));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosTransferencia() {
		if(TransferenciaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualTransferencia();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesTransferencia() {
	}
	
	public void jTableDatosTransferenciaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarTransferencia(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.transferencia.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebTransferencia(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderTransferencia.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.transferencia.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebTransferencia(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderTransferencia.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.transferencia.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebTransferencia(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderTransferencia.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.transferencia.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebTransferencia(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderTransferencia.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.transferencia.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebTransferencia(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderTransferencia.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.transferencia.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebTransferencia(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderTransferencia.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.transferencia.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebTransferencia(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderTransferencia.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.transferencia.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebTransferencia(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderTransferencia.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.transferencia.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.transferencia.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_entregaTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getfecha_entrega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_entrega = '"+Funciones2.getStringPostgresDate(this.transferencia.getfecha_entrega())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_secuencialTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getnumero_secuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_secuencial like '%"+this.transferencia.getnumero_secuencial()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebTransferencia(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderTransferencia.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.transferencia.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cambioTransferenciaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="TipoCambio";

			if(!this.sFinalQueryGeneral_tipocambio.equals("")) {
				this.tipocambioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_tipocambio);
				this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.tipocambioBeanSwingJInternalFrame.procesarBusqueda(this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda);
				this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTipoCambio(false);
			}

			if(!this.sFinalQueryComboTipoCambio.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderTransferencia=null;
			TitledBorder titledBordertipocambio=null;

			if(!this.jScrollPanelDatosTransferencia.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderTransferencia.getTitle() + " -> Tipo Cambio");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_tipo_cambioTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocambio=true;

			idTienePermisotipocambio=this.tienePermisosUsuarioEnPaginaWebTransferencia(TipoCambioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocambio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocambioBeanSwingJInternalFrame.getTipoCambioLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_tipo_cambio()!=null) {
					this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocambioBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_tipo_cambio());
					this.tipocambioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCambio();
				}

				JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderTransferencia.getTitle() + " -> Tipo Cambio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cambioTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_tipo_cambio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cambio = "+this.transferencia.getid_tipo_cambio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_inventarioTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadoinventario=true;

			idTienePermisoestadoinventario=this.tienePermisosUsuarioEnPaginaWebTransferencia(EstadoInventarioConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadoinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.estadoinventarioBeanSwingJInternalFrame=new EstadoInventarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadoinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadoinventarioBeanSwingJInternalFrame.getEstadoInventarioLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_estado_inventario()!=null) {
					this.estadoinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadoinventarioBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_estado_inventario());
					this.estadoinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadoinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoInventario();
				}

				JInternalFrameBase jinternalFrame =this.estadoinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderestadoinventario=(TitledBorder)this.estadoinventarioBeanSwingJInternalFrame.jScrollPanelDatosEstadoInventario.getBorder();

				titledBorderestadoinventario.setTitle(titledBorderTransferencia.getTitle() + " -> Estado Inventario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_inventarioTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_estado_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_inventario = "+this.transferencia.getid_estado_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebTransferencia(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderTransferencia.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.transferencia.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transportistaTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransportista=true;

			idTienePermisotransportista=this.tienePermisosUsuarioEnPaginaWebTransferencia(TransportistaConstantesFunciones.CLASSNAME);

			if(idTienePermisotransportista) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.transportistaBeanSwingJInternalFrame=new TransportistaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transportistaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transportistaBeanSwingJInternalFrame.getTransportistaLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_transportista()!=null) {
					this.transportistaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transportistaBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_transportista());
					this.transportistaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransportista();
				}

				JInternalFrameBase jinternalFrame =this.transportistaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBordertransportista=(TitledBorder)this.transportistaBeanSwingJInternalFrame.jScrollPanelDatosTransportista.getBorder();

				titledBordertransportista.setTitle(titledBorderTransferencia.getTitle() + " -> Transportista");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transportistaTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_transportista()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transportista = "+this.transferencia.getid_transportista().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoTransferenciaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderTransferencia=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosTransferencia.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderTransferencia.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebTransferencia(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderTransferencia.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.transferencia.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.transferencia.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonporcentaje_descuentoTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getporcentaje_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where porcentaje_descuento = "+this.transferencia.getporcentaje_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsumanTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getsuman()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where suman = "+this.transferencia.getsuman().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.transferencia.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_descuentoTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getvalor_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_descuento = "+this.transferencia.getvalor_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_descuentoTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.gettotal_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_descuento = "+this.transferencia.gettotal_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.transferencia.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonstockTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getstock()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where stock = "+this.transferencia.getstock().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.transferencia.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_otroTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.gettotal_otro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_otro = "+this.transferencia.gettotal_otro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonultimo_costoTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getultimo_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ultimo_costo = "+this.transferencia.getultimo_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_itemsTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getnumero_items()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_items = "+this.transferencia.getnumero_items().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonretencionTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getretencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where retencion = "+this.transferencia.getretencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.transferencia.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfleteTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getflete()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where flete = "+this.transferencia.getflete().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonimpuestoTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getimpuesto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where impuesto = "+this.transferencia.getimpuesto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_transaccion_moduloTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotransaccionmodulo=true;

			idTienePermisotipotransaccionmodulo=this.tienePermisosUsuarioEnPaginaWebTransferencia(TipoTransaccionModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotransaccionmodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.tipotransaccionmoduloBeanSwingJInternalFrame=new TipoTransaccionModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotransaccionmoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotransaccionmoduloBeanSwingJInternalFrame.getTipoTransaccionModuloLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_tipo_transaccion_modulo()!=null) {
					this.tipotransaccionmoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_tipo_transaccion_modulo());
					this.tipotransaccionmoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTransaccionModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipotransaccionmoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBordertipotransaccionmodulo=(TitledBorder)this.tipotransaccionmoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoTransaccionModulo.getBorder();

				titledBordertipotransaccionmodulo.setTitle(titledBorderTransferencia.getTitle() + " -> Tipo Transaccion Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_transaccion_moduloTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_tipo_transaccion_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_transaccion_modulo = "+this.transferencia.getid_tipo_transaccion_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableTransferenciaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderTransferencia=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosTransferencia.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderTransferencia.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebTransferencia(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.transferenciaLogic.getConnexion());

				if(this.transferencia.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.transferencia.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTransferencia=(TitledBorder)this.jScrollPanelDatosTransferencia.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderTransferencia.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.transferencia.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_comprobanteTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getnumero_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_comprobante like '%"+this.transferencia.getnumero_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.gettransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.transferencia==null) {
						this.transferencia = new Transferencia();
					}

					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);
				}

				if(this.transferencia.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.transferencia.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdAnio();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAsientoContableTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdAsientoContable();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdEjercicio();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdEmpleado();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdEmpresa();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoInventarioTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdEstadoInventario();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdFormato();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdMes();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModuloTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdModulo();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdMoneda();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdPeriodo();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdSucursal();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCambioTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdTipoCambio();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTransaccionModuloTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdTipoTransaccionModulo();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransportistaTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdTransportista();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioTransferenciaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTransferencia(false,false);

			this.getTransferenciasFK_IdUsuario();

			this.inicializarActualizarBindingTransferencia(false);

			//if(TransferenciaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTransferencia(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.transferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameTransferencia() {
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
		

		if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
			this.jInternalFrameDetalleFormTransferencia.setVisible(false);	    			
			this.jInternalFrameDetalleFormTransferencia.dispose();
			this.jInternalFrameDetalleFormTransferencia=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
			this.jInternalFrameReporteDinamicoTransferencia.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoTransferencia.dispose();
			this.jInternalFrameReporteDinamicoTransferencia=null;
		}
		
		if(this.jInternalFrameImportacionTransferencia!=null) {
			this.jInternalFrameImportacionTransferencia.setVisible(false);	    			
			this.jInternalFrameImportacionTransferencia.dispose();
			this.jInternalFrameImportacionTransferencia=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessTransferencia();
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			
			if(sTipo.equals("NuevoTransferencia")) {
				jButtonNuevoTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarTransferencia")) {
				jButtonDuplicarTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarTransferencia")) {
				jButtonCopiarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("VerFormTransferencia")) {
				jButtonVerFormTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarTransferencia")) {
				jButtonNuevoTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarTransferencia")) {
				jButtonDuplicarTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoTransferencia")) {
				jButtonNuevoTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarTransferencia")) {
				jButtonDuplicarTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesTransferencia")) {
				jButtonNuevoTransferenciaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarTransferencia")) {
				jButtonNuevoTransferenciaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesTransferencia")) {
				jButtonNuevoTransferenciaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarTransferencia")) {
				jButtonModificarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarTransferencia")) {
				jButtonModificarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarTransferencia")) {
				jButtonModificarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarTransferencia")) {
				jButtonActualizarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarTransferencia")) {
				jButtonActualizarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarTransferencia")) {
				jButtonActualizarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("EliminarTransferencia")) {
				jButtonEliminarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarTransferencia")) {
				jButtonEliminarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarTransferencia")) {
				jButtonEliminarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CancelarTransferencia")) {
				jButtonCancelarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarTransferencia")) {
				jButtonCancelarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarTransferencia")) {
				jButtonCancelarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CerrarTransferencia")) {
				jButtonCerrarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarTransferencia")) {
				jButtonCerrarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarTransferencia")) {
				jButtonCerrarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarTransferencia")) {
				jButtonMostrarOcultarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarTransferencia")) {
				jButtonCancelarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTransferencia")) {
				jButtonGuardarCambiosTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarTransferencia")) {
				jButtonGuardarCambiosTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarTransferencia")) {
				jButtonCopiarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarTransferencia")) {
				jButtonVerFormTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTransferencia")) {
				jButtonGuardarCambiosTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarTransferencia")) {
				jButtonCopiarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormTransferencia")) {
				jButtonVerFormTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaTransferencia")) {
				jButtonGuardarCambiosTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarTransferencia")) {
				jButtonGuardarCambiosTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaTransferencia")) {
				jButtonGuardarCambiosTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionTransferencia")) {
				jButtonRecargarInformacionTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarTransferencia")) {
				jButtonRecargarInformacionTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionTransferencia")) {
				jButtonRecargarInformacionTransferenciaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresTransferencia")) {
				jButtonAnterioresTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarTransferencia")) {
				jButtonAnterioresTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreTransferencia")) {
				jButtonAnterioresTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesTransferencia")) {
				jButtonSiguientesTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarTransferencia")) {
				jButtonSiguientesTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesTransferencia")) {
				jButtonSiguientesTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByTransferencia") || sTipo.equals("MenuItemDetalleAbrirOrderByTransferencia")) {
				jButtonAbrirOrderByTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarTransferencia") || sTipo.equals("MenuItemDetalleMostrarOcultarTransferencia")) {
				jButtonMostrarOcultarTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosTransferencia")) {
				jButtonNuevoGuardarCambiosTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarTransferencia")) {
				jButtonNuevoGuardarCambiosTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosTransferencia")) {
				jButtonNuevoGuardarCambiosTransferenciaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoTransferencia")) {
				jButtonCerrarReporteDinamicoTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoTransferencia")) {
				jButtonGenerarReporteDinamicoTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoTransferencia")) {
				
				jButtonGenerarExcelReporteDinamicoTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionTransferencia")) {
				jButtonCerrarImportacionTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionTransferencia")) {
				
				jButtonGenerarImportacionTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionTransferencia")) {
				
				jButtonAbrirImportacionTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesTransferencia")) {
				jComboBoxTiposAccionesTransferenciaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesTransferencia")) {
				jComboBoxTiposRelacionesTransferenciaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioTransferencia")) {
				jComboBoxTiposAccionesTransferenciaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarTransferencia")) {
				
				jComboBoxTiposSeleccionarTransferenciaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralTransferencia")) {
				jTextFieldValorCampoGeneralTransferenciaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByTransferencia")) {
				jButtonAbrirOrderByTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarTransferencia")) {
				jButtonAbrirOrderByTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByTransferencia")) {
				jButtonCerrarOrderByTransferenciaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idTransferenciaBusqueda")) {
				this.jButtonidTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaTransferenciaUpdate")) {
				this.jButtonid_empresaTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaTransferenciaBusqueda")) {
				this.jButtonid_empresaTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalTransferenciaUpdate")) {
				this.jButtonid_sucursalTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalTransferenciaBusqueda")) {
				this.jButtonid_sucursalTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloTransferenciaUpdate")) {
				this.jButtonid_moduloTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloTransferenciaBusqueda")) {
				this.jButtonid_moduloTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioTransferenciaUpdate")) {
				this.jButtonid_ejercicioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioTransferenciaBusqueda")) {
				this.jButtonid_ejercicioTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoTransferenciaUpdate")) {
				this.jButtonid_periodoTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoTransferenciaBusqueda")) {
				this.jButtonid_periodoTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioTransferenciaUpdate")) {
				this.jButtonid_anioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioTransferenciaBusqueda")) {
				this.jButtonid_anioTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesTransferenciaUpdate")) {
				this.jButtonid_mesTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesTransferenciaBusqueda")) {
				this.jButtonid_mesTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioTransferenciaUpdate")) {
				this.jButtonid_usuarioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioTransferenciaBusqueda")) {
				this.jButtonid_usuarioTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionTransferenciaBusqueda")) {
				this.jButtonfecha_emisionTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_entregaTransferenciaBusqueda")) {
				this.jButtonfecha_entregaTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialTransferenciaBusqueda")) {
				this.jButtonnumero_secuencialTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaTransferenciaUpdate")) {
				this.jButtonid_monedaTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaTransferenciaBusqueda")) {
				this.jButtonid_monedaTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioTransferencia")) {
				this.jButtonid_tipo_cambioTransferenciaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioTransferenciaUpdate")) {
				this.jButtonid_tipo_cambioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioTransferenciaBusqueda")) {
				this.jButtonid_tipo_cambioTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_inventarioTransferenciaUpdate")) {
				this.jButtonid_estado_inventarioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_inventarioTransferenciaBusqueda")) {
				this.jButtonid_estado_inventarioTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoTransferenciaUpdate")) {
				this.jButtonid_formatoTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoTransferenciaBusqueda")) {
				this.jButtonid_formatoTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaTransferenciaUpdate")) {
				this.jButtonid_transportistaTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaTransferenciaBusqueda")) {
				this.jButtonid_transportistaTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoTransferencia")) {
				this.jButtonid_empleadoTransferenciaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoTransferenciaUpdate")) {
				this.jButtonid_empleadoTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoTransferenciaBusqueda")) {
				this.jButtonid_empleadoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionTransferenciaBusqueda")) {
				this.jButtondescripcionTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_descuentoTransferenciaBusqueda")) {
				this.jButtonporcentaje_descuentoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanTransferenciaBusqueda")) {
				this.jButtonsumanTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceTransferenciaBusqueda")) {
				this.jButtoniceTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_descuentoTransferenciaBusqueda")) {
				this.jButtonvalor_descuentoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_descuentoTransferenciaBusqueda")) {
				this.jButtontotal_descuentoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaTransferenciaBusqueda")) {
				this.jButtonivaTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("stockTransferenciaBusqueda")) {
				this.jButtonstockTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalTransferenciaBusqueda")) {
				this.jButtonsub_totalTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_otroTransferenciaBusqueda")) {
				this.jButtontotal_otroTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ultimo_costoTransferenciaBusqueda")) {
				this.jButtonultimo_costoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_itemsTransferenciaBusqueda")) {
				this.jButtonnumero_itemsTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionTransferenciaBusqueda")) {
				this.jButtonretencionTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalTransferenciaBusqueda")) {
				this.jButtontotalTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteTransferenciaBusqueda")) {
				this.jButtonfleteTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("impuestoTransferenciaBusqueda")) {
				this.jButtonimpuestoTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloTransferenciaUpdate")) {
				this.jButtonid_tipo_transaccion_moduloTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloTransferenciaBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableTransferencia")) {
				this.jButtonid_asiento_contableTransferenciaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableTransferenciaUpdate")) {
				this.jButtonid_asiento_contableTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableTransferenciaBusqueda")) {
				this.jButtonid_asiento_contableTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteTransferenciaBusqueda")) {
				this.jButtonnumero_comprobanteTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaTransferenciaBusqueda")) {
				this.jButtonfechaTransferenciaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableTransferencia")) {
				this.jButtonid_asiento_contableTransferenciaActionPerformed(evt);
			}
			else if(sTipo.equals("id_empleadoTransferencia")) {
				this.jButtonid_empleadoTransferenciaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdAsientoContableTransferencia")) {
				this.jButtonFK_IdAsientoContableTransferenciaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpleadoTransferencia")) {
				this.jButtonFK_IdEmpleadoTransferenciaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoInventarioTransferencia")) {
				this.jButtonFK_IdEstadoInventarioTransferenciaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTransaccionModuloTransferencia")) {
				this.jButtonFK_IdTipoTransaccionModuloTransferenciaActionPerformed(evt);
			}
			
			;
			
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessTransferencia();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTransferenciaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				


				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			Transferencia transferenciaLocal=null;
			
			if(!this.getEsControlTabla()) {
				transferenciaLocal=this.transferencia;
			} else {
				transferenciaLocal=this.transferenciaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
							
				
				


				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaAnterior =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.transferenciaAnterior =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTransferenciaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
								
						
				


				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
								
				
				


				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaAnterior =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.transferenciaAnterior =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaAnterior =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.transferenciaAnterior =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTransferenciaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
			
			this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
							
				
				


				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTransferenciaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferenciaAnterior =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.transferenciaAnterior =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTransferenciaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
			
			this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
								
				
				


				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaAnterior =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.transferenciaAnterior =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTransferenciaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
			
			this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTransferenciaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosTransferencia")) {
					jCheckBoxSeleccionarTodosTransferenciaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosTransferencia")) {
					jCheckBoxSeleccionadosTransferenciaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarTransferencia")) {
					
				}
				
				


				
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
												
				
				


				
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTransferenciaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.transferenciaAnterior =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.transferenciaAnterior =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTransferenciaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTransferenciaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.transferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.transferencia);
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Transferencia.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Transferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.transferenciaAnterior =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.transferenciaAnterior =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarTransferencia")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosTransferenciaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosTransferencia.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.transferencia =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.transferencia =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.transferencia);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarTransferencia")) {
				
				}
				
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarTransferencia")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosTransferencia.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarTransferencia")) {
			
			}
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessTransferencia();
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			if(sTipo.equals("NuevoTransferencia")) {
				jButtonNuevoTransferenciaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarTransferencia")) {
				jButtonDuplicarTransferenciaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarTransferencia")) {
				jButtonCopiarTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormTransferencia")) {
				jButtonVerFormTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesTransferencia")) {
				jButtonNuevoTransferenciaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarTransferencia")) {
				jButtonModificarTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarTransferencia")) {
				jButtonActualizarTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarTransferencia")) {
				jButtonEliminarTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaTransferencia")) {
				jButtonGuardarCambiosTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarTransferencia")) {
				jButtonCancelarTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarTransferencia")) {
				jButtonCerrarTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTransferencia")) {
				jButtonGuardarCambiosTransferenciaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosTransferencia")) {
				jButtonNuevoGuardarCambiosTransferenciaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByTransferencia")) {
				jButtonAbrirOrderByTransferenciaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionTransferencia")) {
				jButtonRecargarInformacionTransferenciaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresTransferencia")) {
				jButtonAnterioresTransferenciaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesTransferencia")) {
				jButtonSiguientesTransferenciaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idTransferenciaBusqueda")) {
				this.jButtonidTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaTransferenciaUpdate")) {
				this.jButtonid_empresaTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaTransferenciaBusqueda")) {
				this.jButtonid_empresaTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalTransferenciaUpdate")) {
				this.jButtonid_sucursalTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalTransferenciaBusqueda")) {
				this.jButtonid_sucursalTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloTransferenciaUpdate")) {
				this.jButtonid_moduloTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloTransferenciaBusqueda")) {
				this.jButtonid_moduloTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioTransferenciaUpdate")) {
				this.jButtonid_ejercicioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioTransferenciaBusqueda")) {
				this.jButtonid_ejercicioTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoTransferenciaUpdate")) {
				this.jButtonid_periodoTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoTransferenciaBusqueda")) {
				this.jButtonid_periodoTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioTransferenciaUpdate")) {
				this.jButtonid_anioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioTransferenciaBusqueda")) {
				this.jButtonid_anioTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesTransferenciaUpdate")) {
				this.jButtonid_mesTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesTransferenciaBusqueda")) {
				this.jButtonid_mesTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioTransferenciaUpdate")) {
				this.jButtonid_usuarioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioTransferenciaBusqueda")) {
				this.jButtonid_usuarioTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionTransferenciaBusqueda")) {
				this.jButtonfecha_emisionTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_entregaTransferenciaBusqueda")) {
				this.jButtonfecha_entregaTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialTransferenciaBusqueda")) {
				this.jButtonnumero_secuencialTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaTransferenciaUpdate")) {
				this.jButtonid_monedaTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaTransferenciaBusqueda")) {
				this.jButtonid_monedaTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioTransferencia")) {
				this.jButtonid_tipo_cambioTransferenciaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioTransferenciaUpdate")) {
				this.jButtonid_tipo_cambioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioTransferenciaBusqueda")) {
				this.jButtonid_tipo_cambioTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_inventarioTransferenciaUpdate")) {
				this.jButtonid_estado_inventarioTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_inventarioTransferenciaBusqueda")) {
				this.jButtonid_estado_inventarioTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoTransferenciaUpdate")) {
				this.jButtonid_formatoTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoTransferenciaBusqueda")) {
				this.jButtonid_formatoTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaTransferenciaUpdate")) {
				this.jButtonid_transportistaTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaTransferenciaBusqueda")) {
				this.jButtonid_transportistaTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoTransferencia")) {
				this.jButtonid_empleadoTransferenciaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoTransferenciaUpdate")) {
				this.jButtonid_empleadoTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoTransferenciaBusqueda")) {
				this.jButtonid_empleadoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionTransferenciaBusqueda")) {
				this.jButtondescripcionTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_descuentoTransferenciaBusqueda")) {
				this.jButtonporcentaje_descuentoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanTransferenciaBusqueda")) {
				this.jButtonsumanTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceTransferenciaBusqueda")) {
				this.jButtoniceTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_descuentoTransferenciaBusqueda")) {
				this.jButtonvalor_descuentoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_descuentoTransferenciaBusqueda")) {
				this.jButtontotal_descuentoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaTransferenciaBusqueda")) {
				this.jButtonivaTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("stockTransferenciaBusqueda")) {
				this.jButtonstockTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalTransferenciaBusqueda")) {
				this.jButtonsub_totalTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_otroTransferenciaBusqueda")) {
				this.jButtontotal_otroTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ultimo_costoTransferenciaBusqueda")) {
				this.jButtonultimo_costoTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_itemsTransferenciaBusqueda")) {
				this.jButtonnumero_itemsTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionTransferenciaBusqueda")) {
				this.jButtonretencionTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalTransferenciaBusqueda")) {
				this.jButtontotalTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteTransferenciaBusqueda")) {
				this.jButtonfleteTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("impuestoTransferenciaBusqueda")) {
				this.jButtonimpuestoTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloTransferenciaUpdate")) {
				this.jButtonid_tipo_transaccion_moduloTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloTransferenciaBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableTransferencia")) {
				this.jButtonid_asiento_contableTransferenciaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableTransferenciaUpdate")) {
				this.jButtonid_asiento_contableTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableTransferenciaBusqueda")) {
				this.jButtonid_asiento_contableTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteTransferenciaBusqueda")) {
				this.jButtonnumero_comprobanteTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaTransferenciaBusqueda")) {
				this.jButtonfechaTransferenciaBusquedaActionPerformed(evt);
			}
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessTransferencia();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameTransferencia")) {
				closingInternalFrameTransferencia();
				
			} else if(sTipo.equals("jButtonCancelarTransferencia")) {
				JInternalFrameBase jInternalFrameDetalleFormTransferencia = (JInternalFrameBase)evt.getSource();
	            	
	            TransferenciaBeanSwingJInternalFrame jInternalFrameParent=(TransferenciaBeanSwingJInternalFrame)jInternalFrameDetalleFormTransferencia.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarTransferenciaActionPerformed(null);
			}
			
			TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.transferencia,new Object(),this.transferenciaParameterGeneral,this.transferenciaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormTransferencia(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormTransferencia(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormTransferencia(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.transferencia)) {
			if(!esControlTabla) {
				if(TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);			
				}
				
				if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualTransferencia(this.transferencia,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.transferenciaReturnGeneral=transferenciaLogic.procesarEventosTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.transferenciaLogic.getTransferencias(),this.transferencia,this.transferenciaParameterGeneral,this.isEsNuevoTransferencia,classes);//this.transferenciaLogic.getTransferencia()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanTransferencia(this.transferenciaReturnGeneral,this.transferenciaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanTransferencia(classes,this.transferenciaReturnGeneral,this.transferenciaBean,false);
					}
						
					if(this.transferenciaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyTransferencia(this.transferenciaReturnGeneral.getTransferencia());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioTransferencia(this.transferenciaReturnGeneral.getTransferencia());	
					}
						
					if(this.transferenciaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioTransferencia(this.transferenciaReturnGeneral.getTransferencia(),classes);//this.transferenciaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioTransferencia(this.transferencia,classes);//this.transferenciaBean);									
				}
			
				if(TransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualTransferencia(this.transferencia,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysTransferencia(this.transferencia);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.transferenciaAnterior!=null) {
						this.transferencia=this.transferenciaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.transferenciaReturnGeneral=transferenciaLogic.procesarEventosTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.transferenciaLogic.getTransferencias(),this.transferencia,this.transferenciaParameterGeneral,this.isEsNuevoTransferencia,classes);//this.transferenciaLogic.getTransferencia()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.transferenciaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.transferenciaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.transferenciaReturnGeneral.getTransferencia(),transferenciaLogic.getTransferencias());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.transferenciaReturnGeneral.getTransferencia(),this.transferencias);
				}
				//ARCHITECTURE
				
				//this.jTableDatosTransferencia.repaint();
				
				//((AbstractTableModel) this.jTableDatosTransferencia.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosTransferencia();
			}
		}
	}
	
	public void actualizarVisualTableDatosTransferencia() throws Exception {
		
		TransferenciaModel transferenciaModel=(TransferenciaModel)this.jTableDatosTransferencia.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			transferenciaModel.transferencias=this.transferenciaLogic.getTransferencias();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			transferenciaModel.transferencias=this.transferencias;
		}
		
		
		((TransferenciaModel) this.jTableDatosTransferencia.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaTransferencia() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.gettransferenciaAnterior(),this.transferenciaLogic.getTransferencias());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.gettransferenciaAnterior(),this.transferencias);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosTransferencia();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioTransferencia(Transferencia transferencia,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleTransferencia.class)) {
					this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.setDetalleTransferencias(transferencia.getDetalleTransferencias());
					this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleTransferencia(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.transferencia,new Object(),generalEntityParameterGeneral,this.transferenciaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.transferenciaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=TransferenciaConstantesFunciones.getClassesRelationshipsOfTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=TransferenciaConstantesFunciones.getClassesRelationshipsFromStringsOfTransferencia(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormTransferencia(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				TransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.transferencia,new Object(),generalEntityParameterGeneral,this.transferenciaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioTransferencia(TransferenciaBean transferenciaBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleTransferencia.class)) {
					this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.setDetalleTransferencias(transferencia.getDetalleTransferencias());
					this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleTransferencia(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanTransferencia(ArrayList<Classe> classes,TransferenciaReturnGeneral transferenciaReturnGeneral,TransferenciaBean transferenciaBean,Boolean conDefault) throws Exception {
		
			this.transferenciaBean.setDetalleTransferencias(transferenciaReturnGeneral.getTransferencia().getDetalleTransferencias());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualTransferencia(Transferencia transferencia,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleTransferencia.class)) {
					transferencia.setDetalleTransferencias(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaBeanSwingJInternalFrame.detalletransferenciaLogic.getDetalleTransferencias());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.transferencia)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormTransferencia = new TransferenciaDetalleFormJInternalFrame(jDesktopPane,this.transferenciaSessionBean.getConGuardarRelaciones(),this.transferenciaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormTransferencia);
		this.jInternalFrameDetalleFormTransferencia.setVisible(false);
		this.jInternalFrameDetalleFormTransferencia.setSelected(false);						
		
		this.jInternalFrameDetalleFormTransferencia.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormTransferencia.transferenciaLogic=this.transferenciaLogic;
		
		this.cargarCombosFrameForeignKeyTransferencia("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleTransferencia();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleTransferencia();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyTransferencia("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyTransferencia();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormTransferencia.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarTransferencia"));
		
		this.jInternalFrameDetalleFormTransferencia.jButtonModificarTransferencia.addActionListener(new ButtonActionListener(this,"ModificarTransferencia"));

		
		this.jInternalFrameDetalleFormTransferencia.jButtonModificarToolBarTransferencia.addActionListener(new ButtonActionListener(this,"ModificarToolBarTransferencia"));
					
		this.jInternalFrameDetalleFormTransferencia.jMenuItemModificarTransferencia.addActionListener(new ButtonActionListener(this,"MenuItemModificarTransferencia"));		
		
		
		
		this.jInternalFrameDetalleFormTransferencia.jButtonActualizarTransferencia.addActionListener (new ButtonActionListener(this,"ActualizarTransferencia"));
		
		
		this.jInternalFrameDetalleFormTransferencia.jButtonActualizarToolBarTransferencia.addActionListener(new ButtonActionListener(this,"ActualizarToolBarTransferencia"));
						
		this.jInternalFrameDetalleFormTransferencia.jMenuItemActualizarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemActualizarTransferencia"));		
		
		
		
		this.jInternalFrameDetalleFormTransferencia.jButtonEliminarTransferencia.addActionListener (new ButtonActionListener(this,"EliminarTransferencia"));
		
		
		this.jInternalFrameDetalleFormTransferencia.jButtonEliminarToolBarTransferencia.addActionListener (new ButtonActionListener(this,"EliminarToolBarTransferencia"));
								
		this.jInternalFrameDetalleFormTransferencia.jMenuItemEliminarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemEliminarTransferencia"));		
		
		
		
		this.jInternalFrameDetalleFormTransferencia.jButtonCancelarTransferencia.addActionListener (new ButtonActionListener(this,"CancelarTransferencia"));
		
		
		this.jInternalFrameDetalleFormTransferencia.jButtonCancelarToolBarTransferencia.addActionListener (new ButtonActionListener(this,"CancelarToolBarTransferencia"));
					
		this.jInternalFrameDetalleFormTransferencia.jMenuItemCancelarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemCancelarTransferencia"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormTransferencia.jMenuItemDetalleCerrarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarTransferencia"));		
		
		
		
		this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosToolBarTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarTransferencia"));
		
		
		
		this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosToolBarTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarTransferencia"));
		
		
		
		this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioTransferencia"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonidTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"idTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empresaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empresaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_sucursalTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_sucursalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_moduloTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_moduloTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_moduloTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_ejercicioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_ejercicioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_periodoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_periodoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_anioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_anioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_anioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_mesTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_mesTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_mesTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_usuarioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_usuarioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfecha_emisionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfecha_entregaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_secuencialTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_monedaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_monedaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_monedaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaTransferenciaBusqueda"));
		//jButtonid_tipo_cambioTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferencia.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_estado_inventarioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_inventarioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_estado_inventarioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_inventarioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_formatoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_formatoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_transportistaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_transportistaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaTransferenciaBusqueda"));
		//jButtonid_empleadoTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferencia.addActionListener(new ButtonActionListener(this,"id_empleadoTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtondescripcionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonporcentaje_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonsumanTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"sumanTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtoniceTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"iceTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonvalor_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"valor_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotal_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonivaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"ivaTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonstockTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"stockTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonsub_totalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotal_otroTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"total_otroTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonultimo_costoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_itemsTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_itemsTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonretencionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"retencionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"totalTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfleteTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fleteTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonimpuestoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"impuestoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_transaccion_moduloTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_transaccion_moduloTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloTransferenciaBusqueda"));
		//jButtonid_asiento_contableTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferencia.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_comprobanteTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfechaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fechaTransferenciaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesTransferencia"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameTransferencia"));
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarTransferencia"));
		}
		
		this.jTableDatosTransferencia.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarTransferencia"));
		
		this.jTableDatosTransferencia.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarTransferencia"));
		
		this.jButtonNuevoTransferencia.addActionListener(new ButtonActionListener(this,"NuevoTransferencia"));
		
		this.jButtonDuplicarTransferencia.addActionListener(new ButtonActionListener(this,"DuplicarTransferencia"));
		
		this.jButtonCopiarTransferencia.addActionListener(new ButtonActionListener(this,"CopiarTransferencia"));
		
		this.jButtonVerFormTransferencia.addActionListener(new ButtonActionListener(this,"VerFormTransferencia"));
		
		
		this.jButtonNuevoToolBarTransferencia.addActionListener(new ButtonActionListener(this,"NuevoToolBarTransferencia"));
			
		this.jButtonDuplicarToolBarTransferencia.addActionListener(new ButtonActionListener(this,"DuplicarToolBarTransferencia"));
			
		this.jMenuItemNuevoTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemNuevoTransferencia"));
			
		this.jMenuItemDuplicarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarTransferencia"));		
		
		
		this.jButtonNuevoRelacionesTransferencia.addActionListener (new ButtonActionListener(this,"NuevoRelacionesTransferencia"));
		
		
		this.jButtonNuevoRelacionesToolBarTransferencia.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarTransferencia"));
			
		this.jMenuItemNuevoRelacionesTransferencia.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesTransferencia"));		
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonModificarTransferencia.addActionListener(new ButtonActionListener(this,"ModificarTransferencia"));
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonModificarToolBarTransferencia.addActionListener(new ButtonActionListener(this,"ModificarToolBarTransferencia"));
			
			this.jInternalFrameDetalleFormTransferencia.jMenuItemModificarTransferencia.addActionListener(new ButtonActionListener(this,"MenuItemModificarTransferencia"));		
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormTransferencia.jButtonActualizarTransferencia.addActionListener (new ButtonActionListener(this,"ActualizarTransferencia"));
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonActualizarToolBarTransferencia.addActionListener(new ButtonActionListener(this,"ActualizarToolBarTransferencia"));
				
			this.jInternalFrameDetalleFormTransferencia.jMenuItemActualizarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemActualizarTransferencia"));		
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonEliminarTransferencia.addActionListener (new ButtonActionListener(this,"EliminarTransferencia"));
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonEliminarToolBarTransferencia.addActionListener (new ButtonActionListener(this,"EliminarToolBarTransferencia"));
						
			this.jInternalFrameDetalleFormTransferencia.jMenuItemEliminarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemEliminarTransferencia"));		
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonCancelarTransferencia.addActionListener (new ButtonActionListener(this,"CancelarTransferencia"));
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonCancelarToolBarTransferencia.addActionListener (new ButtonActionListener(this,"CancelarToolBarTransferencia"));
			
			this.jInternalFrameDetalleFormTransferencia.jMenuItemCancelarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemCancelarTransferencia"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarTransferencia.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarTransferencia"));		
		
		
		this.jButtonCerrarTransferencia.addActionListener (new ButtonActionListener(this,"CerrarTransferencia"));
		
		
		this.jButtonCerrarToolBarTransferencia.addActionListener (new ButtonActionListener(this,"CerrarToolBarTransferencia"));
			
		this.jMenuItemCerrarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemCerrarTransferencia"));
			
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jMenuItemDetalleCerrarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarTransferencia"));		
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosTransferencia"));
		}
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosToolBarTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarTransferencia"));
		}
		
		this.jButtonCopiarToolBarTransferencia.addActionListener (new ButtonActionListener(this,"CopiarToolBarTransferencia"));
			
		this.jButtonVerFormToolBarTransferencia.addActionListener (new ButtonActionListener(this,"VerFormToolBarTransferencia"));
		
		this.jMenuItemGuardarCambiosTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosTransferencia"));
			
		this.jMenuItemCopiarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemCopiarTransferencia"));		
		
		this.jMenuItemVerFormTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemVerFormTransferencia"));		
		
		
		this.jButtonGuardarCambiosTablaTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaTransferencia"));
		
		
		this.jButtonGuardarCambiosTablaToolBarTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarTransferencia"));
			
		this.jMenuItemGuardarCambiosTablaTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaTransferencia"));		
		
		
		
		this.jButtonRecargarInformacionTransferencia.addActionListener (new ButtonActionListener(this,"RecargarInformacionTransferencia"));
					
		this.jButtonRecargarInformacionToolBarTransferencia.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarTransferencia"));
		
		this.jMenuItemRecargarInformacionTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionTransferencia"));		
		
		
		
		this.jButtonAnterioresTransferencia.addActionListener (new ButtonActionListener(this,"AnterioresTransferencia"));
		
		
		this.jButtonAnterioresToolBarTransferencia.addActionListener (new ButtonActionListener(this,"AnterioresToolBarTransferencia"));
		
		this.jMenuItemAnterioresTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresTransferencia"));		
		
		
		this.jButtonSiguientesTransferencia.addActionListener (new ButtonActionListener(this,"SiguientesTransferencia"));
		
		
		this.jButtonSiguientesToolBarTransferencia.addActionListener (new ButtonActionListener(this,"SiguientesToolBarTransferencia"));
			
		this.jMenuItemSiguientesTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesTransferencia"));
			
		this.jMenuItemAbrirOrderByTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByTransferencia"));
			
		this.jMenuItemMostrarOcultarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarTransferencia"));
			
		this.jMenuItemDetalleAbrirOrderByTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByTransferencia"));
			
		this.jMenuItemDetalleMostarOcultarTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarTransferencia"));		
		
		
		this.jButtonNuevoGuardarCambiosTransferencia.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosTransferencia"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarTransferencia.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarTransferencia"));
			
		this.jMenuItemNuevoGuardarCambiosTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosTransferencia"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosTransferencia.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosTransferencia"));

		this.jCheckBoxSeleccionadosTransferencia.addItemListener(new CheckBoxItemListener(this,"SeleccionadosTransferencia"));
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioTransferencia"));
		}
		
		
		this.jComboBoxTiposRelacionesTransferencia.addActionListener (new ButtonActionListener(this,"TiposRelacionesTransferencia"));
			
		this.jComboBoxTiposAccionesTransferencia.addActionListener (new ButtonActionListener(this,"TiposAccionesTransferencia"));
					
		this.jComboBoxTiposSeleccionarTransferencia.addActionListener (new ButtonActionListener(this,"TiposSeleccionarTransferencia"));
			
		this.jTextFieldValorCampoGeneralTransferencia.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralTransferencia"));		
		
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonidTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"idTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empresaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empresaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_sucursalTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_sucursalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_moduloTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_moduloTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_moduloTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_ejercicioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_ejercicioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_periodoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_periodoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_anioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_anioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_anioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_mesTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_mesTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_mesTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_usuarioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_usuarioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfecha_emisionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfecha_entregaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_secuencialTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_monedaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_monedaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_monedaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaTransferenciaBusqueda"));
		//jButtonid_tipo_cambioTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferencia.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_estado_inventarioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_inventarioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_estado_inventarioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_inventarioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_formatoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_formatoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_transportistaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_transportistaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaTransferenciaBusqueda"));
		//jButtonid_empleadoTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferencia.addActionListener(new ButtonActionListener(this,"id_empleadoTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtondescripcionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonporcentaje_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonsumanTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"sumanTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtoniceTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"iceTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonvalor_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"valor_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotal_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonivaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"ivaTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonstockTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"stockTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonsub_totalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotal_otroTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"total_otroTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonultimo_costoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_itemsTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_itemsTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonretencionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"retencionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"totalTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfleteTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fleteTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonimpuestoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"impuestoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_transaccion_moduloTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_transaccion_moduloTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloTransferenciaBusqueda"));
		//jButtonid_asiento_contableTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferencia.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_comprobanteTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfechaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fechaTransferenciaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAsientoContableTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableTransferencia"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableTransferencia.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferencia"));

			this.jButtonFK_IdEmpleadoTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoTransferencia"));

			this.jButtonBuscarFK_IdEmpleadoid_empleadoTransferencia.addActionListener(new ButtonActionListener(this,"id_empleadoTransferencia"));

			this.jButtonFK_IdEstadoInventarioTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdEstadoInventarioTransferencia"));

			this.jButtonFK_IdTipoTransaccionModuloTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloTransferencia"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoTransferencia!=null) {
				this.jInternalFrameReporteDinamicoTransferencia.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoTransferencia"));
				this.jInternalFrameReporteDinamicoTransferencia.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoTransferencia"));
				this.jInternalFrameReporteDinamicoTransferencia.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoTransferencia"));
			}
			
			//this.jButtonCerrarReporteDinamicoTransferencia.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoTransferencia"));				
			//this.jButtonGenerarReporteDinamicoTransferencia.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoTransferencia"));
			//this.jButtonGenerarExcelReporteDinamicoTransferencia.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoTransferencia"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionTransferencia!=null) {
				this.jInternalFrameImportacionTransferencia.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionTransferencia"));
				this.jInternalFrameImportacionTransferencia.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionTransferencia"));
				this.jInternalFrameImportacionTransferencia.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionTransferencia"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByTransferencia.addActionListener (new ButtonActionListener(this,"AbrirOrderByTransferencia"));
			
			this.jButtonAbrirOrderByToolBarTransferencia.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarTransferencia"));			
			
			if(this.jInternalFrameOrderByTransferencia!=null) {
				this.jInternalFrameOrderByTransferencia.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByTransferencia"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTransferencia.jTabbedPaneRelacionesTransferencia.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesTransferencia"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameTransferencia();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormTransferencia.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormTransferencia = (JInternalFrameBase)event.getSource();
	            	
	            TransferenciaBeanSwingJInternalFrame jInternalFrameParent=(TransferenciaBeanSwingJInternalFrame)jInternalFrameDetalleFormTransferencia.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarTransferenciaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosTransferencia.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosTransferenciaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosTransferencia.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosTransferencia.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTransferenciaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTransferenciaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTransferenciaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoTransferencia";
		inputMap = this.jButtonNuevoTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoTransferenciaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTransferenciaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTransferenciaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTransferenciaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesTransferencia";
		inputMap = this.jButtonNuevoRelacionesTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoTransferenciaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarTransferencia";
		inputMap = this.jButtonModificarTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarTransferencia";
		inputMap = this.jButtonActualizarTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarTransferencia";
		inputMap = this.jButtonEliminarTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarTransferencia";
		inputMap = this.jButtonCancelarTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarTransferencia";
		inputMap = this.jButtonCerrarTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosTransferencia";
		inputMap = this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormTransferencia.jButtonGuardarCambiosTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosTransferencia.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosTransferenciaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesTransferencia.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesTransferenciaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarTransferencia.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarTransferenciaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralTransferencia.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralTransferenciaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonidTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"idTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empresaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empresaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_sucursalTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_sucursalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_moduloTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_moduloTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_moduloTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_ejercicioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_ejercicioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_periodoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_periodoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_anioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_anioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_anioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_mesTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_mesTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_mesTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_usuarioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_usuarioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfecha_emisionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfecha_entregaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_secuencialTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_monedaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_monedaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_monedaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaTransferenciaBusqueda"));
		//jButtonid_tipo_cambioTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferencia.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_estado_inventarioTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_inventarioTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_estado_inventarioTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_inventarioTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_formatoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_formatoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_transportistaTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_transportistaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaTransferenciaBusqueda"));
		//jButtonid_empleadoTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferencia.addActionListener(new ButtonActionListener(this,"id_empleadoTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtondescripcionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonporcentaje_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonsumanTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"sumanTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtoniceTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"iceTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonvalor_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"valor_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotal_descuentoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonivaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"ivaTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonstockTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"stockTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonsub_totalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotal_otroTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"total_otroTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonultimo_costoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_itemsTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_itemsTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonretencionTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"retencionTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtontotalTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"totalTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfleteTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fleteTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonimpuestoTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"impuestoTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_transaccion_moduloTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_transaccion_moduloTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloTransferenciaBusqueda"));
		//jButtonid_asiento_contableTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferencia.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonnumero_comprobanteTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTransferencia.jButtonfechaTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fechaTransferenciaBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableTransferencia"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableTransferencia.addActionListener(new ButtonActionListener(this,"id_asiento_contableTransferencia"));

		this.jButtonFK_IdEmpleadoTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoTransferencia"));

		this.jButtonBuscarFK_IdEmpleadoid_empleadoTransferencia.addActionListener(new ButtonActionListener(this,"id_empleadoTransferencia"));

		this.jButtonFK_IdEstadoInventarioTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdEstadoInventarioTransferencia"));

		this.jButtonFK_IdTipoTransaccionModuloTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloTransferencia"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarTransferenciaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarTransferencia.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosTransferencia(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
					transferenciaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Transferencia transferenciaAux:transferencias) {
					transferenciaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosTransferenciaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingTransferencia(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
						transferenciaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Transferencia transferenciaAux:transferencias) {
						transferenciaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Transferencia transferenciaAux:transferencias) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaTransferencia(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosTransferencia.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosTransferencia.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosTransferenciaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingTransferencia(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosTransferencia.getSelectedRows();
			
			Transferencia transferenciaLocal=new Transferencia();
			
			//this.seleccionarTodosTransferencia(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLocal =(Transferencia) this.transferenciaLogic.getTransferencias().toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					transferenciaLocal =(Transferencia) this.transferencias.toArray()[this.jTableDatosTransferencia.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				transferenciaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
						transferenciaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Transferencia transferenciaAux:transferencias) {
						transferenciaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaTransferencia(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosTransferencia.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosTransferencia.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosTransferencia,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualTransferenciaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarTransferenciaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralTransferenciaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingTransferencia(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralTransferencia.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Transferencia transferenciaAux:this.transferenciaLogic.getTransferencias()) {
				
						if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							transferenciaAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHAENTREGA)) {
							existe=true;
							transferenciaAux.setfecha_entrega(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
							existe=true;
							transferenciaAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							transferenciaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO)) {
							existe=true;
							transferenciaAux.setporcentaje_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							transferenciaAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							transferenciaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO)) {
							existe=true;
							transferenciaAux.setvalor_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO)) {
							existe=true;
							transferenciaAux.settotal_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							transferenciaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_STOCK)) {
							existe=true;
							transferenciaAux.setstock(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							transferenciaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_TOTALOTRO)) {
							existe=true;
							transferenciaAux.settotal_otro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO)) {
							existe=true;
							transferenciaAux.setultimo_costo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_NUMEROITEMS)) {
							existe=true;
							transferenciaAux.setnumero_items(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							transferenciaAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							transferenciaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							transferenciaAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IMPUESTO)) {
							existe=true;
							transferenciaAux.setimpuesto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							transferenciaAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							transferenciaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Transferencia transferenciaAux:transferencias) {
					
						if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							transferenciaAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHAENTREGA)) {
							existe=true;
							transferenciaAux.setfecha_entrega(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
							existe=true;
							transferenciaAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							transferenciaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO)) {
							existe=true;
							transferenciaAux.setporcentaje_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							transferenciaAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							transferenciaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO)) {
							existe=true;
							transferenciaAux.setvalor_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO)) {
							existe=true;
							transferenciaAux.settotal_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							transferenciaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_STOCK)) {
							existe=true;
							transferenciaAux.setstock(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							transferenciaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_TOTALOTRO)) {
							existe=true;
							transferenciaAux.settotal_otro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO)) {
							existe=true;
							transferenciaAux.setultimo_costo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_NUMEROITEMS)) {
							existe=true;
							transferenciaAux.setnumero_items(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							transferenciaAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							transferenciaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							transferenciaAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IMPUESTO)) {
							existe=true;
							transferenciaAux.setimpuesto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							transferenciaAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							transferenciaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaTransferencia(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesTransferenciaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingTransferencia(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioTransferencia=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesTransferencia.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteTransferencia) {				
					conSplash=true;//false;										
					
					//this.startProcessTransferencia(conSplash);
				
					this.generarReporteTransferenciasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoTransferenciasSeleccionados();
				//this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoTransferenciasSeleccionados(false);
				//this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoTransferenciasSeleccionados(true);
				//this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessTransferencia();
				
				this.exportarTransferenciasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionTransferencias();
				//this.importarTransferencias();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessTransferencia();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelTransferenciasSeleccionados();
				//this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Transferencia", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessTransferencia();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoTransferencia)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyTransferencia(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.setSelectedIndex(0);					
				}	
			} 			
			else if(TransferenciaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteTransferencia) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessTransferencia(conSplash);
					
						//this.actualizarParametrosGeneralTransferencia();
						
						this.generarReporteProcesoAccionTransferenciasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(TransferenciaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO TransferenciaS SELECCIONADOS?", "MANTENIMIENTO DE Transferencia", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessTransferencia();
				
						this.actualizarParametrosGeneralTransferencia();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.transferenciaReturnGeneral=transferenciaLogic.procesarAccionTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.transferenciaLogic.getTransferencias(),this.transferenciaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarTransferenciaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralTransferencia();
					
					TransferenciaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarTransferenciaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesTransferencia.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormTransferencia.jComboBoxTiposAccionesFormularioTransferencia.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessTransferencia(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesTransferenciaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessTransferencia();
			
			if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		
			Transferencia transferencia=new Transferencia();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingTransferencia(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesTransferencia.getSelectedItem();
			
			
			
			
			transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
			//this.sTipoAccion;
			
			if(transferenciasSeleccionados.size()==1) {
				for(Transferencia transferenciaAux:transferenciasSeleccionados) {
					transferencia=transferenciaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Detalle Transferencia")) {
					jButtonDetalleTransferenciaActionPerformed(null,rowIndex,true,false,transferencia);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessTransferencia();
			
      		//this.finishProcessTransferencia(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarTransferenciaReturnGeneral() throws Exception {
		if(this.transferenciaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.transferenciaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.transferenciaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.transferenciaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.transferenciaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.transferenciaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingTransferencia(false);
		}
		
		if(this.transferenciaReturnGeneral.getConRetornoLista() || this.transferenciaReturnGeneral.getConRetornoObjeto()) {
			if(this.transferenciaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.transferenciaLogic.setTransferencias(this.transferenciaReturnGeneral.getTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.transferenciaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.transferenciaLogic.setTransferencia(this.transferenciaReturnGeneral.getTransferencia());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingTransferencia(false);
		}
	}
	
	public void actualizarParametrosGeneralTransferencia() throws Exception {
		
		
	}
	
	public ArrayList<Transferencia> getTransferenciasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioTransferencia) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(Transferencia transferenciaAux:transferenciaLogic.getTransferencias()) {
					if(transferenciaAux.getIsSelected()) {
						transferenciasSeleccionados.add(transferenciaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Transferencia transferenciaAux:this.transferencias) {
					if(transferenciaAux.getIsSelected()) {
						transferenciasSeleccionados.add(transferenciaAux);				
					}
				}
			}
			
			if(transferenciasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						transferenciasSeleccionados.addAll(this.transferenciaLogic.getTransferencias());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						transferenciasSeleccionados.addAll(this.transferencias);				
					}
				}
			}
		} else {
			transferenciasSeleccionados.add(this.transferencia);
		}
		
		return transferenciasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteTransferenciasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalTransferenciasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoTransferenciasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoTransferenciasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoTransferenciasSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesTransferenciasSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Transferencia",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesTransferenciasSeleccionados() throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteTransferencias("Todos",transferenciasSeleccionados);
		
	}	
	
	public void generarReporteNormalTransferenciasSeleccionados() throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteTransferencias("Todos",transferenciasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionTransferenciasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteTransferencias("Todos",transferenciasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoTransferenciasSeleccionados() throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		
		
		
		this.abrirInicializarFrameReporteDinamicoTransferencia();
		
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoTransferencia();
		
		
		//this.generarReporteTransferencias("Todos",transferenciasSeleccionados ,transferenciaImplementable,transferenciaImplementableHome);
	}
	
	public void mostrarImportacionTransferencias() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionTransferencia();
		
		this.abrirFrameImportacionTransferencia();		
		
			
		//this.generarReporteTransferencias("Todos",transferenciasSeleccionados ,transferenciaImplementable,transferenciaImplementableHome);
	}
	
	public void importarTransferencias() throws Exception {		
	
	}
	
	public void exportarTransferenciasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelTransferenciasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoTransferenciasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlTransferenciasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Transferencia",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoTransferenciasSeleccionados() throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"transferencia."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarTransferencia(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(Transferencia transferenciaAux:transferenciasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarTransferencia(transferenciaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//transferenciaAux.setsDetalleGeneralEntityReporte(transferenciaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarTransferencia(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_FECHAENTREGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_SUMAN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_STOCK;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_TOTALOTRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_NUMEROITEMS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_RETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_FLETE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IMPUESTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TransferenciaConstantesFunciones.LABEL_FECHA;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarTransferencia(Transferencia transferencia,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=transferencia.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getfecha_entrega().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getnumero_secuencial();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.gettipocambio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getestadoinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.gettransportista_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getporcentaje_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getsuman().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getvalor_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.gettotal_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getstock().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.gettotal_otro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getultimo_costo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getnumero_items().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getretencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getflete().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getimpuesto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.gettipotransaccionmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getnumero_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=transferencia.getfecha().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelTransferenciasSeleccionados() throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"transferencia.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("Transferencias");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelTransferencia(row);				
				iRow++;
			}				
			
			for(Transferencia transferenciaAux:transferenciasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelTransferencia(transferenciaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlTransferenciasSeleccionados() throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();		
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"transferencia.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("transferencias");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("transferencia");
			//elementRoot.appendChild(element);
		
			for(Transferencia transferenciaAux:transferenciasSeleccionados) {
				element = document.createElement("transferencia");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlTransferencia(transferenciaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelTransferencia(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHAENTREGA);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_SUMAN);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_VALORDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTALDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_STOCK);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTALOTRO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_ULTIMOCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROITEMS);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_RETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FLETE);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IMPUESTO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(TransferenciaConstantesFunciones.LABEL_FECHA);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelTransferencia(Transferencia transferencia,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getfecha_entrega());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getnumero_secuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.gettipocambio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getestadoinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.gettransportista_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getporcentaje_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getsuman());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getvalor_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.gettotal_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getstock());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.gettotal_otro());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getultimo_costo());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getnumero_items());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getretencion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getflete());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getimpuesto());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.gettipotransaccionmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getnumero_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(transferencia.getfecha());				
	}
	
	public void setFilaDatosExportarXmlTransferencia(Transferencia transferencia,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(TransferenciaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(transferencia.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(TransferenciaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(transferencia.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(TransferenciaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(transferencia.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(TransferenciaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(transferencia.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementmodulo_descripcion = document.createElement(TransferenciaConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(transferencia.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementejercicio_descripcion = document.createElement(TransferenciaConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(transferencia.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(TransferenciaConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(transferencia.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(TransferenciaConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(transferencia.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(TransferenciaConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(transferencia.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementusuario_descripcion = document.createElement(TransferenciaConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(transferencia.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementfecha_emision = document.createElement(TransferenciaConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(transferencia.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementfecha_entrega = document.createElement(TransferenciaConstantesFunciones.FECHAENTREGA);
		elementfecha_entrega.appendChild(document.createTextNode(transferencia.getfecha_entrega().toString().trim()));
		element.appendChild(elementfecha_entrega);

		Element elementnumero_secuencial = document.createElement(TransferenciaConstantesFunciones.NUMEROSECUENCIAL);
		elementnumero_secuencial.appendChild(document.createTextNode(transferencia.getnumero_secuencial().trim()));
		element.appendChild(elementnumero_secuencial);

		Element elementmoneda_descripcion = document.createElement(TransferenciaConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(transferencia.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementtipocambio_descripcion = document.createElement(TransferenciaConstantesFunciones.IDTIPOCAMBIO);
		elementtipocambio_descripcion.appendChild(document.createTextNode(transferencia.gettipocambio_descripcion()));
		element.appendChild(elementtipocambio_descripcion);

		Element elementestadoinventario_descripcion = document.createElement(TransferenciaConstantesFunciones.IDESTADOINVENTARIO);
		elementestadoinventario_descripcion.appendChild(document.createTextNode(transferencia.getestadoinventario_descripcion()));
		element.appendChild(elementestadoinventario_descripcion);

		Element elementformato_descripcion = document.createElement(TransferenciaConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(transferencia.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementtransportista_descripcion = document.createElement(TransferenciaConstantesFunciones.IDTRANSPORTISTA);
		elementtransportista_descripcion.appendChild(document.createTextNode(transferencia.gettransportista_descripcion()));
		element.appendChild(elementtransportista_descripcion);

		Element elementempleado_descripcion = document.createElement(TransferenciaConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(transferencia.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementdescripcion = document.createElement(TransferenciaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(transferencia.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementporcentaje_descuento = document.createElement(TransferenciaConstantesFunciones.PORCENTAJEDESCUENTO);
		elementporcentaje_descuento.appendChild(document.createTextNode(transferencia.getporcentaje_descuento().toString().trim()));
		element.appendChild(elementporcentaje_descuento);

		Element elementsuman = document.createElement(TransferenciaConstantesFunciones.SUMAN);
		elementsuman.appendChild(document.createTextNode(transferencia.getsuman().toString().trim()));
		element.appendChild(elementsuman);

		Element elementice = document.createElement(TransferenciaConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(transferencia.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementvalor_descuento = document.createElement(TransferenciaConstantesFunciones.VALORDESCUENTO);
		elementvalor_descuento.appendChild(document.createTextNode(transferencia.getvalor_descuento().toString().trim()));
		element.appendChild(elementvalor_descuento);

		Element elementtotal_descuento = document.createElement(TransferenciaConstantesFunciones.TOTALDESCUENTO);
		elementtotal_descuento.appendChild(document.createTextNode(transferencia.gettotal_descuento().toString().trim()));
		element.appendChild(elementtotal_descuento);

		Element elementiva = document.createElement(TransferenciaConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(transferencia.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementstock = document.createElement(TransferenciaConstantesFunciones.STOCK);
		elementstock.appendChild(document.createTextNode(transferencia.getstock().toString().trim()));
		element.appendChild(elementstock);

		Element elementsub_total = document.createElement(TransferenciaConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(transferencia.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementtotal_otro = document.createElement(TransferenciaConstantesFunciones.TOTALOTRO);
		elementtotal_otro.appendChild(document.createTextNode(transferencia.gettotal_otro().toString().trim()));
		element.appendChild(elementtotal_otro);

		Element elementultimo_costo = document.createElement(TransferenciaConstantesFunciones.ULTIMOCOSTO);
		elementultimo_costo.appendChild(document.createTextNode(transferencia.getultimo_costo().toString().trim()));
		element.appendChild(elementultimo_costo);

		Element elementnumero_items = document.createElement(TransferenciaConstantesFunciones.NUMEROITEMS);
		elementnumero_items.appendChild(document.createTextNode(transferencia.getnumero_items().toString().trim()));
		element.appendChild(elementnumero_items);

		Element elementretencion = document.createElement(TransferenciaConstantesFunciones.RETENCION);
		elementretencion.appendChild(document.createTextNode(transferencia.getretencion().toString().trim()));
		element.appendChild(elementretencion);

		Element elementtotal = document.createElement(TransferenciaConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(transferencia.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementflete = document.createElement(TransferenciaConstantesFunciones.FLETE);
		elementflete.appendChild(document.createTextNode(transferencia.getflete().toString().trim()));
		element.appendChild(elementflete);

		Element elementimpuesto = document.createElement(TransferenciaConstantesFunciones.IMPUESTO);
		elementimpuesto.appendChild(document.createTextNode(transferencia.getimpuesto().toString().trim()));
		element.appendChild(elementimpuesto);

		Element elementtipotransaccionmodulo_descripcion = document.createElement(TransferenciaConstantesFunciones.IDTIPOTRANSACCIONMODULO);
		elementtipotransaccionmodulo_descripcion.appendChild(document.createTextNode(transferencia.gettipotransaccionmodulo_descripcion()));
		element.appendChild(elementtipotransaccionmodulo_descripcion);

		Element elementasientocontable_descripcion = document.createElement(TransferenciaConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(transferencia.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementnumero_comprobante = document.createElement(TransferenciaConstantesFunciones.NUMEROCOMPROBANTE);
		elementnumero_comprobante.appendChild(document.createTextNode(transferencia.getnumero_comprobante().trim()));
		element.appendChild(elementnumero_comprobante);

		Element elementfecha = document.createElement(TransferenciaConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(transferencia.getfecha().toString().trim()));
		element.appendChild(elementfecha);
	}
	
	public void generarReporteGroupGenericoTransferenciasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<Transferencia> transferenciasSeleccionados=new ArrayList<Transferencia>();
		
		transferenciasSeleccionados=this.getTransferenciasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoTransferencia(transferenciasSeleccionados);
		
		this.generarReporteTransferencias("Todos",transferenciasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoTransferencia(ArrayList<Transferencia> transferenciasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(Transferencia transferenciaAux:transferenciasSeleccionados) {
				transferenciaAux.setsDetalleGeneralEntityReporte(transferenciaAux.toString());
			
				if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(transferenciaAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHAENTREGA)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(transferenciaAux.getfecha_entrega()));
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getnumero_secuencial());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDTIPOCAMBIO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.gettipocambio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDESTADOINVENTARIO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getestadoinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDTRANSPORTISTA)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.gettransportista_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.gettipotransaccionmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(transferenciaAux.getnumero_comprobante());
				}
				 else if(sTipoSeleccionar.equals(TransferenciaConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					transferenciaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(transferenciaAux.getfecha()));
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesTransferencia(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoTransferencia=true;
				this.isVisibilidadCeldaNuevoRelacionesTransferencia=true;
				this.isVisibilidadCeldaGuardarCambiosTransferencia=true;
			}
			
			this.isVisibilidadCeldaModificarTransferencia=false;
			this.isVisibilidadCeldaActualizarTransferencia=false;
			this.isVisibilidadCeldaEliminarTransferencia=false;
			this.isVisibilidadCeldaCancelarTransferencia=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTransferencia=true;
				} else {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=false;
			this.isVisibilidadCeldaModificarTransferencia=false;
			this.isVisibilidadCeldaActualizarTransferencia=true;
			this.isVisibilidadCeldaEliminarTransferencia=false;
			this.isVisibilidadCeldaCancelarTransferencia=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTransferencia=true;
				} else {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=false;
			this.isVisibilidadCeldaModificarTransferencia=false;
			this.isVisibilidadCeldaActualizarTransferencia=true;
			this.isVisibilidadCeldaEliminarTransferencia=true;
			this.isVisibilidadCeldaCancelarTransferencia=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTransferencia=true;
				} else {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=false;
			this.isVisibilidadCeldaModificarTransferencia=false;
			this.isVisibilidadCeldaActualizarTransferencia=true;
			this.isVisibilidadCeldaEliminarTransferencia=false;
			this.isVisibilidadCeldaCancelarTransferencia=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				} else {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoTransferencia=true;
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=true;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=true;
			this.isVisibilidadCeldaModificarTransferencia=false;
			this.isVisibilidadCeldaActualizarTransferencia=false;
			this.isVisibilidadCeldaEliminarTransferencia=false;
			this.isVisibilidadCeldaCancelarTransferencia=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTransferencia=true;
				} else {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=false;
			this.isVisibilidadCeldaActualizarTransferencia=false;
			this.isVisibilidadCeldaEliminarTransferencia=false;
			this.isVisibilidadCeldaCancelarTransferencia=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				} else {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=false;
			this.isVisibilidadCeldaModificarTransferencia=true;
			this.isVisibilidadCeldaActualizarTransferencia=false;
			this.isVisibilidadCeldaEliminarTransferencia=false;
			this.isVisibilidadCeldaCancelarTransferencia=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				} else {
					this.isVisibilidadCeldaGuardarTransferencia=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(TransferenciaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoTransferencia=true;
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=true;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=true;
		} else {
			this.actualizarEstadoPanelsTransferencia(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarTransferencia=false;
			//this.isVisibilidadCeldaVerFormTransferencia=false;
			this.isVisibilidadCeldaDuplicarTransferencia=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!transferenciaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;
		} else {
			this.isVisibilidadCeldaNuevoTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosTransferencia=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(transferenciaSessionBean.getEsGuardarRelacionado()) {
			if(!transferenciaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;												
			}
			
			this.jButtonCerrarTransferencia.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesTransferencia=false;
		}
		
		if(!this.permiteMantenimiento(this.transferencia)) {
			this.isVisibilidadCeldaActualizarTransferencia=false;
			this.isVisibilidadCeldaEliminarTransferencia=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesTransferencia() {
		this.isVisibilidadCeldaNuevoTransferencia=false;
		this.isVisibilidadCeldaGuardarCambiosTransferencia=false;
	}
	
	public void actualizarEstadoPanelsTransferencia(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionTransferencia!=null) {
				this.jScrollPanelDatosEdicionTransferencia.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTransferencia!=null) {
				this.jTabbedPaneBusquedasTransferencia.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosTransferencia!=null) {
				this.jScrollPanelDatosTransferencia.setVisible(true);
			}
			
			if(this.jPanelPaginacionTransferencia!=null) {
				this.jPanelPaginacionTransferencia.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionTransferencia!=null) {
				this.jScrollPanelDatosEdicionTransferencia.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTransferencia!=null) {
				this.jTabbedPaneBusquedasTransferencia.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosTransferencia!=null) {
				this.jScrollPanelDatosTransferencia.setVisible(false);
			}
			
			if(this.jPanelPaginacionTransferencia!=null) {
				this.jPanelPaginacionTransferencia.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionTransferencia!=null) {
				this.jScrollPanelDatosEdicionTransferencia.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTransferencia!=null) {
				this.jTabbedPaneBusquedasTransferencia.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosTransferencia!=null) {
				this.jScrollPanelDatosTransferencia.setVisible(false);
			}
			
			if(this.jPanelPaginacionTransferencia!=null) {
				this.jPanelPaginacionTransferencia.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionTransferencia!=null) {
				this.jScrollPanelDatosEdicionTransferencia.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTransferencia!=null) {
				this.jTabbedPaneBusquedasTransferencia.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosTransferencia!=null) {
				this.jScrollPanelDatosTransferencia.setVisible(false);
			}
			
			if(this.jPanelPaginacionTransferencia!=null) {
				this.jPanelPaginacionTransferencia.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionTransferencia!=null) {
				this.jScrollPanelDatosEdicionTransferencia.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTransferencia!=null) {
				this.jTabbedPaneBusquedasTransferencia.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosTransferencia!=null) {
				this.jScrollPanelDatosTransferencia.setVisible(true);
			}
			
			if(this.jPanelPaginacionTransferencia!=null) {
				this.jPanelPaginacionTransferencia.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionTransferencia!=null) {
				this.jScrollPanelDatosEdicionTransferencia.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTransferencia!=null) {
				this.jTabbedPaneBusquedasTransferencia.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosTransferencia!=null) {
				this.jScrollPanelDatosTransferencia.setVisible(true);
			}
			
			if(this.jPanelPaginacionTransferencia!=null) {
				this.jPanelPaginacionTransferencia.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionTransferencia!=null) {
				this.jScrollPanelDatosEdicionTransferencia.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTransferencia!=null) {
				this.jTabbedPaneBusquedasTransferencia.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosTransferencia!=null) {
				this.jScrollPanelDatosTransferencia.setVisible(true);
			}
			
			if(this.jPanelPaginacionTransferencia!=null) {
				this.jPanelPaginacionTransferencia.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.transferenciaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasTransferencia!=null) {
					this.jTabbedPaneBusquedasTransferencia.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.transferenciaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTransferencia!=null) {
				this.jTabbedPaneBusquedasTransferencia.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesTransferencia!=null) {
				this.jPanelParametrosReportesTransferencia.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadFK_IdAsientoContable=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAsientoContable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdAsientoContable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdAsientoContable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdAsientoContable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadFK_IdAsientoContable=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadFK_IdAsientoContable=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCambio(Boolean isParaTipoCambio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCambioNegation=!isParaTipoCambio;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoInventario(Boolean isParaEstadoInventario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoInventarioNegation=!isParaEstadoInventario;

			this.isVisibilidadFK_IdAsientoContable=isParaEstadoInventarioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaEstadoInventarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaEstadoInventario;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEstadoInventarioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadFK_IdAsientoContable=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransportista(Boolean isParaTransportista){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransportistaNegation=!isParaTransportista;

			this.isVisibilidadFK_IdAsientoContable=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleado;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTransaccionModulo(Boolean isParaTipoTransaccionModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTransaccionModuloNegation=!isParaTipoTransaccionModulo;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTransaccionModulo;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdAsientoContableTransferencia);}

			this.isVisibilidadFK_IdEmpleado=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEmpleadoTransferencia);}

			this.isVisibilidadFK_IdEstadoInventario=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEstadoInventario) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdEstadoInventarioTransferencia);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasTransferencia.remove(jPanelFK_IdTipoTransaccionModuloTransferencia);}
		}
		
	}
	
	

	public String registrarSesionTransferenciaParaDetalleTransferencias() throws Exception {
		Boolean isPaginaPopupDetalleTransferencia=false;

		try {

			if(this.transferenciaSessionBean==null) {
				this.transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean==null) {
				this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean.setsPathNavegacionActual(transferenciaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleTransferencia=this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleTransferencia(true);
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleTransferencia(TransferenciaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean.setisBusquedaDesdeForeignKeySesionTransferencia(true);
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean.setlidTransferenciaActual(this.idTransferenciaActual);
			this.jInternalFrameDetalleFormTransferencia.detalletransferenciaSessionBean.setNoMantenimiento(true);

			transferenciaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyTransferencia(true);
			transferenciaSessionBean.setlIdTransferenciaActualForeignKey(this.idTransferenciaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionTransferenciaParaBusquedaTipoCambios() throws Exception {
		Boolean isPaginaPopupTipoCambio=false;

		try {

			if(transferenciaSessionBean==null) {
				transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(tipocambioSessionBean==null) {
				tipocambioSessionBean=new TipoCambioSessionBean();
			}

			tipocambioSessionBean.setsPathNavegacionActual(transferenciaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TipoCambioConstantesFunciones.SCLASSWEBTITULO);
			tipocambioSessionBean.setisPermiteRecargarInformacion(false);
			tipocambioSessionBean.setisPaginaPopup(true);
			isPaginaPopupTipoCambio=tipocambioSessionBean.getisPaginaPopup();
			tipocambioSessionBean.setisPaginaPopup(false);
			tipocambioSessionBean.setEstaModoBusqueda(true);
			tipocambioSessionBean.setsFuncionBusquedaRapida("window.opener.transferenciaFuncionGeneral.setCombosCodigoDesdeBusquedaid_tipo_cambio(TO_REPLACE);");
			tipocambioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTipoCambio(true);
			tipocambioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTipoCambio(TransferenciaConstantesFunciones.SNOMBREOPCION);
			//tipocambioSessionBean.setisBusquedaDesdeForeignKeySesionTransferencia(true);
			//tipocambioSessionBean.setlidTransferenciaActual(this.idTransferenciaActual);

			transferenciaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyTransferencia(true);
			transferenciaSessionBean.setlIdTransferenciaActualForeignKey(this.idTransferenciaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionTransferenciaParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(transferenciaSessionBean==null) {
				transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(transferenciaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.transferenciaFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(TransferenciaConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionTransferencia(true);
			//empleadoSessionBean.setlidTransferenciaActual(this.idTransferenciaActual);

			transferenciaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyTransferencia(true);
			transferenciaSessionBean.setlIdTransferenciaActualForeignKey(this.idTransferenciaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionTransferenciaParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(transferenciaSessionBean==null) {
				transferenciaSessionBean=new TransferenciaSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(transferenciaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.transferenciaFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(TransferenciaConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionTransferencia(true);
			//asientocontableSessionBean.setlidTransferenciaActual(this.idTransferenciaActual);

			transferenciaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyTransferencia(true);
			transferenciaSessionBean.setlIdTransferenciaActualForeignKey(this.idTransferenciaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//TransferenciaSessionBean transferenciaSessionBean=new TransferenciaSessionBean();
		
		if(this.transferenciaSessionBean==null) {
			this.transferenciaSessionBean=new TransferenciaSessionBean();
		}
		
		this.transferenciaSessionBean.setsUltimaBusquedaTransferencia(this.getsAccionBusqueda());
		this.transferenciaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.transferenciaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			transferenciaSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			transferenciaSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
			transferenciaSessionBean.setid_empleado(this.getid_empleadoFK_IdEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			transferenciaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoInventario")) {
			transferenciaSessionBean.setid_estado_inventario(this.getid_estado_inventarioFK_IdEstadoInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			transferenciaSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			transferenciaSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			transferenciaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
			transferenciaSessionBean.setid_tipo_transaccion_modulo(this.getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			transferenciaSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//TransferenciaSessionBean transferenciaSessionBean=new TransferenciaSessionBean();
		
		if(this.transferenciaSessionBean==null) {
			this.transferenciaSessionBean=new TransferenciaSessionBean();
		}
		
		if(this.transferenciaSessionBean.getsUltimaBusquedaTransferencia()!=null&&!this.transferenciaSessionBean.getsUltimaBusquedaTransferencia().equals("")) {
			this.setsAccionBusqueda(transferenciaSessionBean.getsUltimaBusquedaTransferencia());
			this.setiNumeroPaginacion(transferenciaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(transferenciaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(transferenciaSessionBean.getid_asiento_contable());
				transferenciaSessionBean.setid_asiento_contable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(transferenciaSessionBean.getid_ejercicio());
				transferenciaSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
				this.setid_empleadoFK_IdEmpleado(transferenciaSessionBean.getid_empleado());
				transferenciaSessionBean.setid_empleado(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(transferenciaSessionBean.getid_empresa());
				transferenciaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoInventario")) {
				this.setid_estado_inventarioFK_IdEstadoInventario(transferenciaSessionBean.getid_estado_inventario());
				transferenciaSessionBean.setid_estado_inventario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(transferenciaSessionBean.getid_modulo());
				transferenciaSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(transferenciaSessionBean.getid_periodo());
				transferenciaSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(transferenciaSessionBean.getid_sucursal());
				transferenciaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
				this.setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(transferenciaSessionBean.getid_tipo_transaccion_modulo());
				transferenciaSessionBean.setid_tipo_transaccion_modulo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(transferenciaSessionBean.getid_usuario());
				transferenciaSessionBean.setid_usuario(-1L);
			}
		}
		
		this.transferenciaSessionBean.setsUltimaBusquedaTransferencia("");
		this.transferenciaSessionBean.setiNumeroPaginacion(TransferenciaConstantesFunciones.INUMEROPAGINACION);
		this.transferenciaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaTransferencia(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioTransferencia() {
		this.updateBorderResaltarBusquedasFormularioTransferencia();
		this.updateVisibilidadBusquedasFormularioTransferencia();
		this.updateHabilitarBusquedasFormularioTransferencia();
	}
	
	public void updateBorderResaltarBusquedasFormularioTransferencia() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasTransferencia.getComponents().length>0) {
	

		if(this.transferenciaConstantesFunciones.resaltarFK_IdAsientoContableTransferencia!=null) {
			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdAsientoContableTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
				jPanel.setBorder(this.transferenciaConstantesFunciones.resaltarFK_IdAsientoContableTransferencia);
			}
		}

		if(this.transferenciaConstantesFunciones.resaltarFK_IdEmpleadoTransferencia!=null) {
			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdEmpleadoTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
				jPanel.setBorder(this.transferenciaConstantesFunciones.resaltarFK_IdEmpleadoTransferencia);
			}
		}

		if(this.transferenciaConstantesFunciones.resaltarFK_IdEstadoInventarioTransferencia!=null) {
			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdEstadoInventarioTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
				jPanel.setBorder(this.transferenciaConstantesFunciones.resaltarFK_IdEstadoInventarioTransferencia);
			}
		}

		if(this.transferenciaConstantesFunciones.resaltarFK_IdTipoTransaccionModuloTransferencia!=null) {
			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
				jPanel.setBorder(this.transferenciaConstantesFunciones.resaltarFK_IdTipoTransaccionModuloTransferencia);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioTransferencia() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasTransferencia.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdAsientoContableTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.transferenciaConstantesFunciones.mostrarFK_IdAsientoContableTransferencia);
			if(!this.transferenciaConstantesFunciones.mostrarFK_IdAsientoContableTransferencia && index>-1) {
				this.jTabbedPaneBusquedasTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdEmpleadoTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.transferenciaConstantesFunciones.mostrarFK_IdEmpleadoTransferencia);
			if(!this.transferenciaConstantesFunciones.mostrarFK_IdEmpleadoTransferencia && index>-1) {
				this.jTabbedPaneBusquedasTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdEstadoInventarioTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.transferenciaConstantesFunciones.mostrarFK_IdEstadoInventarioTransferencia);
			if(!this.transferenciaConstantesFunciones.mostrarFK_IdEstadoInventarioTransferencia && index>-1) {
				this.jTabbedPaneBusquedasTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.transferenciaConstantesFunciones.mostrarFK_IdTipoTransaccionModuloTransferencia);
			if(!this.transferenciaConstantesFunciones.mostrarFK_IdTipoTransaccionModuloTransferencia && index>-1) {
				this.jTabbedPaneBusquedasTransferencia.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioTransferencia() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasTransferencia.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdAsientoContableTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.transferenciaConstantesFunciones.activarFK_IdAsientoContableTransferencia);
				this.jTabbedPaneBusquedasTransferencia.setEnabledAt(index,this.transferenciaConstantesFunciones.activarFK_IdAsientoContableTransferencia);
			}

			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdEmpleadoTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.transferenciaConstantesFunciones.activarFK_IdEmpleadoTransferencia);
				this.jTabbedPaneBusquedasTransferencia.setEnabledAt(index,this.transferenciaConstantesFunciones.activarFK_IdEmpleadoTransferencia);
			}

			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdEstadoInventarioTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.transferenciaConstantesFunciones.activarFK_IdEstadoInventarioTransferencia);
				this.jTabbedPaneBusquedasTransferencia.setEnabledAt(index,this.transferenciaConstantesFunciones.activarFK_IdEstadoInventarioTransferencia);
			}

			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.transferenciaConstantesFunciones.activarFK_IdTipoTransaccionModuloTransferencia);
				this.jTabbedPaneBusquedasTransferencia.setEnabledAt(index,this.transferenciaConstantesFunciones.activarFK_IdTipoTransaccionModuloTransferencia);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaTransferencia(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdAsientoContableTransferencia);

			this.jTabbedPaneBusquedasTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);

			this.transferenciaConstantesFunciones.setResaltarFK_IdAsientoContableTransferencia(resaltar);

			jPanel.setBorder(this.transferenciaConstantesFunciones.resaltarFK_IdAsientoContableTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpleado")) {
			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdEmpleadoTransferencia);

			this.jTabbedPaneBusquedasTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);

			this.transferenciaConstantesFunciones.setResaltarFK_IdEmpleadoTransferencia(resaltar);

			jPanel.setBorder(this.transferenciaConstantesFunciones.resaltarFK_IdEmpleadoTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoInventario")) {
			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdEstadoInventarioTransferencia);

			this.jTabbedPaneBusquedasTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);

			this.transferenciaConstantesFunciones.setResaltarFK_IdEstadoInventarioTransferencia(resaltar);

			jPanel.setBorder(this.transferenciaConstantesFunciones.resaltarFK_IdEstadoInventarioTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTransaccionModulo")) {
			index= this.jTabbedPaneBusquedasTransferencia.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloTransferencia);

			this.jTabbedPaneBusquedasTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTransferencia.getComponent(index);

			this.transferenciaConstantesFunciones.setResaltarFK_IdTipoTransaccionModuloTransferencia(resaltar);

			jPanel.setBorder(this.transferenciaConstantesFunciones.resaltarFK_IdTipoTransaccionModuloTransferencia);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarTransferencia.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioTransferencia() throws Exception {

		if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioTransferencia();
		this.updateVisibilidadResaltarControlesFormularioTransferencia();
		this.updateHabilitarResaltarControlesFormularioTransferencia();
		
	}
	
	public void updateBorderResaltarControlesFormularioTransferencia() throws Exception {
		if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.transferenciaConstantesFunciones.resaltaridTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltaridTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_empresaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_empresaTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_sucursalTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_sucursalTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_moduloTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_moduloTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_ejercicioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_ejercicioTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_periodoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_periodoTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_anioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_anioTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_mesTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_mesTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_usuarioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_usuarioTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarfecha_emisionTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_emisionTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarfecha_emisionTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarfecha_entregaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_entregaTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarfecha_entregaTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarnumero_secuencialTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_secuencialTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarnumero_secuencialTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_monedaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_monedaTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_tipo_cambioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_tipo_cambioTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_estado_inventarioTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_estado_inventarioTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_formatoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_formatoTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_transportistaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_transportistaTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_empleadoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_empleadoTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltardescripcionTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextAreadescripcionTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltardescripcionTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarporcentaje_descuentoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldporcentaje_descuentoTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarporcentaje_descuentoTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarsumanTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldsumanTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarsumanTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltariceTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldiceTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltariceTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarvalor_descuentoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldvalor_descuentoTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarvalor_descuentoTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltartotal_descuentoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_descuentoTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltartotal_descuentoTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarivaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldivaTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarivaTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarstockTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldstockTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarstockTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarsub_totalTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldsub_totalTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarsub_totalTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltartotal_otroTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_otroTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltartotal_otroTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarultimo_costoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldultimo_costoTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarultimo_costoTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarnumero_itemsTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_itemsTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarnumero_itemsTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarretencionTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldretencionTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarretencionTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltartotalTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldtotalTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltartotalTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarfleteTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldfleteTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarfleteTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarimpuestoTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldimpuestoTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarimpuestoTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_tipo_transaccion_moduloTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_tipo_transaccion_moduloTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarid_asiento_contableTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarid_asiento_contableTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarnumero_comprobanteTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_comprobanteTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarnumero_comprobanteTransferencia);}
		if(this.transferenciaConstantesFunciones.resaltarfechaTransferencia!=null && this.jInternalFrameDetalleFormTransferencia!=null) {this.jInternalFrameDetalleFormTransferencia.jDateChooserfechaTransferencia.setBorder(this.transferenciaConstantesFunciones.resaltarfechaTransferencia);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioTransferencia() throws Exception {		
		if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
	
		//this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.setVisible(this.transferenciaConstantesFunciones.mostraridTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelidTransferencia.setVisible(this.transferenciaConstantesFunciones.mostraridTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_empresaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_empresaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_empresaTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_sucursalTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_sucursalTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_sucursalTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_moduloTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_moduloTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_moduloTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_ejercicioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_ejercicioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_ejercicioTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_periodoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_periodoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_periodoTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_anioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_anioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_anioTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_mesTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_mesTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_mesTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_usuarioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_usuarioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_usuarioTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_emisionTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarfecha_emisionTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelfecha_emisionTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarfecha_emisionTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_entregaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarfecha_entregaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelfecha_entregaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarfecha_entregaTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_secuencialTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarnumero_secuencialTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelnumero_secuencialTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarnumero_secuencialTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_monedaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_monedaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_monedaTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_tipo_cambioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_tipo_cambioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_tipo_cambioTransferencia);
			this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_tipo_cambioTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_estado_inventarioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_estado_inventarioTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_estado_inventarioTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_formatoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_formatoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_formatoTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_transportistaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_transportistaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_transportistaTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_empleadoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_empleadoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_empleadoTransferencia);
			this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_empleadoTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextAreadescripcionTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrardescripcionTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPaneldescripcionTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrardescripcionTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldporcentaje_descuentoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarporcentaje_descuentoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelporcentaje_descuentoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarporcentaje_descuentoTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldsumanTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarsumanTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelsumanTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarsumanTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldiceTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrariceTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPaneliceTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrariceTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldvalor_descuentoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarvalor_descuentoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelvalor_descuentoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarvalor_descuentoTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_descuentoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrartotal_descuentoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPaneltotal_descuentoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrartotal_descuentoTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldivaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarivaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelivaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarivaTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldstockTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarstockTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelstockTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarstockTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldsub_totalTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarsub_totalTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelsub_totalTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarsub_totalTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_otroTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrartotal_otroTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPaneltotal_otroTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrartotal_otroTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldultimo_costoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarultimo_costoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelultimo_costoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarultimo_costoTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_itemsTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarnumero_itemsTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelnumero_itemsTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarnumero_itemsTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldretencionTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarretencionTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelretencionTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarretencionTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldtotalTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrartotalTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPaneltotalTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrartotalTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldfleteTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarfleteTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelfleteTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarfleteTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldimpuestoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarimpuestoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelimpuestoTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarimpuestoTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_tipo_transaccion_moduloTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_tipo_transaccion_moduloTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_tipo_transaccion_moduloTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_asiento_contableTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelid_asiento_contableTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_asiento_contableTransferencia);
			this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarid_asiento_contableTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_comprobanteTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarnumero_comprobanteTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelnumero_comprobanteTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarnumero_comprobanteTransferencia);
		//this.jInternalFrameDetalleFormTransferencia.jDateChooserfechaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarfechaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jPanelfechaTransferencia.setVisible(this.transferenciaConstantesFunciones.mostrarfechaTransferencia);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioTransferencia() throws Exception {
		if(this.jInternalFrameDetalleFormTransferencia==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormTransferencia!=null) {
	
		this.jInternalFrameDetalleFormTransferencia.jLabelidTransferencia.setEnabled(this.transferenciaConstantesFunciones.activaridTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empresaTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_empresaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_sucursalTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_sucursalTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_moduloTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_moduloTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_ejercicioTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_ejercicioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_periodoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_periodoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_anioTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_anioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_mesTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_mesTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_usuarioTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_usuarioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_emisionTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarfecha_emisionTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jDateChooserfecha_entregaTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarfecha_entregaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_secuencialTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarnumero_secuencialTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_monedaTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_monedaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_cambioTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_tipo_cambioTransferencia);
			this.jInternalFrameDetalleFormTransferencia.jButtonid_tipo_cambioTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_tipo_cambioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_estado_inventarioTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_estado_inventarioTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_formatoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_formatoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_transportistaTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_transportistaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_empleadoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_empleadoTransferencia);
			this.jInternalFrameDetalleFormTransferencia.jButtonid_empleadoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_empleadoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextAreadescripcionTransferencia.setEnabled(this.transferenciaConstantesFunciones.activardescripcionTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldporcentaje_descuentoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarporcentaje_descuentoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldsumanTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarsumanTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldiceTransferencia.setEnabled(this.transferenciaConstantesFunciones.activariceTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldvalor_descuentoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarvalor_descuentoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_descuentoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activartotal_descuentoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldivaTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarivaTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldstockTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarstockTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldsub_totalTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarsub_totalTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldtotal_otroTransferencia.setEnabled(this.transferenciaConstantesFunciones.activartotal_otroTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldultimo_costoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarultimo_costoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_itemsTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarnumero_itemsTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldretencionTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarretencionTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldtotalTransferencia.setEnabled(this.transferenciaConstantesFunciones.activartotalTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldfleteTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarfleteTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldimpuestoTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarimpuestoTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_tipo_transaccion_moduloTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_tipo_transaccion_moduloTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jComboBoxid_asiento_contableTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_asiento_contableTransferencia);
			this.jInternalFrameDetalleFormTransferencia.jButtonid_asiento_contableTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarid_asiento_contableTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jTextFieldnumero_comprobanteTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarnumero_comprobanteTransferencia);
		this.jInternalFrameDetalleFormTransferencia.jDateChooserfechaTransferencia.setEnabled(this.transferenciaConstantesFunciones.activarfechaTransferencia);
		}
	}
	
		
}