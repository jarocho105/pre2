/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.DetalleMovimientoInventarioConstantesFunciones;
import com.bydan.erp.inventario.util.DetalleMovimientoInventarioParameterReturnGeneral;
//import com.bydan.erp.inventario.util.DetalleMovimientoInventarioParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.DetalleMovimientoInventarioBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleMovimientoInventarioBeanSwingJInternalFrame extends DetalleMovimientoInventarioJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleMovimientoInventarioBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleMovimientoInventario> detallemovimientoinventarioValidator = new ClassValidator<DetalleMovimientoInventario>(DetalleMovimientoInventario.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleMovimientoInventario detallemovimientoinventario;	
	public DetalleMovimientoInventario detallemovimientoinventarioAux;
	public DetalleMovimientoInventario detallemovimientoinventarioAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleMovimientoInventario detallemovimientoinventarioTotales;
	public Long idDetalleMovimientoInventarioActual;
	public Long iIdNuevoDetalleMovimientoInventario=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboMovimientoInventario="";

	public List<MovimientoInventario> movimientoinventariosForeignKey;

	public List<MovimientoInventario> getmovimientoinventariosForeignKey() {
		return movimientoinventariosForeignKey;
	}

	public void setmovimientoinventariosForeignKey(List<MovimientoInventario> movimientoinventariosForeignKey) {
		this.movimientoinventariosForeignKey = movimientoinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public MovimientoInventario movimientoinventarioForeignKey;

	public MovimientoInventario getmovimientoinventarioForeignKey() {
		return movimientoinventarioForeignKey;
	}

	public void setmovimientoinventarioForeignKey(MovimientoInventario movimientoinventarioForeignKey) {
		this.movimientoinventarioForeignKey = movimientoinventarioForeignKey;
	}

	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboEstadoDetalleMovimientoInventario="";

	public List<EstadoDetalleMovimientoInventario> estadodetallemovimientoinventariosForeignKey;

	public List<EstadoDetalleMovimientoInventario> getestadodetallemovimientoinventariosForeignKey() {
		return estadodetallemovimientoinventariosForeignKey;
	}

	public void setestadodetallemovimientoinventariosForeignKey(List<EstadoDetalleMovimientoInventario> estadodetallemovimientoinventariosForeignKey) {
		this.estadodetallemovimientoinventariosForeignKey = estadodetallemovimientoinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoDetalleMovimientoInventario estadodetallemovimientoinventarioForeignKey;

	public EstadoDetalleMovimientoInventario getestadodetallemovimientoinventarioForeignKey() {
		return estadodetallemovimientoinventarioForeignKey;
	}

	public void setestadodetallemovimientoinventarioForeignKey(EstadoDetalleMovimientoInventario estadodetallemovimientoinventarioForeignKey) {
		this.estadodetallemovimientoinventarioForeignKey = estadodetallemovimientoinventarioForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboUnidad="";

	public List<Unidad> unidadsForeignKey;

	public List<Unidad> getunidadsForeignKey() {
		return unidadsForeignKey;
	}

	public void setunidadsForeignKey(List<Unidad> unidadsForeignKey) {
		this.unidadsForeignKey = unidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Unidad unidadForeignKey;

	public Unidad getunidadForeignKey() {
		return unidadForeignKey;
	}

	public void setunidadForeignKey(Unidad unidadForeignKey) {
		this.unidadForeignKey = unidadForeignKey;
	}

	public String sFinalQueryComboNovedadProducto="";

	public List<NovedadProducto> novedadproductosForeignKey;

	public List<NovedadProducto> getnovedadproductosForeignKey() {
		return novedadproductosForeignKey;
	}

	public void setnovedadproductosForeignKey(List<NovedadProducto> novedadproductosForeignKey) {
		this.novedadproductosForeignKey = novedadproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public NovedadProducto novedadproductoForeignKey;

	public NovedadProducto getnovedadproductoForeignKey() {
		return novedadproductoForeignKey;
	}

	public void setnovedadproductoForeignKey(NovedadProducto novedadproductoForeignKey) {
		this.novedadproductoForeignKey = novedadproductoForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboCuentaContableCosto="";

	public List<CuentaContable> cuentacontablecostosForeignKey;

	public List<CuentaContable> getcuentacontablecostosForeignKey() {
		return cuentacontablecostosForeignKey;
	}

	public void setcuentacontablecostosForeignKey(List<CuentaContable> cuentacontablecostosForeignKey) {
		this.cuentacontablecostosForeignKey = cuentacontablecostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostoForeignKey;

	public CuentaContable getcuentacontablecostoForeignKey() {
		return cuentacontablecostoForeignKey;
	}

	public void setcuentacontablecostoForeignKey(CuentaContable cuentacontablecostoForeignKey) {
		this.cuentacontablecostoForeignKey = cuentacontablecostoForeignKey;
	}

	public String sFinalQueryComboTipoDetalleMovimientoInventario="";

	public List<TipoDetalleMovimientoInventario> tipodetallemovimientoinventariosForeignKey;

	public List<TipoDetalleMovimientoInventario> gettipodetallemovimientoinventariosForeignKey() {
		return tipodetallemovimientoinventariosForeignKey;
	}

	public void settipodetallemovimientoinventariosForeignKey(List<TipoDetalleMovimientoInventario> tipodetallemovimientoinventariosForeignKey) {
		this.tipodetallemovimientoinventariosForeignKey = tipodetallemovimientoinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoDetalleMovimientoInventario tipodetallemovimientoinventarioForeignKey;

	public TipoDetalleMovimientoInventario gettipodetallemovimientoinventarioForeignKey() {
		return tipodetallemovimientoinventarioForeignKey;
	}

	public void settipodetallemovimientoinventarioForeignKey(TipoDetalleMovimientoInventario tipodetallemovimientoinventarioForeignKey) {
		this.tipodetallemovimientoinventarioForeignKey = tipodetallemovimientoinventarioForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	public Long idCuentaContableCostoActual=0L;

	public Long getidCuentaContableCostoActual() {
		return idCuentaContableCostoActual;
	}

	public void setidCuentaContableCostoActual(Long idCuentaContableCostoActual) {
		this.idCuentaContableCostoActual= idCuentaContableCostoActual;
	}
	public Long idTipoDetalleMovimientoInventarioActual=0L;

	public Long getidTipoDetalleMovimientoInventarioActual() {
		return idTipoDetalleMovimientoInventarioActual;
	}

	public void setidTipoDetalleMovimientoInventarioActual(Long idTipoDetalleMovimientoInventarioActual) {
		this.idTipoDetalleMovimientoInventarioActual= idTipoDetalleMovimientoInventarioActual;
	}
	
	

	public Boolean isTienePermisosNovedadSeguimiento=false;

	public Boolean getIsTienePermisosNovedadSeguimiento() {
		return isTienePermisosNovedadSeguimiento;
	}

	public void setIsTienePermisosNovedadSeguimiento(Boolean isTienePermisosNovedadSeguimiento) {
		this.isTienePermisosNovedadSeguimiento= isTienePermisosNovedadSeguimiento;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleMovimientoInventario;
	public Boolean isPermisoNuevoDetalleMovimientoInventario;
	public Boolean isPermisoActualizarDetalleMovimientoInventario;
	public Boolean isPermisoActualizarOriginalDetalleMovimientoInventario;
	public Boolean isPermisoEliminarDetalleMovimientoInventario;
	public Boolean isPermisoGuardarCambiosDetalleMovimientoInventario;
	public Boolean isPermisoConsultaDetalleMovimientoInventario;
	public Boolean isPermisoBusquedaDetalleMovimientoInventario;
	public Boolean isPermisoReporteDetalleMovimientoInventario;
	public Boolean isPermisoPaginacionMedioDetalleMovimientoInventario;
	public Boolean isPermisoPaginacionAltoDetalleMovimientoInventario;
	public Boolean isPermisoPaginacionTodoDetalleMovimientoInventario;
	public Boolean isPermisoCopiarDetalleMovimientoInventario;
	public Boolean isPermisoVerFormDetalleMovimientoInventario;
	public Boolean isPermisoDuplicarDetalleMovimientoInventario;
	public Boolean isPermisoOrdenDetalleMovimientoInventario;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleMovimientoInventarioParameterReturnGeneral detallemovimientoinventarioReturnGeneral;
	public DetalleMovimientoInventarioParameterReturnGeneral detallemovimientoinventarioParameterGeneral;
	
	

	public NovedadSeguimientoLogic novedadseguimientoLogic=null;

	public NovedadSeguimientoLogic getNovedadSeguimientoLogic() {
		return novedadseguimientoLogic;
	}

	public void setNovedadSeguimientoLogic(NovedadSeguimientoLogic novedadseguimientoLogic) {
		this.novedadseguimientoLogic = novedadseguimientoLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleMovimientoInventario=false;
	public Boolean esParaAccionDesdeFormularioDetalleMovimientoInventario=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleMovimientoInventarioSessionBeanAdditional detallemovimientoinventarioSessionBeanAdditional=null;
	
	public DetalleMovimientoInventarioSessionBeanAdditional getDetalleMovimientoInventarioSessionBeanAdditional() {
		return this.detallemovimientoinventarioSessionBeanAdditional;
	}
	
	public void setDetalleMovimientoInventarioSessionBeanAdditional(DetalleMovimientoInventarioSessionBeanAdditional detallemovimientoinventarioSessionBeanAdditional) {
		try {
			this.detallemovimientoinventarioSessionBeanAdditional=detallemovimientoinventarioSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional detallemovimientoinventarioBeanSwingJInternalFrameAdditional=null;
	//public class DetalleMovimientoInventarioBeanSwingJInternalFrame
	
	public DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional getDetalleMovimientoInventarioBeanSwingJInternalFrameAdditional() {
		return this.detallemovimientoinventarioBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleMovimientoInventarioBeanSwingJInternalFrameAdditional(DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional detallemovimientoinventarioBeanSwingJInternalFrameAdditional) {
		try {
			this.detallemovimientoinventarioBeanSwingJInternalFrameAdditional=detallemovimientoinventarioBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleMovimientoInventarioLogic detallemovimientoinventarioLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleMovimientoInventario detallemovimientoinventarioBean;
	public DetalleMovimientoInventarioConstantesFunciones detallemovimientoinventarioConstantesFunciones;
	//public DetalleMovimientoInventarioParameterReturnGeneral detallemovimientoinventarioReturnGeneral;
	
	//FK
	
	public MovimientoInventarioLogic movimientoinventarioLogic;
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public EstadoDetalleMovimientoInventarioLogic estadodetallemovimientoinventarioLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public UnidadLogic unidadLogic;
	public NovedadProductoLogic novedadproductoLogic;
	public CentroCostoLogic centrocostoLogic;
	public CuentaContableLogic cuentacontablecostoLogic;
	public TipoDetalleMovimientoInventarioLogic tipodetallemovimientoinventarioLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleMovimientoInventario> detallemovimientoinventarios;	
	//public List<DetalleMovimientoInventario> detallemovimientoinventariosEliminados;
	//public List<DetalleMovimientoInventario> detallemovimientoinventariosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleMovimientoInventario=true;
	public Boolean isVisibilidadCeldaCopiarDetalleMovimientoInventario=true;
	public Boolean isVisibilidadCeldaVerFormDetalleMovimientoInventario=true;
	public Boolean isVisibilidadCeldaOrdenDetalleMovimientoInventario=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
	public Boolean isVisibilidadCeldaModificarDetalleMovimientoInventario=false;
	public Boolean isVisibilidadCeldaActualizarDetalleMovimientoInventario=false;
	public Boolean isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
	public Boolean isVisibilidadCeldaCancelarDetalleMovimientoInventario=false;
	public Boolean isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContableCosto=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoDetalleMovimientoInventario=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdMovimientoInventario=false;
	public Boolean isVisibilidadFK_IdNovedadProducto=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoDetalleMovimientoInventario=false;
	public Boolean isVisibilidadFK_IdUnidad=false;
	
	public Long getiIdNuevoDetalleMovimientoInventario() {
		return this.iIdNuevoDetalleMovimientoInventario;
	}

	public void setiIdNuevoDetalleMovimientoInventario(Long iIdNuevoDetalleMovimientoInventario) {
		this.iIdNuevoDetalleMovimientoInventario = iIdNuevoDetalleMovimientoInventario;
	}
	
	public Long getidDetalleMovimientoInventarioActual() {
		return this.idDetalleMovimientoInventarioActual;
	}

	public void setidDetalleMovimientoInventarioActual(Long idDetalleMovimientoInventarioActual) {
		this.idDetalleMovimientoInventarioActual = idDetalleMovimientoInventarioActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleMovimientoInventario getdetallemovimientoinventario() {
		return this.detallemovimientoinventario;
	}

	public void setdetallemovimientoinventario(DetalleMovimientoInventario detallemovimientoinventario) {
		this.detallemovimientoinventario = detallemovimientoinventario;
	}
	
	public DetalleMovimientoInventario getdetallemovimientoinventarioAux() {
		return this.detallemovimientoinventarioAux;
	}

	public void setdetallemovimientoinventarioAux(DetalleMovimientoInventario detallemovimientoinventarioAux) {
		this.detallemovimientoinventarioAux = detallemovimientoinventarioAux;
	}				
	
	public DetalleMovimientoInventario getdetallemovimientoinventarioAnterior() {
		return this.detallemovimientoinventarioAnterior;
	}

	public void setdetallemovimientoinventarioAnterior(DetalleMovimientoInventario detallemovimientoinventarioAnterior) {
		this.detallemovimientoinventarioAnterior = detallemovimientoinventarioAnterior;
	}	
	
	public DetalleMovimientoInventario getdetallemovimientoinventarioTotales() {
		return this.detallemovimientoinventarioTotales;
	}

	public void setdetallemovimientoinventarioTotales(DetalleMovimientoInventario detallemovimientoinventarioTotales) {
		this.detallemovimientoinventarioTotales = detallemovimientoinventarioTotales;
	}	
	
	public DetalleMovimientoInventario getdetallemovimientoinventarioBean() {
		return this.detallemovimientoinventarioBean;
	}

	public void setdetallemovimientoinventarioBean(DetalleMovimientoInventario detallemovimientoinventarioBean) {
		this.detallemovimientoinventarioBean = detallemovimientoinventarioBean;
	}	
	
	public DetalleMovimientoInventarioParameterReturnGeneral getdetallemovimientoinventarioReturnGeneral() {
		return this.detallemovimientoinventarioReturnGeneral;
	}

	public void setdetallemovimientoinventarioReturnGeneral(DetalleMovimientoInventarioParameterReturnGeneral detallemovimientoinventarioReturnGeneral) {
		this.detallemovimientoinventarioReturnGeneral = detallemovimientoinventarioReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_cuenta_contable_costoFK_IdCuentaContableCosto=null;

	public Long getid_cuenta_contable_costoFK_IdCuentaContableCosto() {
		return this.id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public void setid_cuenta_contable_costoFK_IdCuentaContableCosto(Long id_cuenta_contable_costoFK_IdCuentaContableCosto) {
		this.id_cuenta_contable_costoFK_IdCuentaContableCosto = id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario=1L;

	public Long getid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario() {
		return this.id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario;
	}

	public void setid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario(Long id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario) {
		this.id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario = id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_movimiento_inventarioFK_IdMovimientoInventario=-1L;

	public Long getid_movimiento_inventarioFK_IdMovimientoInventario() {
		return this.id_movimiento_inventarioFK_IdMovimientoInventario;
	}

	public void setid_movimiento_inventarioFK_IdMovimientoInventario(Long id_movimiento_inventarioFK_IdMovimientoInventario) {
		this.id_movimiento_inventarioFK_IdMovimientoInventario = id_movimiento_inventarioFK_IdMovimientoInventario;
	}

	public Long id_novedad_productoFK_IdNovedadProducto=null;

	public Long getid_novedad_productoFK_IdNovedadProducto() {
		return this.id_novedad_productoFK_IdNovedadProducto;
	}

	public void setid_novedad_productoFK_IdNovedadProducto(Long id_novedad_productoFK_IdNovedadProducto) {
		this.id_novedad_productoFK_IdNovedadProducto = id_novedad_productoFK_IdNovedadProducto;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario=null;

	public Long getid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario() {
		return this.id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario;
	}

	public void setid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario(Long id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario) {
		this.id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario = id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario;
	}

	public Long id_unidadFK_IdUnidad=-1L;

	public Long getid_unidadFK_IdUnidad() {
		return this.id_unidadFK_IdUnidad;
	}

	public void setid_unidadFK_IdUnidad(Long id_unidadFK_IdUnidad) {
		this.id_unidadFK_IdUnidad = id_unidadFK_IdUnidad;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleMovimientoInventarioLogic getDetalleMovimientoInventarioLogic()	{		
		return detallemovimientoinventarioLogic;
	}

	public void setDetalleMovimientoInventarioLogic(DetalleMovimientoInventarioLogic detallemovimientoinventarioLogic) {
		this.detallemovimientoinventarioLogic = detallemovimientoinventarioLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleMovimientoInventario() {
		return isEsNuevoDetalleMovimientoInventario;
	}

	public void setIsEsNuevoDetalleMovimientoInventario(Boolean isEsNuevoDetalleMovimientoInventario) {
		this.isEsNuevoDetalleMovimientoInventario = isEsNuevoDetalleMovimientoInventario;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleMovimientoInventario() {
		return esParaAccionDesdeFormularioDetalleMovimientoInventario;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleMovimientoInventario(Boolean esParaAccionDesdeFormularioDetalleMovimientoInventario) {
		this.esParaAccionDesdeFormularioDetalleMovimientoInventario = esParaAccionDesdeFormularioDetalleMovimientoInventario;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosMovimientoInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.movimientoinventariosForeignKey=new ArrayList<MovimientoInventario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MovimientoInventarioLogic movimientoinventarioLogic=new MovimientoInventarioLogic();

			movimientoinventarioLogic.getMovimientoInventarioDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMovimientoInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventarioDataAccess().setIsForForeingKeyData(true);

					movimientoinventarioLogic.getTodosMovimientoInventariosWithConnection(sFinalQuery,new Pagination());

					this.movimientoinventariosForeignKey=movimientoinventarioLogic.getMovimientoInventarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMovimientoInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidMovimientoInventarioActual());
					this.movimientoinventariosForeignKey.add(movimientoinventarioLogic.getMovimientoInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoDetalleMovimientoInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadodetallemovimientoinventariosForeignKey=new ArrayList<EstadoDetalleMovimientoInventario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoDetalleMovimientoInventarioLogic estadodetallemovimientoinventarioLogic=new EstadoDetalleMovimientoInventarioLogic();

			//estadodetallemovimientoinventarioLogic.getEstadoDetalleMovimientoInventarioDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleMovimientoInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadodetallemovimientoinventarioLogic.getEstadoDetalleMovimientoInventarioDataAccess().setIsForForeingKeyData(true);

					estadodetallemovimientoinventarioLogic.getTodosEstadoDetalleMovimientoInventariosWithConnection(sFinalQuery,new Pagination());

					this.estadodetallemovimientoinventariosForeignKey=estadodetallemovimientoinventarioLogic.getEstadoDetalleMovimientoInventarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoDetalleMovimientoInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadodetallemovimientoinventarioLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidEstadoDetalleMovimientoInventarioActual());
					this.estadodetallemovimientoinventariosForeignKey.add(estadodetallemovimientoinventarioLogic.getEstadoDetalleMovimientoInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUnidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.unidadsForeignKey=new ArrayList<Unidad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UnidadLogic unidadLogic=new UnidadLogic();

			//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

					unidadLogic.getTodosUnidadsWithConnection(sFinalQuery,new Pagination());

					this.unidadsForeignKey=unidadLogic.getUnidads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUnidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					unidadLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidUnidadActual());
					this.unidadsForeignKey.add(unidadLogic.getUnidad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosNovedadProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.novedadproductosForeignKey=new ArrayList<NovedadProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			NovedadProducto novedadproductoNulo = new NovedadProducto();

			NovedadProductoLogic novedadproductoLogic=new NovedadProductoLogic();

			//novedadproductoLogic.getNovedadProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//novedadproductoLogic.getNovedadProductoDataAccess().setIsForForeingKeyData(true);

					novedadproductoLogic.getTodosNovedadProductosWithConnection(sFinalQuery,new Pagination());

					this.novedadproductosForeignKey=novedadproductoLogic.getNovedadProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.novedadproductosForeignKey.add(0, novedadproductoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaNovedadProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					novedadproductoLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidNovedadProductoActual());
					this.novedadproductosForeignKey.add(novedadproductoLogic.getNovedadProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCosto centrocostoNulo = new CentroCosto();

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centrocostosForeignKey.add(0, centrocostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontablecostoNulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontablecostosForeignKey.add(0, cuentacontablecostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidCuentaContableCostoActual());
					this.cuentacontablecostosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoDetalleMovimientoInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipodetallemovimientoinventariosForeignKey=new ArrayList<TipoDetalleMovimientoInventario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoDetalleMovimientoInventario tipodetallemovimientoinventarioNulo = new TipoDetalleMovimientoInventario();

			TipoDetalleMovimientoInventarioLogic tipodetallemovimientoinventarioLogic=new TipoDetalleMovimientoInventarioLogic();

			//tipodetallemovimientoinventarioLogic.getTipoDetalleMovimientoInventarioDataAccess().setIsForForeingKeyData(true);

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoDetalleMovimientoInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipodetallemovimientoinventarioLogic.getTipoDetalleMovimientoInventarioDataAccess().setIsForForeingKeyData(true);

					tipodetallemovimientoinventarioLogic.getTodosTipoDetalleMovimientoInventariosWithConnection(sFinalQuery,new Pagination());

					this.tipodetallemovimientoinventariosForeignKey=tipodetallemovimientoinventarioLogic.getTipoDetalleMovimientoInventarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tipodetallemovimientoinventariosForeignKey.add(0, tipodetallemovimientoinventarioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoDetalleMovimientoInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipodetallemovimientoinventarioLogic.getEntityWithConnection(detallemovimientoinventarioSessionBean.getlidTipoDetalleMovimientoInventarioActual());
					this.tipodetallemovimientoinventariosForeignKey.add(tipodetallemovimientoinventarioLogic.getTipoDetalleMovimientoInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualMovimientoInventarioForeignKey(Long idMovimientoInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			MovimientoInventario  movimientoinventarioTemp=null;

			for(MovimientoInventario movimientoinventarioAux:movimientoinventariosForeignKey) {
				if(movimientoinventarioAux.getId()!=null && movimientoinventarioAux.getId().equals(idMovimientoInventarioSeleccionado)) {
					movimientoinventarioTemp=movimientoinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(movimientoinventarioTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setMovimientoInventario(movimientoinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(movimientoinventarioTemp);
					}
				} else {
					//jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(movimientoinventarioTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdMovimientoInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(movimientoinventarioTemp!=null && jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario!=null) {
						jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(movimientoinventarioTemp);
					} else {
						if(jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario!=null) {
							//jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(movimientoinventarioTemp);
							if(jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMovimientoInventarioForeignKeyDescripcion(Long idMovimientoInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			MovimientoInventario  movimientoinventarioTemp=null;

			for(MovimientoInventario movimientoinventarioAux:movimientoinventariosForeignKey) {
				if(movimientoinventarioAux.getId()!=null && movimientoinventarioAux.getId().equals(idMovimientoInventarioSeleccionado)) {
					movimientoinventarioTemp=movimientoinventarioAux;
					break;
				}
			}


			sDescripcion=MovimientoInventarioConstantesFunciones.getMovimientoInventarioDescripcion(movimientoinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMovimientoInventarioForeignKeyGenerico(Long idMovimientoInventarioSeleccionado,JComboBox jComboBoxid_movimiento_inventarioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			MovimientoInventario  movimientoinventarioTemp=null;

			for(MovimientoInventario movimientoinventarioAux:movimientoinventariosForeignKey) {
				if(movimientoinventarioAux.getId()!=null && movimientoinventarioAux.getId().equals(idMovimientoInventarioSeleccionado)) {
					movimientoinventarioTemp=movimientoinventarioAux;
					break;
				}
			}

			if(movimientoinventarioTemp!=null) {
				jComboBoxid_movimiento_inventarioDetalleMovimientoInventarioGenerico.setSelectedItem(movimientoinventarioTemp);
			} else {
				if(jComboBoxid_movimiento_inventarioDetalleMovimientoInventarioGenerico!=null && jComboBoxid_movimiento_inventarioDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_movimiento_inventarioDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleMovimientoInventario.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleMovimientoInventarioGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleMovimientoInventarioGenerico!=null && jComboBoxid_empresaDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleMovimientoInventario.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleMovimientoInventarioGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleMovimientoInventarioGenerico!=null && jComboBoxid_sucursalDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetalleMovimientoInventario.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetalleMovimientoInventarioGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetalleMovimientoInventarioGenerico!=null && jComboBoxid_ejercicioDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetalleMovimientoInventario.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetalleMovimientoInventarioGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetalleMovimientoInventarioGenerico!=null && jComboBoxid_periodoDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetalleMovimientoInventario.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetalleMovimientoInventarioGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetalleMovimientoInventarioGenerico!=null && jComboBoxid_anioDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_anioDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetalleMovimientoInventario.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetalleMovimientoInventarioGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetalleMovimientoInventarioGenerico!=null && jComboBoxid_mesDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_mesDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoDetalleMovimientoInventarioForeignKey(Long idEstadoDetalleMovimientoInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoDetalleMovimientoInventario  estadodetallemovimientoinventarioTemp=null;

			for(EstadoDetalleMovimientoInventario estadodetallemovimientoinventarioAux:estadodetallemovimientoinventariosForeignKey) {
				if(estadodetallemovimientoinventarioAux.getId()!=null && estadodetallemovimientoinventarioAux.getId().equals(idEstadoDetalleMovimientoInventarioSeleccionado)) {
					estadodetallemovimientoinventarioTemp=estadodetallemovimientoinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadodetallemovimientoinventarioTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setEstadoDetalleMovimientoInventario(estadodetallemovimientoinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(estadodetallemovimientoinventarioTemp);
					}
				} else {
					//jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(estadodetallemovimientoinventarioTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleMovimientoInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadodetallemovimientoinventarioTemp!=null && jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario!=null) {
						jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(estadodetallemovimientoinventarioTemp);
					} else {
						if(jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario!=null) {
							//jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(estadodetallemovimientoinventarioTemp);
							if(jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoDetalleMovimientoInventarioForeignKeyDescripcion(Long idEstadoDetalleMovimientoInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoDetalleMovimientoInventario  estadodetallemovimientoinventarioTemp=null;

			for(EstadoDetalleMovimientoInventario estadodetallemovimientoinventarioAux:estadodetallemovimientoinventariosForeignKey) {
				if(estadodetallemovimientoinventarioAux.getId()!=null && estadodetallemovimientoinventarioAux.getId().equals(idEstadoDetalleMovimientoInventarioSeleccionado)) {
					estadodetallemovimientoinventarioTemp=estadodetallemovimientoinventarioAux;
					break;
				}
			}


			sDescripcion=EstadoDetalleMovimientoInventarioConstantesFunciones.getEstadoDetalleMovimientoInventarioDescripcion(estadodetallemovimientoinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoDetalleMovimientoInventarioForeignKeyGenerico(Long idEstadoDetalleMovimientoInventarioSeleccionado,JComboBox jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			EstadoDetalleMovimientoInventario  estadodetallemovimientoinventarioTemp=null;

			for(EstadoDetalleMovimientoInventario estadodetallemovimientoinventarioAux:estadodetallemovimientoinventariosForeignKey) {
				if(estadodetallemovimientoinventarioAux.getId()!=null && estadodetallemovimientoinventarioAux.getId().equals(idEstadoDetalleMovimientoInventarioSeleccionado)) {
					estadodetallemovimientoinventarioTemp=estadodetallemovimientoinventarioAux;
					break;
				}
			}

			if(estadodetallemovimientoinventarioTemp!=null) {
				jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico.setSelectedItem(estadodetallemovimientoinventarioTemp);
			} else {
				if(jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico!=null && jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaDetalleMovimientoInventario.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario!=null) {
						jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario!=null) {
							//jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaDetalleMovimientoInventarioGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaDetalleMovimientoInventarioGenerico!=null && jComboBoxid_bodegaDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_bodegaDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoDetalleMovimientoInventario.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario!=null) {
						jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario!=null) {
							//jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoDetalleMovimientoInventarioGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoDetalleMovimientoInventarioGenerico!=null && jComboBoxid_productoDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_productoDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUnidadForeignKey(Long idUnidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(unidadTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setUnidad(unidadTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setSelectedItem(unidadTemp);
					}
				} else {
					//jComboBoxid_unidadDetalleMovimientoInventario.setSelectedItem(unidadTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){
					if(unidadTemp!=null && jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario!=null) {
						jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.setSelectedItem(unidadTemp);
					} else {
						if(jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario!=null) {
							//jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.setSelectedItem(unidadTemp);
							if(jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUnidadForeignKeyDescripcion(Long idUnidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}


			sDescripcion=UnidadConstantesFunciones.getUnidadDescripcion(unidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUnidadForeignKeyGenerico(Long idUnidadSeleccionado,JComboBox jComboBoxid_unidadDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(unidadTemp!=null) {
				jComboBoxid_unidadDetalleMovimientoInventarioGenerico.setSelectedItem(unidadTemp);
			} else {
				if(jComboBoxid_unidadDetalleMovimientoInventarioGenerico!=null && jComboBoxid_unidadDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_unidadDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualNovedadProductoForeignKey(Long idNovedadProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(novedadproductoTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setNovedadProducto(novedadproductoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setSelectedItem(novedadproductoTemp);
					}
				} else {
					//jComboBoxid_novedad_productoDetalleMovimientoInventario.setSelectedItem(novedadproductoTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdNovedadProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(novedadproductoTemp!=null && jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario!=null) {
						jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.setSelectedItem(novedadproductoTemp);
					} else {
						if(jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario!=null) {
							//jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.setSelectedItem(novedadproductoTemp);
							if(jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualNovedadProductoForeignKeyDescripcion(Long idNovedadProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}


			sDescripcion=NovedadProductoConstantesFunciones.getNovedadProductoDescripcion(novedadproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualNovedadProductoForeignKeyGenerico(Long idNovedadProductoSeleccionado,JComboBox jComboBoxid_novedad_productoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}

			if(novedadproductoTemp!=null) {
				jComboBoxid_novedad_productoDetalleMovimientoInventarioGenerico.setSelectedItem(novedadproductoTemp);
			} else {
				if(jComboBoxid_novedad_productoDetalleMovimientoInventarioGenerico!=null && jComboBoxid_novedad_productoDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_novedad_productoDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoDetalleMovimientoInventario.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoDetalleMovimientoInventarioGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoDetalleMovimientoInventarioGenerico!=null && jComboBoxid_centro_costoDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoForeignKey(Long idCuentaContableCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostoTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setCuentaContableCosto(cuentacontablecostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setSelectedItem(cuentacontablecostoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setSelectedItem(cuentacontablecostoTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecostoTemp!=null && jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario!=null) {
						jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.setSelectedItem(cuentacontablecostoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario!=null) {
							//jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.setSelectedItem(cuentacontablecostoTemp);
							if(jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoForeignKeyDescripcion(Long idCuentaContableCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoForeignKeyGenerico(Long idCuentaContableCostoSeleccionado,JComboBox jComboBoxid_cuenta_contable_costoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(cuentacontablecostoTemp!=null) {
				jComboBoxid_cuenta_contable_costoDetalleMovimientoInventarioGenerico.setSelectedItem(cuentacontablecostoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costoDetalleMovimientoInventarioGenerico!=null && jComboBoxid_cuenta_contable_costoDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costoDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoDetalleMovimientoInventarioForeignKey(Long idTipoDetalleMovimientoInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoDetalleMovimientoInventario  tipodetallemovimientoinventarioTemp=null;

			for(TipoDetalleMovimientoInventario tipodetallemovimientoinventarioAux:tipodetallemovimientoinventariosForeignKey) {
				if(tipodetallemovimientoinventarioAux.getId()!=null && tipodetallemovimientoinventarioAux.getId().equals(idTipoDetalleMovimientoInventarioSeleccionado)) {
					tipodetallemovimientoinventarioTemp=tipodetallemovimientoinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipodetallemovimientoinventarioTemp!=null) {

					if(this.detallemovimientoinventario!=null) {
						this.detallemovimientoinventario.setTipoDetalleMovimientoInventario(tipodetallemovimientoinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(tipodetallemovimientoinventarioTemp);
					}
				} else {
					//jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(tipodetallemovimientoinventarioTemp);
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoDetalleMovimientoInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipodetallemovimientoinventarioTemp!=null && jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario!=null) {
						jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(tipodetallemovimientoinventarioTemp);
					} else {
						if(jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario!=null) {
							//jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(tipodetallemovimientoinventarioTemp);
							if(jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.getItemCount()>0) {
								jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoDetalleMovimientoInventarioForeignKeyDescripcion(Long idTipoDetalleMovimientoInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoDetalleMovimientoInventario  tipodetallemovimientoinventarioTemp=null;

			for(TipoDetalleMovimientoInventario tipodetallemovimientoinventarioAux:tipodetallemovimientoinventariosForeignKey) {
				if(tipodetallemovimientoinventarioAux.getId()!=null && tipodetallemovimientoinventarioAux.getId().equals(idTipoDetalleMovimientoInventarioSeleccionado)) {
					tipodetallemovimientoinventarioTemp=tipodetallemovimientoinventarioAux;
					break;
				}
			}


			sDescripcion=TipoDetalleMovimientoInventarioConstantesFunciones.getTipoDetalleMovimientoInventarioDescripcion(tipodetallemovimientoinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoDetalleMovimientoInventarioForeignKeyGenerico(Long idTipoDetalleMovimientoInventarioSeleccionado,JComboBox jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			TipoDetalleMovimientoInventario  tipodetallemovimientoinventarioTemp=null;

			for(TipoDetalleMovimientoInventario tipodetallemovimientoinventarioAux:tipodetallemovimientoinventariosForeignKey) {
				if(tipodetallemovimientoinventarioAux.getId()!=null && tipodetallemovimientoinventarioAux.getId().equals(idTipoDetalleMovimientoInventarioSeleccionado)) {
					tipodetallemovimientoinventarioTemp=tipodetallemovimientoinventarioAux;
					break;
				}
			}

			if(tipodetallemovimientoinventarioTemp!=null) {
				jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico.setSelectedItem(tipodetallemovimientoinventarioTemp);
			} else {
				if(jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico!=null && jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMovimientoInventarioForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_movimiento_inventarioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			MovimientoInventario  movimientoinventarioAux=new MovimientoInventario();

			if(jComboBoxid_movimiento_inventarioDetalleMovimientoInventarioGenerico==null) {
				movimientoinventarioAux=(MovimientoInventario)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.getSelectedItem();
			} else {
				movimientoinventarioAux=(MovimientoInventario)jComboBoxid_movimiento_inventarioDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(movimientoinventarioAux!=null && movimientoinventarioAux.getId()!=null) {
				detallemovimientoinventario.setid_movimiento_inventario(movimientoinventarioAux.getId());
				detallemovimientoinventario.setmovimientoinventario_descripcion(DetalleMovimientoInventarioConstantesFunciones.getMovimientoInventarioDescripcion(movimientoinventarioAux));
				detallemovimientoinventario.setMovimientoInventario(movimientoinventarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_empresaDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleMovimientoInventarioGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detallemovimientoinventario.setid_empresa(empresaAux.getId());
				detallemovimientoinventario.setempresa_descripcion(DetalleMovimientoInventarioConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detallemovimientoinventario.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_sucursalDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleMovimientoInventarioGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detallemovimientoinventario.setid_sucursal(sucursalAux.getId());
				detallemovimientoinventario.setsucursal_descripcion(DetalleMovimientoInventarioConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detallemovimientoinventario.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_ejercicioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetalleMovimientoInventarioGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detallemovimientoinventario.setid_ejercicio(ejercicioAux.getId());
				detallemovimientoinventario.setejercicio_descripcion(DetalleMovimientoInventarioConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detallemovimientoinventario.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_periodoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetalleMovimientoInventarioGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detallemovimientoinventario.setid_periodo(periodoAux.getId());
				detallemovimientoinventario.setperiodo_descripcion(DetalleMovimientoInventarioConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detallemovimientoinventario.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_anioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetalleMovimientoInventarioGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detallemovimientoinventario.setid_anio(anioAux.getId());
				detallemovimientoinventario.setanio_descripcion(DetalleMovimientoInventarioConstantesFunciones.getAnioDescripcion(anioAux));
				detallemovimientoinventario.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_mesDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetalleMovimientoInventarioGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detallemovimientoinventario.setid_mes(mesAux.getId());
				detallemovimientoinventario.setmes_descripcion(DetalleMovimientoInventarioConstantesFunciones.getMesDescripcion(mesAux));
				detallemovimientoinventario.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoDetalleMovimientoInventarioForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			EstadoDetalleMovimientoInventario  estadodetallemovimientoinventarioAux=new EstadoDetalleMovimientoInventario();

			if(jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico==null) {
				estadodetallemovimientoinventarioAux=(EstadoDetalleMovimientoInventario)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.getSelectedItem();
			} else {
				estadodetallemovimientoinventarioAux=(EstadoDetalleMovimientoInventario)jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(estadodetallemovimientoinventarioAux!=null && estadodetallemovimientoinventarioAux.getId()!=null) {
				detallemovimientoinventario.setid_estado_detalle_movimiento_inventario(estadodetallemovimientoinventarioAux.getId());
				detallemovimientoinventario.setestadodetallemovimientoinventario_descripcion(DetalleMovimientoInventarioConstantesFunciones.getEstadoDetalleMovimientoInventarioDescripcion(estadodetallemovimientoinventarioAux));
				detallemovimientoinventario.setEstadoDetalleMovimientoInventario(estadodetallemovimientoinventarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_bodegaDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaDetalleMovimientoInventarioGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detallemovimientoinventario.setid_bodega(bodegaAux.getId());
				detallemovimientoinventario.setbodega_descripcion(DetalleMovimientoInventarioConstantesFunciones.getBodegaDescripcion(bodegaAux));
				detallemovimientoinventario.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_productoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoDetalleMovimientoInventarioGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				detallemovimientoinventario.setid_producto(productoAux.getId());
				detallemovimientoinventario.setproducto_descripcion(DetalleMovimientoInventarioConstantesFunciones.getProductoDescripcion(productoAux));
				detallemovimientoinventario.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUnidadForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_unidadDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Unidad  unidadAux=new Unidad();

			if(jComboBoxid_unidadDetalleMovimientoInventarioGenerico==null) {
				unidadAux=(Unidad)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.getSelectedItem();
			} else {
				unidadAux=(Unidad)jComboBoxid_unidadDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(unidadAux!=null && unidadAux.getId()!=null) {
				detallemovimientoinventario.setid_unidad(unidadAux.getId());
				detallemovimientoinventario.setunidad_descripcion(DetalleMovimientoInventarioConstantesFunciones.getUnidadDescripcion(unidadAux));
				detallemovimientoinventario.setUnidad(unidadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarNovedadProductoForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_novedad_productoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoAux=new NovedadProducto();

			if(jComboBoxid_novedad_productoDetalleMovimientoInventarioGenerico==null) {
				novedadproductoAux=(NovedadProducto)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.getSelectedItem();
			} else {
				novedadproductoAux=(NovedadProducto)jComboBoxid_novedad_productoDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(novedadproductoAux!=null) {
				detallemovimientoinventario.setid_novedad_producto(novedadproductoAux.getId());
				detallemovimientoinventario.setnovedadproducto_descripcion(DetalleMovimientoInventarioConstantesFunciones.getNovedadProductoDescripcion(novedadproductoAux));
				detallemovimientoinventario.setNovedadProducto(novedadproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_centro_costoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoDetalleMovimientoInventarioGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				detallemovimientoinventario.setid_centro_costo(centrocostoAux.getId());
				detallemovimientoinventario.setcentrocosto_descripcion(DetalleMovimientoInventarioConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				detallemovimientoinventario.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_cuenta_contable_costoDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costoDetalleMovimientoInventarioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costoDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				detallemovimientoinventario.setid_cuenta_contable_costo(cuentacontableAux.getId());
				detallemovimientoinventario.setcuentacontablecosto_descripcion(DetalleMovimientoInventarioConstantesFunciones.getCuentaContableCostoDescripcion(cuentacontableAux));
				detallemovimientoinventario.setCuentaContableCosto(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoDetalleMovimientoInventarioForeignKey(DetalleMovimientoInventario detallemovimientoinventario,JComboBox jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			TipoDetalleMovimientoInventario  tipodetallemovimientoinventarioAux=new TipoDetalleMovimientoInventario();

			if(jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico==null) {
				tipodetallemovimientoinventarioAux=(TipoDetalleMovimientoInventario)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.getSelectedItem();
			} else {
				tipodetallemovimientoinventarioAux=(TipoDetalleMovimientoInventario)jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioGenerico.getSelectedItem();
			}

			if(tipodetallemovimientoinventarioAux!=null) {
				detallemovimientoinventario.setid_tipo_detalle_movimiento_inventario(tipodetallemovimientoinventarioAux.getId());
				detallemovimientoinventario.settipodetallemovimientoinventario_descripcion(DetalleMovimientoInventarioConstantesFunciones.getTipoDetalleMovimientoInventarioDescripcion(tipodetallemovimientoinventarioAux));
				detallemovimientoinventario.setTipoDetalleMovimientoInventario(tipodetallemovimientoinventarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMovimientoInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMovimientoInventario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.removeAllItems();

							for(MovimientoInventario movimientoinventario:this.movimientoinventariosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.addItem(movimientoinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdMovimientoInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.removeAllItems();

							for(MovimientoInventario movimientoinventario:this.movimientoinventariosForeignKey) {
								this.jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.addItem(movimientoinventario);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoDetalleMovimientoInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoDetalleMovimientoInventario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.removeAllItems();

							for(EstadoDetalleMovimientoInventario estadodetallemovimientoinventario:this.estadodetallemovimientoinventariosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.addItem(estadodetallemovimientoinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleMovimientoInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.removeAllItems();

							for(EstadoDetalleMovimientoInventario estadodetallemovimientoinventario:this.estadodetallemovimientoinventariosForeignKey) {
								this.jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.addItem(estadodetallemovimientoinventario);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.addItem(bodega);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.addItem(producto);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUnidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUnidad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.addItem(unidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.addItem(unidad);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameNovedadProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingNovedadProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.removeAllItems();

							for(NovedadProducto novedadproducto:this.novedadproductosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.addItem(novedadproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdNovedadProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.removeAllItems();

							for(NovedadProducto novedadproducto:this.novedadproductosForeignKey) {
								this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.addItem(novedadproducto);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.addItem(centrocosto);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.addItem(cuentacontablecosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.addItem(cuentacontablecosto);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoDetalleMovimientoInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoDetalleMovimientoInventario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.removeAllItems();

							for(TipoDetalleMovimientoInventario tipodetallemovimientoinventario:this.tipodetallemovimientoinventariosForeignKey) {
								this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addItem(tipodetallemovimientoinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { 
					}

					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoDetalleMovimientoInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.removeAllItems();

							for(TipoDetalleMovimientoInventario tipodetallemovimientoinventario:this.tipodetallemovimientoinventariosForeignKey) {
								this.jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.addItem(tipodetallemovimientoinventario);
							}
						}

						if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameMovimientoInventarioForeignKey(MovimientoInventario movimientoinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(movimientoinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(movimientoinventario);
						} else {
							this.jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoDetalleMovimientoInventarioForeignKey(EstadoDetalleMovimientoInventario estadodetallemovimientoinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(estadodetallemovimientoinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(estadodetallemovimientoinventario);
						} else {
							this.jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUnidadForeignKey(Unidad unidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setSelectedItem(unidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.setSelectedItem(unidad);
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameNovedadProductoForeignKey(NovedadProducto novedadproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setSelectedItem(novedadproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.setSelectedItem(novedadproducto);
						} else {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoForeignKey(CuentaContable cuentacontablecosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setSelectedItem(cuentacontablecosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.setSelectedItem(cuentacontablecosto);
						} else {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoDetalleMovimientoInventarioForeignKey(TipoDetalleMovimientoInventario tipodetallemovimientoinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedItem(tipodetallemovimientoinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedItem(tipodetallemovimientoinventario);
						} else {
							this.jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleMovimientoInventario() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleMovimientoInventarioConstantesFunciones.refrescarForeignKeysDescripcionesDetalleMovimientoInventario(this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleMovimientoInventarioConstantesFunciones.refrescarForeignKeysDescripcionesDetalleMovimientoInventario(this.detallemovimientoinventarios);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(MovimientoInventario.class));
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(EstadoDetalleMovimientoInventario.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(Unidad.class));
		classes.add(new Classe(NovedadProducto.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(TipoDetalleMovimientoInventario.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(this.detallemovimientoinventarios);
			detallemovimientoinventarioLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleMovimientoInventarioParameterReturnGeneral getDetalleMovimientoInventarioParameterGeneral() {
		return this.detallemovimientoinventarioParameterGeneral;
	}
	
	public void setDetalleMovimientoInventarioParameterGeneral(DetalleMovimientoInventarioParameterReturnGeneral detallemovimientoinventarioParameterGeneral) {
		this.detallemovimientoinventarioParameterGeneral = detallemovimientoinventarioParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleMovimientoInventario() {
		return isPermisoTodoDetalleMovimientoInventario;
	}

	public void setIsPermisoTodoDetalleMovimientoInventario(Boolean isPermisoTodoDetalleMovimientoInventario) {
		this.isPermisoTodoDetalleMovimientoInventario = isPermisoTodoDetalleMovimientoInventario;
	}

	public Boolean getIsPermisoNuevoDetalleMovimientoInventario() {
		return isPermisoNuevoDetalleMovimientoInventario;
	}

	public void setIsPermisoNuevoDetalleMovimientoInventario(Boolean isPermisoNuevoDetalleMovimientoInventario) {
		this.isPermisoNuevoDetalleMovimientoInventario = isPermisoNuevoDetalleMovimientoInventario;
	}

	public Boolean getIsPermisoActualizarDetalleMovimientoInventario() {
		return isPermisoActualizarDetalleMovimientoInventario;
	}

	public void setIsPermisoActualizarDetalleMovimientoInventario(Boolean isPermisoActualizarDetalleMovimientoInventario) {
		this.isPermisoActualizarDetalleMovimientoInventario = isPermisoActualizarDetalleMovimientoInventario;
	}

	public Boolean getIsPermisoEliminarDetalleMovimientoInventario() {
		return isPermisoEliminarDetalleMovimientoInventario;
	}

	public void setIsPermisoEliminarDetalleMovimientoInventario(Boolean isPermisoEliminarDetalleMovimientoInventario) {
		this.isPermisoEliminarDetalleMovimientoInventario = isPermisoEliminarDetalleMovimientoInventario;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleMovimientoInventario() {
		return isPermisoGuardarCambiosDetalleMovimientoInventario;
	}

	public void setIsPermisoGuardarCambiosDetalleMovimientoInventario(Boolean isPermisoGuardarCambiosDetalleMovimientoInventario) {
		this.isPermisoGuardarCambiosDetalleMovimientoInventario = isPermisoGuardarCambiosDetalleMovimientoInventario;
	}
	
	public Boolean getIsPermisoConsultaDetalleMovimientoInventario() {
		return isPermisoConsultaDetalleMovimientoInventario;
	}

	public void setIsPermisoConsultaDetalleMovimientoInventario(Boolean isPermisoConsultaDetalleMovimientoInventario) {
		this.isPermisoConsultaDetalleMovimientoInventario = isPermisoConsultaDetalleMovimientoInventario;
	}

	public Boolean getIsPermisoBusquedaDetalleMovimientoInventario() {
		return isPermisoBusquedaDetalleMovimientoInventario;
	}

	public void setIsPermisoBusquedaDetalleMovimientoInventario(Boolean isPermisoBusquedaDetalleMovimientoInventario) {
		this.isPermisoBusquedaDetalleMovimientoInventario = isPermisoBusquedaDetalleMovimientoInventario;
	}

	public Boolean getIsPermisoReporteDetalleMovimientoInventario() {
		return isPermisoReporteDetalleMovimientoInventario;
	}

	public void setIsPermisoReporteDetalleMovimientoInventario(Boolean isPermisoReporteDetalleMovimientoInventario) {
		this.isPermisoReporteDetalleMovimientoInventario = isPermisoReporteDetalleMovimientoInventario;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleMovimientoInventario() {
		return isPermisoPaginacionMedioDetalleMovimientoInventario;
	}

	public void setIsPermisoPaginacionMedioDetalleMovimientoInventario(Boolean isPermisoPaginacionMedioDetalleMovimientoInventario) {
		this.isPermisoPaginacionMedioDetalleMovimientoInventario = isPermisoPaginacionMedioDetalleMovimientoInventario;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleMovimientoInventario() {
		return isPermisoPaginacionTodoDetalleMovimientoInventario;
	}

	public void setIsPermisoPaginacionTodoDetalleMovimientoInventario(Boolean isPermisoPaginacionTodoDetalleMovimientoInventario) {
		this.isPermisoPaginacionTodoDetalleMovimientoInventario = isPermisoPaginacionTodoDetalleMovimientoInventario;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleMovimientoInventario() {
		return isPermisoPaginacionAltoDetalleMovimientoInventario;
	}

	public void setIsPermisoPaginacionAltoDetalleMovimientoInventario(Boolean isPermisoPaginacionAltoDetalleMovimientoInventario) {
		this.isPermisoPaginacionAltoDetalleMovimientoInventario = isPermisoPaginacionAltoDetalleMovimientoInventario;
	}
	
	public Boolean getIsPermisoCopiarDetalleMovimientoInventario() {
		return isPermisoCopiarDetalleMovimientoInventario;
	}

	public void setIsPermisoCopiarDetalleMovimientoInventario(Boolean isPermisoCopiarDetalleMovimientoInventario) {
		this.isPermisoCopiarDetalleMovimientoInventario = isPermisoCopiarDetalleMovimientoInventario;
	}
	
	public Boolean getIsPermisoVerFormDetalleMovimientoInventario() {
		return isPermisoVerFormDetalleMovimientoInventario;
	}

	public void setIsPermisoVerFormDetalleMovimientoInventario(Boolean isPermisoVerFormDetalleMovimientoInventario) {
		this.isPermisoVerFormDetalleMovimientoInventario = isPermisoVerFormDetalleMovimientoInventario;
	}
	
	public Boolean getIsPermisoDuplicarDetalleMovimientoInventario() {
		return isPermisoDuplicarDetalleMovimientoInventario;
	}

	public void setIsPermisoDuplicarDetalleMovimientoInventario(Boolean isPermisoDuplicarDetalleMovimientoInventario) {
		this.isPermisoDuplicarDetalleMovimientoInventario = isPermisoDuplicarDetalleMovimientoInventario;
	}
	
	public Boolean getIsPermisoOrdenDetalleMovimientoInventario() {
		return isPermisoOrdenDetalleMovimientoInventario;
	}

	public void setIsPermisoOrdenDetalleMovimientoInventario(Boolean isPermisoOrdenDetalleMovimientoInventario) {
		this.isPermisoOrdenDetalleMovimientoInventario = isPermisoOrdenDetalleMovimientoInventario;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleMovimientoInventario() {
		return isVisibilidadCeldaNuevoDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaNuevoDetalleMovimientoInventario(Boolean isVisibilidadCeldaNuevoDetalleMovimientoInventario) {
		this.isVisibilidadCeldaNuevoDetalleMovimientoInventario = isVisibilidadCeldaNuevoDetalleMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleMovimientoInventario() {
		return isVisibilidadCeldaDuplicarDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleMovimientoInventario(Boolean isVisibilidadCeldaDuplicarDetalleMovimientoInventario) {
		this.isVisibilidadCeldaDuplicarDetalleMovimientoInventario = isVisibilidadCeldaDuplicarDetalleMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleMovimientoInventario() {
		return isVisibilidadCeldaCopiarDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaCopiarDetalleMovimientoInventario(Boolean isVisibilidadCeldaCopiarDetalleMovimientoInventario) {
		this.isVisibilidadCeldaCopiarDetalleMovimientoInventario = isVisibilidadCeldaCopiarDetalleMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleMovimientoInventario() {
		return isVisibilidadCeldaVerFormDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaVerFormDetalleMovimientoInventario(Boolean isVisibilidadCeldaVerFormDetalleMovimientoInventario) {
		this.isVisibilidadCeldaVerFormDetalleMovimientoInventario = isVisibilidadCeldaVerFormDetalleMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleMovimientoInventario() {
		return isVisibilidadCeldaOrdenDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaOrdenDetalleMovimientoInventario(Boolean isVisibilidadCeldaOrdenDetalleMovimientoInventario) {
		this.isVisibilidadCeldaOrdenDetalleMovimientoInventario = isVisibilidadCeldaOrdenDetalleMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario() {
		return isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario(Boolean isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario = isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleMovimientoInventario() {
		return isVisibilidadCeldaModificarDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaModificarDetalleMovimientoInventario(Boolean isVisibilidadCeldaModificarDetalleMovimientoInventario) {
		this.isVisibilidadCeldaModificarDetalleMovimientoInventario = isVisibilidadCeldaModificarDetalleMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleMovimientoInventario() {
		return isVisibilidadCeldaActualizarDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaActualizarDetalleMovimientoInventario(Boolean isVisibilidadCeldaActualizarDetalleMovimientoInventario) {
		this.isVisibilidadCeldaActualizarDetalleMovimientoInventario = isVisibilidadCeldaActualizarDetalleMovimientoInventario;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleMovimientoInventario() {
		return isVisibilidadCeldaEliminarDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaEliminarDetalleMovimientoInventario(Boolean isVisibilidadCeldaEliminarDetalleMovimientoInventario) {
		this.isVisibilidadCeldaEliminarDetalleMovimientoInventario = isVisibilidadCeldaEliminarDetalleMovimientoInventario;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleMovimientoInventario() {
		return isVisibilidadCeldaCancelarDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaCancelarDetalleMovimientoInventario(Boolean isVisibilidadCeldaCancelarDetalleMovimientoInventario) {
		this.isVisibilidadCeldaCancelarDetalleMovimientoInventario = isVisibilidadCeldaCancelarDetalleMovimientoInventario;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleMovimientoInventario() {
		return isVisibilidadCeldaGuardarDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaGuardarDetalleMovimientoInventario(Boolean isVisibilidadCeldaGuardarDetalleMovimientoInventario) {
		this.isVisibilidadCeldaGuardarDetalleMovimientoInventario = isVisibilidadCeldaGuardarDetalleMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario() {
		return isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario(Boolean isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario) {
		this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario = isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario;
	}
		
	public DetalleMovimientoInventarioSessionBean getdetallemovimientoinventarioSessionBean() {
		return this.detallemovimientoinventarioSessionBean;
	}
	
	public void setdetallemovimientoinventarioSessionBean(DetalleMovimientoInventarioSessionBean detallemovimientoinventarioSessionBean) {
		this.detallemovimientoinventarioSessionBean=detallemovimientoinventarioSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCosto() {
		return this.isVisibilidadFK_IdCuentaContableCosto;
	}

	public void setisVisibilidadFK_IdCuentaContableCosto(Boolean isVisibilidadFK_IdCuentaContableCosto) {
		this.isVisibilidadFK_IdCuentaContableCosto=isVisibilidadFK_IdCuentaContableCosto;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoDetalleMovimientoInventario() {
		return this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario;
	}

	public void setisVisibilidadFK_IdEstadoDetalleMovimientoInventario(Boolean isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {
		this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isVisibilidadFK_IdEstadoDetalleMovimientoInventario;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdMovimientoInventario() {
		return this.isVisibilidadFK_IdMovimientoInventario;
	}

	public void setisVisibilidadFK_IdMovimientoInventario(Boolean isVisibilidadFK_IdMovimientoInventario) {
		this.isVisibilidadFK_IdMovimientoInventario=isVisibilidadFK_IdMovimientoInventario;
	}

	public Boolean getisVisibilidadFK_IdNovedadProducto() {
		return this.isVisibilidadFK_IdNovedadProducto;
	}

	public void setisVisibilidadFK_IdNovedadProducto(Boolean isVisibilidadFK_IdNovedadProducto) {
		this.isVisibilidadFK_IdNovedadProducto=isVisibilidadFK_IdNovedadProducto;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoDetalleMovimientoInventario() {
		return this.isVisibilidadFK_IdTipoDetalleMovimientoInventario;
	}

	public void setisVisibilidadFK_IdTipoDetalleMovimientoInventario(Boolean isVisibilidadFK_IdTipoDetalleMovimientoInventario) {
		this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isVisibilidadFK_IdTipoDetalleMovimientoInventario;
	}

	public Boolean getisVisibilidadFK_IdUnidad() {
		return this.isVisibilidadFK_IdUnidad;
	}

	public void setisVisibilidadFK_IdUnidad(Boolean isVisibilidadFK_IdUnidad) {
		this.isVisibilidadFK_IdUnidad=isVisibilidadFK_IdUnidad;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario)throws Exception {
		try {
			
				this.setActualParaGuardarMovimientoInventarioForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarEmpresaForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarSucursalForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarEjercicioForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarPeriodoForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarAnioForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarMesForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarEstadoDetalleMovimientoInventarioForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarBodegaForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarProductoForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarUnidadForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarNovedadProductoForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarCentroCostoForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarCuentaContableCostoForeignKey(detallemovimientoinventario,null);
				this.setActualParaGuardarTipoDetalleMovimientoInventarioForeignKey(detallemovimientoinventario,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		/*
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		*/
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			/*
			//this.cargarLicenciaCliente(this.datosCliente);
			*/
	}
	
	public void bugActualizarReferenciaActual(DetalleMovimientoInventario detallemovimientoinventario,DetalleMovimientoInventario detallemovimientoinventarioAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleMovimientoInventario(detallemovimientoinventario);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detallemovimientoinventarioAux.setId(detallemovimientoinventario.getId());
		detallemovimientoinventarioAux.setVersionRow(detallemovimientoinventario.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleMovimientoInventario();
		
			int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detallemovimientoinventarioValidator.getInvalidValues(this.detallemovimientoinventario);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detallemovimientoinventarioLogic.setDatosCliente(datosCliente);
			detallemovimientoinventarioLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detallemovimientoinventarioAux=new  DetalleMovimientoInventario();
				
				detallemovimientoinventarioAux.setIsNew(true);
				detallemovimientoinventarioAux.setIsChanged(true);
				
				detallemovimientoinventarioAux.setDetalleMovimientoInventarioOriginal(this.detallemovimientoinventario);
				
				detallemovimientoinventarioAux.setId(this.detallemovimientoinventario.getId());	
				detallemovimientoinventarioAux.setVersionRow(this.detallemovimientoinventario.getVersionRow());	
				detallemovimientoinventarioAux.setid_movimiento_inventario(this.detallemovimientoinventario.getid_movimiento_inventario());	
				detallemovimientoinventarioAux.setid_empresa(this.detallemovimientoinventario.getid_empresa());	
				detallemovimientoinventarioAux.setid_sucursal(this.detallemovimientoinventario.getid_sucursal());	
				detallemovimientoinventarioAux.setid_ejercicio(this.detallemovimientoinventario.getid_ejercicio());	
				detallemovimientoinventarioAux.setid_periodo(this.detallemovimientoinventario.getid_periodo());	
				detallemovimientoinventarioAux.setid_anio(this.detallemovimientoinventario.getid_anio());	
				detallemovimientoinventarioAux.setid_mes(this.detallemovimientoinventario.getid_mes());	
				detallemovimientoinventarioAux.setid_estado_detalle_movimiento_inventario(this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario());	
				detallemovimientoinventarioAux.setid_bodega(this.detallemovimientoinventario.getid_bodega());	
				detallemovimientoinventarioAux.setid_producto(this.detallemovimientoinventario.getid_producto());	
				detallemovimientoinventarioAux.setid_unidad(this.detallemovimientoinventario.getid_unidad());	
				detallemovimientoinventarioAux.setdescripcion(this.detallemovimientoinventario.getdescripcion());	
				detallemovimientoinventarioAux.setcantidad(this.detallemovimientoinventario.getcantidad());	
				detallemovimientoinventarioAux.setdescuento(this.detallemovimientoinventario.getdescuento());	
				detallemovimientoinventarioAux.setcosto_unitario(this.detallemovimientoinventario.getcosto_unitario());	
				detallemovimientoinventarioAux.setcosto_total(this.detallemovimientoinventario.getcosto_total());	
				detallemovimientoinventarioAux.setdisponible(this.detallemovimientoinventario.getdisponible());	
				detallemovimientoinventarioAux.setiva(this.detallemovimientoinventario.getiva());	
				detallemovimientoinventarioAux.setiva_valor(this.detallemovimientoinventario.getiva_valor());	
				detallemovimientoinventarioAux.setcosto_iva(this.detallemovimientoinventario.getcosto_iva());	
				detallemovimientoinventarioAux.setice(this.detallemovimientoinventario.getice());	
				detallemovimientoinventarioAux.setice_valor(this.detallemovimientoinventario.getice_valor());	
				detallemovimientoinventarioAux.setdescuento1(this.detallemovimientoinventario.getdescuento1());	
				detallemovimientoinventarioAux.setdescuento2(this.detallemovimientoinventario.getdescuento2());	
				detallemovimientoinventarioAux.setserie(this.detallemovimientoinventario.getserie());	
				detallemovimientoinventarioAux.setlote(this.detallemovimientoinventario.getlote());	
				detallemovimientoinventarioAux.setfecha_elaboracion_lote(this.detallemovimientoinventario.getfecha_elaboracion_lote());	
				detallemovimientoinventarioAux.setfecha_caducidad_lote(this.detallemovimientoinventario.getfecha_caducidad_lote());	
				
				if(this.detallemovimientoinventario.getid_novedad_producto()!=null && this.detallemovimientoinventario.getid_novedad_producto()>0L) {
					detallemovimientoinventarioAux.setid_novedad_producto(this.detallemovimientoinventario.getid_novedad_producto());
				} else {
					detallemovimientoinventarioAux.setid_novedad_producto(null);
				}	
				
				if(this.detallemovimientoinventario.getid_centro_costo()!=null && this.detallemovimientoinventario.getid_centro_costo()>0L) {
					detallemovimientoinventarioAux.setid_centro_costo(this.detallemovimientoinventario.getid_centro_costo());
				} else {
					detallemovimientoinventarioAux.setid_centro_costo(null);
				}	
				
				if(this.detallemovimientoinventario.getid_cuenta_contable_costo()!=null && this.detallemovimientoinventario.getid_cuenta_contable_costo()>0L) {
					detallemovimientoinventarioAux.setid_cuenta_contable_costo(this.detallemovimientoinventario.getid_cuenta_contable_costo());
				} else {
					detallemovimientoinventarioAux.setid_cuenta_contable_costo(null);
				}	
				
				if(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario()!=null && this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario()>0L) {
					detallemovimientoinventarioAux.setid_tipo_detalle_movimiento_inventario(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario());
				} else {
					detallemovimientoinventarioAux.setid_tipo_detalle_movimiento_inventario(null);
				}	
				detallemovimientoinventarioAux.setnumero_comprobante(this.detallemovimientoinventario.getnumero_comprobante());	
				detallemovimientoinventarioAux.setlote_cliente(this.detallemovimientoinventario.getlote_cliente());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarios);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.saveDetalleMovimientoInventarios();//WithConnection
						//detallemovimientoinventarioLogic.getSetVersionRowDetalleMovimientoInventarios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallemovimientoinventario,detallemovimientoinventarioAux);
					
					this.refrescarForeignKeysDescripcionesDetalleMovimientoInventario();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos().addAll(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientos.addAll(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientosEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallemovimientoinventarioLogic.saveDetalleMovimientoInventarioRelaciones(detallemovimientoinventarioAux,this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos());//WithConnection
								//detallemovimientoinventarioLogic.getSetVersionRowDetalleMovimientoInventarios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallemovimientoinventario,detallemovimientoinventarioAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.setNovedadSeguimientos(new ArrayList<NovedadSeguimiento>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientos= new ArrayList<NovedadSeguimiento>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();}
							detallemovimientoinventarioAux.setNovedadSeguimientos(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarios);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallemovimientoinventario,detallemovimientoinventarioAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detallemovimientoinventarioAux=new  DetalleMovimientoInventario();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado() 
					|| (this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado() && this.detallemovimientoinventario.getId()>=0)) {
						
					detallemovimientoinventarioAux.setIsNew(false);
				}
				
				detallemovimientoinventarioAux.setIsDeleted(false);
			
				detallemovimientoinventarioAux.setId(this.detallemovimientoinventario.getId());	
				detallemovimientoinventarioAux.setVersionRow(this.detallemovimientoinventario.getVersionRow());	
				detallemovimientoinventarioAux.setid_movimiento_inventario(this.detallemovimientoinventario.getid_movimiento_inventario());	
				detallemovimientoinventarioAux.setid_empresa(this.detallemovimientoinventario.getid_empresa());	
				detallemovimientoinventarioAux.setid_sucursal(this.detallemovimientoinventario.getid_sucursal());	
				detallemovimientoinventarioAux.setid_ejercicio(this.detallemovimientoinventario.getid_ejercicio());	
				detallemovimientoinventarioAux.setid_periodo(this.detallemovimientoinventario.getid_periodo());	
				detallemovimientoinventarioAux.setid_anio(this.detallemovimientoinventario.getid_anio());	
				detallemovimientoinventarioAux.setid_mes(this.detallemovimientoinventario.getid_mes());	
				detallemovimientoinventarioAux.setid_estado_detalle_movimiento_inventario(this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario());	
				detallemovimientoinventarioAux.setid_bodega(this.detallemovimientoinventario.getid_bodega());	
				detallemovimientoinventarioAux.setid_producto(this.detallemovimientoinventario.getid_producto());	
				detallemovimientoinventarioAux.setid_unidad(this.detallemovimientoinventario.getid_unidad());	
				detallemovimientoinventarioAux.setdescripcion(this.detallemovimientoinventario.getdescripcion());	
				detallemovimientoinventarioAux.setcantidad(this.detallemovimientoinventario.getcantidad());	
				detallemovimientoinventarioAux.setdescuento(this.detallemovimientoinventario.getdescuento());	
				detallemovimientoinventarioAux.setcosto_unitario(this.detallemovimientoinventario.getcosto_unitario());	
				detallemovimientoinventarioAux.setcosto_total(this.detallemovimientoinventario.getcosto_total());	
				detallemovimientoinventarioAux.setdisponible(this.detallemovimientoinventario.getdisponible());	
				detallemovimientoinventarioAux.setiva(this.detallemovimientoinventario.getiva());	
				detallemovimientoinventarioAux.setiva_valor(this.detallemovimientoinventario.getiva_valor());	
				detallemovimientoinventarioAux.setcosto_iva(this.detallemovimientoinventario.getcosto_iva());	
				detallemovimientoinventarioAux.setice(this.detallemovimientoinventario.getice());	
				detallemovimientoinventarioAux.setice_valor(this.detallemovimientoinventario.getice_valor());	
				detallemovimientoinventarioAux.setdescuento1(this.detallemovimientoinventario.getdescuento1());	
				detallemovimientoinventarioAux.setdescuento2(this.detallemovimientoinventario.getdescuento2());	
				detallemovimientoinventarioAux.setserie(this.detallemovimientoinventario.getserie());	
				detallemovimientoinventarioAux.setlote(this.detallemovimientoinventario.getlote());	
				detallemovimientoinventarioAux.setfecha_elaboracion_lote(this.detallemovimientoinventario.getfecha_elaboracion_lote());	
				detallemovimientoinventarioAux.setfecha_caducidad_lote(this.detallemovimientoinventario.getfecha_caducidad_lote());	
				
				if(this.detallemovimientoinventario.getid_novedad_producto()!=null && this.detallemovimientoinventario.getid_novedad_producto()>0L) {
					detallemovimientoinventarioAux.setid_novedad_producto(this.detallemovimientoinventario.getid_novedad_producto());
				} else {
					detallemovimientoinventarioAux.setid_novedad_producto(null);
				}	
				
				if(this.detallemovimientoinventario.getid_centro_costo()!=null && this.detallemovimientoinventario.getid_centro_costo()>0L) {
					detallemovimientoinventarioAux.setid_centro_costo(this.detallemovimientoinventario.getid_centro_costo());
				} else {
					detallemovimientoinventarioAux.setid_centro_costo(null);
				}	
				
				if(this.detallemovimientoinventario.getid_cuenta_contable_costo()!=null && this.detallemovimientoinventario.getid_cuenta_contable_costo()>0L) {
					detallemovimientoinventarioAux.setid_cuenta_contable_costo(this.detallemovimientoinventario.getid_cuenta_contable_costo());
				} else {
					detallemovimientoinventarioAux.setid_cuenta_contable_costo(null);
				}	
				
				if(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario()!=null && this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario()>0L) {
					detallemovimientoinventarioAux.setid_tipo_detalle_movimiento_inventario(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario());
				} else {
					detallemovimientoinventarioAux.setid_tipo_detalle_movimiento_inventario(null);
				}	
				detallemovimientoinventarioAux.setnumero_comprobante(this.detallemovimientoinventario.getnumero_comprobante());	
				detallemovimientoinventarioAux.setlote_cliente(this.detallemovimientoinventario.getlote_cliente());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarios);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.saveDetalleMovimientoInventarios();//WithConnection
						//detallemovimientoinventarioLogic.getSetVersionRowDetalleMovimientoInventarios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallemovimientoinventario,detallemovimientoinventarioAux);
					
					this.refrescarForeignKeysDescripcionesDetalleMovimientoInventario();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos().addAll(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientos.addAll(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientosEliminados);
						}
						//ARCHITECTURE
						
						if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallemovimientoinventarioLogic.saveDetalleMovimientoInventarioRelaciones(detallemovimientoinventarioAux,this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos());//WithConnection
								//detallemovimientoinventarioLogic.getSetVersionRowDetalleMovimientoInventarios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallemovimientoinventario,detallemovimientoinventarioAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.setNovedadSeguimientos(new ArrayList<NovedadSeguimiento>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientos= new ArrayList<NovedadSeguimiento>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();}
							detallemovimientoinventarioAux.setNovedadSeguimientos(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarios);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallemovimientoinventario,detallemovimientoinventarioAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detallemovimientoinventarioAux=new  DetalleMovimientoInventario();
				
				detallemovimientoinventarioAux.setIsNew(false);
				detallemovimientoinventarioAux.setIsChanged(false);
				
				detallemovimientoinventarioAux.setIsDeleted(true);
				
				detallemovimientoinventarioAux.setId(this.detallemovimientoinventario.getId());	
				detallemovimientoinventarioAux.setVersionRow(this.detallemovimientoinventario.getVersionRow());	
				detallemovimientoinventarioAux.setid_movimiento_inventario(this.detallemovimientoinventario.getid_movimiento_inventario());	
				detallemovimientoinventarioAux.setid_empresa(this.detallemovimientoinventario.getid_empresa());	
				detallemovimientoinventarioAux.setid_sucursal(this.detallemovimientoinventario.getid_sucursal());	
				detallemovimientoinventarioAux.setid_ejercicio(this.detallemovimientoinventario.getid_ejercicio());	
				detallemovimientoinventarioAux.setid_periodo(this.detallemovimientoinventario.getid_periodo());	
				detallemovimientoinventarioAux.setid_anio(this.detallemovimientoinventario.getid_anio());	
				detallemovimientoinventarioAux.setid_mes(this.detallemovimientoinventario.getid_mes());	
				detallemovimientoinventarioAux.setid_estado_detalle_movimiento_inventario(this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario());	
				detallemovimientoinventarioAux.setid_bodega(this.detallemovimientoinventario.getid_bodega());	
				detallemovimientoinventarioAux.setid_producto(this.detallemovimientoinventario.getid_producto());	
				detallemovimientoinventarioAux.setid_unidad(this.detallemovimientoinventario.getid_unidad());	
				detallemovimientoinventarioAux.setdescripcion(this.detallemovimientoinventario.getdescripcion());	
				detallemovimientoinventarioAux.setcantidad(this.detallemovimientoinventario.getcantidad());	
				detallemovimientoinventarioAux.setdescuento(this.detallemovimientoinventario.getdescuento());	
				detallemovimientoinventarioAux.setcosto_unitario(this.detallemovimientoinventario.getcosto_unitario());	
				detallemovimientoinventarioAux.setcosto_total(this.detallemovimientoinventario.getcosto_total());	
				detallemovimientoinventarioAux.setdisponible(this.detallemovimientoinventario.getdisponible());	
				detallemovimientoinventarioAux.setiva(this.detallemovimientoinventario.getiva());	
				detallemovimientoinventarioAux.setiva_valor(this.detallemovimientoinventario.getiva_valor());	
				detallemovimientoinventarioAux.setcosto_iva(this.detallemovimientoinventario.getcosto_iva());	
				detallemovimientoinventarioAux.setice(this.detallemovimientoinventario.getice());	
				detallemovimientoinventarioAux.setice_valor(this.detallemovimientoinventario.getice_valor());	
				detallemovimientoinventarioAux.setdescuento1(this.detallemovimientoinventario.getdescuento1());	
				detallemovimientoinventarioAux.setdescuento2(this.detallemovimientoinventario.getdescuento2());	
				detallemovimientoinventarioAux.setserie(this.detallemovimientoinventario.getserie());	
				detallemovimientoinventarioAux.setlote(this.detallemovimientoinventario.getlote());	
				detallemovimientoinventarioAux.setfecha_elaboracion_lote(this.detallemovimientoinventario.getfecha_elaboracion_lote());	
				detallemovimientoinventarioAux.setfecha_caducidad_lote(this.detallemovimientoinventario.getfecha_caducidad_lote());	
				
				if(this.detallemovimientoinventario.getid_novedad_producto()!=null && this.detallemovimientoinventario.getid_novedad_producto()>0L) {
					detallemovimientoinventarioAux.setid_novedad_producto(this.detallemovimientoinventario.getid_novedad_producto());
				} else {
					detallemovimientoinventarioAux.setid_novedad_producto(null);
				}	
				
				if(this.detallemovimientoinventario.getid_centro_costo()!=null && this.detallemovimientoinventario.getid_centro_costo()>0L) {
					detallemovimientoinventarioAux.setid_centro_costo(this.detallemovimientoinventario.getid_centro_costo());
				} else {
					detallemovimientoinventarioAux.setid_centro_costo(null);
				}	
				
				if(this.detallemovimientoinventario.getid_cuenta_contable_costo()!=null && this.detallemovimientoinventario.getid_cuenta_contable_costo()>0L) {
					detallemovimientoinventarioAux.setid_cuenta_contable_costo(this.detallemovimientoinventario.getid_cuenta_contable_costo());
				} else {
					detallemovimientoinventarioAux.setid_cuenta_contable_costo(null);
				}	
				
				if(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario()!=null && this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario()>0L) {
					detallemovimientoinventarioAux.setid_tipo_detalle_movimiento_inventario(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario());
				} else {
					detallemovimientoinventarioAux.setid_tipo_detalle_movimiento_inventario(null);
				}	
				detallemovimientoinventarioAux.setnumero_comprobante(this.detallemovimientoinventario.getnumero_comprobante());	
				detallemovimientoinventarioAux.setlote_cliente(this.detallemovimientoinventario.getlote_cliente());	
				
				if(this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detallemovimientoinventarioAux.getId()>=0) {	
						this.detallemovimientoinventariosEliminados.add(detallemovimientoinventarioAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarios);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.saveDetalleMovimientoInventarios();//WithConnection
						//detallemovimientoinventarioLogic.getSetVersionRowDetalleMovimientoInventarios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos().addAll(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientos.addAll(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientosEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallemovimientoinventarioLogic.saveDetalleMovimientoInventarioRelaciones(detallemovimientoinventarioAux,this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos());//WithConnection
								//detallemovimientoinventarioLogic.getSetVersionRowDetalleMovimientoInventarios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.setNovedadSeguimientos(new ArrayList<NovedadSeguimiento>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientos= new ArrayList<NovedadSeguimiento>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();}
							detallemovimientoinventarioAux.setNovedadSeguimientos(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detallemovimientoinventarioAux,detallemovimientoinventarios);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(this.detallemovimientoinventariosEliminados);
					
					detallemovimientoinventarioLogic.saveDetalleMovimientoInventarios();//WithConnection
					//detallemovimientoinventarioLogic.getSetVersionRowDetalleMovimientoInventarios();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleMovimientoInventario();
				
				this.detallemovimientoinventariosEliminados= new ArrayList<DetalleMovimientoInventario>();		
			}
			
			if(this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.arrDatoGeneralTotales=DetalleMovimientoInventarioConstantesFunciones.getTotalesListaDetalleMovimientoInventario(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());							
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				this.arrDatoGeneralTotales=DetalleMovimientoInventarioConstantesFunciones.getTotalesListaDetalleMovimientoInventario(this.detallemovimientoinventarios);
			}
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Movimiento Inventario GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detallemovimientoinventario=detallemovimientoinventarioAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleMovimientoInventario();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleMovimientoInventario detallemovimientoinventarioLocal) throws Exception {
		
		if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				detallemovimientoinventarioLocal.setNovedadSeguimientos(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos());
			
			} else {
			
				detallemovimientoinventarioLocal.setNovedadSeguimientos(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientos);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleMovimientoInventario detallemovimientoinventarioLocal) throws Exception {	
		if(this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(MovimientoInventarioDetalleFormJInternalFrame.class)) {
				MovimientoInventarioBeanSwingJInternalFrame movimientoinventarioBeanSwingJInternalFrameLocal=(MovimientoInventarioBeanSwingJInternalFrame) ((MovimientoInventarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				movimientoinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMovimientoInventario(movimientoinventarioBeanSwingJInternalFrameLocal.getmovimientoinventario(),true);
				movimientoinventarioBeanSwingJInternalFrameLocal.actualizarLista(movimientoinventarioBeanSwingJInternalFrameLocal.movimientoinventario,this.movimientoinventariosForeignKey);

				movimientoinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(movimientoinventarioBeanSwingJInternalFrameLocal.movimientoinventario);

				detallemovimientoinventarioLocal.setMovimientoInventario(movimientoinventarioBeanSwingJInternalFrameLocal.movimientoinventario);

				this.addItemDefectoCombosForeignKeyMovimientoInventario();
				this.cargarCombosFrameMovimientoInventariosForeignKey("Formulario");
				this.setActualMovimientoInventarioForeignKey(movimientoinventarioBeanSwingJInternalFrameLocal.movimientoinventario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detallemovimientoinventarioLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detallemovimientoinventarioLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detallemovimientoinventarioLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detallemovimientoinventarioLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detallemovimientoinventarioLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detallemovimientoinventarioLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoDetalleMovimientoInventarioDetalleFormJInternalFrame.class)) {
				EstadoDetalleMovimientoInventarioBeanSwingJInternalFrame estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal=(EstadoDetalleMovimientoInventarioBeanSwingJInternalFrame) ((EstadoDetalleMovimientoInventarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoDetalleMovimientoInventario(estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal.getestadodetallemovimientoinventario(),true);
				estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal.actualizarLista(estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal.estadodetallemovimientoinventario,this.estadodetallemovimientoinventariosForeignKey);

				estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal.estadodetallemovimientoinventario);

				detallemovimientoinventarioLocal.setEstadoDetalleMovimientoInventario(estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal.estadodetallemovimientoinventario);

				this.addItemDefectoCombosForeignKeyEstadoDetalleMovimientoInventario();
				this.cargarCombosFrameEstadoDetalleMovimientoInventariosForeignKey("Formulario");
				this.setActualEstadoDetalleMovimientoInventarioForeignKey(estadodetallemovimientoinventarioBeanSwingJInternalFrameLocal.estadodetallemovimientoinventario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				detallemovimientoinventarioLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				detallemovimientoinventarioLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UnidadDetalleFormJInternalFrame.class)) {
				UnidadBeanSwingJInternalFrame unidadBeanSwingJInternalFrameLocal=(UnidadBeanSwingJInternalFrame) ((UnidadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				unidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUnidad(unidadBeanSwingJInternalFrameLocal.getunidad(),true);
				unidadBeanSwingJInternalFrameLocal.actualizarLista(unidadBeanSwingJInternalFrameLocal.unidad,this.unidadsForeignKey);

				unidadBeanSwingJInternalFrameLocal.actualizarRelaciones(unidadBeanSwingJInternalFrameLocal.unidad);

				detallemovimientoinventarioLocal.setUnidad(unidadBeanSwingJInternalFrameLocal.unidad);

				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey("Formulario");
				this.setActualUnidadForeignKey(unidadBeanSwingJInternalFrameLocal.unidad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(NovedadProductoDetalleFormJInternalFrame.class)) {
				NovedadProductoBeanSwingJInternalFrame novedadproductoBeanSwingJInternalFrameLocal=(NovedadProductoBeanSwingJInternalFrame) ((NovedadProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				novedadproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoNovedadProducto(novedadproductoBeanSwingJInternalFrameLocal.getnovedadproducto(),true);
				novedadproductoBeanSwingJInternalFrameLocal.actualizarLista(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto,this.novedadproductosForeignKey);

				novedadproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto);

				detallemovimientoinventarioLocal.setNovedadProducto(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto);

				this.addItemDefectoCombosForeignKeyNovedadProducto();
				this.cargarCombosFrameNovedadProductosForeignKey("Formulario");
				this.setActualNovedadProductoForeignKey(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				detallemovimientoinventarioLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostosForeignKey);

				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				detallemovimientoinventarioLocal.setCuentaContableCosto(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey("Formulario");
				this.setActualCuentaContableCostoForeignKey(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoDetalleMovimientoInventarioDetalleFormJInternalFrame.class)) {
				TipoDetalleMovimientoInventarioBeanSwingJInternalFrame tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal=(TipoDetalleMovimientoInventarioBeanSwingJInternalFrame) ((TipoDetalleMovimientoInventarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoDetalleMovimientoInventario(tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal.gettipodetallemovimientoinventario(),true);
				tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal.actualizarLista(tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal.tipodetallemovimientoinventario,this.tipodetallemovimientoinventariosForeignKey);

				tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal.tipodetallemovimientoinventario);

				detallemovimientoinventarioLocal.setTipoDetalleMovimientoInventario(tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal.tipodetallemovimientoinventario);

				this.addItemDefectoCombosForeignKeyTipoDetalleMovimientoInventario();
				this.cargarCombosFrameTipoDetalleMovimientoInventariosForeignKey("Formulario");
				this.setActualTipoDetalleMovimientoInventarioForeignKey(tipodetallemovimientoinventarioBeanSwingJInternalFrameLocal.tipodetallemovimientoinventario.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleMovimientoInventarioActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detallemovimientoinventarioValidator.getInvalidValues(this.detallemovimientoinventario);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleMovimientoInventario detallemovimientoinventario,List<DetalleMovimientoInventario> detallemovimientoinventarios) throws Exception {
		try	{		
			DetalleMovimientoInventarioConstantesFunciones.actualizarLista(detallemovimientoinventario,detallemovimientoinventarios,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleMovimientoInventario detallemovimientoinventario,List<DetalleMovimientoInventario> detallemovimientoinventarios) throws Exception {
		try	{			
			DetalleMovimientoInventarioConstantesFunciones.actualizarSelectedLista(detallemovimientoinventario,detallemovimientoinventarios);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleMovimientoInventario> detallemovimientoinventariosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detallemovimientoinventariosLocal=this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detallemovimientoinventariosLocal=this.detallemovimientoinventarios;
			}
			//ARCHITECTURE
		
			for(DetalleMovimientoInventario detallemovimientoinventarioLocal:detallemovimientoinventariosLocal) {
				if(this.permiteMantenimiento(detallemovimientoinventarioLocal) && detallemovimientoinventarioLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleMovimientoInventarioConstantesFunciones.getDetalleMovimientoInventarioLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDMOVIMIENTOINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_movimiento_inventarioDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_empresaDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_sucursalDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_ejercicioDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_periodoDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_anioDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_mesDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDESTADODETALLEMOVIMIENTOINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_bodegaDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_productoDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_unidadDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescripcionDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.CANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcantidadDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescuentoDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.COSTOUNITARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcosto_unitarioDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.COSTOTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcosto_totalDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.DISPONIBLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldisponibleDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelivaDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IVAVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeliva_valorDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.COSTOIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcosto_ivaDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeliceDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.ICEVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelice_valorDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.DESCUENTO1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescuento1DetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.DESCUENTO2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescuento2DetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.SERIE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelserieDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.LOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelloteDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.FECHAELABORACIONLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelfecha_elaboracion_loteDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.FECHACADUCIDADLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelfecha_caducidad_loteDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDNOVEDADPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_novedad_productoDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_centro_costoDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDCUENTACONTABLECOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_cuenta_contable_costoDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.IDTIPODETALLEMOVIMIENTOINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.NUMEROCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelnumero_comprobanteDetalleMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleMovimientoInventarioConstantesFunciones.LOTECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabellote_clienteDetalleMovimientoInventario,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_movimiento_inventarioDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_empresaDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_sucursalDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_ejercicioDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_periodoDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_anioDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_mesDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_bodegaDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_productoDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_unidadDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescripcionDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcantidadDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescuentoDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcosto_unitarioDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcosto_totalDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldisponibleDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelivaDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeliva_valorDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcosto_ivaDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeliceDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelice_valorDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescuento1DetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescuento2DetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelserieDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelloteDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelfecha_elaboracion_loteDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelfecha_caducidad_loteDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_novedad_productoDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_centro_costoDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_cuenta_contable_costoDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelnumero_comprobanteDetalleMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabellote_clienteDetalleMovimientoInventario,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("NovedadSeguimiento")) {
			if(this.detallemovimientoinventario==null) {
				this.detallemovimientoinventario= new DetalleMovimientoInventario();
			}

			if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoDetalleMovimientoInventario
				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.getnovedadseguimiento().setDetalleMovimientoInventario(this.detallemovimientoinventario);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleMovimientoInventario--;	
		
		
		this.detallemovimientoinventarioAux=new DetalleMovimientoInventario();
		
		this.detallemovimientoinventarioAux.setId(this.iIdNuevoDetalleMovimientoInventario);
		this.detallemovimientoinventarioAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().add(this.detallemovimientoinventarioAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detallemovimientoinventarios.add(this.detallemovimientoinventarioAux);
		}
		//ARCHITECTURE
		
		this.detallemovimientoinventario=this.detallemovimientoinventarioAux;
		
		if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleMovimientoInventario(this.detallemovimientoinventario);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleMovimientoInventario(this.detallemovimientoinventario);
		}
				
		//this.setDefaultControlesDetalleMovimientoInventario();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleMovimientoInventario();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleMovimientoInventario();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleMovimientoInventario();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventarioBean,this.detallemovimientoinventario,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
			classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detallemovimientoinventarioReturnGeneral=detallemovimientoinventarioLogic.procesarEventosDetalleMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios(),this.detallemovimientoinventario,this.detallemovimientoinventarioParameterGeneral,this.isEsNuevoDetalleMovimientoInventario,classes);//this.detallemovimientoinventarioLogic.getDetalleMovimientoInventario()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral,this.detallemovimientoinventarioBean,false);
		
		if(this.detallemovimientoinventarioReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario());
		}
		
		if(this.detallemovimientoinventarioReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario(),classes);//this.detallemovimientoinventarioBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleMovimientoInventario();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleMovimientoInventario();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.RecargarFormDetalleMovimientoInventario(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleMovimientoInventario(false);
						
			if(detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoSessionBean.getEsGuardarRelacionado() && NovedadSeguimientoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonNovedadSeguimientoActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleMovimientoInventario();
			}
			
			this.actualizarVisualTableDatosDetalleMovimientoInventario();
			
			this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(this.getIndiceNuevoDetalleMovimientoInventario(), this.getIndiceNuevoDetalleMovimientoInventario());
			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
						
			this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleMovimientoInventario(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextAreadescripcionDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activardescripcionDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarcantidadDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuentoDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activardescuentoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarcosto_unitarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarcosto_totalDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddisponibleDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activardisponibleDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldivaDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarivaDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldiva_valorDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activariva_valorDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxcosto_ivaDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarcosto_ivaDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldiceDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activariceDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldice_valorDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarice_valorDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuento1DetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activardescuento1DetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuento2DetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activardescuento2DetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldserieDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarserieDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldloteDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarloteDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jDateChooserfecha_elaboracion_loteDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarfecha_elaboracion_loteDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jDateChooserfecha_caducidad_loteDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarfecha_caducidad_loteDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldnumero_comprobanteDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarnumero_comprobanteDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldlote_clienteDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarlote_clienteDetalleMovimientoInventario);	
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_movimiento_inventarioDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_empresaDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_sucursalDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_ejercicioDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_periodoDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_anioDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_mesDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_bodegaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_productoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_unidadDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_novedad_productoDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_centro_costoDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_cuenta_contable_costoDetalleMovimientoInventario);//
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setEnabled(isHabilitar && this.detallemovimientoinventarioConstantesFunciones.activarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario);
	};
	
	public void setDefaultControlesDetalleMovimientoInventario() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleMovimientoInventario(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detallemovimientoinventarioSessionBean.setConGuardarRelaciones(true);			
			this.detallemovimientoinventarioSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.detallemovimientoinventarioSessionBean.setConGuardarRelaciones(false);			
			this.detallemovimientoinventarioSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoDetalleMovimientoInventario() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
				if(detallemovimientoinventarioAux.getId().equals(this.iIdNuevoDetalleMovimientoInventario)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarios) {
				if(detallemovimientoinventarioAux.getId().equals(this.iIdNuevoDetalleMovimientoInventario)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
				if(detallemovimientoinventarioAux.getId().equals(detallemovimientoinventario.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarios) {
				if(detallemovimientoinventarioAux.getId().equals(detallemovimientoinventario.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventarioOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
				if(detallemovimientoinventarioAux.getDetalleMovimientoInventarioOriginal().getId().equals(detallemovimientoinventarioOriginal.getId())) {
					existe=true;
					detallemovimientoinventarioOriginal.setId(detallemovimientoinventarioAux.getId());
					detallemovimientoinventarioOriginal.setVersionRow(detallemovimientoinventarioAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarios) {
				if(detallemovimientoinventarioAux.getDetalleMovimientoInventarioOriginal().getId().equals(detallemovimientoinventarioOriginal.getId())) {
					existe=true;
					detallemovimientoinventarioOriginal.setId(detallemovimientoinventarioAux.getId());
					detallemovimientoinventarioOriginal.setVersionRow(detallemovimientoinventarioAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleMovimientoInventario(Boolean esParaCancelar) throws Exception {
		detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
		detallemovimientoinventarioAux=new DetalleMovimientoInventario();
		
		if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
					if(detallemovimientoinventarioAux.getId()<0) {
						detallemovimientoinventariosAux.add(detallemovimientoinventarioAux);
					}		
				}
				this.iIdNuevoDetalleMovimientoInventario=0L;
				this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().removeAll(detallemovimientoinventariosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarios) {
					if(detallemovimientoinventarioAux.getId()<0) {
						detallemovimientoinventariosAux.add(detallemovimientoinventarioAux);
					}		
				}
				this.iIdNuevoDetalleMovimientoInventario=0L;
				this.detallemovimientoinventarios.removeAll(detallemovimientoinventariosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleMovimientoInventario 
					&& this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()>0
					) {
					detallemovimientoinventarioAux=this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().get(this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size() - 1);
				
					if(detallemovimientoinventarioAux.getId()<0) {
						this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().remove(detallemovimientoinventarioAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleMovimientoInventario && this.detallemovimientoinventarios.size()>0) {
					detallemovimientoinventarioAux=this.detallemovimientoinventarios.get(this.detallemovimientoinventarios.size() - 1);
				
					if(detallemovimientoinventarioAux.getId()<0) {
						this.detallemovimientoinventarios.remove(detallemovimientoinventarioAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleMovimientoInventario(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detallemovimientoinventario.getId()<0) {
				this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().remove(this.detallemovimientoinventario);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detallemovimientoinventario.getId()<0) {
				this.detallemovimientoinventarios.remove(this.detallemovimientoinventario);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleMovimientoInventario(List<DetalleMovimientoInventario> detallemovimientoinventariosAux) throws Exception {
		DetalleMovimientoInventarioConstantesFunciones.setEstadosInicialesDetalleMovimientoInventario(detallemovimientoinventariosAux);
	}
	
	public void setEstadosInicialesDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventarioAux) throws Exception {
		DetalleMovimientoInventarioConstantesFunciones.setEstadosInicialesDetalleMovimientoInventario(detallemovimientoinventarioAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleMovimientoInventarioActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleMovimientoInventarioActual()) {
				if(!this.isEsNuevoDetalleMovimientoInventario) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleMovimientoInventario=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleMovimientoInventarioActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Movimiento Inventario ?", "MANTENIMIENTO DE Detalle Movimiento Inventario", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleMovimientoInventario detallemovimientoinventario) throws Exception {
		DetalleMovimientoInventarioConstantesFunciones.seleccionarAsignar(this.detallemovimientoinventario,detallemovimientoinventario);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleMovimientoInventario=this.isPermisoActualizarOriginalDetalleMovimientoInventario;
			
			
			this.seleccionarAsignar(detallemovimientoinventario);
			
			

			idProductoActual=detallemovimientoinventario.getid_producto();
			this.seleccionarProductoActual();

			idCentroCostoActual=detallemovimientoinventario.getid_centro_costo();
			this.seleccionarCentroCostoActual();

			idCuentaContableCostoActual=detallemovimientoinventario.getid_cuenta_contable_costo();
			this.seleccionarCuentaContableCostoActual();

			idTipoDetalleMovimientoInventarioActual=detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario();
			this.seleccionarTipoDetalleMovimientoInventarioActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleMovimientoInventarioConstantesFunciones.quitarEspaciosDetalleMovimientoInventario(this.detallemovimientoinventario,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detallemovimientoinventarioSessionBean.setsFuncionBusquedaRapida(this.detallemovimientoinventarioSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCostoActual() throws Exception {
		try	{
			CuentaContable cuentacontablecostoAux=new CuentaContable();

			if(this.idCuentaContableCostoActual != null && this.idCuentaContableCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecostoLogic.getEntityWithConnection(this.idCuentaContableCostoActual);
					cuentacontablecostoAux= cuentacontablecostoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecostosForeignKey.add(cuentacontablecostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarTipoDetalleMovimientoInventarioActual() throws Exception {
		try	{
			TipoDetalleMovimientoInventario tipodetallemovimientoinventarioAux=new TipoDetalleMovimientoInventario();

			if(this.idTipoDetalleMovimientoInventarioActual != null && this.idTipoDetalleMovimientoInventarioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipodetallemovimientoinventarioLogic.getEntityWithConnection(this.idTipoDetalleMovimientoInventarioActual);
					tipodetallemovimientoinventarioAux= tipodetallemovimientoinventarioLogic.getTipoDetalleMovimientoInventario();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				tipodetallemovimientoinventariosForeignKey=new ArrayList<TipoDetalleMovimientoInventario>();
				tipodetallemovimientoinventariosForeignKey.add(tipodetallemovimientoinventarioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleMovimientoInventario) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleMovimientoInventario(esParaCancelar);				
				this.cancelarNuevoDetalleMovimientoInventario(esParaCancelar);								
			}
			
			this.detallemovimientoinventario=new DetalleMovimientoInventario();
			
			this.inicializarDetalleMovimientoInventario();
			
			this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleMovimientoInventario() throws Exception {
		try {
			DetalleMovimientoInventarioConstantesFunciones.inicializarDetalleMovimientoInventario(this.detallemovimientoinventario);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleMovimientoInventarios(String sAccionBusqueda,List<DetalleMovimientoInventario> detallemovimientoinventariosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleMovimientoInventario"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleMovimientoInventarioMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleMovimientoInventarioMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleMovimientoInventario"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Movimiento Inventarios");		
		parameters.put("busquedapor", DetalleMovimientoInventarioConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(NovedadSeguimiento.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					DetalleMovimientoInventarioLogic detallemovimientoinventarioLogicAuxiliar=new DetalleMovimientoInventarioLogic();
					detallemovimientoinventarioLogicAuxiliar.setDatosCliente(detallemovimientoinventarioLogic.getDatosCliente());				
					detallemovimientoinventarioLogicAuxiliar.setDetalleMovimientoInventarios(detallemovimientoinventariosParaReportes);
					
					detallemovimientoinventarioLogicAuxiliar.cargarRelacionesLoteForeignKeyDetalleMovimientoInventarioWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					detallemovimientoinventariosParaReportes=detallemovimientoinventarioLogicAuxiliar.getDetalleMovimientoInventarios();
					
					//detallemovimientoinventarioLogic.getNewConnexionToDeep();
					
					//for (DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosParaReportes) {
					//	detallemovimientoinventarioLogic.deepLoad(detallemovimientoinventario, false, DeepLoadType.INCLUDE, classes);
					//}						
					//detallemovimientoinventarioLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileNovedadSeguimiento = AuxiliarReportes.class.getResourceAsStream("NovedadSeguimientoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_novedadseguimiento", reportFileNovedadSeguimiento);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleMovimientoInventario=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleMovimientoInventarioConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleMovimientoInventarioConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleMovimientoInventario=new JRBeanArrayDataSource(DetalleMovimientoInventarioJInternalFrame.TraerDetalleMovimientoInventarioBeans(detallemovimientoinventariosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleMovimientoInventario);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleMovimientoInventarioConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleMovimientoInventarioConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleMovimientoInventarioBean.TraerDetalleMovimientoInventarioBeans(detallemovimientoinventariosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,detallemovimientoinventariosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,detallemovimientoinventariosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					/*
					this.jButtonGenerarExcelReporteDinamicoDetalleMovimientoInventarioActionPerformed(null);
					//this.generarExcelReporteDetalleMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,detallemovimientoinventariosParaReportes);
					*/
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,detallemovimientoinventariosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,detallemovimientoinventariosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,detallemovimientoinventariosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleMovimientoInventarios(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleMovimientoInventario> detallemovimientoinventariosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallemovimientoinventario";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleMovimientoInventarios");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleMovimientoInventario("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleMovimientoInventario detallemovimientoinventario : detallemovimientoinventariosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleMovimientoInventarioConstantesFunciones.generarExcelReporteDataDetalleMovimientoInventario("NORMAL",row,workbook,detallemovimientoinventario,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleMovimientoInventario(String sTipo,Row row,Workbook workbook) {
		
		DetalleMovimientoInventarioConstantesFunciones.generarExcelReporteHeaderDetalleMovimientoInventario(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleMovimientoInventarios(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleMovimientoInventario> detallemovimientoinventariosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallemovimientoinventario_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleMovimientoInventarios");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleMovimientoInventario detallemovimientoinventario : detallemovimientoinventariosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.getDetalleMovimientoInventarioDescripcion(detallemovimientoinventario));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getmovimientoinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getestadodetallemovimientoinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getunidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getcantidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getcosto_unitario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getcosto_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getdisponible());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getiva_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(detallemovimientoinventario.getcosto_iva()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getice_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getdescuento1());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getdescuento2());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getserie());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getlote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getfecha_elaboracion_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getfecha_caducidad_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getnovedadproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getcuentacontablecosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.gettipodetallemovimientoinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getnumero_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallemovimientoinventario.getlote_cliente());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleMovimientoInventarios(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleMovimientoInventario> detallemovimientoinventariosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleMovimientoInventario> detallemovimientoinventariosRespaldo=null;
		
		classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detallemovimientoinventarioLogic.setDatosCliente(this.datosCliente);
		this.detallemovimientoinventarioLogic.setDatosDeep(this.datosDeep);
		this.detallemovimientoinventarioLogic.setIsConDeep(true);
		
		detallemovimientoinventariosRespaldo=this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios();
		
		this.detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(detallemovimientoinventariosParaReportes);	
		this.detallemovimientoinventarioLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detallemovimientoinventariosParaReportes=this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios();
		this.detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(detallemovimientoinventariosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallemovimientoinventario_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleMovimientoInventarios");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleMovimientoInventario("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleMovimientoInventario detallemovimientoinventario : detallemovimientoinventariosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleMovimientoInventario("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleMovimientoInventarioConstantesFunciones.generarExcelReporteDataDetalleMovimientoInventario("NORMAL",row,workbook,detallemovimientoinventario,cellStyleDataAux);
		
			
			


				//NovedadSeguimiento
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(NovedadSeguimientoConstantesFunciones.SCLASSWEBTITULO))) {

				if(detallemovimientoinventario.getNovedadSeguimientos()!=null && detallemovimientoinventario.getNovedadSeguimientos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(NovedadSeguimientoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					NovedadSeguimientoConstantesFunciones.generarExcelReporteHeaderNovedadSeguimiento("RELACIONADO",row,workbook);
				}

				if(detallemovimientoinventario.getNovedadSeguimientos()!=null) {
					i2=0;
					for(NovedadSeguimiento novedadseguimiento : detallemovimientoinventario.getNovedadSeguimientos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						NovedadSeguimientoConstantesFunciones.generarExcelReporteDataNovedadSeguimiento("RELACIONADO",row,workbook,novedadseguimiento,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.getDetalleMovimientoInventarioDescripcion(detallemovimientoinventario));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public void startProcessDetalleMovimientoInventario() throws Exception {		
		this.startProcessDetalleMovimientoInventario(true);
	}
	
	public void startProcessDetalleMovimientoInventario(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleMovimientoInventario ,this.jPanelParametrosReportesDetalleMovimientoInventario, this.jScrollPanelDatosDetalleMovimientoInventario,this.jPanelPaginacionDetalleMovimientoInventario, this.jScrollPanelDatosEdicionDetalleMovimientoInventario, this.jPanelAccionesDetalleMovimientoInventario,this.jPanelAccionesFormularioDetalleMovimientoInventario,this.jmenuBarDetalleMovimientoInventario,this.jmenuBarDetalleDetalleMovimientoInventario,this.jTtoolBarDetalleMovimientoInventario,this.jTtoolBarDetalleDetalleMovimientoInventario);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleMovimientoInventario=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesDetalleMovimientoInventario=this.jPanelParametrosReportesDetalleMovimientoInventario;
		//final JScrollPane jScrollPanelDatosDetalleMovimientoInventario=this.jScrollPanelDatosDetalleMovimientoInventario;
		final JTable jTableDatosDetalleMovimientoInventario=this.jTableDatosDetalleMovimientoInventario;		
		final JPanel jPanelPaginacionDetalleMovimientoInventario=this.jPanelPaginacionDetalleMovimientoInventario;
		//final JScrollPane jScrollPanelDatosEdicionDetalleMovimientoInventario=this.jScrollPanelDatosEdicionDetalleMovimientoInventario;
		final JPanel jPanelAccionesDetalleMovimientoInventario=this.jPanelAccionesDetalleMovimientoInventario;
		
		JPanel jPanelCamposAuxiliarDetalleMovimientoInventario=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleMovimientoInventario=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			jPanelCamposAuxiliarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelCamposDetalleMovimientoInventario;
			jPanelAccionesFormularioAuxiliarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelAccionesFormularioDetalleMovimientoInventario;
		}
		
		final JPanel jPanelCamposDetalleMovimientoInventario=jPanelCamposAuxiliarDetalleMovimientoInventario;
		final JPanel jPanelAccionesFormularioDetalleMovimientoInventario=jPanelAccionesFormularioAuxiliarDetalleMovimientoInventario;
		
		
		final JMenuBar jmenuBarDetalleMovimientoInventario=new JMenuBar();
		final JMenuBar jmenuBarDetalleDetalleMovimientoInventario=new JMenuBar();
		final JToolBar jTtoolBarDetalleMovimientoInventario=new JToolBar();
		final JToolBar jTtoolBarDetalleDetalleMovimientoInventario=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleMovimientoInventario;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleMovimientoInventario;
			processRunnable.jTableDatos=jTableDatosDetalleMovimientoInventario;
			processRunnable.jPanelCampos=jPanelCamposDetalleMovimientoInventario;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleMovimientoInventario;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleMovimientoInventario;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleMovimientoInventario;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleMovimientoInventario;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleMovimientoInventario;
			processRunnable.jTtoolBar=jTtoolBarDetalleMovimientoInventario;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleMovimientoInventario;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleMovimientoInventario ,jPanelParametrosReportesDetalleMovimientoInventario,jTableDatosDetalleMovimientoInventario, /*jScrollPanelDatosDetalleMovimientoInventario,*/jPanelCamposDetalleMovimientoInventario,jPanelPaginacionDetalleMovimientoInventario, /*jScrollPanelDatosEdicionDetalleMovimientoInventario,*/ jPanelAccionesDetalleMovimientoInventario,jPanelAccionesFormularioDetalleMovimientoInventario,jmenuBarDetalleMovimientoInventario,jmenuBarDetalleDetalleMovimientoInventario,jTtoolBarDetalleMovimientoInventario,jTtoolBarDetalleDetalleMovimientoInventario);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleMovimientoInventario ,jPanelParametrosReportesDetalleMovimientoInventario, jScrollPanelDatosDetalleMovimientoInventario,jPanelPaginacionDetalleMovimientoInventario, jScrollPanelDatosEdicionDetalleMovimientoInventario, jPanelAccionesDetalleMovimientoInventario,jPanelAccionesFormularioDetalleMovimientoInventario,jmenuBarDetalleMovimientoInventario,jmenuBarDetalleDetalleMovimientoInventario,jTtoolBarDetalleMovimientoInventario,jTtoolBarDetalleDetalleMovimientoInventario);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleMovimientoInventario() {// throws Exception 
		this.finishProcessDetalleMovimientoInventario(true);
	}
	
	public void finishProcessDetalleMovimientoInventario(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleMovimientoInventario ,this.jPanelParametrosReportesDetalleMovimientoInventario, this.jScrollPanelDatosDetalleMovimientoInventario,this.jPanelPaginacionDetalleMovimientoInventario, this.jScrollPanelDatosEdicionDetalleMovimientoInventario, this.jPanelAccionesDetalleMovimientoInventario,this.jPanelAccionesFormularioDetalleMovimientoInventario,this.jmenuBarDetalleMovimientoInventario,this.jmenuBarDetalleDetalleMovimientoInventario,this.jTtoolBarDetalleMovimientoInventario,this.jTtoolBarDetalleDetalleMovimientoInventario);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleMovimientoInventario=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesDetalleMovimientoInventario=this.jPanelParametrosReportesDetalleMovimientoInventario;
		//final JScrollPane jScrollPanelDatosDetalleMovimientoInventario=this.jScrollPanelDatosDetalleMovimientoInventario;
		final JTable jTableDatosDetalleMovimientoInventario=this.jTableDatosDetalleMovimientoInventario;		
		final JPanel jPanelPaginacionDetalleMovimientoInventario=this.jPanelPaginacionDetalleMovimientoInventario;
		//final JScrollPane jScrollPanelDatosEdicionDetalleMovimientoInventario=this.jScrollPanelDatosEdicionDetalleMovimientoInventario;
		final JPanel jPanelAccionesDetalleMovimientoInventario=this.jPanelAccionesDetalleMovimientoInventario;
		
		JPanel jPanelCamposAuxiliarDetalleMovimientoInventario=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleMovimientoInventario=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			jPanelCamposAuxiliarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelCamposDetalleMovimientoInventario;
			jPanelAccionesFormularioAuxiliarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelAccionesFormularioDetalleMovimientoInventario;
		}
		
		final JPanel jPanelCamposDetalleMovimientoInventario=jPanelCamposAuxiliarDetalleMovimientoInventario;
		final JPanel jPanelAccionesFormularioDetalleMovimientoInventario=jPanelAccionesFormularioAuxiliarDetalleMovimientoInventario;
		
		
		final JMenuBar jmenuBarDetalleMovimientoInventario=new JMenuBar();
		final JMenuBar jmenuBarDetalleDetalleMovimientoInventario=new JMenuBar();
		final JToolBar jTtoolBarDetalleMovimientoInventario=new JToolBar();
		final JToolBar jTtoolBarDetalleDetalleMovimientoInventario=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleMovimientoInventario;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleMovimientoInventario;
			processRunnable.jTableDatos=jTableDatosDetalleMovimientoInventario;
			processRunnable.jPanelCampos=jPanelCamposDetalleMovimientoInventario;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleMovimientoInventario;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleMovimientoInventario;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleMovimientoInventario;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleMovimientoInventario;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleMovimientoInventario;
			processRunnable.jTtoolBar=jTtoolBarDetalleMovimientoInventario;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleMovimientoInventario;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleMovimientoInventario ,jPanelParametrosReportesDetalleMovimientoInventario, jTableDatosDetalleMovimientoInventario,/*jScrollPanelDatosDetalleMovimientoInventario,*/jPanelCamposDetalleMovimientoInventario,jPanelPaginacionDetalleMovimientoInventario, /*jScrollPanelDatosEdicionDetalleMovimientoInventario,*/ jPanelAccionesDetalleMovimientoInventario,jPanelAccionesFormularioDetalleMovimientoInventario,jmenuBarDetalleMovimientoInventario,jmenuBarDetalleDetalleMovimientoInventario,jTtoolBarDetalleMovimientoInventario,jTtoolBarDetalleDetalleMovimientoInventario));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleMovimientoInventario(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleMovimientoInventario(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleMovimientoInventario(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleMovimientoInventario(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleMovimientoInventario,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleMovimientoInventario,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleMovimientoInventario(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleMovimientoInventario,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleMovimientoInventario,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detallemovimientoinventarioConstantesFunciones.getsFinalQueryDetalleMovimientoInventario();
		String  finalQueryPaginacionTodos=this.detallemovimientoinventarioConstantesFunciones.getsFinalQueryDetalleMovimientoInventario();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleMovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesNoDetalleMovimientoInventario(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleMovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesDetalleMovimientoInventario(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleMovimientoInventarioConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		/*
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		*/
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detallemovimientoinventariosEliminados= new ArrayList<DetalleMovimientoInventario>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleMovimientoInventario();
		
				///*DetalleMovimientoInventarioSessionBean*/this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			
			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleMovimientoInventarioConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleMovimientoInventarioConstantesFunciones.getClassesForeignKeysOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detallemovimientoinventario."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detallemovimientoinventariosAux= new ArrayList<DetalleMovimientoInventario>();
			
				
			detallemovimientoinventarioLogic.setDatosCliente(this.datosCliente);
			detallemovimientoinventarioLogic.setDatosDeep(this.datosDeep);
			detallemovimientoinventarioLogic.setIsConDeep(true);
			
			
			detallemovimientoinventarioLogic.getDetalleMovimientoInventarioDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detallemovimientoinventarioLogic.getTodosDetalleMovimientoInventarios(finalQueryGlobal,pagination);
					
					//detallemovimientoinventarioLogic.getTodosDetalleMovimientoInventariosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null|| detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallemovimientoinventariosAux= new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux= new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallemovimientoinventarioLogic.getTodosDetalleMovimientoInventarios(finalQueryGlobal+"",this.pagination);												
							
							//detallemovimientoinventarioLogic.getTodosDetalleMovimientoInventariosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleMovimientoInventarios("Todos",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());					
							detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleMovimientoInventario=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleMovimientoInventario=this.idActual;
				
				} else if(this.idDetalleMovimientoInventarioActual!=null && this.idDetalleMovimientoInventarioActual!=0L) {
					idDetalleMovimientoInventario=idDetalleMovimientoInventarioActual;
				}
				
					
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndicePorId(idDetalleMovimientoInventario);
				
				this.detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detallemovimientoinventarioLogic.getEntity(idDetalleMovimientoInventario);
					
					//detallemovimientoinventarioLogic.getEntityWithConnection(idDetalleMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
					detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().add(detallemovimientoinventarioLogic.getDetalleMovimientoInventario());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
					this.detallemovimientoinventarios.add(detallemovimientoinventario);
				}
				
				if(detallemovimientoinventarioLogic.getDetalleMovimientoInventario()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdBodega",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdBodega",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdCentroCosto",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdCentroCosto",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCosto")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdCuentaContableCosto(finalQueryGlobal,pagination,id_cuenta_contable_costoFK_IdCuentaContableCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdCuentaContableCosto(finalQueryGlobal,pagination,id_cuenta_contable_costoFK_IdCuentaContableCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdCuentaContableCosto",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdCuentaContableCosto",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdEjercicio",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdEjercicio",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdEmpresa",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdEmpresa",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoDetalleMovimientoInventario")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleMovimientoInventario(id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdEstadoDetalleMovimientoInventario(finalQueryGlobal,pagination,id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleMovimientoInventario(id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleMovimientoInventario(id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdEstadoDetalleMovimientoInventario(finalQueryGlobal,pagination,id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleMovimientoInventario(id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleMovimientoInventario(id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdEstadoDetalleMovimientoInventario",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdEstadoDetalleMovimientoInventario",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMovimientoInventario")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdMovimientoInventario(id_movimiento_inventarioFK_IdMovimientoInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdMovimientoInventario(finalQueryGlobal,pagination,id_movimiento_inventarioFK_IdMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdMovimientoInventario(id_movimiento_inventarioFK_IdMovimientoInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdMovimientoInventario(id_movimiento_inventarioFK_IdMovimientoInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdMovimientoInventario(finalQueryGlobal,pagination,id_movimiento_inventarioFK_IdMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdMovimientoInventario(id_movimiento_inventarioFK_IdMovimientoInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdMovimientoInventario(id_movimiento_inventarioFK_IdMovimientoInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdMovimientoInventario",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdMovimientoInventario",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdNovedadProducto")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdNovedadProducto(finalQueryGlobal,pagination,id_novedad_productoFK_IdNovedadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdNovedadProducto(finalQueryGlobal,pagination,id_novedad_productoFK_IdNovedadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdNovedadProducto",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdNovedadProducto",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdPeriodo",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdPeriodo",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdProducto",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdProducto",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdSucursal",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdSucursal",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoDetalleMovimientoInventario")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoDetalleMovimientoInventario(id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdTipoDetalleMovimientoInventario(finalQueryGlobal,pagination,id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoDetalleMovimientoInventario(id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoDetalleMovimientoInventario(id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdTipoDetalleMovimientoInventario(finalQueryGlobal,pagination,id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoDetalleMovimientoInventario(id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoDetalleMovimientoInventario(id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdTipoDetalleMovimientoInventario",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdTipoDetalleMovimientoInventario",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUnidad")) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()==null||detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallemovimientoinventarios==null|| detallemovimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
						detallemovimientoinventariosAux.addAll(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventariosAux=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventariosAux.addAll(detallemovimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallemovimientoinventarioLogic.getDetalleMovimientoInventariosFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleMovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleMovimientoInventarios("FK_IdUnidad",detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleMovimientoInventarios("FK_IdUnidad",detallemovimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
						detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(detallemovimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
							detallemovimientoinventarios.addAll(detallemovimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleMovimientoInventario();
		
		this.traerValoresTablaTotales();	
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleMovimientoInventarioConstantesFunciones.getTotalesListaDetalleMovimientoInventario(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleMovimientoInventarioConstantesFunciones.getTotalesListaDetalleMovimientoInventario(this.detallemovimientoinventarios);
		}
		*/
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleMovimientoInventario();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallemovimientoinventarios.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallemovimientoinventarios.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleMovimientoInventario detallemovimientoinventario) {
		Boolean permite=true;
		
		if(this.detallemovimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleMovimientoInventarioConstantesFunciones.getTotalesListaDetalleMovimientoInventario(detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleMovimientoInventarioConstantesFunciones.getTotalesListaDetalleMovimientoInventario(this.detallemovimientoinventarios);
		}
	}
	
	/*
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleMovimientoInventarioConstantesFunciones.getOrderByListaDetalleMovimientoInventario();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleMovimientoInventarioConstantesFunciones.getOrderByListaDetalleMovimientoInventario();
		}		
	}
	*/
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
				if(detallemovimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
					detallemovimientoinventarioTotales=detallemovimientoinventario;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleMovimientoInventario detallemovimientoinventario:this.detallemovimientoinventarios) {
				if(detallemovimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
					detallemovimientoinventarioTotales=detallemovimientoinventario;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detallemovimientoinventarioAux=new DetalleMovimientoInventario();
			this.detallemovimientoinventarioAux.setsType(Constantes2.S_TOTALES);
			this.detallemovimientoinventarioAux.setIsNew(false);
			this.detallemovimientoinventarioAux.setIsChanged(false);
			this.detallemovimientoinventarioAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleMovimientoInventarioConstantesFunciones.TotalizarValoresFilaDetalleMovimientoInventario(this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios(),this.detallemovimientoinventarioAux);
				
				this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().add(this.detallemovimientoinventarioAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleMovimientoInventarioConstantesFunciones.TotalizarValoresFilaDetalleMovimientoInventario(this.detallemovimientoinventarios,this.detallemovimientoinventarioAux);
				
				this.detallemovimientoinventarios.add(this.detallemovimientoinventarioAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detallemovimientoinventarioTotales=new DetalleMovimientoInventario();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().remove(detallemovimientoinventarioTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallemovimientoinventarios.remove(detallemovimientoinventarioTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detallemovimientoinventarioTotales=new DetalleMovimientoInventario();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
				if(detallemovimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
					detallemovimientoinventarioTotales=detallemovimientoinventario;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleMovimientoInventarioConstantesFunciones.TotalizarValoresFilaDetalleMovimientoInventario(this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios(),detallemovimientoinventarioTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleMovimientoInventario detallemovimientoinventario:this.detallemovimientoinventarios) {
				if(detallemovimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
					detallemovimientoinventarioTotales=detallemovimientoinventario;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleMovimientoInventarioConstantesFunciones.TotalizarValoresFilaDetalleMovimientoInventario(this.detallemovimientoinventarios,detallemovimientoinventarioTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleMovimientoInventario() {
		this.isPermisoTodoDetalleMovimientoInventario=false;
		this.isPermisoNuevoDetalleMovimientoInventario=false;
		this.isPermisoActualizarDetalleMovimientoInventario=false;
		this.isPermisoActualizarOriginalDetalleMovimientoInventario=false;
		this.isPermisoEliminarDetalleMovimientoInventario=false;
		this.isPermisoGuardarCambiosDetalleMovimientoInventario=false;
		this.isPermisoConsultaDetalleMovimientoInventario=false;
		this.isPermisoBusquedaDetalleMovimientoInventario=false;
		this.isPermisoReporteDetalleMovimientoInventario=false;		
		this.isPermisoOrdenDetalleMovimientoInventario=false;		
		this.isPermisoPaginacionMedioDetalleMovimientoInventario=false;		
		this.isPermisoPaginacionAltoDetalleMovimientoInventario=false;
		this.isPermisoPaginacionTodoDetalleMovimientoInventario=false;
		this.isPermisoCopiarDetalleMovimientoInventario=false;		
		this.isPermisoVerFormDetalleMovimientoInventario=false;		
		this.isPermisoDuplicarDetalleMovimientoInventario=false;		
		this.isPermisoOrdenDetalleMovimientoInventario=false;		
	}
	
	public void setPermisosUsuarioDetalleMovimientoInventario(Boolean isPermiso) {
		this.isPermisoTodoDetalleMovimientoInventario=isPermiso;
		this.isPermisoNuevoDetalleMovimientoInventario=isPermiso;
		this.isPermisoActualizarDetalleMovimientoInventario=isPermiso;
		this.isPermisoActualizarOriginalDetalleMovimientoInventario=isPermiso;
		this.isPermisoEliminarDetalleMovimientoInventario=isPermiso;
		this.isPermisoGuardarCambiosDetalleMovimientoInventario=isPermiso;
		this.isPermisoConsultaDetalleMovimientoInventario=isPermiso;
		this.isPermisoBusquedaDetalleMovimientoInventario=isPermiso;
		this.isPermisoReporteDetalleMovimientoInventario=isPermiso;
		this.isPermisoOrdenDetalleMovimientoInventario=isPermiso;		
		this.isPermisoPaginacionMedioDetalleMovimientoInventario=isPermiso;		
		this.isPermisoPaginacionAltoDetalleMovimientoInventario=isPermiso;		
		this.isPermisoPaginacionTodoDetalleMovimientoInventario=isPermiso;		
		this.isPermisoCopiarDetalleMovimientoInventario=isPermiso;		
		this.isPermisoVerFormDetalleMovimientoInventario=isPermiso;		
		this.isPermisoDuplicarDetalleMovimientoInventario=isPermiso;
		this.isPermisoOrdenDetalleMovimientoInventario=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleMovimientoInventario(Boolean isPermiso) {
		//this.isPermisoTodoDetalleMovimientoInventario=isPermiso;
		this.isPermisoNuevoDetalleMovimientoInventario=isPermiso;
		this.isPermisoActualizarDetalleMovimientoInventario=isPermiso;
		this.isPermisoActualizarOriginalDetalleMovimientoInventario=isPermiso;
		this.isPermisoEliminarDetalleMovimientoInventario=isPermiso;
		this.isPermisoGuardarCambiosDetalleMovimientoInventario=isPermiso;
		//this.isPermisoConsultaDetalleMovimientoInventario=isPermiso;
		//this.isPermisoBusquedaDetalleMovimientoInventario=isPermiso;
		//this.isPermisoReporteDetalleMovimientoInventario=isPermiso;
		//this.isPermisoOrdenDetalleMovimientoInventario=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleMovimientoInventario=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleMovimientoInventario=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleMovimientoInventario=isPermiso;		
		//this.isPermisoCopiarDetalleMovimientoInventario=isPermiso;		
		//this.isPermisoDuplicarDetalleMovimientoInventario=isPermiso;
		//this.isPermisoOrdenDetalleMovimientoInventario=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleMovimientoInventarioClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(NovedadSeguimientoConstantesFunciones.SNOMBREOPCION);
		
		if(DetalleMovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosNovedadSeguimiento=false;
		this.isTienePermisosNovedadSeguimiento=this.verificarGetPermisosUsuarioOpcionDetalleMovimientoInventarioClaseRelacionada(this.opcionsRelacionadas,NovedadSeguimientoConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleMovimientoInventarioClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosNovedadSeguimiento=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleMovimientoInventarioClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleMovimientoInventarioClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleMovimientoInventarioClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosNovedadSeguimiento && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.remove(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioDetalleMovimientoInventario() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleMovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleMovimientoInventario=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleMovimientoInventario=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleMovimientoInventario=this.isPermisoActualizarDetalleMovimientoInventario;
			this.isPermisoEliminarDetalleMovimientoInventario=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleMovimientoInventario=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleMovimientoInventario=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleMovimientoInventario=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleMovimientoInventario=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleMovimientoInventario=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleMovimientoInventario=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleMovimientoInventario=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleMovimientoInventario=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleMovimientoInventario=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleMovimientoInventario=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleMovimientoInventario=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleMovimientoInventario=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleMovimientoInventario=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleMovimientoInventario.setToolTipText(this.jTableDatosDetalleMovimientoInventario.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleMovimientoInventario(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleMovimientoInventario(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleMovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleMovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleMovimientoInventario() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosNovedadSeguimiento && this.detallemovimientoinventarioConstantesFunciones.mostrarNovedadSeguimientoDetalleMovimientoInventario && !DetalleMovimientoInventarioConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Novedad Seguimiento");
			reporte.setsDescripcion("Novedad Seguimiento");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleMovimientoInventarioListas()throws Exception {
		try	{						
			
				this.movimientoinventariosForeignKey=new ArrayList();
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.estadodetallemovimientoinventariosForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.unidadsForeignKey=new ArrayList();
				this.novedadproductosForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.cuentacontablecostosForeignKey=new ArrayList();
				this.tipodetallemovimientoinventariosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleMovimientoInventarioListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleMovimientoInventarioJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleMovimientoInventarioListas(false);
			} else {
			
				this.cargarCombosForeignKeyMovimientoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoDetalleMovimientoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyNovedadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoDetalleMovimientoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyMovimientoInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.movimientoinventariosForeignKey==null||this.movimientoinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesMovimientoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MovimientoInventarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MovimientoInventarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosMovimientoInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleMovimientoInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadodetallemovimientoinventariosForeignKey==null||this.estadodetallemovimientoinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoDetalleMovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleMovimientoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleMovimientoInventarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoDetalleMovimientoInventarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoDetalleMovimientoInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UnidadConstantesFunciones.SFINALQUERY;

				this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNovedadProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.novedadproductosForeignKey==null||this.novedadproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=NovedadProductoConstantesFunciones.getArrayColumnasGlobalesNovedadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NovedadProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=NovedadProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosNovedadProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDetalleMovimientoInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipodetallemovimientoinventariosForeignKey==null||this.tipodetallemovimientoinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoDetalleMovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesTipoDetalleMovimientoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDetalleMovimientoInventarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoDetalleMovimientoInventarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoDetalleMovimientoInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleMovimientoInventarioListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleMovimientoInventarioParameterReturnGeneral detallemovimientoinventarioReturnGeneral=new DetalleMovimientoInventarioParameterReturnGeneral();
						
			


				String finalQueryGlobalMovimientoInventario="";

				if(((this.movimientoinventariosForeignKey==null||this.movimientoinventariosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_movimiento_inventarioDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_movimiento_inventarioDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMovimientoInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesMovimientoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMovimientoInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MovimientoInventarioConstantesFunciones.TABLENAME);

						finalQueryGlobalMovimientoInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalMovimientoInventario, "");
						finalQueryGlobalMovimientoInventario+=MovimientoInventarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMovimientoInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMovimientoInventario=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidMovimientoInventarioActual();
					}
				} else {
					finalQueryGlobalMovimientoInventario="NONE";
				}


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_empresaDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_empresaDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_sucursalDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_sucursalDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_ejercicioDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_ejercicioDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_periodoDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_periodoDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_anioDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_anioDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_mesDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_mesDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalEstadoDetalleMovimientoInventario="";

				if(((this.estadodetallemovimientoinventariosForeignKey==null||this.estadodetallemovimientoinventariosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleMovimientoInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoDetalleMovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleMovimientoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoDetalleMovimientoInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleMovimientoInventarioConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoDetalleMovimientoInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoDetalleMovimientoInventario, "");
						finalQueryGlobalEstadoDetalleMovimientoInventario+=EstadoDetalleMovimientoInventarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoDetalleMovimientoInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoDetalleMovimientoInventario=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidEstadoDetalleMovimientoInventarioActual();
					}
				} else {
					finalQueryGlobalEstadoDetalleMovimientoInventario="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_bodegaDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_bodegaDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(cargarCombosDependencia && ((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_productoDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_productoDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalUnidad="";

				if(cargarCombosDependencia && ((this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_unidadDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_unidadDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUnidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

						finalQueryGlobalUnidad=Funciones.GetFinalQueryAppend(finalQueryGlobalUnidad, "");
						finalQueryGlobalUnidad+=UnidadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUnidad=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidUnidadActual();
					}
				} else {
					finalQueryGlobalUnidad="NONE";
				}


				String finalQueryGlobalNovedadProducto="";

				if(((this.novedadproductosForeignKey==null||this.novedadproductosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_novedad_productoDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_novedad_productoDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=NovedadProductoConstantesFunciones.getArrayColumnasGlobalesNovedadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalNovedadProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NovedadProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalNovedadProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalNovedadProducto, "");
						finalQueryGlobalNovedadProducto+=NovedadProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosNovedadProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalNovedadProducto=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidNovedadProductoActual();
					}
				} else {
					finalQueryGlobalNovedadProducto="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_centro_costoDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_centro_costoDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalCuentaContableCosto="";

				if(((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_cuenta_contable_costoDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_cuenta_contable_costoDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCosto, "");
						finalQueryGlobalCuentaContableCosto+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCosto=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidCuentaContableCostoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCosto="NONE";
				}


				String finalQueryGlobalTipoDetalleMovimientoInventario="";

				if(((this.tipodetallemovimientoinventariosForeignKey==null||this.tipodetallemovimientoinventariosForeignKey.size()<=0) && this.detallemovimientoinventarioConstantesFunciones.cargarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario)
					 || (this.esRecargarFks && this.detallemovimientoinventarioConstantesFunciones.cargarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario)) {

					if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoDetalleMovimientoInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoDetalleMovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesTipoDetalleMovimientoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoDetalleMovimientoInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDetalleMovimientoInventarioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoDetalleMovimientoInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoDetalleMovimientoInventario, "");
						finalQueryGlobalTipoDetalleMovimientoInventario+=TipoDetalleMovimientoInventarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoDetalleMovimientoInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoDetalleMovimientoInventario=" WHERE " + ConstantesSql.ID + "="+detallemovimientoinventarioSessionBean.getlidTipoDetalleMovimientoInventarioActual();
					}
				} else {
					finalQueryGlobalTipoDetalleMovimientoInventario="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detallemovimientoinventarioReturnGeneral=detallemovimientoinventarioLogic.cargarCombosLoteForeignKeyDetalleMovimientoInventario(finalQueryGlobalMovimientoInventario,finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalEstadoDetalleMovimientoInventario,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalUnidad,finalQueryGlobalNovedadProducto,finalQueryGlobalCentroCosto,finalQueryGlobalCuentaContableCosto,finalQueryGlobalTipoDetalleMovimientoInventario);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalMovimientoInventario.equals("NONE")) {
				this.movimientoinventariosForeignKey=detallemovimientoinventarioReturnGeneral.getmovimientoinventariosForeignKey();
			}

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detallemovimientoinventarioReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detallemovimientoinventarioReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detallemovimientoinventarioReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detallemovimientoinventarioReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detallemovimientoinventarioReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detallemovimientoinventarioReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalEstadoDetalleMovimientoInventario.equals("NONE")) {
				this.estadodetallemovimientoinventariosForeignKey=detallemovimientoinventarioReturnGeneral.getestadodetallemovimientoinventariosForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=detallemovimientoinventarioReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=detallemovimientoinventarioReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalUnidad.equals("NONE")) {
				this.unidadsForeignKey=detallemovimientoinventarioReturnGeneral.getunidadsForeignKey();
			}

			if(!finalQueryGlobalNovedadProducto.equals("NONE")) {
				this.novedadproductosForeignKey=detallemovimientoinventarioReturnGeneral.getnovedadproductosForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=detallemovimientoinventarioReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCosto.equals("NONE")) {
				this.cuentacontablecostosForeignKey=detallemovimientoinventarioReturnGeneral.getcuentacontablecostosForeignKey();
			}

			if(!finalQueryGlobalTipoDetalleMovimientoInventario.equals("NONE")) {
				this.tipodetallemovimientoinventariosForeignKey=detallemovimientoinventarioReturnGeneral.gettipodetallemovimientoinventariosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleMovimientoInventario()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyMovimientoInventario();
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyEstadoDetalleMovimientoInventario();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyUnidad();
			this.addItemDefectoCombosForeignKeyNovedadProducto();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyCuentaContableCosto();
			this.addItemDefectoCombosForeignKeyTipoDetalleMovimientoInventario();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyMovimientoInventario()throws Exception {
		try {
			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMovimientoInventario()) {
				MovimientoInventario movimientoinventario=new MovimientoInventario();
				MovimientoInventarioConstantesFunciones.setMovimientoInventarioDescripcion(movimientoinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				movimientoinventario.setId(null);

				if(!MovimientoInventarioConstantesFunciones.ExisteEnLista(this.movimientoinventariosForeignKey,movimientoinventario,true)) {

					this.movimientoinventariosForeignKey.add(0,movimientoinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoDetalleMovimientoInventario()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleMovimientoInventario()) {
				EstadoDetalleMovimientoInventario estadodetallemovimientoinventario=new EstadoDetalleMovimientoInventario();
				EstadoDetalleMovimientoInventarioConstantesFunciones.setEstadoDetalleMovimientoInventarioDescripcion(estadodetallemovimientoinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadodetallemovimientoinventario.setId(null);

				if(!EstadoDetalleMovimientoInventarioConstantesFunciones.ExisteEnLista(this.estadodetallemovimientoinventariosForeignKey,estadodetallemovimientoinventario,true)) {

					this.estadodetallemovimientoinventariosForeignKey.add(0,estadodetallemovimientoinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUnidad()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				Unidad unidad=new Unidad();
				UnidadConstantesFunciones.setUnidadDescripcion(unidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				unidad.setId(null);

				if(!UnidadConstantesFunciones.ExisteEnLista(this.unidadsForeignKey,unidad,true)) {

					this.unidadsForeignKey.add(0,unidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyNovedadProducto()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {
				NovedadProducto novedadproducto=new NovedadProducto();
				NovedadProductoConstantesFunciones.setNovedadProductoDescripcion(novedadproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				novedadproducto.setId(null);

				if(!NovedadProductoConstantesFunciones.ExisteEnLista(this.novedadproductosForeignKey,novedadproducto,true)) {

					this.novedadproductosForeignKey.add(0,novedadproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCosto()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				CuentaContable cuentacontablecosto=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecosto.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostosForeignKey,cuentacontablecosto,true)) {

					this.cuentacontablecostosForeignKey.add(0,cuentacontablecosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoDetalleMovimientoInventario()throws Exception {
		try {

			if(!this.detallemovimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoDetalleMovimientoInventario()) {
				TipoDetalleMovimientoInventario tipodetallemovimientoinventario=new TipoDetalleMovimientoInventario();
				TipoDetalleMovimientoInventarioConstantesFunciones.setTipoDetalleMovimientoInventarioDescripcion(tipodetallemovimientoinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipodetallemovimientoinventario.setId(null);

				if(!TipoDetalleMovimientoInventarioConstantesFunciones.ExisteEnLista(this.tipodetallemovimientoinventariosForeignKey,tipodetallemovimientoinventario,true)) {

					this.tipodetallemovimientoinventariosForeignKey.add(0,tipodetallemovimientoinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleMovimientoInventario()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega("Todos");
			this.initActionsCombosForeignKeyProducto("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleMovimientoInventario(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyProducto(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodega(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega="+bodegaLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryProductoFromBodega(bodegaLocal);

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboProducto=sFinalQueryCombo;

			this.productosForeignKey=new ArrayList<Producto>();
			this.cargarCombosForeignKeyProducto(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyProducto(JComboBox jComboBoxProductoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Producto productoLocal=(Producto)jComboBoxProductoGenerico.getSelectedItem();

			if(productoLocal!=null  && productoLocal.getId()!=null  && productoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_producto="+productoLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryUnidadFromBodegaYProducto(productoLocal,this.detallemovimientoinventario.getid_bodega());

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboUnidad=sFinalQueryCombo;

			this.unidadsForeignKey=new ArrayList<Unidad>();
			this.cargarCombosForeignKeyUnidad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.addItemListener(new ComboBoxItemListener(this,"id_bodegaDetalleMovimientoInventario"));
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleMovimientoInventario"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.addActionListener(new ComboBoxActionListener(this,"id_bodegaDetalleMovimientoInventario"));
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleMovimientoInventario"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario"));

					} else {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario"));

					}
			*/
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.addItemListener(new ComboBoxItemListener(this,"id_productoDetalleMovimientoInventario"));
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleMovimientoInventario"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.addActionListener(new ComboBoxActionListener(this,"id_productoDetalleMovimientoInventario"));
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleMovimientoInventario"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario"));

						this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario"));

					} else {
						this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario"));

						this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario"));

					}
			*/
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDetalleMovimientoInventario()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
				this.detallemovimientoinventario.setfecha_elaboracion_lote(this.parametroGeneralUsuario.getfecha_sistema());
				this.detallemovimientoinventario.setfecha_caducidad_lote(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleMovimientoInventario();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario)throws Exception {	
		try {
			
			this.setActualMovimientoInventarioForeignKey(detallemovimientoinventario.getid_movimiento_inventario(),false,"Formulario");
			this.setActualEstadoDetalleMovimientoInventarioForeignKey(detallemovimientoinventario.getid_estado_detalle_movimiento_inventario(),false,"Formulario");
			this.setActualBodegaForeignKey(detallemovimientoinventario.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(detallemovimientoinventario.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(detallemovimientoinventario.getid_unidad(),false,"Formulario");
			this.setActualNovedadProductoForeignKey(detallemovimientoinventario.getid_novedad_producto(),false,"Formulario");
			this.setActualCentroCostoForeignKey(detallemovimientoinventario.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(detallemovimientoinventario.getid_cuenta_contable_costo(),false,"Formulario");
			this.setActualTipoDetalleMovimientoInventarioForeignKey(detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detallemovimientoinventario.getProducto()!=null && !sTipoEvento.equals("id_productoDetalleMovimientoInventario")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(detallemovimientoinventario.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				if(detallemovimientoinventario.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoDetalleMovimientoInventario")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(detallemovimientoinventario.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				if(detallemovimientoinventario.getCuentaContableCosto()!=null && !sTipoEvento.equals("id_cuenta_contable_costoDetalleMovimientoInventario")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecostosForeignKey.add(detallemovimientoinventario.getCuentaContableCosto());

					this.addItemDefectoCombosForeignKeyCuentaContableCosto();
					this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
				}

				if(detallemovimientoinventario.getTipoDetalleMovimientoInventario()!=null && !sTipoEvento.equals("id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario")) { //sTipoEvento Evita Bucle Infinito

					this.tipodetallemovimientoinventariosForeignKey=new ArrayList<TipoDetalleMovimientoInventario>();
					this.tipodetallemovimientoinventariosForeignKey.add(detallemovimientoinventario.getTipoDetalleMovimientoInventario());

					this.addItemDefectoCombosForeignKeyTipoDetalleMovimientoInventario();
					this.cargarCombosFrameTipoDetalleMovimientoInventariosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleMovimientoInventario()throws Exception {	
		try {
			
			this.setActualMovimientoInventarioForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_movimiento_inventario(),false,"Formulario");
			this.setActualEstadoDetalleMovimientoInventarioForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_estado_detalle_movimiento_inventario(),false,"Formulario");
			this.setActualBodegaForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_unidad(),false,"Formulario");
			this.setActualNovedadProductoForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_novedad_producto(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_cuenta_contable_costo(),false,"Formulario");
			this.setActualTipoDetalleMovimientoInventarioForeignKey(this.detallemovimientoinventarioConstantesFunciones.getid_tipo_detalle_movimiento_inventario(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleMovimientoInventario()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleMovimientoInventario()throws Exception {	
		try {
			
				this.setActualEstadoDetalleMovimientoInventarioForeignKey(1L,false,"Formulario");
				this.setActualTipoDetalleMovimientoInventarioForeignKey(null,false,"Formulario");
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleMovimientoInventario()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleMovimientoInventario()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleMovimientoInventario()throws Exception {
		try {
			

			this.cargarCombosFrameMovimientoInventariosForeignKey("Todos");
			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameEstadoDetalleMovimientoInventariosForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameUnidadsForeignKey("Todos");
			this.cargarCombosFrameNovedadProductosForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
			this.cargarCombosFrameTipoDetalleMovimientoInventariosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleMovimientoInventario(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameMovimientoInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoDetalleMovimientoInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameNovedadProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoDetalleMovimientoInventariosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleMovimientoInventario()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.getItemCount()>0) {
				//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.getItemCount()>0) {
				//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

















	public void recargarFormDetalleMovimientoInventarioBodega(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleMovimientoInventarioid_producto(jComboBoxGenericoBodega,sFormularioTipoBusqueda,"Bodega",false);
	}

	public void recargarFormDetalleMovimientoInventarioProducto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleMovimientoInventarioid_unidad(jComboBoxGenericoProducto,sFormularioTipoBusqueda,"Producto",false);
	}










	
	



	public void recargarFormDetalleMovimientoInventarioid_producto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Bodega")){
				this.setActualParaGuardarBodegaForeignKey(this.detallemovimientoinventario,jComboBoxGenericoProducto);
			}

			if(this.detallemovimientoinventario.getid_bodega()!=null && this.detallemovimientoinventario.getid_bodega()!=0L) {
				sFinalQuery+="  WHERE  id_bodega="+this.detallemovimientoinventario.getid_bodega();
			} else {
				sFinalQuery+="  WHERE  id_bodega=-1";
			}



			//BUCLE RECURSIVO
			this.setActualProductoForeignKey(this.detallemovimientoinventario.getid_bodega(),true,sFormularioTipoBusqueda);

			this.cargarCombosProductosForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}



	public void recargarFormDetalleMovimientoInventarioid_unidad(JComboBox<?> jComboBoxGenericoUnidad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Producto")){
				this.setActualParaGuardarProductoForeignKey(this.detallemovimientoinventario,jComboBoxGenericoUnidad);
			}

			if(this.detallemovimientoinventario.getid_producto()!=null && this.detallemovimientoinventario.getid_producto()!=0L) {
				sFinalQuery+="  WHERE  id_producto="+this.detallemovimientoinventario.getid_producto();
			} else {
				sFinalQuery+="  WHERE  id_producto=-1";
			}



			//BUCLE RECURSIVO
			this.setActualUnidadForeignKey(this.detallemovimientoinventario.getid_producto(),true,sFormularioTipoBusqueda);

			this.cargarCombosUnidadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public DetalleMovimientoInventarioBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleMovimientoInventarioBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleMovimientoInventarioBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean(); 
		this.detallemovimientoinventarioConstantesFunciones=new DetalleMovimientoInventarioConstantesFunciones(); 
		this.detallemovimientoinventarioBean=new DetalleMovimientoInventario();//(this.detallemovimientoinventarioConstantesFunciones); 		
		this.detallemovimientoinventarioReturnGeneral=new DetalleMovimientoInventarioParameterReturnGeneral(); 
		
		this.detallemovimientoinventarioSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detallemovimientoinventarioSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleMovimientoInventarioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleMovimientoInventarioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleMovimientoInventarioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleMovimientoInventario(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detallemovimientoinventarioConstantesFunciones=new DetalleMovimientoInventarioConstantesFunciones(); 
			this.detallemovimientoinventarioBean=new DetalleMovimientoInventario();//this.detallemovimientoinventarioConstantesFunciones); 			
			this.detallemovimientoinventarioReturnGeneral=new DetalleMovimientoInventarioParameterReturnGeneral(); 
		
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Movimiento Inventario Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detallemovimientoinventario=new DetalleMovimientoInventario();
			this.detallemovimientoinventarios = new ArrayList<DetalleMovimientoInventario>();
			this.detallemovimientoinventariosAux = new ArrayList<DetalleMovimientoInventario>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic=new DetalleMovimientoInventarioLogic();
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			//this.detallemovimientoinventarioSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detallemovimientoinventarioSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleMovimientoInventario);
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleMovimientoInventario);	
					}
					
					if(this.jInternalFrameImportacionDetalleMovimientoInventario!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleMovimientoInventario);							
					}
					*/
				}
				
				if(this.jInternalFrameTotalesDetalleMovimientoInventario!=null) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleMovimientoInventario);
				}
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameOrderByDetalleMovimientoInventario!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleMovimientoInventario);					
					}
					*/
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleMovimientoInventario);
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.setVisible(false);
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				/*
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario);
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleMovimientoInventario!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleMovimientoInventario);
					this.jInternalFrameImportacionDetalleMovimientoInventario.setVisible(false);
					this.jInternalFrameImportacionDetalleMovimientoInventario.setSelected(false);
				}
				
				*/
			}
			
			if(this.jInternalFrameTotalesDetalleMovimientoInventario!=null) {
				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleMovimientoInventario);
				this.jInternalFrameTotalesDetalleMovimientoInventario.setVisible(false);
				this.jInternalFrameTotalesDetalleMovimientoInventario.setSelected(false);
			}
			
			if(!this.conCargarMinimo) {
				/*
				if(this.jInternalFrameOrderByDetalleMovimientoInventario!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleMovimientoInventario);
					this.jInternalFrameOrderByDetalleMovimientoInventario.setVisible(false);
					this.jInternalFrameOrderByDetalleMovimientoInventario.setSelected(false);				
				}
				*/
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleMovimientoInventarioActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleMovimientoInventarioConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detallemovimientoinventarioReturnGeneral=new DetalleMovimientoInventarioParameterReturnGeneral();
			
			this.detallemovimientoinventarioParameterGeneral=new DetalleMovimientoInventarioParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detallemovimientoinventarioLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			/*
			if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			*/
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleMovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(NovedadSeguimientoConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaDuplicarDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaCopiarDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaVerFormDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaOrdenDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCuentaContableCosto=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdMovimientoInventario=true;
			this.isVisibilidadFK_IdNovedadProducto=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=true;
			this.isVisibilidadFK_IdUnidad=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleMovimientoInventario();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleMovimientoInventario(false);
			
			this.setPermisosUsuarioDetalleMovimientoInventario();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado() 
				|| (this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado() && this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleMovimientoInventarioClasesRelacionadas();
			}
			
			if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleMovimientoInventarioClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleMovimientoInventario();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleMovimientoInventario();
			}
			
			if(!this.isPermisoBusquedaDetalleMovimientoInventario) {
				//BYDAN_BUSQUEDAS
				/*
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(false);				
				*/
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleMovimientoInventario,this.isPermisoPaginacionMedioDetalleMovimientoInventario,this.isPermisoPaginacionTodoDetalleMovimientoInventario);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleMovimientoInventarioConstantesFunciones.getTiposSeleccionarDetalleMovimientoInventario());
				
				this.tiposColumnasSelect=DetalleMovimientoInventarioConstantesFunciones.getTiposSeleccionarDetalleMovimientoInventario(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectDetalleMovimientoInventario();				
				//this.tiposRelacionesSelect=DetalleMovimientoInventarioConstantesFunciones.getTiposRelacionesDetalleMovimientoInventario(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleMovimientoInventario();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleMovimientoInventario(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleMovimientoInventario(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleMovimientoInventario() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			this.arrDatoGeneralTotales= new  ArrayList<DatoGeneral>();
			
			/*
			this.arrOrderBy= new  ArrayList<OrderBy>();
			*/
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			/*
			this.traerValoresTablaOrderBy();			
			*/
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.novedadseguimientoLogic=new NovedadSeguimientoLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.movimientoinventarioLogic=new MovimientoInventarioLogic();
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.estadodetallemovimientoinventarioLogic=new EstadoDetalleMovimientoInventarioLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.unidadLogic=new UnidadLogic();
			this.novedadproductoLogic=new NovedadProductoLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.cuentacontablecostoLogic=new CuentaContableLogic();
			this.tipodetallemovimientoinventarioLogic=new TipoDetalleMovimientoInventarioLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detallemovimientoinventarioImplementable= (DetalleMovimientoInventarioImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleMovimientoInventarioConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detallemovimientoinventarioImplementableHome= (DetalleMovimientoInventarioImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleMovimientoInventarioConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detallemovimientoinventarios= new ArrayList<DetalleMovimientoInventario>();
			this.detallemovimientoinventariosEliminados= new ArrayList<DetalleMovimientoInventario>();
						
			this.isEsNuevoDetalleMovimientoInventario=false;
			this.esParaAccionDesdeFormularioDetalleMovimientoInventario=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idProductoActual=0L;
			this.idCentroCostoActual=0L;
			this.idCuentaContableCostoActual=0L;
			this.idTipoDetalleMovimientoInventarioActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.movimientoinventariosForeignKey=new ArrayList<MovimientoInventario>() ;
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.estadodetallemovimientoinventariosForeignKey=new ArrayList<EstadoDetalleMovimientoInventario>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.unidadsForeignKey=new ArrayList<Unidad>() ;
			this.novedadproductosForeignKey=new ArrayList<NovedadProducto>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>() ;
			this.tipodetallemovimientoinventariosForeignKey=new ArrayList<TipoDetalleMovimientoInventario>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleMovimientoInventario(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleMovimientoInventario();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleMovimientoInventarioConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleMovimientoInventario(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleMovimientoInventario();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleMovimientoInventario();
			}
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleMovimientoInventario.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(0);
				}	
				
				*/
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleMovimientoInventario(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleMovimientoInventario: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleMovimientoInventario() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(NovedadSeguimientoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(NovedadSeguimientoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleMovimientoInventario")) {
				iIndex=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();	
				
				

				if(sTitle.equals("Novedad Seguimientoes")) {
					if(!NovedadSeguimientoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessDetalleMovimientoInventario();

						this.cargarParteTabPanelRelacionadaNovedadSeguimiento(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleMovimientoInventario();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaNovedadSeguimiento(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.cargarSessionConBeanSwingJInternalFrameNovedadSeguimiento(false,true,iIndex);
		this.jButtonNovedadSeguimientoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaNovedadSeguimiento();

		//this.jTabbedPaneRelacionesDetalleMovimientoInventario.updateUI();
		//this.jTabbedPaneRelacionesDetalleMovimientoInventario.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesDetalleMovimientoInventario.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("NovedadSeguimiento")) {
				int row=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
				jButtonNovedadSeguimientoActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Novedad Seguimiento")) {

					if(this.isTienePermisosNovedadSeguimiento && this.detallemovimientoinventarioConstantesFunciones.mostrarNovedadSeguimientoDetalleMovimientoInventario && !DetalleMovimientoInventarioConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Novedad Seguimientoes"+"("+NovedadSeguimientoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Novedad Seguimientoes");

						if(detallemovimientoinventarioConstantesFunciones.resaltarNovedadSeguimientoDetalleMovimientoInventario!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(detallemovimientoinventarioConstantesFunciones.resaltarNovedadSeguimientoDetalleMovimientoInventario);
						}

						jmenuItem.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarNovedadSeguimientoDetalleMovimientoInventario);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"NovedadSeguimiento"));

						/*

						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jmenuDetalleDetalleMovimientoInventario.add(jmenuItem);

						*/
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyDetalleMovimientoInventario(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleMovimientoInventario(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleMovimientoInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleMovimientoInventarioListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleMovimientoInventario();
		
		this.cargarCombosFrameForeignKeyDetalleMovimientoInventario();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleMovimientoInventario();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleMovimientoInventario();
		}
	}
	
	

	public void cargarCombosForeignKeyMovimientoInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMovimientoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMovimientoInventario();
				this.cargarCombosFrameMovimientoInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMovimientoInventario(this.movimientoinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleMovimientoInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoDetalleMovimientoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoDetalleMovimientoInventario();
				this.cargarCombosFrameEstadoDetalleMovimientoInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoDetalleMovimientoInventario(this.estadodetallemovimientoinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodega("Todos");
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaUnidad(this.unidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNovedadProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyNovedadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyNovedadProducto();
				this.cargarCombosFrameNovedadProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaNovedadProducto(this.novedadproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCuentaContableCosto(this.cuentacontablecostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDetalleMovimientoInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoDetalleMovimientoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoDetalleMovimientoInventario();
				this.cargarCombosFrameTipoDetalleMovimientoInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaTipoDetalleMovimientoInventario(this.tipodetallemovimientoinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleMovimientoInventarioActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			
			if(jTableDatosDetalleMovimientoInventario.getRowCount()>=1) {
				jTableDatosDetalleMovimientoInventario.removeRowSelectionInterval(0, jTableDatosDetalleMovimientoInventario.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleMovimientoInventario=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleMovimientoInventario(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleMovimientoInventario(true);			
			//this.detallemovimientoinventario=new DetalleMovimientoInventario();
			//this.detallemovimientoinventario.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleMovimientoInventario(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario() ;
			
			if(DetalleMovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleMovimientoInventario(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detallemovimientoinventario);	
			this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);				
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleMovimientoInventario: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleMovimientoInventarioActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleMovimientoInventario.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleMovimientoInventario.getSelectedRows().length;			
			}
			
			detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleMovimientoInventario--;			
				//DetalleMovimientoInventario detallemovimientoinventarioAux= new DetalleMovimientoInventario();			
				//detallemovimientoinventarioAux.setId(this.iIdNuevoDetalleMovimientoInventario);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleMovimientoInventario detallemovimientoinventarioOrigen=new DetalleMovimientoInventario();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleMovimientoInventario detallemovimientoinventarioOrigen : detallemovimientoinventariosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detallemovimientoinventarioOrigen =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallemovimientoinventarioOrigen =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleMovimientoInventario();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detallemovimientoinventario.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleMovimientoInventario(detallemovimientoinventarioOrigen,this.detallemovimientoinventario,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().add(this.detallemovimientoinventarioAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventarios.add(this.detallemovimientoinventarioAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
				
				this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(this.getIndiceNuevoDetalleMovimientoInventario(), this.getIndiceNuevoDetalleMovimientoInventario());
				
				int iLastRow =  this.jTableDatosDetalleMovimientoInventario.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleMovimientoInventario.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleMovimientoInventario.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();									
		
			DetalleMovimientoInventario detallemovimientoinventarioOrigen=new DetalleMovimientoInventario();
			DetalleMovimientoInventario detallemovimientoinventarioDestino=new DetalleMovimientoInventario();
				
			detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleMovimientoInventario.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detallemovimientoinventariosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleMovimientoInventario.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioOrigen =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallemovimientoinventarioOrigen =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallemovimientoinventarioDestino =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallemovimientoinventarioDestino =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detallemovimientoinventarioOrigen =detallemovimientoinventariosSeleccionados.get(0);
				detallemovimientoinventarioDestino =detallemovimientoinventariosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleMovimientoInventario(detallemovimientoinventarioOrigen,detallemovimientoinventarioDestino,true,false);
				
				detallemovimientoinventarioDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallemovimientoinventarioDestino,detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallemovimientoinventarioDestino,detallemovimientoinventarios);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
				
				//this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(this.getIndiceNuevoDetalleMovimientoInventario(), this.getIndiceNuevoDetalleMovimientoInventario());
				
				int iLastRow =  this.jTableDatosDetalleMovimientoInventario.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleMovimientoInventario.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleMovimientoInventario.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleMovimientoInventario.isVisible();
			
			//BYDAN_BUSQUEDAS
			/*
			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(!isVisible);			
			*/
			
			this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(!isVisible);
			this.jPanelPaginacionDetalleMovimientoInventario.setVisible(!isVisible);
			this.jPanelAccionesDetalleMovimientoInventario.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleMovimientoInventario();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameReporteDinamicoDetalleMovimientoInventario();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameImportacionDetalleMovimientoInventario();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirTotalesDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.abrirInicializarFrameTotalesDetalleMovimientoInventario();
			
			this.abrirFrameTotalesDetalleMovimientoInventario();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarTotalesDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.cerrarFrameTotalesDetalleMovimientoInventario();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirOrderByDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			
			this.abrirInicializarFrameOrderByDetalleMovimientoInventario();
			
			this.abrirFrameOrderByDetalleMovimientoInventario();
			*/
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameOrderByDetalleMovimientoInventario();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleMovimientoInventario(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleMovimientoInventario);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleMovimientoInventario.setSize(this.jInternalFrameDetalleFormDetalleMovimientoInventario.iWidthFormulario,this.jInternalFrameDetalleFormDetalleMovimientoInventario.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleMovimientoInventario.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleMovimientoInventario.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleMovimientoInventario.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jContentPaneDetalleDetalleMovimientoInventario.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jContentPaneDetalleDetalleMovimientoInventario.getWidth(),DetalleMovimientoInventarioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jContentPaneDetalleDetalleMovimientoInventario.getWidth(),DetalleMovimientoInventarioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jContentPaneDetalleDetalleMovimientoInventario.getWidth(),DetalleMovimientoInventarioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(NovedadSeguimientoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaNovedadSeguimiento();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleMovimientoInventario.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleMovimientoInventario.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirInicializarFrameOrderByDetalleMovimientoInventario() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleMovimientoInventario==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleMovimientoInventario=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleMovimientoInventario,false,this);
				} else {
					this.jInternalFrameOrderByDetalleMovimientoInventario=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleMovimientoInventario,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleMovimientoInventario);
				this.jInternalFrameOrderByDetalleMovimientoInventario.setVisible(false);
				this.jInternalFrameOrderByDetalleMovimientoInventario.setSelected(false);
				
				this.jInternalFrameOrderByDetalleMovimientoInventario.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleMovimientoInventario"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleMovimientoInventario();
			}
		} catch (final Exception e) {
			
		}
	}
	*/
	
	/*
	public void abrirInicializarFrameImportacionDetalleMovimientoInventario() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleMovimientoInventario==null) {
				
				this.jInternalFrameImportacionDetalleMovimientoInventario=new ImportacionJInternalFrame(DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleMovimientoInventario);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleMovimientoInventario);
				this.jInternalFrameImportacionDetalleMovimientoInventario.setVisible(false);
				this.jInternalFrameImportacionDetalleMovimientoInventario.setSelected(false);


				this.jInternalFrameImportacionDetalleMovimientoInventario.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleMovimientoInventario"));
				this.jInternalFrameImportacionDetalleMovimientoInventario.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleMovimientoInventario"));
				this.jInternalFrameImportacionDetalleMovimientoInventario.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleMovimientoInventario"));


			}
		} catch (final Exception e) {
			
		}
	}		
	*/
	
	/*
	public void abrirInicializarFrameReporteDinamicoDetalleMovimientoInventario() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario==null) {
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario=new ReporteDinamicoJInternalFrame(DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleMovimientoInventario);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario);
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleMovimientoInventario"));
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleMovimientoInventario"));
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleMovimientoInventario"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleMovimientoInventario();
			}

		} catch (final Exception e) {
			
		}
	}	
	*/
	
	public void abrirInicializarFrameTotalesDetalleMovimientoInventario() throws Exception {	    	        
	    try {			
			if(this.jInternalFrameTotalesDetalleMovimientoInventario==null) {
				this.jInternalFrameTotalesDetalleMovimientoInventario=new TotalesJInternalFrame(this.jButtonAbrirTotalesDetalleMovimientoInventario,STIPO_TAMANIO_GENERAL,this);
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleMovimientoInventario);

				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleMovimientoInventario);
				this.jInternalFrameTotalesDetalleMovimientoInventario.setVisible(false);
				this.jInternalFrameTotalesDetalleMovimientoInventario.setSelected(false);


				this.jInternalFrameTotalesDetalleMovimientoInventario.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleMovimientoInventario"));
								
				this.inicializarActualizarBindingTablaTotalesDetalleMovimientoInventario();
				
				this.redimensionarTablaTotales();
			}			
		} catch (final Exception e) {
			
		}
	}	
	
		

	public void redimensionarTablaPanelRelacionadaNovedadSeguimiento() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.jScrollPanelDatosNovedadSeguimiento.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jContentPaneDetalleDetalleMovimientoInventario.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.jScrollPanelDatosNovedadSeguimiento.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.jScrollPanelDatosNovedadSeguimiento.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.jScrollPanelDatosNovedadSeguimiento.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleDetalleMovimientoInventario() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleMovimientoInventario);
			
	       	this.jInternalFrameDetalleFormDetalleMovimientoInventario.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleMovimientoInventario.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleMovimientoInventario.dispose();
			//this.jInternalFrameDetalleFormDetalleMovimientoInventario=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirFrameReporteDinamicoDetalleMovimientoInventario() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void abrirFrameImportacionDetalleMovimientoInventario() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleMovimientoInventario.setVisible(true);
	        this.jInternalFrameImportacionDetalleMovimientoInventario.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}	
	*/
	
	public void abrirFrameTotalesDetalleMovimientoInventario() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleMovimientoInventario.setVisible(true);
	        this.jInternalFrameTotalesDetalleMovimientoInventario.setSelected(true);
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }
	}
	
	public void cerrarFrameTotalesDetalleMovimientoInventario() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleMovimientoInventario.setVisible(false);
	        this.jInternalFrameTotalesDetalleMovimientoInventario.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	/*
	public void abrirFrameOrderByDetalleMovimientoInventario() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleMovimientoInventario.setVisible(true);
	        this.jInternalFrameOrderByDetalleMovimientoInventario.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameOrderByDetalleMovimientoInventario() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleMovimientoInventario.setVisible(false);
	        this.jInternalFrameOrderByDetalleMovimientoInventario.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameReporteDinamicoDetalleMovimientoInventario() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameImportacionDetalleMovimientoInventario() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleMovimientoInventario.setVisible(false);
	        this.jInternalFrameImportacionDetalleMovimientoInventario.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCosto";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
						TitledBorder titledBorderCuentaContableCosto=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCosto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCosto(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleMovimientoInventario(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleMovimientoInventario(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleMovimientoInventario(true);
			//this.isEsNuevoDetalleMovimientoInventario=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleMovimientoInventario(false) ;
			
			if(detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoSessionBean.getEsGuardarRelacionado() && NovedadSeguimientoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonNovedadSeguimientoActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(DetalleMovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleMovimientoInventario(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleMovimientoInventarioActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleMovimientoInventario(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleMovimientoInventario(true);
			//this.isEsNuevoDetalleMovimientoInventario=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detallemovimientoinventario.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleMovimientoInventario(false) ;
			
			if(DetalleMovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleMovimientoInventario(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Producto")) {
				if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_productoDetalleMovimientoInventario) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
			
			if(sType.equals("CentroCosto")) {
				if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_centro_costoDetalleMovimientoInventario) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
			
			if(sType.equals("CuentaContableCosto")) {
				if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_cuenta_contable_costoDetalleMovimientoInventario) {
					this.cargarCombosCuentaContableCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
					this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo (id);

				this.recargarComboTablaCuentaContableCosto(this.cuentacontablecostosForeignKey);

			}
			
			if(sType.equals("TipoDetalleMovimientoInventario")) {
				if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario) {
					this.cargarCombosTipoDetalleMovimientoInventariosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
					this.cargarCombosFrameTipoDetalleMovimientoInventariosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_tipo_detalle_movimiento_inventario (id);

				this.recargarComboTablaTipoDetalleMovimientoInventario(this.tipodetallemovimientoinventariosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	
	
	public void recargarComboTablaMovimientoInventario(List<MovimientoInventario> movimientoinventariosForeignKey)throws Exception{
		TableColumn tableColumnMovimientoInventario=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO));
		TableCellEditor tableCellEditorMovimientoInventario =tableColumnMovimientoInventario.getCellEditor();

		MovimientoInventarioTableCell movimientoinventarioTableCellFk=(MovimientoInventarioTableCell)tableCellEditorMovimientoInventario;

		if(movimientoinventarioTableCellFk!=null) {
			movimientoinventarioTableCellFk.setmovimientoinventariosForeignKey(movimientoinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//movimientoinventarioTableCellFk.setRowActual(intSelectedRow);
			//movimientoinventarioTableCellFk.setmovimientoinventariosForeignKeyActual(movimientoinventariosForeignKey);
		//}


		if(movimientoinventarioTableCellFk!=null) {
			movimientoinventarioTableCellFk.RecargarMovimientoInventariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoDetalleMovimientoInventario(List<EstadoDetalleMovimientoInventario> estadodetallemovimientoinventariosForeignKey)throws Exception{
		TableColumn tableColumnEstadoDetalleMovimientoInventario=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO));
		TableCellEditor tableCellEditorEstadoDetalleMovimientoInventario =tableColumnEstadoDetalleMovimientoInventario.getCellEditor();

		EstadoDetalleMovimientoInventarioTableCell estadodetallemovimientoinventarioTableCellFk=(EstadoDetalleMovimientoInventarioTableCell)tableCellEditorEstadoDetalleMovimientoInventario;

		if(estadodetallemovimientoinventarioTableCellFk!=null) {
			estadodetallemovimientoinventarioTableCellFk.setestadodetallemovimientoinventariosForeignKey(estadodetallemovimientoinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadodetallemovimientoinventarioTableCellFk.setRowActual(intSelectedRow);
			//estadodetallemovimientoinventarioTableCellFk.setestadodetallemovimientoinventariosForeignKeyActual(estadodetallemovimientoinventariosForeignKey);
		//}


		if(estadodetallemovimientoinventarioTableCellFk!=null) {
			estadodetallemovimientoinventarioTableCellFk.RecargarEstadoDetalleMovimientoInventariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaUnidad(List<Unidad> unidadsForeignKey)throws Exception{
		TableColumn tableColumnUnidad=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD));
		TableCellEditor tableCellEditorUnidad =tableColumnUnidad.getCellEditor();

		UnidadTableCell unidadTableCellFk=(UnidadTableCell)tableCellEditorUnidad;

		if(unidadTableCellFk!=null) {
			unidadTableCellFk.setunidadsForeignKey(unidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//unidadTableCellFk.setRowActual(intSelectedRow);
			//unidadTableCellFk.setunidadsForeignKeyActual(unidadsForeignKey);
		//}


		if(unidadTableCellFk!=null) {
			unidadTableCellFk.RecargarUnidadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaNovedadProducto(List<NovedadProducto> novedadproductosForeignKey)throws Exception{
		TableColumn tableColumnNovedadProducto=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO));
		TableCellEditor tableCellEditorNovedadProducto =tableColumnNovedadProducto.getCellEditor();

		NovedadProductoTableCell novedadproductoTableCellFk=(NovedadProductoTableCell)tableCellEditorNovedadProducto;

		if(novedadproductoTableCellFk!=null) {
			novedadproductoTableCellFk.setnovedadproductosForeignKey(novedadproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//novedadproductoTableCellFk.setRowActual(intSelectedRow);
			//novedadproductoTableCellFk.setnovedadproductosForeignKeyActual(novedadproductosForeignKey);
		//}


		if(novedadproductoTableCellFk!=null) {
			novedadproductoTableCellFk.RecargarNovedadProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCosto(List<CuentaContable> cuentacontablecostosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCosto=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO));
		TableCellEditor tableCellEditorCuentaContableCosto =tableColumnCuentaContableCosto.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCosto;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoDetalleMovimientoInventario(List<TipoDetalleMovimientoInventario> tipodetallemovimientoinventariosForeignKey)throws Exception{
		TableColumn tableColumnTipoDetalleMovimientoInventario=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO));
		TableCellEditor tableCellEditorTipoDetalleMovimientoInventario =tableColumnTipoDetalleMovimientoInventario.getCellEditor();

		TipoDetalleMovimientoInventarioTableCell tipodetallemovimientoinventarioTableCellFk=(TipoDetalleMovimientoInventarioTableCell)tableCellEditorTipoDetalleMovimientoInventario;

		if(tipodetallemovimientoinventarioTableCellFk!=null) {
			tipodetallemovimientoinventarioTableCellFk.settipodetallemovimientoinventariosForeignKey(tipodetallemovimientoinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipodetallemovimientoinventarioTableCellFk.setRowActual(intSelectedRow);
			//tipodetallemovimientoinventarioTableCellFk.settipodetallemovimientoinventariosForeignKeyActual(tipodetallemovimientoinventariosForeignKey);
		//}


		if(tipodetallemovimientoinventarioTableCellFk!=null) {
			tipodetallemovimientoinventarioTableCellFk.RecargarTipoDetalleMovimientoInventariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_costo (Long id) throws Exception {
		this.setActualCuentaContableCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_tipo_detalle_movimiento_inventario (Long id) throws Exception {
		this.setActualTipoDetalleMovimientoInventarioForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleMovimientoInventario(false);
			
			//if(!this.isEsNuevoDetalleMovimientoInventario) {								
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				
			}
			
			if(this.permiteMantenimiento(this.detallemovimientoinventario)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleMovimientoInventario=true;
					this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
					this.isEsNuevoDetalleMovimientoInventario=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleMovimientoInventario=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleMovimientoInventario=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleMovimientoInventario(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario(false);
				
				this.habilitarDeshabilitarControlesDetalleMovimientoInventario(false);
			
												
				
				if(DetalleMovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleMovimientoInventario();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,detallemovimientoinventarioSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleMovimientoInventario(this.detallemovimientoinventario,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detallemovimientoinventarioSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detallemovimientoinventario.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				this.detallemovimientoinventario.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				this.detallemovimientoinventario.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detallemovimientoinventario)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleMovimientoInventarioModel) this.jTableDatosDetalleMovimientoInventario.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleMovimientoInventario=true;
				this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
				this.isEsNuevoDetalleMovimientoInventario=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleMovimientoInventario(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario(false);
				
				this.habilitarDeshabilitarControlesDetalleMovimientoInventario(false);
				
				
				
				if(DetalleMovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleMovimientoInventario();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleMovimientoInventario.getRowCount()>=1) {
				jTableDatosDetalleMovimientoInventario.removeRowSelectionInterval(0, jTableDatosDetalleMovimientoInventario.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleMovimientoInventario(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleMovimientoInventario(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario(false) ;
			
			this.isEsNuevoDetalleMovimientoInventario=false;
			
			if(DetalleMovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleMovimientoInventario();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				
				//SI ES MANUAL
				if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleMovimientoInventario();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleMovimientoInventario--;			
			//DetalleMovimientoInventario detallemovimientoinventarioAux= new DetalleMovimientoInventario();			
			//detallemovimientoinventarioAux.setId(this.iIdNuevoDetalleMovimientoInventario);
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleMovimientoInventario();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
			
			this.detallemovimientoinventario.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().add(this.detallemovimientoinventarioAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detallemovimientoinventarios.add(this.detallemovimientoinventarioAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
			
			this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(this.getIndiceNuevoDetalleMovimientoInventario(), this.getIndiceNuevoDetalleMovimientoInventario());
			
			int iLastRow =  this.jTableDatosDetalleMovimientoInventario.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleMovimientoInventario.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleMovimientoInventario.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleMovimientoInventario(false);
			
			//SI ES MANUAL
			if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleMovimientoInventario();
			}
			
			//this.abrirFrameTreeDetalleMovimientoInventario();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	/*
	public void jButtonGenerarImportacionDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle Movimiento InventarioS ?", "MANTENIMIENTO DE Detalle Movimiento Inventario", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleMovimientoInventario.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleMovimientoInventario();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detallemovimientoinventarioReturnGeneral=detallemovimientoinventarioLogic.procesarImportacionDetalleMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detallemovimientoinventarioParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleMovimientoInventarioReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	*/
	
	/*
	public void jButtonAbrirImportacionDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleMovimientoInventario.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleMovimientoInventario.setFileImportacion(this.jInternalFrameImportacionDetalleMovimientoInventario.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleMovimientoInventario.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleMovimientoInventario.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleMovimientoInventario.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleMovimientoInventario.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	*/
	
	public void jButtonGenerarReporteDinamicoDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		

		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		/*
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		*/
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleMovimientoInventarioBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleMovimientoInventarioBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			/*
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			*/
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleMovimientoInventarios("Todos",detallemovimientoinventariosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	/*
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_MovimientoInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_MovimientoInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_MovimientoInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_MovimientoInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoDetalleMovimientoInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoDetalleMovimientoInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoDetalleMovimientoInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoDetalleMovimientoInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Unidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Unidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Unidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Unidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoUnitario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoUnitario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoUnitario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoUnitario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sponible_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sponible_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sponible_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sponible_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_aValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_aValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_aValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_aValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_eValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_eValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_eValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_eValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rie_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rie_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rie_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rie_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_te_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_te_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_te_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_te_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaElaboracionLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaElaboracionLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaElaboracionLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaElaboracionLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCaducidadLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCaducidadLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCaducidadLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCaducidadLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_NovedadProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_NovedadProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_NovedadProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_NovedadProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoDetalleMovimientoInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoDetalleMovimientoInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoDetalleMovimientoInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoDetalleMovimientoInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_teCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_teCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_teCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_teCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	*/
	
	/*
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO:
					sNombreCampoCategoria="id_movimiento_inventario";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO:
					sNombreCampoCategoria="id_estado_detalle_movimiento_inventario";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoria="id_unidad";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoria="cantidad";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoria="costo_unitario";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoria="costo_total";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoria="disponible";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR:
					sNombreCampoCategoria="iva_valor";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA:
					sNombreCampoCategoria="costo_iva";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoria="ice_valor";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1:
					sNombreCampoCategoria="descuento1";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2:
					sNombreCampoCategoria="descuento2";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE:
					sNombreCampoCategoria="serie";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoria="lote";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					sNombreCampoCategoria="fecha_elaboracion_lote";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					sNombreCampoCategoria="fecha_caducidad_lote";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					sNombreCampoCategoria="id_novedad_producto";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoria="id_cuenta_contable_costo";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO:
					sNombreCampoCategoria="id_tipo_detalle_movimiento_inventario";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoria="numero_comprobante";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE:
					sNombreCampoCategoria="lote_cliente";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO:
					sNombreCampoCategoriaValor="id_movimiento_inventario";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO:
					sNombreCampoCategoriaValor="id_estado_detalle_movimiento_inventario";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoriaValor="id_unidad";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoriaValor="cantidad";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoriaValor="costo_unitario";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoriaValor="costo_total";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoriaValor="disponible";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR:
					sNombreCampoCategoriaValor="iva_valor";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA:
					sNombreCampoCategoriaValor="costo_iva";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoriaValor="ice_valor";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1:
					sNombreCampoCategoriaValor="descuento1";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2:
					sNombreCampoCategoriaValor="descuento2";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE:
					sNombreCampoCategoriaValor="serie";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoriaValor="lote";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					sNombreCampoCategoriaValor="fecha_elaboracion_lote";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					sNombreCampoCategoriaValor="fecha_caducidad_lote";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					sNombreCampoCategoriaValor="id_novedad_producto";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO:
					sNombreCampoCategoriaValor="id_tipo_detalle_movimiento_inventario";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_comprobante";
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE:
					sNombreCampoCategoriaValor="lote_cliente";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Movimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_movimiento_inventario");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_detalle_movimiento_inventario");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Unidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_unidad");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Unitario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_unitario");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_total");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Disponible",sNombreCampoCategoria,sNombreCampoCategoriaValor,"disponible");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva_valor");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_iva");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice_valor");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento 1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento1");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento2");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Serie",sNombreCampoCategoria,sNombreCampoCategoriaValor,"serie");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F Elaboracion Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_elaboracion_lote");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F Caducidad Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_caducidad_lote");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Novedad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_novedad_producto");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cta Contable Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Detalle Movimiento Inventario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_detalle_movimiento_inventario");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nro Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_comprobante");
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote_cliente");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	*/
	
	//@SuppressWarnings("deprecation")
	/*
	public void jButtonGenerarExcelReporteDinamicoDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallemovimientoinventario";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleMovimientoInventarios");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getmovimientoinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getestadodetallemovimientoinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getunidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getcantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getcosto_unitario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getcosto_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getdisponible());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getiva_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getcosto_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getice_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getdescuento1());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getdescuento2());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getserie());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getlote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getfecha_elaboracion_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getfecha_caducidad_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getnovedadproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getcuentacontablecosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.gettipodetallemovimientoinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getnumero_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE);
					iRow++;

					for(DetalleMovimientoInventario detallemovimientoinventario:detallemovimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallemovimientoinventario.getlote_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleMovimientoInventario(row);				
			//	iRow++;
			//}				
			
			//for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventariosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleMovimientoInventario(detallemovimientoinventarioAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	*/
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleMovimientoInventario(false);
			
			//SI ES MANUAL
			if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleMovimientoInventario();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleMovimientoInventario(false);
			
			//SI ES MANUAL
			if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleMovimientoInventario();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleMovimientoInventario(false);
			
			//SI ES MANUAL
			if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleMovimientoInventario();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleMovimientoInventario() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleMovimientoInventario.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleMovimientoInventario.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleMovimientoInventario.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleMovimientoInventario.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleMovimientoInventario.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleMovimientoInventario.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleMovimientoInventario.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleMovimientoInventario(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleMovimientoInventario(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleMovimientoInventario(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleMovimientoInventario(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleMovimientoInventario(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleMovimientoInventario(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleMovimientoInventario(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleMovimientoInventario(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleMovimientoInventario() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleMovimientoInventario();
		
		this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			/*
			this.inicializarActualizarBindingBusquedasManualDetalleMovimientoInventario();			
			*/
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleMovimientoInventario() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleMovimientoInventario(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleMovimientoInventario(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleMovimientoInventario.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleMovimientoInventario.isSelected();
				
				/*
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleMovimientoInventario.isSelected();															
				*/
				
				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxPostAccionNuevoDetalleMovimientoInventario.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxPostAccionSinCerrarDetalleMovimientoInventario.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxPostAccionSinMensajeDetalleMovimientoInventario.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleMovimientoInventario.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleMovimientoInventario.setSelected(this.isSeleccionados);
				
				/*
				this.jCheckBoxConGraficoReporteDetalleMovimientoInventario.setSelected(this.conGraficoReporte);				
				*/
				
				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxPostAccionNuevoDetalleMovimientoInventario.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxPostAccionSinCerrarDetalleMovimientoInventario.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxPostAccionSinMensajeDetalleMovimientoInventario.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			/*
			if(this.jComboBoxTiposPaginacionDetalleMovimientoInventario.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleMovimientoInventario.getSelectedItem()).getsCodigo();			
			}
			*/
			
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.getSelectedItem()).getsCodigo();
			}
			
			
			/*
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleMovimientoInventario.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleMovimientoInventario.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleMovimientoInventario.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleMovimientoInventario.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleMovimientoInventario.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleMovimientoInventario.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleMovimientoInventario.getText();						
			
			*/
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleMovimientoInventario(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleMovimientoInventario(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleMovimientoInventario() throws Exception {
		try	{
			if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleMovimientoInventario();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleMovimientoInventario() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleMovimientoInventario() throws Exception {
		try	{
			/*
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleMovimientoInventario.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleMovimientoInventario.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleMovimientoInventario.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleMovimientoInventario.addItem(reporte);
			}
			
			
			if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleMovimientoInventario.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleMovimientoInventario.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleMovimientoInventario.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleMovimientoInventario.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			*/
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			/*
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleMovimientoInventario.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleMovimientoInventario.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleMovimientoInventario();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			*/
		} catch(Exception e) {
			throw e;
		}
	}		
	
	/*
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleMovimientoInventario() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleMovimientoInventarioConstantesFunciones.getTiposSeleccionarDetalleMovimientoInventario(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleMovimientoInventarioConstantesFunciones.getTiposSeleccionarDetalleMovimientoInventario(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleMovimientoInventarioConstantesFunciones.getTiposSeleccionarDetalleMovimientoInventario(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	*/
	
	/*
	public void inicializarActualizarBindingBusquedasManualDetalleMovimientoInventario()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.getSelectedItem()!=null){this.id_cuenta_contable_costoFK_IdCuentaContableCosto=((CuentaContable)this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.getSelectedItem()!=null){this.id_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario=((EstadoDetalleMovimientoInventario)this.jComboBoxid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.getSelectedItem()!=null){this.id_movimiento_inventarioFK_IdMovimientoInventario=((MovimientoInventario)this.jComboBoxid_movimiento_inventarioFK_IdMovimientoInventarioDetalleMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.getSelectedItem()!=null){this.id_novedad_productoFK_IdNovedadProducto=((NovedadProducto)this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.getSelectedItem()!=null){this.id_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario=((TipoDetalleMovimientoInventario)this.jComboBoxid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.getSelectedItem()!=null){this.id_unidadFK_IdUnidad=((Unidad)this.jComboBoxid_unidadFK_IdUnidadDetalleMovimientoInventario.getSelectedItem()).getId();}
		
	}
	*/
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleMovimientoInventario(Boolean esInicializar) throws Exception {				
		if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
			/*
			this.inicializarActualizarBindingBusquedasManualDetalleMovimientoInventario();			
			*/
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleMovimientoInventario() throws Exception {
		this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
	}
	
	/*
	public void inicializarActualizarBindingTablaOrderByDetalleMovimientoInventario() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleMovimientoInventarioOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventarioOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	*/
	
	public void inicializarActualizarBindingTablaTotalesDetalleMovimientoInventario() {		
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		
		//TABLA TOTALES
		this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
		//DEFINIR RENDERERS TOTALES
		tableColumn=this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales(),Constantes2.S_TIPO));			
		//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
				
				
		tableColumn=this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales(),Constantes2.S_TOTAL));
		//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());		
	}
	
	public void inicializarActualizarBindingTablaDetalleMovimientoInventario(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detallemovimientoinventarios.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleMovimientoInventario.setModel(new DetalleMovimientoInventarioModel(this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleMovimientoInventario.setModel(new DetalleMovimientoInventarioModel(this.detallemovimientoinventarios,this));
			}
			//ARCHITECTURE
			
			if(this.jInternalFrameTotalesDetalleMovimientoInventario!=null) {
				//TABLA TOTALES
				this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
				//DEFINIR RENDERERS TOTALES
				tableColumn=this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales(),Constantes2.S_TIPO));			
				//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
				
				
				tableColumn=this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleMovimientoInventario.getjTableDatosTotales(),Constantes2.S_TOTAL));
				//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
			}
							
			/*
			
			if(this.jInternalFrameOrderByDetalleMovimientoInventario!=null && this.jInternalFrameOrderByDetalleMovimientoInventario.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleMovimientoInventario();
			}
			*/
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO,detallemovimientoinventarioConstantesFunciones.resaltarSeleccionarDetalleMovimientoInventario,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO,detallemovimientoinventarioConstantesFunciones.resaltarSeleccionarDetalleMovimientoInventario,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_ID));

		if(this.detallemovimientoinventarioConstantesFunciones.mostraridDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltaridDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activaridDetalleMovimientoInventario,iSizeTabla,this,true,"idDetalleMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltaridDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activaridDetalleMovimientoInventario,this,true,"idDetalleMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_movimiento_inventarioDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MovimientoInventarioTableCell(this.movimientoinventariosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_movimiento_inventarioDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_movimiento_inventarioDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new MovimientoInventarioTableCell(this.movimientoinventariosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_movimiento_inventarioDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_movimiento_inventarioDetalleMovimientoInventario,true,"id_movimiento_inventarioDetalleMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_empresaDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_empresaDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_empresaDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_empresaDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_empresaDetalleMovimientoInventario,false,"id_empresaDetalleMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_sucursalDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_sucursalDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_sucursalDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_sucursalDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_sucursalDetalleMovimientoInventario,false,"id_sucursalDetalleMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_ejercicioDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_ejercicioDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_ejercicioDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_ejercicioDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_ejercicioDetalleMovimientoInventario,false,"id_ejercicioDetalleMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_periodoDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_periodoDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_periodoDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_periodoDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_periodoDetalleMovimientoInventario,false,"id_periodoDetalleMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_anioDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_anioDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_anioDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_anioDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_anioDetalleMovimientoInventario,true,"id_anioDetalleMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_mesDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_mesDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_mesDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_mesDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_mesDetalleMovimientoInventario,true,"id_mesDetalleMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_bodegaDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_bodegaDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_bodegaDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_bodegaDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_bodegaDetalleMovimientoInventario,true,"id_bodegaDetalleMovimientoInventario","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_productoDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_productoDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_productoDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_productoDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_productoDetalleMovimientoInventario,true,"id_productoDetalleMovimientoInventario","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_unidadDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new UnidadTableCell(this.unidadsForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_unidadDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_unidadDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new UnidadTableCell(this.unidadsForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_unidadDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_unidadDetalleMovimientoInventario,true,"id_unidadDetalleMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrardescripcionDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltardescripcionDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activardescripcionDetalleMovimientoInventario,iSizeTabla,this,true,"descripcionDetalleMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltardescripcionDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activardescripcionDetalleMovimientoInventario,this,true,"descripcionDetalleMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarcantidadDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltarcantidadDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activarcantidadDetalleMovimientoInventario,iSizeTabla,this,true,"cantidadDetalleMovimientoInventario","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltarcantidadDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activarcantidadDetalleMovimientoInventario,this,true,"cantidadDetalleMovimientoInventario","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarcosto_unitarioDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_unitarioDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activarcosto_unitarioDetalleMovimientoInventario,iSizeTabla,this,true,"costo_unitarioDetalleMovimientoInventario","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_unitarioDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activarcosto_unitarioDetalleMovimientoInventario,this,true,"costo_unitarioDetalleMovimientoInventario","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarcosto_totalDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_totalDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activarcosto_totalDetalleMovimientoInventario,iSizeTabla,this,true,"costo_totalDetalleMovimientoInventario","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_totalDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activarcosto_totalDetalleMovimientoInventario,this,true,"costo_totalDetalleMovimientoInventario","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrardisponibleDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltardisponibleDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activardisponibleDetalleMovimientoInventario,iSizeTabla,this,true,"disponibleDetalleMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallemovimientoinventarioConstantesFunciones.resaltardisponibleDetalleMovimientoInventario,this.detallemovimientoinventarioConstantesFunciones.activardisponibleDetalleMovimientoInventario,this,true,"disponibleDetalleMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO));

		if(this.detallemovimientoinventarioConstantesFunciones.mostrarid_novedad_productoDetalleMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new NovedadProductoTableCell(this.novedadproductosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_novedad_productoDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_novedad_productoDetalleMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new NovedadProductoTableCell(this.novedadproductosForeignKey,this.detallemovimientoinventarioConstantesFunciones.resaltarid_novedad_productoDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarid_novedad_productoDetalleMovimientoInventario,true,"id_novedad_productoDetalleMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleMovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosNovedadSeguimiento && this.detallemovimientoinventarioConstantesFunciones.mostrarNovedadSeguimientoDetalleMovimientoInventario && !DetalleMovimientoInventarioConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Novedad Seguimientoes");
				tableColumn.setHeaderValue("Novedad Seguimientoes");
				tableColumn.setCellRenderer(new NovedadSeguimientoTableCell(detallemovimientoinventarioConstantesFunciones.resaltarNovedadSeguimientoDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarNovedadSeguimientoDetalleMovimientoInventario));
				tableColumn.setCellEditor(new NovedadSeguimientoTableCell(detallemovimientoinventarioConstantesFunciones.resaltarNovedadSeguimientoDetalleMovimientoInventario,this,this.detallemovimientoinventarioConstantesFunciones.activarNovedadSeguimientoDetalleMovimientoInventario));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosDetalleMovimientoInventario.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleMovimientoInventario.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleMovimientoInventario.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleMovimientoInventario.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosDetalleMovimientoInventario.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleMovimientoInventario.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleMovimientoInventario.moveColumn(this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleMovimientoInventario.moveColumn(this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosDetalleMovimientoInventario.moveColumn(this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleMovimientoInventario.moveColumn(this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleMovimientoInventario.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleMovimientoInventario.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleMovimientoInventario,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleMovimientoInventario.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleMovimientoInventario.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleMovimientoInventario.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detallemovimientoinventarios.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleMovimientoInventario.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleMovimientoInventario();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleMovimientoInventario=false;
					
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleMovimientoInventario.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detallemovimientoinventario.getsType().equals("DUPLICADO")
				   || this.detallemovimientoinventario.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleMovimientoInventario=true;
				
				} else {
					this.isEsNuevoDetalleMovimientoInventario=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					if(this.detallemovimientoinventario.getId()>=0 && !this.detallemovimientoinventario.getIsNew()) {						
						this.isEsNuevoDetalleMovimientoInventario=false;
						
					} else {
						this.isEsNuevoDetalleMovimientoInventario=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleMovimientoInventario(esRelaciones);						
				
				this.seleccionarDetalleMovimientoInventario(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detallemovimientoinventario.getId()<0) {
					this.isEsNuevoDetalleMovimientoInventario=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleMovimientoInventario(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleMovimientoInventario(evt,rowIndex);
				}	
				
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleMovimientoInventario: " + this.dDif); 
					}
				}								
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleMovimientoInventario(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detallemovimientoinventario)) {
					if(this.detallemovimientoinventario.getId()>0) {
						this.detallemovimientoinventario.setIsDeleted(true);
						
						this.detallemovimientoinventariosEliminados.add(this.detallemovimientoinventario);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().remove(this.detallemovimientoinventario);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventarios.remove(this.detallemovimientoinventario);				
					}
					
					
					((DetalleMovimientoInventarioModel) this.jTableDatosDetalleMovimientoInventario.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleMovimientoInventario(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleMovimientoInventario) {
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleMovimientoInventario.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleMovimientoInventario.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleMovimientoInventario(this.detallemovimientoinventario);
				}
				
				//ARCHITECTURE
				try {
					

					//MovimientoInventario
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_movimiento_inventarioDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_movimiento_inventarioDetalleMovimientoInventario) {
						//this.cargarCombosMovimientoInventariosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_movimiento_inventario());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.movimientoinventariosForeignKey=new ArrayList<MovimientoInventario>();

						if(detallemovimientoinventario.getMovimientoInventario()!=null) {
							this.movimientoinventariosForeignKey.add(detallemovimientoinventario.getMovimientoInventario());
						}

						this.addItemDefectoCombosForeignKeyMovimientoInventario();
						this.cargarCombosFrameMovimientoInventariosForeignKey("Todos");
					}
					this.setActualMovimientoInventarioForeignKey(this.detallemovimientoinventario.getid_movimiento_inventario(),false,"Formulario");

					//Empresa
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_empresaDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_empresaDetalleMovimientoInventario) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_empresa());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detallemovimientoinventario.getEmpresa()!=null) {
							this.empresasForeignKey.add(detallemovimientoinventario.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detallemovimientoinventario.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_sucursalDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_sucursalDetalleMovimientoInventario) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_sucursal());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detallemovimientoinventario.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detallemovimientoinventario.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detallemovimientoinventario.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_ejercicioDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_ejercicioDetalleMovimientoInventario) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_ejercicio());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detallemovimientoinventario.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detallemovimientoinventario.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detallemovimientoinventario.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_periodoDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_periodoDetalleMovimientoInventario) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_periodo());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detallemovimientoinventario.getPeriodo()!=null) {
							this.periodosForeignKey.add(detallemovimientoinventario.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detallemovimientoinventario.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_anioDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_anioDetalleMovimientoInventario) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_anio());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detallemovimientoinventario.getAnio()!=null) {
							this.aniosForeignKey.add(detallemovimientoinventario.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detallemovimientoinventario.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_mesDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_mesDetalleMovimientoInventario) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_mes());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detallemovimientoinventario.getMes()!=null) {
							this.messForeignKey.add(detallemovimientoinventario.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detallemovimientoinventario.getid_mes(),false,"Formulario");

					//EstadoDetalleMovimientoInventario
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario) {
						//this.cargarCombosEstadoDetalleMovimientoInventariosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.estadodetallemovimientoinventariosForeignKey=new ArrayList<EstadoDetalleMovimientoInventario>();

						if(detallemovimientoinventario.getEstadoDetalleMovimientoInventario()!=null) {
							this.estadodetallemovimientoinventariosForeignKey.add(detallemovimientoinventario.getEstadoDetalleMovimientoInventario());
						}

						this.addItemDefectoCombosForeignKeyEstadoDetalleMovimientoInventario();
						this.cargarCombosFrameEstadoDetalleMovimientoInventariosForeignKey("Todos");
					}
					this.setActualEstadoDetalleMovimientoInventarioForeignKey(this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario(),false,"Formulario");

					//Bodega
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_bodegaDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_bodegaDetalleMovimientoInventario) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_bodega());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(detallemovimientoinventario.getBodega()!=null) {
							this.bodegasForeignKey.add(detallemovimientoinventario.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.detallemovimientoinventario.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_productoDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_productoDetalleMovimientoInventario) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_producto());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(detallemovimientoinventario.getProducto()!=null) {
							this.productosForeignKey.add(detallemovimientoinventario.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.detallemovimientoinventario.getid_producto(),false,"Formulario");

					//Unidad
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_unidadDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_unidadDetalleMovimientoInventario) {
						//this.cargarCombosUnidadsForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_unidad());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.unidadsForeignKey=new ArrayList<Unidad>();

						if(detallemovimientoinventario.getUnidad()!=null) {
							this.unidadsForeignKey.add(detallemovimientoinventario.getUnidad());
						}

						this.addItemDefectoCombosForeignKeyUnidad();
						this.cargarCombosFrameUnidadsForeignKey("Todos");
					}
					this.setActualUnidadForeignKey(this.detallemovimientoinventario.getid_unidad(),false,"Formulario");

					//NovedadProducto
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_novedad_productoDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_novedad_productoDetalleMovimientoInventario) {
						//this.cargarCombosNovedadProductosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_novedad_producto());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.novedadproductosForeignKey=new ArrayList<NovedadProducto>();

						if(detallemovimientoinventario.getNovedadProducto()!=null) {
							this.novedadproductosForeignKey.add(detallemovimientoinventario.getNovedadProducto());
						}

						this.addItemDefectoCombosForeignKeyNovedadProducto();
						this.cargarCombosFrameNovedadProductosForeignKey("Todos");
					}
					this.setActualNovedadProductoForeignKey(this.detallemovimientoinventario.getid_novedad_producto(),false,"Formulario");

					//CentroCosto
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_centro_costoDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_centro_costoDetalleMovimientoInventario) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_centro_costo());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(detallemovimientoinventario.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(detallemovimientoinventario.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.detallemovimientoinventario.getid_centro_costo(),false,"Formulario");

					//CuentaContableCosto
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_cuenta_contable_costoDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_cuenta_contable_costoDetalleMovimientoInventario) {
						//this.cargarCombosCuentaContableCostosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_cuenta_contable_costo());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

						if(detallemovimientoinventario.getCuentaContableCosto()!=null) {
							this.cuentacontablecostosForeignKey.add(detallemovimientoinventario.getCuentaContableCosto());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCosto();
						this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
					}
					this.setActualCuentaContableCostoForeignKey(this.detallemovimientoinventario.getid_cuenta_contable_costo(),false,"Formulario");

					//TipoDetalleMovimientoInventario
					if(!this.detallemovimientoinventarioConstantesFunciones.cargarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario || this.detallemovimientoinventarioConstantesFunciones.event_dependid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario) {
						//this.cargarCombosTipoDetalleMovimientoInventariosForeignKeyLista(" where id="+this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario());
									//this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
						this.tipodetallemovimientoinventariosForeignKey=new ArrayList<TipoDetalleMovimientoInventario>();

						if(detallemovimientoinventario.getTipoDetalleMovimientoInventario()!=null) {
							this.tipodetallemovimientoinventariosForeignKey.add(detallemovimientoinventario.getTipoDetalleMovimientoInventario());
						}

						this.addItemDefectoCombosForeignKeyTipoDetalleMovimientoInventario();
						this.cargarCombosFrameTipoDetalleMovimientoInventariosForeignKey("Todos");
					}
					this.setActualTipoDetalleMovimientoInventarioForeignKey(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleMovimientoInventario("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleMovimientoInventario(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleMovimientoInventario(detallemovimientoinventario,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleMovimientoInventario(detallemovimientoinventario);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleMovimientoInventario(detallemovimientoinventario,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleMovimientoInventario(detallemovimientoinventario);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.setText(detallemovimientoinventario.getId().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextAreadescripcionDetalleMovimientoInventario.setText(detallemovimientoinventario.getdescripcion());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.setText(detallemovimientoinventario.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.setText(detallemovimientoinventario.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.setText(detallemovimientoinventario.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddisponibleDetalleMovimientoInventario.setText(detallemovimientoinventario.getdisponible().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleMovimientoInventario detallemovimientoinventarioLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detallemovimientoinventarioLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleMovimientoInventario detallemovimientoinventarioLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detallemovimientoinventarioLocal=this.detallemovimientoinventario;
			} else {
				detallemovimientoinventarioLocal=this.detallemovimientoinventarioAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detallemovimientoinventarioLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleMovimientoInventario(detallemovimientoinventarioLocal,true);
					
					if(detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detallemovimientoinventarioLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detallemovimientoinventarioLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(detallemovimientoinventario,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(detallemovimientoinventario);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(detallemovimientoinventario,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.getText()==null || this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.getText()=="" || this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.getText()=="Id") {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.setText("0");
			}

			if(conColumnasBase) {detallemovimientoinventario.setId(Long.parseLong(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleMovimientoInventarioConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelIdDetalleMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallemovimientoinventario.setdescripcion(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextAreadescripcionDetalleMovimientoInventario.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldescripcionDetalleMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallemovimientoinventario.setcantidad(Integer.parseInt(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcantidadDetalleMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallemovimientoinventario.setcosto_unitario(Double.parseDouble(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcosto_unitarioDetalleMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallemovimientoinventario.setcosto_total(Double.parseDouble(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelcosto_totalDetalleMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallemovimientoinventario.setdisponible(Integer.parseInt(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddisponibleDetalleMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabeldisponibleDetalleMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventarioBean,DetalleMovimientoInventario detallemovimientoinventario,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventarioOrigen,DetalleMovimientoInventario detallemovimientoinventario,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getId()!=null && !detallemovimientoinventarioOrigen.getId().equals(0L))) {detallemovimientoinventario.setId(detallemovimientoinventarioOrigen.getId());}}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getdescripcion()!=null && !detallemovimientoinventarioOrigen.getdescripcion().equals(""))) {detallemovimientoinventario.setdescripcion(detallemovimientoinventarioOrigen.getdescripcion());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getcantidad()!=null && !detallemovimientoinventarioOrigen.getcantidad().equals(0))) {detallemovimientoinventario.setcantidad(detallemovimientoinventarioOrigen.getcantidad());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getdescuento()!=null && !detallemovimientoinventarioOrigen.getdescuento().equals(0.0))) {detallemovimientoinventario.setdescuento(detallemovimientoinventarioOrigen.getdescuento());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getcosto_unitario()!=null && !detallemovimientoinventarioOrigen.getcosto_unitario().equals(0.0))) {detallemovimientoinventario.setcosto_unitario(detallemovimientoinventarioOrigen.getcosto_unitario());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getcosto_total()!=null && !detallemovimientoinventarioOrigen.getcosto_total().equals(0.0))) {detallemovimientoinventario.setcosto_total(detallemovimientoinventarioOrigen.getcosto_total());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getdisponible()!=null && !detallemovimientoinventarioOrigen.getdisponible().equals(0))) {detallemovimientoinventario.setdisponible(detallemovimientoinventarioOrigen.getdisponible());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getiva()!=null && !detallemovimientoinventarioOrigen.getiva().equals(0.0))) {detallemovimientoinventario.setiva(detallemovimientoinventarioOrigen.getiva());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getiva_valor()!=null && !detallemovimientoinventarioOrigen.getiva_valor().equals(0.0))) {detallemovimientoinventario.setiva_valor(detallemovimientoinventarioOrigen.getiva_valor());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getcosto_iva()!=null && !detallemovimientoinventarioOrigen.getcosto_iva().equals(false))) {detallemovimientoinventario.setcosto_iva(detallemovimientoinventarioOrigen.getcosto_iva());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getice()!=null && !detallemovimientoinventarioOrigen.getice().equals(0.0))) {detallemovimientoinventario.setice(detallemovimientoinventarioOrigen.getice());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getice_valor()!=null && !detallemovimientoinventarioOrigen.getice_valor().equals(0.0))) {detallemovimientoinventario.setice_valor(detallemovimientoinventarioOrigen.getice_valor());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getdescuento1()!=null && !detallemovimientoinventarioOrigen.getdescuento1().equals(0.0))) {detallemovimientoinventario.setdescuento1(detallemovimientoinventarioOrigen.getdescuento1());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getdescuento2()!=null && !detallemovimientoinventarioOrigen.getdescuento2().equals(0.0))) {detallemovimientoinventario.setdescuento2(detallemovimientoinventarioOrigen.getdescuento2());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getserie()!=null && !detallemovimientoinventarioOrigen.getserie().equals(""))) {detallemovimientoinventario.setserie(detallemovimientoinventarioOrigen.getserie());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getlote()!=null && !detallemovimientoinventarioOrigen.getlote().equals(""))) {detallemovimientoinventario.setlote(detallemovimientoinventarioOrigen.getlote());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getfecha_elaboracion_lote()!=null && !detallemovimientoinventarioOrigen.getfecha_elaboracion_lote().equals(new Date()))) {detallemovimientoinventario.setfecha_elaboracion_lote(detallemovimientoinventarioOrigen.getfecha_elaboracion_lote());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getfecha_caducidad_lote()!=null && !detallemovimientoinventarioOrigen.getfecha_caducidad_lote().equals(new Date()))) {detallemovimientoinventario.setfecha_caducidad_lote(detallemovimientoinventarioOrigen.getfecha_caducidad_lote());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getnumero_comprobante()!=null && !detallemovimientoinventarioOrigen.getnumero_comprobante().equals(""))) {detallemovimientoinventario.setnumero_comprobante(detallemovimientoinventarioOrigen.getnumero_comprobante());}
			if(conDefault || (!conDefault && detallemovimientoinventarioOrigen.getlote_cliente()!=null && !detallemovimientoinventarioOrigen.getlote_cliente().equals(""))) {detallemovimientoinventario.setlote_cliente(detallemovimientoinventarioOrigen.getlote_cliente());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.setText(detallemovimientoinventario.getId().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextAreadescripcionDetalleMovimientoInventario.setText(detallemovimientoinventario.getdescripcion());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.setText(detallemovimientoinventario.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.setText(detallemovimientoinventario.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.setText(detallemovimientoinventario.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddisponibleDetalleMovimientoInventario.setText(detallemovimientoinventario.getdisponible().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleMovimientoInventario(DetalleMovimientoInventarioBean detallemovimientoinventarioBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.setText(detallemovimientoinventarioBean.getId().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextAreadescripcionDetalleMovimientoInventario.setText(detallemovimientoinventarioBean.getdescripcion());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.setText(detallemovimientoinventarioBean.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.setText(detallemovimientoinventarioBean.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.setText(detallemovimientoinventarioBean.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddisponibleDetalleMovimientoInventario.setText(detallemovimientoinventarioBean.getdisponible().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleMovimientoInventario(DetalleMovimientoInventarioParameterReturnGeneral detallemovimientoinventarioReturnGeneral,DetalleMovimientoInventarioBean detallemovimientoinventarioBean,Boolean conDefault) throws Exception { 
		try {
			DetalleMovimientoInventario detallemovimientoinventarioLocal=new DetalleMovimientoInventario();
			
			detallemovimientoinventarioLocal=detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallemovimientoinventarioLocal.getId()!=null && !detallemovimientoinventarioLocal.getId().equals(0L))) {detallemovimientoinventarioBean.setId(detallemovimientoinventarioLocal.getId());}}
			if(conDefault || (!conDefault && detallemovimientoinventarioLocal.getdescripcion()!=null && !detallemovimientoinventarioLocal.getdescripcion().equals(""))) {detallemovimientoinventarioBean.setdescripcion(detallemovimientoinventarioLocal.getdescripcion());}
			if(conDefault || (!conDefault && detallemovimientoinventarioLocal.getcantidad()!=null && !detallemovimientoinventarioLocal.getcantidad().equals(0))) {detallemovimientoinventarioBean.setcantidad(detallemovimientoinventarioLocal.getcantidad());}
			if(conDefault || (!conDefault && detallemovimientoinventarioLocal.getcosto_unitario()!=null && !detallemovimientoinventarioLocal.getcosto_unitario().equals(0.0))) {detallemovimientoinventarioBean.setcosto_unitario(detallemovimientoinventarioLocal.getcosto_unitario());}
			if(conDefault || (!conDefault && detallemovimientoinventarioLocal.getcosto_total()!=null && !detallemovimientoinventarioLocal.getcosto_total().equals(0.0))) {detallemovimientoinventarioBean.setcosto_total(detallemovimientoinventarioLocal.getcosto_total());}
			if(conDefault || (!conDefault && detallemovimientoinventarioLocal.getdisponible()!=null && !detallemovimientoinventarioLocal.getdisponible().equals(0))) {detallemovimientoinventarioBean.setdisponible(detallemovimientoinventarioLocal.getdisponible());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleMovimientoInventarioGenerico(Long idDetalleMovimientoInventarioSeleccionado,JComboBox jComboBoxDetalleMovimientoInventario,List<DetalleMovimientoInventario> detallemovimientoinventariosLocal)throws Exception {
		try {
			DetalleMovimientoInventario  detallemovimientoinventarioTemp=null;

			for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventariosLocal) {
				if(detallemovimientoinventarioAux.getId()!=null && detallemovimientoinventarioAux.getId().equals(idDetalleMovimientoInventarioSeleccionado)) {
					detallemovimientoinventarioTemp=detallemovimientoinventarioAux;
					break;
				}
			}

			jComboBoxDetalleMovimientoInventario.setSelectedItem(detallemovimientoinventarioTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleMovimientoInventarioGenerico(JComboBox jComboBoxDetalleMovimientoInventario,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleMovimientoInventario.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleMovimientoInventario.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleMovimientoInventario.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleMovimientoInventario.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleMovimientoInventario.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleMovimientoInventario.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleMovimientoInventario.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleMovimientoInventario.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleMovimientoInventario.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleMovimientoInventario.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("NovedadSeguimiento")) {
			jButtonNovedadSeguimientoActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallemovimientoinventario=(DetalleMovimientoInventario) detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallemovimientoinventario =(DetalleMovimientoInventario) detallemovimientoinventarios.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("MovimientoInventario")) {
			//sDescripcion=this.getActualMovimientoInventarioForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getmovimientoinventario_descripcion();
			} else {
				//sDescripcion=this.getActualMovimientoInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getmovimientoinventario_descripcion();
			}
		}

		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getmes_descripcion();
			}
		}

		if(sTipo.equals("EstadoDetalleMovimientoInventario")) {
			//sDescripcion=this.getActualEstadoDetalleMovimientoInventarioForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getestadodetallemovimientoinventario_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoDetalleMovimientoInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getestadodetallemovimientoinventario_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getproducto_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallemovimientoinventario.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Unidad")) {
			//sDescripcion=this.getActualUnidadForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getunidad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallemovimientoinventario.getunidad_descripcion();
			}
		}

		if(sTipo.equals("NovedadProducto")) {
			//sDescripcion=this.getActualNovedadProductoForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getnovedadproducto_descripcion();
			} else {
				//sDescripcion=this.getActualNovedadProductoForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getnovedadproducto_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCosto")) {
			//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.getcuentacontablecosto_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.getcuentacontablecosto_descripcion();
			}
		}

		if(sTipo.equals("TipoDetalleMovimientoInventario")) {
			//sDescripcion=this.getActualTipoDetalleMovimientoInventarioForeignKeyDescripcion((Long)value);
			if(!detallemovimientoinventario.getIsNew() && !detallemovimientoinventario.getIsChanged() && !detallemovimientoinventario.getIsDeleted()) {
				sDescripcion=detallemovimientoinventario.gettipodetallemovimientoinventario_descripcion();
			} else {
				//sDescripcion=this.getActualTipoDetalleMovimientoInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=detallemovimientoinventario.gettipodetallemovimientoinventario_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleMovimientoInventario detallemovimientoinventarioRow=new DetalleMovimientoInventario();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallemovimientoinventarioRow=(DetalleMovimientoInventario) detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallemovimientoinventarioRow=(DetalleMovimientoInventario) detallemovimientoinventarios.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonNovedadSeguimientoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,DetalleMovimientoInventario detallemovimientoinventario) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario = (DetalleMovimientoInventario)this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.detallemovimientoinventario = (DetalleMovimientoInventario)this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(detallemovimientoinventario!=null) {
						this.detallemovimientoinventario = detallemovimientoinventario;
					} else {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}
				}

				if(this.isTienePermisosNovedadSeguimiento && this.permiteMantenimiento(this.detallemovimientoinventario)) {
					NovedadSeguimientoBeanSwingJInternalFrame novedadseguimientoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFramePopup=new NovedadSeguimientoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						novedadseguimientoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFramePopup;
					} else {
						novedadseguimientoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame;
					}

					List<DetalleMovimientoInventario> detallemovimientoinventarios=new ArrayList<DetalleMovimientoInventario>();
					detallemovimientoinventarios.add(this.detallemovimientoinventario);
					if(!esRelacionado) {
						//novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoSessionBean.setConGuardarRelaciones(false);
						//novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					novedadseguimientoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.cargarNovedadSeguimientoBeanSwingJInternalFrame(detallemovimientoinventarios,this.detallemovimientoinventario,novedadseguimientoBeanSwingJInternalFrame,/*conInicializar,*/novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoSessionBean.getConGuardarRelaciones(),novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoSessionBean.getEsGuardarRelacionado());
					novedadseguimientoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						novedadseguimientoBeanSwingJInternalFrame.actualizarEstadoPanelsNovedadSeguimiento("no_relacionado");

						novedadseguimientoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(NovedadSeguimientoConstantesFunciones.ITAMANIOFILATABLA + (NovedadSeguimientoConstantesFunciones.ITAMANIOFILATABLA/2));

						novedadseguimientoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
						TitledBorder titledBorderNovedadSeguimiento=(TitledBorder)novedadseguimientoBeanSwingJInternalFrame.jScrollPanelDatosNovedadSeguimiento.getBorder();

						titledBorderNovedadSeguimiento.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Novedad Seguimiento");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,novedadseguimientoBeanSwingJInternalFrame);
						}

						novedadseguimientoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(novedadseguimientoBeanSwingJInternalFrame);

						novedadseguimientoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Novedad Seguimiento",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleMovimientoInventario(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario));			
			this.jButtonDuplicarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaDuplicarDetalleMovimientoInventario && this.isPermisoDuplicarDetalleMovimientoInventario));			
			this.jButtonCopiarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaCopiarDetalleMovimientoInventario && this.isPermisoCopiarDetalleMovimientoInventario));
			this.jButtonVerFormDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaVerFormDetalleMovimientoInventario && this.isPermisoVerFormDetalleMovimientoInventario));
			/*
			this.jButtonAbrirOrderByDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenDetalleMovimientoInventario && this.isPermisoOrdenDetalleMovimientoInventario));			
			*/
			this.jButtonNuevoRelacionesDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario));			
			this.jButtonNuevoGuardarCambiosDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaModificarDetalleMovimientoInventario && this.isPermisoActualizarDetalleMovimientoInventario));	
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaActualizarDetalleMovimientoInventario && this.isPermisoActualizarDetalleMovimientoInventario));	
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaEliminarDetalleMovimientoInventario && this.isPermisoEliminarDetalleMovimientoInventario));
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarDetalleMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarDetalleMovimientoInventario);							
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));							
			
			//TOOLBAR
			/*
			this.jButtonNuevoToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario));						
			this.jButtonDuplicarToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaDuplicarDetalleMovimientoInventario && this.isPermisoDuplicarDetalleMovimientoInventario));						
			this.jButtonCopiarToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaCopiarDetalleMovimientoInventario && this.isPermisoCopiarDetalleMovimientoInventario));			
			this.jButtonVerFormToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaVerFormDetalleMovimientoInventario && this.isPermisoVerFormDetalleMovimientoInventario));			
			this.jButtonAbrirOrderByToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenDetalleMovimientoInventario && this.isPermisoOrdenDetalleMovimientoInventario));
			this.jButtonNuevoRelacionesToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));			
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaModificarDetalleMovimientoInventario && this.isPermisoActualizarDetalleMovimientoInventario));	
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaActualizarDetalleMovimientoInventario  && this.isPermisoActualizarDetalleMovimientoInventario));	
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaEliminarDetalleMovimientoInventario && this.isPermisoEliminarDetalleMovimientoInventario));
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarToolBarDetalleMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarDetalleMovimientoInventario);				
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));									
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.jMenuItemNuevoDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario));			
			this.jMenuItemDuplicarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaDuplicarDetalleMovimientoInventario && this.isPermisoDuplicarDetalleMovimientoInventario));			
			this.jMenuItemCopiarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaCopiarDetalleMovimientoInventario && this.isPermisoCopiarDetalleMovimientoInventario));			
			this.jMenuItemVerFormDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaVerFormDetalleMovimientoInventario && this.isPermisoVerFormDetalleMovimientoInventario));			
			this.jMenuItemAbrirOrderByDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenDetalleMovimientoInventario && this.isPermisoOrdenDetalleMovimientoInventario));			
			//this.jMenuItemMostrarOcultarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenDetalleMovimientoInventario && this.isPermisoOrdenDetalleMovimientoInventario));
			this.jMenuItemDetalleAbrirOrderByDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenDetalleMovimientoInventario && this.isPermisoOrdenDetalleMovimientoInventario));			
			//this.jMenuItemDetalleMostrarOcultarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenDetalleMovimientoInventario && this.isPermisoOrdenDetalleMovimientoInventario));			
			this.jMenuItemNuevoRelacionesDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario));			
			this.jMenuItemNuevoGuardarCambiosDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoDetalleMovimientoInventario && this.isPermisoNuevoDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));									
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemModificarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaModificarDetalleMovimientoInventario && this.isPermisoActualizarDetalleMovimientoInventario));	
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemActualizarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaActualizarDetalleMovimientoInventario && this.isPermisoActualizarDetalleMovimientoInventario));	
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemEliminarDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaEliminarDetalleMovimientoInventario && this.isPermisoEliminarDetalleMovimientoInventario));
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemCancelarDetalleMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarDetalleMovimientoInventario);				
			}
			
			this.jMenuItemGuardarCambiosDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));						
			this.jMenuItemGuardarCambiosTablaDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));						
			*/
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=this.jButtonNuevoDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleMovimientoInventario=this.jButtonDuplicarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaCopiarDetalleMovimientoInventario=this.jButtonCopiarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaVerFormDetalleMovimientoInventario=this.jButtonVerFormDetalleMovimientoInventario.isVisible();
			/*
			this.isVisibilidadCeldaOrdenDetalleMovimientoInventario=this.jButtonAbrirOrderByDetalleMovimientoInventario.isVisible();			
			*/
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=this.jButtonNuevoRelacionesDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=this.jButtonModificarDetalleMovimientoInventario.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosDetalleMovimientoInventario.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=this.jButtonGuardarCambiosTablaDetalleMovimientoInventario.isVisible();
			
			//TOOLBAR
			/*
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=this.jButtonNuevoToolBarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=this.jButtonNuevoRelacionesToolBarDetalleMovimientoInventario.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarToolBarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarToolBarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarToolBarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarToolBarDetalleMovimientoInventario.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=this.jButtonGuardarCambiosToolBarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=this.jButtonGuardarCambiosTablaToolBarDetalleMovimientoInventario.isVisible();						
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=this.jMenuItemNuevoDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=this.jMenuItemNuevoRelacionesDetalleMovimientoInventario.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemModificarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemActualizarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemEliminarDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemCancelarDetalleMovimientoInventario.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=this.jMenuItemGuardarCambiosDetalleMovimientoInventario.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=this.jMenuItemGuardarCambiosTablaDetalleMovimientoInventario.isVisible();						
			*/
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleMovimientoInventario(Boolean esInicializar) {
		if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
				//if(this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleMovimientoInventario();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleMovimientoInventario(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleMovimientoInventario() {
		this.jButtonNuevoDetalleMovimientoInventario.setVisible(this.isPermisoNuevoDetalleMovimientoInventario);			
		this.jButtonDuplicarDetalleMovimientoInventario.setVisible(this.isPermisoDuplicarDetalleMovimientoInventario);			
		this.jButtonCopiarDetalleMovimientoInventario.setVisible(this.isPermisoCopiarDetalleMovimientoInventario);			
		this.jButtonVerFormDetalleMovimientoInventario.setVisible(this.isPermisoVerFormDetalleMovimientoInventario);			
		/*
		this.jButtonAbrirOrderByDetalleMovimientoInventario.setVisible(this.isPermisoOrdenDetalleMovimientoInventario);					
		*/
		this.jButtonNuevoRelacionesDetalleMovimientoInventario.setVisible(this.isPermisoNuevoDetalleMovimientoInventario);			
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarDetalleMovimientoInventario.setVisible(this.isPermisoActualizarDetalleMovimientoInventario);	
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarDetalleMovimientoInventario.setVisible(this.isPermisoActualizarDetalleMovimientoInventario);	
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarDetalleMovimientoInventario.setVisible(this.isPermisoEliminarDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarDetalleMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarDetalleMovimientoInventario);						
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosDetalleMovimientoInventario.setVisible(this.isPermisoGuardarCambiosDetalleMovimientoInventario);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleMovimientoInventario.setVisible(this.isPermisoActualizarDetalleMovimientoInventario);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleMovimientoInventario() {
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarDetalleMovimientoInventario.setVisible(this.isPermisoActualizarDetalleMovimientoInventario);	
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarDetalleMovimientoInventario.setVisible(this.isPermisoActualizarDetalleMovimientoInventario);	
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarDetalleMovimientoInventario.setVisible(this.isPermisoEliminarDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarDetalleMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarDetalleMovimientoInventario);							
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosDetalleMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarDetalleMovimientoInventario && this.isPermisoGuardarCambiosDetalleMovimientoInventario));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleMovimientoInventario() {
		if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleMovimientoInventario();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleMovimientoInventario() {
	}
	
	public void jTableDatosDetalleMovimientoInventarioListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleMovimientoInventario(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detallemovimientoinventario.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomovimientoinventario=true;

			idTienePermisomovimientoinventario=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(MovimientoInventarioConstantesFunciones.CLASSNAME);

			if(idTienePermisomovimientoinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.movimientoinventarioBeanSwingJInternalFrame=new MovimientoInventarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.movimientoinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.movimientoinventarioBeanSwingJInternalFrame.getMovimientoInventarioLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_movimiento_inventario()!=null) {
					this.movimientoinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.movimientoinventarioBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_movimiento_inventario());
					this.movimientoinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.movimientoinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.movimientoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaMovimientoInventario();
				}

				JInternalFrameBase jinternalFrame =this.movimientoinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBordermovimientoinventario=(TitledBorder)this.movimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosMovimientoInventario.getBorder();

				titledBordermovimientoinventario.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Movimiento Inventario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_movimiento_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_movimiento_inventario = "+this.detallemovimientoinventario.getid_movimiento_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detallemovimientoinventario.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detallemovimientoinventario.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detallemovimientoinventario.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detallemovimientoinventario.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detallemovimientoinventario.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detallemovimientoinventario.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadodetallemovimientoinventario=true;

			idTienePermisoestadodetallemovimientoinventario=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(EstadoDetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadodetallemovimientoinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.estadodetallemovimientoinventarioBeanSwingJInternalFrame=new EstadoDetalleMovimientoInventarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadodetallemovimientoinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadodetallemovimientoinventarioBeanSwingJInternalFrame.getEstadoDetalleMovimientoInventarioLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario()!=null) {
					this.estadodetallemovimientoinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadodetallemovimientoinventarioBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario());
					this.estadodetallemovimientoinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadodetallemovimientoinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadodetallemovimientoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoDetalleMovimientoInventario();
				}

				JInternalFrameBase jinternalFrame =this.estadodetallemovimientoinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBorderestadodetallemovimientoinventario=(TitledBorder)this.estadodetallemovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosEstadoDetalleMovimientoInventario.getBorder();

				titledBorderestadodetallemovimientoinventario.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Estado Detalle Movimiento Inventario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_detalle_movimiento_inventario = "+this.detallemovimientoinventario.getid_estado_detalle_movimiento_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.detallemovimientoinventario.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoDetalleMovimientoInventarioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {

				//BUSQUEDA FILTRADA DESDE COMBO EVENT Y EVENTDEPEND
				this.productoBeanSwingJInternalFrame.sFinalQueryGeneral=this.sFinalQueryComboProducto;
				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleMovimientoInventario=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosDetalleMovimientoInventario.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.detallemovimientoinventario.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_unidadDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisounidad=true;

			idTienePermisounidad=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(UnidadConstantesFunciones.CLASSNAME);

			if(idTienePermisounidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.unidadBeanSwingJInternalFrame=new UnidadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.unidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.unidadBeanSwingJInternalFrame.getUnidadLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_unidad()!=null) {
					this.unidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.unidadBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_unidad());
					this.unidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaUnidad();
				}

				JInternalFrameBase jinternalFrame =this.unidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBorderunidad=(TitledBorder)this.unidadBeanSwingJInternalFrame.jScrollPanelDatosUnidad.getBorder();

				titledBorderunidad.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Unidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_unidadDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_unidad = "+this.detallemovimientoinventario.getid_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detallemovimientoinventario.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidadDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getcantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad = "+this.detallemovimientoinventario.getcantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.detallemovimientoinventario.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_unitarioDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getcosto_unitario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_unitario = "+this.detallemovimientoinventario.getcosto_unitario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_totalDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getcosto_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_total = "+this.detallemovimientoinventario.getcosto_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondisponibleDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getdisponible()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where disponible = "+this.detallemovimientoinventario.getdisponible().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.detallemovimientoinventario.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniva_valorDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getiva_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva_valor = "+this.detallemovimientoinventario.getiva_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_ivaDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getcosto_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_iva = "+this.detallemovimientoinventario.getcosto_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.detallemovimientoinventario.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonice_valorDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getice_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice_valor = "+this.detallemovimientoinventario.getice_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento1DetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getdescuento1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento1 = "+this.detallemovimientoinventario.getdescuento1().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento2DetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getdescuento2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento2 = "+this.detallemovimientoinventario.getdescuento2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonserieDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getserie()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where serie like '%"+this.detallemovimientoinventario.getserie()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonloteDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getlote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote like '%"+this.detallemovimientoinventario.getlote()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_elaboracion_loteDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getfecha_elaboracion_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_elaboracion_lote = '"+Funciones2.getStringPostgresDate(this.detallemovimientoinventario.getfecha_elaboracion_lote())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_caducidad_loteDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getfecha_caducidad_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_caducidad_lote = '"+Funciones2.getStringPostgresDate(this.detallemovimientoinventario.getfecha_caducidad_lote())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_novedad_productoDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisonovedadproducto=true;

			idTienePermisonovedadproducto=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(NovedadProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisonovedadproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.novedadproductoBeanSwingJInternalFrame=new NovedadProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.novedadproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.novedadproductoBeanSwingJInternalFrame.getNovedadProductoLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_novedad_producto()!=null) {
					this.novedadproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.novedadproductoBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_novedad_producto());
					this.novedadproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.novedadproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.novedadproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaNovedadProducto();
				}

				JInternalFrameBase jinternalFrame =this.novedadproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBordernovedadproducto=(TitledBorder)this.novedadproductoBeanSwingJInternalFrame.jScrollPanelDatosNovedadProducto.getBorder();

				titledBordernovedadproducto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Novedad Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_novedad_productoDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_novedad_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_novedad_producto = "+this.detallemovimientoinventario.getid_novedad_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoDetalleMovimientoInventarioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleMovimientoInventario=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosDetalleMovimientoInventario.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.detallemovimientoinventario.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costoDetalleMovimientoInventarioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecostoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecostoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCosto";

			if(!this.sFinalQueryGeneral_cuentacontablecosto.equals("")) {
				this.cuentacontablecostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecosto);
				this.cuentacontablecostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecostoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecostoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleMovimientoInventario=null;
			TitledBorder titledBordercuentacontablecosto=null;

			if(!this.jScrollPanelDatosDetalleMovimientoInventario.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				titledBordercuentacontablecosto=(TitledBorder)this.cuentacontablecostoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecosto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_costoDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecosto=true;

			idTienePermisocuentacontablecosto=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.cuentacontablecostoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_cuenta_contable_costo()!=null) {
					this.cuentacontablecostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostoBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_cuenta_contable_costo());
					this.cuentacontablecostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBordercuentacontablecosto=(TitledBorder)this.cuentacontablecostoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecosto.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costoDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_cuenta_contable_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo = "+this.detallemovimientoinventario.getid_cuenta_contable_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.tipodetallemovimientoinventarioBeanSwingJInternalFrame=new TipoDetalleMovimientoInventarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.sTipoBusqueda="TipoDetalleMovimientoInventario";

			if(!this.sFinalQueryGeneral_tipodetallemovimientoinventario.equals("")) {
				this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_tipodetallemovimientoinventario);
				this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.procesarBusqueda(this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.sAccionBusqueda);
				this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTipoDetalleMovimientoInventario(false);
			}

			if(!this.sFinalQueryComboTipoDetalleMovimientoInventario.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.tipodetallemovimientoinventarioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleMovimientoInventario=null;
			TitledBorder titledBordertipodetallemovimientoinventario=null;

			if(!this.jScrollPanelDatosDetalleMovimientoInventario.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				titledBordertipodetallemovimientoinventario=(TitledBorder)this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosTipoDetalleMovimientoInventario.getBorder();

				titledBordertipodetallemovimientoinventario.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Tipo Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipodetallemovimientoinventario=true;

			idTienePermisotipodetallemovimientoinventario=this.tienePermisosUsuarioEnPaginaWebDetalleMovimientoInventario(TipoDetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipodetallemovimientoinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);

				this.tipodetallemovimientoinventarioBeanSwingJInternalFrame=new TipoDetalleMovimientoInventarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.getTipoDetalleMovimientoInventarioLogic().setConnexion(this.detallemovimientoinventarioLogic.getConnexion());

				if(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario()!=null) {
					this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.setIdActual(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario());
					this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoDetalleMovimientoInventario();
				}

				JInternalFrameBase jinternalFrame =this.tipodetallemovimientoinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)this.jScrollPanelDatosDetalleMovimientoInventario.getBorder();
				TitledBorder titledBordertipodetallemovimientoinventario=(TitledBorder)this.tipodetallemovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosTipoDetalleMovimientoInventario.getBorder();

				titledBordertipodetallemovimientoinventario.setTitle(titledBorderDetalleMovimientoInventario.getTitle() + " -> Tipo Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_detalle_movimiento_inventario = "+this.detallemovimientoinventario.getid_tipo_detalle_movimiento_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_comprobanteDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getnumero_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_comprobante like '%"+this.detallemovimientoinventario.getnumero_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonlote_clienteDetalleMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.getdetallemovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallemovimientoinventario==null) {
						this.detallemovimientoinventario = new DetalleMovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);
				}

				if(this.detallemovimientoinventario.getlote_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote_cliente like '%"+this.detallemovimientoinventario.getlote_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void closingInternalFrameDetalleMovimientoInventario() {
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
		

		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.dispose();
			this.jInternalFrameDetalleFormDetalleMovimientoInventario=null;
		}
		
		/*
		if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
			this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.dispose();
			this.jInternalFrameReporteDinamicoDetalleMovimientoInventario=null;
		}
		
		if(this.jInternalFrameImportacionDetalleMovimientoInventario!=null) {
			this.jInternalFrameImportacionDetalleMovimientoInventario.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleMovimientoInventario.dispose();
			this.jInternalFrameImportacionDetalleMovimientoInventario=null;
		}		
		*/
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleMovimientoInventario();
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleMovimientoInventario")) {
				jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleMovimientoInventario")) {
				jButtonDuplicarDetalleMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleMovimientoInventario")) {
				jButtonCopiarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleMovimientoInventario")) {
				jButtonVerFormDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleMovimientoInventario")) {
				jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleMovimientoInventario")) {
				jButtonDuplicarDetalleMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleMovimientoInventario")) {
				jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleMovimientoInventario")) {
				jButtonDuplicarDetalleMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleMovimientoInventario")) {
				jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleMovimientoInventario")) {
				jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleMovimientoInventario")) {
				jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleMovimientoInventario")) {
				jButtonModificarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleMovimientoInventario")) {
				jButtonModificarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleMovimientoInventario")) {
				jButtonModificarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleMovimientoInventario")) {
				jButtonActualizarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleMovimientoInventario")) {
				jButtonActualizarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleMovimientoInventario")) {
				jButtonActualizarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleMovimientoInventario")) {
				jButtonEliminarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleMovimientoInventario")) {
				jButtonEliminarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleMovimientoInventario")) {
				jButtonEliminarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleMovimientoInventario")) {
				jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleMovimientoInventario")) {
				jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleMovimientoInventario")) {
				jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleMovimientoInventario")) {
				jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleMovimientoInventario")) {
				jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleMovimientoInventario")) {
				jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleMovimientoInventario")) {
				jButtonMostrarOcultarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleMovimientoInventario")) {
				jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleMovimientoInventario")) {
				jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleMovimientoInventario")) {
				jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleMovimientoInventario")) {
				jButtonCopiarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleMovimientoInventario")) {
				jButtonVerFormDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleMovimientoInventario")) {
				jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleMovimientoInventario")) {
				jButtonCopiarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleMovimientoInventario")) {
				jButtonVerFormDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleMovimientoInventario")) {
				jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleMovimientoInventario")) {
				jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleMovimientoInventario")) {
				jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleMovimientoInventario")) {
				jButtonRecargarInformacionDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleMovimientoInventario")) {
				jButtonRecargarInformacionDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleMovimientoInventario")) {
				jButtonRecargarInformacionDetalleMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleMovimientoInventario")) {
				jButtonAnterioresDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleMovimientoInventario")) {
				jButtonAnterioresDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleMovimientoInventario")) {
				jButtonAnterioresDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleMovimientoInventario")) {
				jButtonSiguientesDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleMovimientoInventario")) {
				jButtonSiguientesDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleMovimientoInventario")) {
				jButtonSiguientesDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleMovimientoInventario") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleMovimientoInventario")) {
				jButtonAbrirOrderByDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleMovimientoInventario") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleMovimientoInventario")) {
				jButtonMostrarOcultarDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleMovimientoInventario")) {
				jButtonNuevoGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleMovimientoInventario")) {
				jButtonNuevoGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleMovimientoInventario")) {
				jButtonNuevoGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleMovimientoInventario")) {
				jButtonCerrarReporteDinamicoDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleMovimientoInventario")) {
				jButtonGenerarReporteDinamicoDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleMovimientoInventario")) {
				/*
				jButtonGenerarExcelReporteDinamicoDetalleMovimientoInventarioActionPerformed(evt);
				*/
			} else if(sTipo.equals("CerrarImportacionDetalleMovimientoInventario")) {
				jButtonCerrarImportacionDetalleMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleMovimientoInventario")) {
				/*
				jButtonGenerarImportacionDetalleMovimientoInventarioActionPerformed(evt);
				*/
			} else if(sTipo.equals("AbrirImportacionDetalleMovimientoInventario")) {
				/*
				jButtonAbrirImportacionDetalleMovimientoInventarioActionPerformed(evt);
				*/
			} else if(sTipo.equals("TiposAccionesDetalleMovimientoInventario")) {
				jComboBoxTiposAccionesDetalleMovimientoInventarioActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleMovimientoInventario")) {
				jComboBoxTiposRelacionesDetalleMovimientoInventarioActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleMovimientoInventario")) {
				jComboBoxTiposAccionesDetalleMovimientoInventarioActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleMovimientoInventario")) {
				/*
				jComboBoxTiposSeleccionarDetalleMovimientoInventarioActionListener(evt);
				*/
			} else if(sTipo.equals("ValorCampoGeneralDetalleMovimientoInventario")) {
				jTextFieldValorCampoGeneralDetalleMovimientoInventarioActionListener(evt);
			}
			
			else if(sTipo.equals("AbrirTotalesDetalleMovimientoInventario")) {
				jButtonAbrirTotalesDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarTotalesDetalleMovimientoInventario")) {
				jButtonCerrarTotalesDetalleMovimientoInventarioActionPerformed(evt);
			} 
			
			else if(sTipo.equals("AbrirOrderByDetalleMovimientoInventario")) {
				jButtonAbrirOrderByDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleMovimientoInventario")) {
				jButtonAbrirOrderByDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleMovimientoInventario")) {
				jButtonCerrarOrderByDetalleMovimientoInventarioActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleMovimientoInventarioBusqueda")) {
				this.jButtonidDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_movimiento_inventarioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_movimiento_inventarioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_empresaDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_empresaDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_sucursalDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_sucursalDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_ejercicioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_ejercicioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_periodoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_periodoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_anioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_anioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_mesDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_mesDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_bodegaDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_bodegaDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleMovimientoInventario")) {
				this.jButtonid_productoDetalleMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_productoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_productoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_unidadDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_unidadDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleMovimientoInventarioBusqueda")) {
				this.jButtondescripcionDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleMovimientoInventarioBusqueda")) {
				this.jButtoncantidadDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleMovimientoInventarioBusqueda")) {
				this.jButtondescuentoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetalleMovimientoInventarioBusqueda")) {
				this.jButtoncosto_unitarioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetalleMovimientoInventarioBusqueda")) {
				this.jButtoncosto_totalDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleDetalleMovimientoInventarioBusqueda")) {
				this.jButtondisponibleDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleMovimientoInventarioBusqueda")) {
				this.jButtonivaDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_valorDetalleMovimientoInventarioBusqueda")) {
				this.jButtoniva_valorDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_ivaDetalleMovimientoInventarioBusqueda")) {
				this.jButtoncosto_ivaDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleMovimientoInventarioBusqueda")) {
				this.jButtoniceDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleMovimientoInventarioBusqueda")) {
				this.jButtonice_valorDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento1DetalleMovimientoInventarioBusqueda")) {
				this.jButtondescuento1DetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento2DetalleMovimientoInventarioBusqueda")) {
				this.jButtondescuento2DetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serieDetalleMovimientoInventarioBusqueda")) {
				this.jButtonserieDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonloteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_elaboracion_loteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonfecha_elaboracion_loteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caducidad_loteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonfecha_caducidad_loteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_novedad_productoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_novedad_productoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventario")) {
				this.jButtonid_centro_costoDetalleMovimientoInventarioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventarioArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_centro_costoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_centro_costoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventario")) {
				this.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventarioArbol")) {
				this.abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario")) {
				this.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonnumero_comprobanteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("lote_clienteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonlote_clienteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventario")) {
				this.jButtonid_centro_costoDetalleMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventario")) {
				this.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("id_productoDetalleMovimientoInventario")) {
				this.jButtonid_productoDetalleMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario")) {
				this.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioActionPerformed(evt);
			}
			
			
			;
			
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleMovimientoInventario();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				


			if(sTipo.equals("cantidadDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_totalDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleMovimientoInventario detallemovimientoinventarioLocal=null;
			
			if(!this.getEsControlTabla()) {
				detallemovimientoinventarioLocal=this.detallemovimientoinventario;
			} else {
				detallemovimientoinventarioLocal=this.detallemovimientoinventarioAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


				if(sTipo.equals("cantidadDetalleMovimientoInventario")) {
					if(detallemovimientoinventarioLocal.getcantidad()==Integer.parseInt(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("costo_unitarioDetalleMovimientoInventario")) {
					if(detallemovimientoinventarioLocal.getcosto_unitario()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("costo_totalDetalleMovimientoInventario")) {
					if(detallemovimientoinventarioLocal.getcosto_total()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.getText())){existeCambio=false;};
				}
			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
							
				
				


			if(sTipo.equals("cantidadDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_totalDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			if(sTipo.equals("cantidadDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_totalDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
								
						
				


				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
								
				
				


				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
							
				
				


				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
								
				
				


			if(sTipo.equals("cantidadDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_totalDetalleMovimientoInventario")) {
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleMovimientoInventario")) {
					jCheckBoxSeleccionarTodosDetalleMovimientoInventarioItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleMovimientoInventario")) {
					jCheckBoxSeleccionadosDetalleMovimientoInventarioItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleMovimientoInventario")) {
					
				}
				
				


				
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
												
				
				


				
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_bodegaDetalleMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario;
				}

				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario,"FK_IdBodega");
				//recargarFormDetalleMovimientoInventarioBodega(jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario;
				}

				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario,"FK_IdProducto");
				//recargarFormDetalleMovimientoInventarioProducto(jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario,"FK_IdProducto");
			}
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario;
				}

				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario,"FK_IdBodega");
				//recargarFormDetalleMovimientoInventarioBodega(jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario;
				}

				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario,"FK_IdProducto");
				//recargarFormDetalleMovimientoInventarioProducto(jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario,"FK_IdProducto");
			}
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallemovimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallemovimientoinventario);
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario;
				}

				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario,"FK_IdBodega");
				//recargarFormDetalleMovimientoInventarioBodega(jComboBoxid_bodegaFK_IdBodegaDetalleMovimientoInventario,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario;
				}

				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario,"FK_IdProducto");
				//recargarFormDetalleMovimientoInventarioProducto(jComboBoxid_productoFK_IdProductoDetalleMovimientoInventario,"FK_IdProducto");
			}
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleMovimientoInventario.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleMovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallemovimientoinventarioAnterior =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleMovimientoInventario")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleMovimientoInventarioListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleMovimientoInventario.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detallemovimientoinventario =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detallemovimientoinventario);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleMovimientoInventario")) {
				
				}
				
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleMovimientoInventario")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleMovimientoInventario.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleMovimientoInventario")) {
			
			}
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleMovimientoInventario();
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleMovimientoInventario")) {
				jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleMovimientoInventario")) {
				jButtonDuplicarDetalleMovimientoInventarioActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleMovimientoInventario")) {
				jButtonCopiarDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleMovimientoInventario")) {
				jButtonVerFormDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleMovimientoInventario")) {
				jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleMovimientoInventario")) {
				jButtonModificarDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleMovimientoInventario")) {
				jButtonActualizarDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleMovimientoInventario")) {
				jButtonEliminarDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleMovimientoInventario")) {
				jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleMovimientoInventario")) {
				jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleMovimientoInventario")) {
				jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleMovimientoInventario")) {
				jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleMovimientoInventario")) {
				jButtonNuevoGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleMovimientoInventario")) {
				jButtonAbrirOrderByDetalleMovimientoInventarioActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleMovimientoInventario")) {
				jButtonRecargarInformacionDetalleMovimientoInventarioActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleMovimientoInventario")) {
				jButtonAnterioresDetalleMovimientoInventarioActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleMovimientoInventario")) {
				jButtonSiguientesDetalleMovimientoInventarioActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleMovimientoInventarioBusqueda")) {
				this.jButtonidDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_movimiento_inventarioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_movimiento_inventarioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_empresaDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_empresaDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_sucursalDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_sucursalDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_ejercicioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_ejercicioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_periodoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_periodoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_anioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_anioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_mesDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_mesDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_bodegaDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_bodegaDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleMovimientoInventario")) {
				this.jButtonid_productoDetalleMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_productoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_productoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_unidadDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_unidadDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleMovimientoInventarioBusqueda")) {
				this.jButtondescripcionDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleMovimientoInventarioBusqueda")) {
				this.jButtoncantidadDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleMovimientoInventarioBusqueda")) {
				this.jButtondescuentoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetalleMovimientoInventarioBusqueda")) {
				this.jButtoncosto_unitarioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetalleMovimientoInventarioBusqueda")) {
				this.jButtoncosto_totalDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleDetalleMovimientoInventarioBusqueda")) {
				this.jButtondisponibleDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleMovimientoInventarioBusqueda")) {
				this.jButtonivaDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_valorDetalleMovimientoInventarioBusqueda")) {
				this.jButtoniva_valorDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_ivaDetalleMovimientoInventarioBusqueda")) {
				this.jButtoncosto_ivaDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleMovimientoInventarioBusqueda")) {
				this.jButtoniceDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleMovimientoInventarioBusqueda")) {
				this.jButtonice_valorDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento1DetalleMovimientoInventarioBusqueda")) {
				this.jButtondescuento1DetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento2DetalleMovimientoInventarioBusqueda")) {
				this.jButtondescuento2DetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serieDetalleMovimientoInventarioBusqueda")) {
				this.jButtonserieDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonloteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_elaboracion_loteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonfecha_elaboracion_loteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caducidad_loteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonfecha_caducidad_loteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_novedad_productoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_novedad_productoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventario")) {
				this.jButtonid_centro_costoDetalleMovimientoInventarioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventarioArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_centro_costoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_centro_costoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventario")) {
				this.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventarioArbol")) {
				this.abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario")) {
				this.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate")) {
				this.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda")) {
				this.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonnumero_comprobanteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("lote_clienteDetalleMovimientoInventarioBusqueda")) {
				this.jButtonlote_clienteDetalleMovimientoInventarioBusquedaActionPerformed(evt);
			}
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleMovimientoInventario();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleMovimientoInventario")) {
				closingInternalFrameDetalleMovimientoInventario();
				
			} else if(sTipo.equals("jButtonCancelarDetalleMovimientoInventario")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleMovimientoInventario = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleMovimientoInventarioBeanSwingJInternalFrame jInternalFrameParent=(DetalleMovimientoInventarioBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleMovimientoInventario.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleMovimientoInventarioActionPerformed(null);
			}
			
			DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallemovimientoinventario,new Object(),this.detallemovimientoinventarioParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleMovimientoInventario(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleMovimientoInventario(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleMovimientoInventario(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detallemovimientoinventario)) {
			if(!esControlTabla) {
				if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);			
				}
				
				if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallemovimientoinventarioReturnGeneral=detallemovimientoinventarioLogic.procesarEventosDetalleMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios(),this.detallemovimientoinventario,this.detallemovimientoinventarioParameterGeneral,this.isEsNuevoDetalleMovimientoInventario,classes);//this.detallemovimientoinventarioLogic.getDetalleMovimientoInventario()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral,this.detallemovimientoinventarioBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleMovimientoInventario(classes,this.detallemovimientoinventarioReturnGeneral,this.detallemovimientoinventarioBean,false);
					}
						
					if(this.detallemovimientoinventarioReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario());	
					}
						
					if(this.detallemovimientoinventarioReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario(),classes);//this.detallemovimientoinventarioBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleMovimientoInventario(this.detallemovimientoinventario,classes);//this.detallemovimientoinventarioBean);									
				}
			
				if(DetalleMovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleMovimientoInventario(this.detallemovimientoinventario,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleMovimientoInventario(this.detallemovimientoinventario);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detallemovimientoinventarioAnterior!=null) {
						this.detallemovimientoinventario=this.detallemovimientoinventarioAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallemovimientoinventarioReturnGeneral=detallemovimientoinventarioLogic.procesarEventosDetalleMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios(),this.detallemovimientoinventario,this.detallemovimientoinventarioParameterGeneral,this.isEsNuevoDetalleMovimientoInventario,classes);//this.detallemovimientoinventarioLogic.getDetalleMovimientoInventario()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallemovimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario(),detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario(),this.detallemovimientoinventarios);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleMovimientoInventario.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleMovimientoInventario.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleMovimientoInventario();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleMovimientoInventario() throws Exception {
		
		DetalleMovimientoInventarioModel detallemovimientoinventarioModel=(DetalleMovimientoInventarioModel)this.jTableDatosDetalleMovimientoInventario.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallemovimientoinventarioModel.detallemovimientoinventarios=this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detallemovimientoinventarioModel.detallemovimientoinventarios=this.detallemovimientoinventarios;
		}
		
		
		((DetalleMovimientoInventarioModel) this.jTableDatosDetalleMovimientoInventario.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleMovimientoInventario() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetallemovimientoinventarioAnterior(),this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetallemovimientoinventarioAnterior(),this.detallemovimientoinventarios);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleMovimientoInventario();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(NovedadSeguimiento.class)) {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.setNovedadSeguimientos(detallemovimientoinventario.getNovedadSeguimientos());
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.inicializarActualizarBindingTablaNovedadSeguimiento(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallemovimientoinventario,new Object(),generalEntityParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsOfDetalleMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleMovimientoInventarioConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleMovimientoInventario(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleMovimientoInventario(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallemovimientoinventario,new Object(),generalEntityParameterGeneral,this.detallemovimientoinventarioReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleMovimientoInventario(DetalleMovimientoInventarioBean detallemovimientoinventarioBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(NovedadSeguimiento.class)) {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.setNovedadSeguimientos(detallemovimientoinventario.getNovedadSeguimientos());
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.inicializarActualizarBindingTablaNovedadSeguimiento(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleMovimientoInventario(ArrayList<Classe> classes,DetalleMovimientoInventarioReturnGeneral detallemovimientoinventarioReturnGeneral,DetalleMovimientoInventarioBean detallemovimientoinventarioBean,Boolean conDefault) throws Exception {
		
			this.detallemovimientoinventarioBean.setNovedadSeguimientos(detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario().getNovedadSeguimientos());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(NovedadSeguimiento.class)) {
					detallemovimientoinventario.setNovedadSeguimientos(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.novedadseguimientoLogic.getNovedadSeguimientos());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detallemovimientoinventario)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario = new DetalleMovimientoInventarioDetalleFormJInternalFrame(jDesktopPane,this.detallemovimientoinventarioSessionBean.getConGuardarRelaciones(),this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.setVisible(false);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.detallemovimientoinventarioLogic=this.detallemovimientoinventarioLogic;
		
		this.cargarCombosFrameForeignKeyDetalleMovimientoInventario("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleMovimientoInventario();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleMovimientoInventario();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleMovimientoInventario("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleMovimientoInventario();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleMovimientoInventario"));
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"ModificarDetalleMovimientoInventario"));

		/*
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarToolBarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleMovimientoInventario"));
					
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemModificarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleMovimientoInventario"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"ActualizarDetalleMovimientoInventario"));
		
		/*
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarToolBarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleMovimientoInventario"));
						
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemActualizarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleMovimientoInventario"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"EliminarDetalleMovimientoInventario"));
		
		/*
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleMovimientoInventario"));
								
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemEliminarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleMovimientoInventario"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"CancelarDetalleMovimientoInventario"));
		
		/*
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleMovimientoInventario"));
					
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemCancelarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleMovimientoInventario"));		
		
		*/
		
		
		/*
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemDetalleCerrarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleMovimientoInventario"));		
		*/
		
		/*
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleMovimientoInventario"));
		*/
		
		/*
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleMovimientoInventario"));
		*/
		
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleMovimientoInventario"));
		
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"cantidadDetalleMovimientoInventario"));
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.addActionListener(new TextFieldActionListener(this,"cantidadDetalleMovimientoInventario"));
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidadDetalleMovimientoInventario,"cantidadDetalleMovimientoInventario"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"costo_unitarioDetalleMovimientoInventario"));
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.addActionListener(new TextFieldActionListener(this,"costo_unitarioDetalleMovimientoInventario"));
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_unitarioDetalleMovimientoInventario,"costo_unitarioDetalleMovimientoInventario"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"costo_totalDetalleMovimientoInventario"));
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.addActionListener(new TextFieldActionListener(this,"costo_totalDetalleMovimientoInventario"));
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_totalDetalleMovimientoInventario,"costo_totalDetalleMovimientoInventario"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonidDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_empresaDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_empresaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_sucursalDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_sucursalDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_ejercicioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_ejercicioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_periodoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_periodoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_anioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_anioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_mesDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_mesDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_bodegaDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_bodegaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleMovimientoInventarioBusqueda"));
		//jButtonid_productoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_unidadDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_unidadDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescripcionDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncantidadDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuentoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_unitarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_totalDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondisponibleDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonivaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoniva_valorDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_ivaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoniceDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonice_valorDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuento1DetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuento2DetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonserieDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonloteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonfecha_elaboracion_loteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonfecha_caducidad_loteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_novedad_productoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_novedad_productoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_centro_costoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventario"));
		//jButtonid_centro_costoDetalleMovimientoInventarioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_cuenta_contable_costoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventario"));
		//jButtonid_cuenta_contable_costoDetalleMovimientoInventarioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonnumero_comprobanteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonlote_clienteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleMovimientoInventarioBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleMovimientoInventario"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleMovimientoInventario"));
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleMovimientoInventario"));
		}
		
		this.jTableDatosDetalleMovimientoInventario.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleMovimientoInventario"));
		
		this.jTableDatosDetalleMovimientoInventario.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleMovimientoInventario"));
		
		this.jButtonNuevoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"NuevoDetalleMovimientoInventario"));
		
		this.jButtonDuplicarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"DuplicarDetalleMovimientoInventario"));
		
		this.jButtonCopiarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"CopiarDetalleMovimientoInventario"));
		
		this.jButtonVerFormDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"VerFormDetalleMovimientoInventario"));
		
		/*
		this.jButtonNuevoToolBarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleMovimientoInventario"));
			
		this.jButtonDuplicarToolBarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleMovimientoInventario"));
			
		this.jMenuItemNuevoDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleMovimientoInventario"));
			
		this.jMenuItemDuplicarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleMovimientoInventario"));		
		*/
		
		this.jButtonNuevoRelacionesDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleMovimientoInventario"));
		
		/*
		this.jButtonNuevoRelacionesToolBarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleMovimientoInventario"));
			
		this.jMenuItemNuevoRelacionesDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleMovimientoInventario"));		
		*/
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"ModificarDetalleMovimientoInventario"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonModificarToolBarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleMovimientoInventario"));
			
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemModificarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleMovimientoInventario"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"ActualizarDetalleMovimientoInventario"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonActualizarToolBarDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleMovimientoInventario"));
				
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemActualizarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleMovimientoInventario"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"EliminarDetalleMovimientoInventario"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonEliminarToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleMovimientoInventario"));
						
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemEliminarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleMovimientoInventario"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"CancelarDetalleMovimientoInventario"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonCancelarToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleMovimientoInventario"));
			
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemCancelarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleMovimientoInventario"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleMovimientoInventario"));		
		*/
		
		this.jButtonCerrarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"CerrarDetalleMovimientoInventario"));
		
		/*
		this.jButtonCerrarToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleMovimientoInventario"));
			
		this.jMenuItemCerrarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleMovimientoInventario"));
			
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jMenuItemDetalleCerrarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleMovimientoInventario"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleMovimientoInventario"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleMovimientoInventario"));
		}
		
		this.jButtonCopiarToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleMovimientoInventario"));
			
		this.jButtonVerFormToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleMovimientoInventario"));
		
		this.jMenuItemGuardarCambiosDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleMovimientoInventario"));
			
		this.jMenuItemCopiarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleMovimientoInventario"));		
		
		this.jMenuItemVerFormDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleMovimientoInventario"));		
		*/
		
		this.jButtonGuardarCambiosTablaDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleMovimientoInventario"));
		
		/*
		this.jButtonGuardarCambiosTablaToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleMovimientoInventario"));
			
		this.jMenuItemGuardarCambiosTablaDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleMovimientoInventario"));		
		*/
		
		/*
		this.jButtonRecargarInformacionDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleMovimientoInventario"));
					
		this.jButtonRecargarInformacionToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleMovimientoInventario"));
		
		this.jMenuItemRecargarInformacionDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleMovimientoInventario"));		
		*/
		
		
		this.jButtonAnterioresDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"AnterioresDetalleMovimientoInventario"));
		
		/*
		this.jButtonAnterioresToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleMovimientoInventario"));
		
		this.jMenuItemAnterioresDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleMovimientoInventario"));		
		*/
		
		this.jButtonSiguientesDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"SiguientesDetalleMovimientoInventario"));
		
		/*
		this.jButtonSiguientesToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleMovimientoInventario"));
			
		this.jMenuItemSiguientesDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleMovimientoInventario"));
			
		this.jMenuItemAbrirOrderByDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleMovimientoInventario"));
			
		this.jMenuItemMostrarOcultarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleMovimientoInventario"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleMovimientoInventario"));
			
		this.jMenuItemDetalleMostarOcultarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleMovimientoInventario"));		
		*/
		
		this.jButtonNuevoGuardarCambiosDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleMovimientoInventario"));
		
		/*
		this.jButtonNuevoGuardarCambiosToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleMovimientoInventario"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleMovimientoInventario"));		
		*/
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleMovimientoInventario.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleMovimientoInventario"));

		this.jCheckBoxSeleccionadosDetalleMovimientoInventario.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleMovimientoInventario"));
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleMovimientoInventario"));
		}
		
		/*
		this.jComboBoxTiposRelacionesDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleMovimientoInventario"));
			
		this.jComboBoxTiposAccionesDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleMovimientoInventario"));
					
		this.jComboBoxTiposSeleccionarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleMovimientoInventario"));
			
		this.jTextFieldValorCampoGeneralDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleMovimientoInventario"));		
		*/
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"cantidadDetalleMovimientoInventario"));
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.addActionListener(new TextFieldActionListener(this,"cantidadDetalleMovimientoInventario"));
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidadDetalleMovimientoInventario,"cantidadDetalleMovimientoInventario"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"costo_unitarioDetalleMovimientoInventario"));
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.addActionListener(new TextFieldActionListener(this,"costo_unitarioDetalleMovimientoInventario"));
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_unitarioDetalleMovimientoInventario,"costo_unitarioDetalleMovimientoInventario"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"costo_totalDetalleMovimientoInventario"));
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.addActionListener(new TextFieldActionListener(this,"costo_totalDetalleMovimientoInventario"));
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_totalDetalleMovimientoInventario,"costo_totalDetalleMovimientoInventario"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonidDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_empresaDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_empresaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_sucursalDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_sucursalDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_ejercicioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_ejercicioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_periodoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_periodoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_anioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_anioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_mesDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_mesDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_bodegaDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_bodegaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleMovimientoInventarioBusqueda"));
		//jButtonid_productoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_unidadDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_unidadDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescripcionDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncantidadDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuentoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_unitarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_totalDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondisponibleDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonivaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoniva_valorDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_ivaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoniceDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonice_valorDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuento1DetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuento2DetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonserieDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonloteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonfecha_elaboracion_loteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonfecha_caducidad_loteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_novedad_productoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_novedad_productoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_centro_costoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventario"));
		//jButtonid_centro_costoDetalleMovimientoInventarioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_cuenta_contable_costoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventario"));
		//jButtonid_cuenta_contable_costoDetalleMovimientoInventarioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonnumero_comprobanteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonlote_clienteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleMovimientoInventarioBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		/*
		
			this.jButtonFK_IdBodegaDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleMovimientoInventario"));

			this.jButtonFK_IdCentroCostoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleMovimientoInventario"));

			this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventario"));

			this.jButtonFK_IdCuentaContableCostoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoDetalleMovimientoInventario"));

			this.jButtonBuscarFK_IdCuentaContableCostoid_cuenta_contable_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventario"));

			this.jButtonFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario"));

			this.jButtonFK_IdMovimientoInventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdMovimientoInventarioDetalleMovimientoInventario"));

			this.jButtonFK_IdNovedadProductoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdNovedadProductoDetalleMovimientoInventario"));

			this.jButtonFK_IdProductoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleMovimientoInventario"));

			this.jButtonBuscarFK_IdProductoid_productoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventario"));

			this.jButtonFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario"));

			this.jButtonBuscarFK_IdTipoDetalleMovimientoInventarioid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario"));

			this.jButtonFK_IdUnidadDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleMovimientoInventario"));
		
		*/
		
			//REPORTE DINAMICO
			/*
			if(this.jInternalFrameReporteDinamicoDetalleMovimientoInventario!=null) {
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleMovimientoInventario"));
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleMovimientoInventario"));
				this.jInternalFrameReporteDinamicoDetalleMovimientoInventario.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleMovimientoInventario"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleMovimientoInventario"));				
			//this.jButtonGenerarReporteDinamicoDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleMovimientoInventario"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleMovimientoInventario"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleMovimientoInventario!=null) {
				this.jInternalFrameImportacionDetalleMovimientoInventario.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleMovimientoInventario"));
				this.jInternalFrameImportacionDetalleMovimientoInventario.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleMovimientoInventario"));
				this.jInternalFrameImportacionDetalleMovimientoInventario.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleMovimientoInventario"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleMovimientoInventario"));
			
			this.jButtonAbrirOrderByToolBarDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleMovimientoInventario"));			
			
			if(this.jInternalFrameOrderByDetalleMovimientoInventario!=null) {
				this.jInternalFrameOrderByDetalleMovimientoInventario.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleMovimientoInventario"));				
			}
			*/
			
		}
		
		this.jButtonAbrirTotalesDetalleMovimientoInventario.addActionListener (new ButtonActionListener(this,"AbrirTotalesDetalleMovimientoInventario"));
		
		if(this.jInternalFrameTotalesDetalleMovimientoInventario!=null) {
			this.jInternalFrameTotalesDetalleMovimientoInventario.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleMovimientoInventario"));
		}
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTabbedPaneRelacionesDetalleMovimientoInventario.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleMovimientoInventario"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleMovimientoInventario();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleMovimientoInventario = (JInternalFrameBase)event.getSource();
	            	
	            DetalleMovimientoInventarioBeanSwingJInternalFrame jInternalFrameParent=(DetalleMovimientoInventarioBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleMovimientoInventario.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleMovimientoInventarioActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleMovimientoInventario.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleMovimientoInventarioListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleMovimientoInventario.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleMovimientoInventario.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleMovimientoInventario";
		inputMap = this.jButtonNuevoDetalleMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleMovimientoInventario";
		inputMap = this.jButtonNuevoRelacionesDetalleMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleMovimientoInventarioActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleMovimientoInventario";
		inputMap = this.jButtonModificarDetalleMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleMovimientoInventario";
		inputMap = this.jButtonActualizarDetalleMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleMovimientoInventario";
		inputMap = this.jButtonEliminarDetalleMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleMovimientoInventario";
		inputMap = this.jButtonCancelarDetalleMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleMovimientoInventario";
		inputMap = this.jButtonCerrarDetalleMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleMovimientoInventario";
		inputMap = this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosDetalleMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonGuardarCambiosDetalleMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleMovimientoInventario.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleMovimientoInventarioItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleMovimientoInventario.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleMovimientoInventarioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleMovimientoInventario.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleMovimientoInventarioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleMovimientoInventario.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleMovimientoInventarioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonidDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_empresaDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_empresaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_sucursalDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_sucursalDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_ejercicioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_ejercicioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_periodoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_periodoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_anioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_anioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_mesDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_mesDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_bodegaDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_bodegaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleMovimientoInventarioBusqueda"));
		//jButtonid_productoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_unidadDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_unidadDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescripcionDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncantidadDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuentoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_unitarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_totalDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondisponibleDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonivaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoniva_valorDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoncosto_ivaDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtoniceDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonice_valorDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuento1DetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtondescuento2DetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonserieDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonloteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonfecha_elaboracion_loteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonfecha_caducidad_loteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_novedad_productoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_novedad_productoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_centro_costoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventario"));
		//jButtonid_centro_costoDetalleMovimientoInventarioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_cuenta_contable_costoDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventario"));
		//jButtonid_cuenta_contable_costoDetalleMovimientoInventarioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventarioBusqueda"));
		//jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonnumero_comprobanteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonlote_clienteDetalleMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleMovimientoInventarioBusqueda"));
		
		
		this.jButtonFK_IdBodegaDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleMovimientoInventario"));

		this.jButtonFK_IdCentroCostoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleMovimientoInventario"));

		this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleMovimientoInventario"));

		this.jButtonFK_IdCuentaContableCostoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoDetalleMovimientoInventario"));

		this.jButtonBuscarFK_IdCuentaContableCostoid_cuenta_contable_costoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleMovimientoInventario"));

		this.jButtonFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario"));

		this.jButtonFK_IdMovimientoInventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdMovimientoInventarioDetalleMovimientoInventario"));

		this.jButtonFK_IdNovedadProductoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdNovedadProductoDetalleMovimientoInventario"));

		this.jButtonFK_IdProductoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleMovimientoInventario"));

		this.jButtonBuscarFK_IdProductoid_productoDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_productoDetalleMovimientoInventario"));

		this.jButtonFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario"));

		this.jButtonBuscarFK_IdTipoDetalleMovimientoInventarioid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario"));

		this.jButtonFK_IdUnidadDetalleMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleMovimientoInventario"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	/*
	public void jComboBoxTiposSeleccionarDetalleMovimientoInventarioActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleMovimientoInventario.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}	
	*/
	
	
	public void seleccionarTodosDetalleMovimientoInventario(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
					detallemovimientoinventarioAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventarios) {
					detallemovimientoinventarioAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleMovimientoInventarioItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
						detallemovimientoinventarioAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventarios) {
						detallemovimientoinventarioAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
					
						if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA)) {
							existe=true;
							detallemovimientoinventarioAux.setcosto_iva(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventarios) {
						
						if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA)) {
							existe=true;
							detallemovimientoinventarioAux.setcosto_iva(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleMovimientoInventario.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleMovimientoInventario.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleMovimientoInventarioItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleMovimientoInventario.getSelectedRows();
			
			DetalleMovimientoInventario detallemovimientoinventarioLocal=new DetalleMovimientoInventario();
			
			//this.seleccionarTodosDetalleMovimientoInventario(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallemovimientoinventarioLocal =(DetalleMovimientoInventario) this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detallemovimientoinventarioLocal =(DetalleMovimientoInventario) this.detallemovimientoinventarios.toArray()[this.jTableDatosDetalleMovimientoInventario.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detallemovimientoinventarioLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
						detallemovimientoinventarioAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventarios) {
						detallemovimientoinventarioAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleMovimientoInventario.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleMovimientoInventario.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleMovimientoInventario,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleMovimientoInventarioItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleMovimientoInventarioParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleMovimientoInventarioActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleMovimientoInventario.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
				
						if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallemovimientoinventarioAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallemovimientoinventarioAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallemovimientoinventarioAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detallemovimientoinventarioAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detallemovimientoinventarioAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							detallemovimientoinventarioAux.setdisponible(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallemovimientoinventarioAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR)) {
							existe=true;
							detallemovimientoinventarioAux.setiva_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallemovimientoinventarioAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallemovimientoinventarioAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1)) {
							existe=true;
							detallemovimientoinventarioAux.setdescuento1(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2)) {
							existe=true;
							detallemovimientoinventarioAux.setdescuento2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE)) {
							existe=true;
							detallemovimientoinventarioAux.setserie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detallemovimientoinventarioAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
							existe=true;
							detallemovimientoinventarioAux.setfecha_elaboracion_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
							existe=true;
							detallemovimientoinventarioAux.setfecha_caducidad_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detallemovimientoinventarioAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE)) {
							existe=true;
							detallemovimientoinventarioAux.setlote_cliente(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventarios) {
					
						if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallemovimientoinventarioAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallemovimientoinventarioAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallemovimientoinventarioAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detallemovimientoinventarioAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detallemovimientoinventarioAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							detallemovimientoinventarioAux.setdisponible(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallemovimientoinventarioAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR)) {
							existe=true;
							detallemovimientoinventarioAux.setiva_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallemovimientoinventarioAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallemovimientoinventarioAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1)) {
							existe=true;
							detallemovimientoinventarioAux.setdescuento1(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2)) {
							existe=true;
							detallemovimientoinventarioAux.setdescuento2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE)) {
							existe=true;
							detallemovimientoinventarioAux.setserie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detallemovimientoinventarioAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
							existe=true;
							detallemovimientoinventarioAux.setfecha_elaboracion_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
							existe=true;
							detallemovimientoinventarioAux.setfecha_caducidad_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detallemovimientoinventarioAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE)) {
							existe=true;
							detallemovimientoinventarioAux.setlote_cliente(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleMovimientoInventarioActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleMovimientoInventario=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				/*
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleMovimientoInventario.getSelectedItem();
				*/
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleMovimientoInventario) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleMovimientoInventario(conSplash);
				
					this.generarReporteDetalleMovimientoInventariosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleMovimientoInventariosSeleccionados();
				//this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleMovimientoInventariosSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleMovimientoInventariosSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleMovimientoInventario();
				
				this.exportarDetalleMovimientoInventariosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleMovimientoInventarios();
				//this.importarDetalleMovimientoInventarios();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleMovimientoInventario();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleMovimientoInventariosSeleccionados();
				//this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Movimiento Inventario", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleMovimientoInventario();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleMovimientoInventario)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleMovimientoInventario(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleMovimientoInventarioBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleMovimientoInventario) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleMovimientoInventario(conSplash);
					
						//this.actualizarParametrosGeneralDetalleMovimientoInventario();
						
						this.generarReporteProcesoAccionDetalleMovimientoInventariosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							/*
							this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
							*/
						} else {
							this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle Movimiento InventarioS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Movimiento Inventario", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleMovimientoInventario();
				
						this.actualizarParametrosGeneralDetalleMovimientoInventario();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detallemovimientoinventarioReturnGeneral=detallemovimientoinventarioLogic.procesarAccionDetalleMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios(),this.detallemovimientoinventarioParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleMovimientoInventarioReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleMovimientoInventario();
					
					DetalleMovimientoInventarioBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleMovimientoInventarioReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesDetalleMovimientoInventario.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxTiposAccionesFormularioDetalleMovimientoInventario.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleMovimientoInventario(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleMovimientoInventarioActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleMovimientoInventario();
			
			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		
			DetalleMovimientoInventario detallemovimientoinventario=new DetalleMovimientoInventario();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleMovimientoInventario(false,false);
			
			Reporte reporte=new Reporte();
			
			/*
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleMovimientoInventario.getSelectedItem();
			*/
			
			
			
			detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
			//this.sTipoAccion;
			
			if(detallemovimientoinventariosSeleccionados.size()==1) {
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventariosSeleccionados) {
					detallemovimientoinventario=detallemovimientoinventarioAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Novedad Seguimiento")) {
					jButtonNovedadSeguimientoActionPerformed(null,rowIndex,true,false,detallemovimientoinventario);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleMovimientoInventario();
			
      		//this.finishProcessDetalleMovimientoInventario(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleMovimientoInventarioReturnGeneral() throws Exception {
		if(this.detallemovimientoinventarioReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detallemovimientoinventarioReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detallemovimientoinventarioReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detallemovimientoinventarioReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detallemovimientoinventarioReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detallemovimientoinventarioReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleMovimientoInventario(false);
		}
		
		if(this.detallemovimientoinventarioReturnGeneral.getConRetornoLista() || this.detallemovimientoinventarioReturnGeneral.getConRetornoObjeto()) {
			if(this.detallemovimientoinventarioReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detallemovimientoinventarioReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallemovimientoinventarioLogic.setDetalleMovimientoInventario(this.detallemovimientoinventarioReturnGeneral.getDetalleMovimientoInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleMovimientoInventario(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleMovimientoInventario() throws Exception {
		
		
	}
	
	public ArrayList<DetalleMovimientoInventario> getDetalleMovimientoInventariosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleMovimientoInventario) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventarioLogic.getDetalleMovimientoInventarios()) {
					if(detallemovimientoinventarioAux.getIsSelected()) {
						detallemovimientoinventariosSeleccionados.add(detallemovimientoinventarioAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleMovimientoInventario detallemovimientoinventarioAux:this.detallemovimientoinventarios) {
					if(detallemovimientoinventarioAux.getIsSelected()) {
						detallemovimientoinventariosSeleccionados.add(detallemovimientoinventarioAux);				
					}
				}
			}
			
			if(detallemovimientoinventariosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detallemovimientoinventariosSeleccionados.addAll(this.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detallemovimientoinventariosSeleccionados.addAll(this.detallemovimientoinventarios);				
					}
				}
			}
		} else {
			detallemovimientoinventariosSeleccionados.add(this.detallemovimientoinventario);
		}
		
		return detallemovimientoinventariosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleMovimientoInventariosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleMovimientoInventariosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleMovimientoInventariosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleMovimientoInventariosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleMovimientoInventariosSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesDetalleMovimientoInventariosSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Movimiento Inventario",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleMovimientoInventarios("Todos",detallemovimientoinventariosSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleMovimientoInventarios("Todos",detallemovimientoinventariosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleMovimientoInventariosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleMovimientoInventarios("Todos",detallemovimientoinventariosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		
		
		/*
		this.abrirInicializarFrameReporteDinamicoDetalleMovimientoInventario();
		*/
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirFrameReporteDinamicoDetalleMovimientoInventario();
		*/
		
		//this.generarReporteDetalleMovimientoInventarios("Todos",detallemovimientoinventariosSeleccionados ,detallemovimientoinventarioImplementable,detallemovimientoinventarioImplementableHome);
	}
	
	public void mostrarImportacionDetalleMovimientoInventarios() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirInicializarFrameImportacionDetalleMovimientoInventario();
		
		this.abrirFrameImportacionDetalleMovimientoInventario();		
		*/
			
		//this.generarReporteDetalleMovimientoInventarios("Todos",detallemovimientoinventariosSeleccionados ,detallemovimientoinventarioImplementable,detallemovimientoinventarioImplementableHome);
	}
	
	public void importarDetalleMovimientoInventarios() throws Exception {		
	
	}
	
	public void exportarDetalleMovimientoInventariosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleMovimientoInventariosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleMovimientoInventariosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleMovimientoInventariosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Movimiento Inventario",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallemovimientoinventario."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleMovimientoInventario(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventariosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleMovimientoInventario(detallemovimientoinventarioAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detallemovimientoinventarioAux.setsDetalleGeneralEntityReporte(detallemovimientoinventarioAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleMovimientoInventario(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detallemovimientoinventario.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getmovimientoinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getestadodetallemovimientoinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getunidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getcantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getcosto_unitario().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getcosto_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getdisponible().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getiva_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getcosto_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getice_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getdescuento1().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getdescuento2().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getserie();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getlote();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getfecha_elaboracion_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getfecha_caducidad_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getnovedadproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getcuentacontablecosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.gettipodetallemovimientoinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getnumero_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallemovimientoinventario.getlote_cliente();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallemovimientoinventario.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleMovimientoInventarios");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleMovimientoInventario(row);				
				iRow++;
			}				
			
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventariosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleMovimientoInventario(detallemovimientoinventarioAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();		
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallemovimientoinventario.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detallemovimientoinventarios");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detallemovimientoinventario");
			//elementRoot.appendChild(element);
		
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventariosSeleccionados) {
				element = document.createElement("detallemovimientoinventario");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleMovimientoInventario(detallemovimientoinventarioAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleMovimientoInventario(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOUNITARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IVAVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_ICEVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO1);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCUENTO2);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getmovimientoinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getestadodetallemovimientoinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getunidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getcantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getcosto_unitario());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getcosto_total());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getdisponible());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getiva_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getcosto_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getice_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getdescuento1());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getdescuento2());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getserie());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getlote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getfecha_elaboracion_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getfecha_caducidad_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getnovedadproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getcuentacontablecosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.gettipodetallemovimientoinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getnumero_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(detallemovimientoinventario.getlote_cliente());				
	}
	
	public void setFilaDatosExportarXmlDetalleMovimientoInventario(DetalleMovimientoInventario detallemovimientoinventario,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleMovimientoInventarioConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detallemovimientoinventario.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleMovimientoInventarioConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detallemovimientoinventario.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementmovimientoinventario_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDMOVIMIENTOINVENTARIO);
		elementmovimientoinventario_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getmovimientoinventario_descripcion()));
		element.appendChild(elementmovimientoinventario_descripcion);

		Element elementempresa_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementestadodetallemovimientoinventario_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDESTADODETALLEMOVIMIENTOINVENTARIO);
		elementestadodetallemovimientoinventario_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getestadodetallemovimientoinventario_descripcion()));
		element.appendChild(elementestadodetallemovimientoinventario_descripcion);

		Element elementbodega_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementunidad_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDUNIDAD);
		elementunidad_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getunidad_descripcion()));
		element.appendChild(elementunidad_descripcion);

		Element elementdescripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detallemovimientoinventario.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementcantidad = document.createElement(DetalleMovimientoInventarioConstantesFunciones.CANTIDAD);
		elementcantidad.appendChild(document.createTextNode(detallemovimientoinventario.getcantidad().toString().trim()));
		element.appendChild(elementcantidad);

		Element elementdescuento = document.createElement(DetalleMovimientoInventarioConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(detallemovimientoinventario.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementcosto_unitario = document.createElement(DetalleMovimientoInventarioConstantesFunciones.COSTOUNITARIO);
		elementcosto_unitario.appendChild(document.createTextNode(detallemovimientoinventario.getcosto_unitario().toString().trim()));
		element.appendChild(elementcosto_unitario);

		Element elementcosto_total = document.createElement(DetalleMovimientoInventarioConstantesFunciones.COSTOTOTAL);
		elementcosto_total.appendChild(document.createTextNode(detallemovimientoinventario.getcosto_total().toString().trim()));
		element.appendChild(elementcosto_total);

		Element elementdisponible = document.createElement(DetalleMovimientoInventarioConstantesFunciones.DISPONIBLE);
		elementdisponible.appendChild(document.createTextNode(detallemovimientoinventario.getdisponible().toString().trim()));
		element.appendChild(elementdisponible);

		Element elementiva = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(detallemovimientoinventario.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementiva_valor = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IVAVALOR);
		elementiva_valor.appendChild(document.createTextNode(detallemovimientoinventario.getiva_valor().toString().trim()));
		element.appendChild(elementiva_valor);

		Element elementcosto_iva = document.createElement(DetalleMovimientoInventarioConstantesFunciones.COSTOIVA);
		elementcosto_iva.appendChild(document.createTextNode(detallemovimientoinventario.getcosto_iva().toString().trim()));
		element.appendChild(elementcosto_iva);

		Element elementice = document.createElement(DetalleMovimientoInventarioConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(detallemovimientoinventario.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementice_valor = document.createElement(DetalleMovimientoInventarioConstantesFunciones.ICEVALOR);
		elementice_valor.appendChild(document.createTextNode(detallemovimientoinventario.getice_valor().toString().trim()));
		element.appendChild(elementice_valor);

		Element elementdescuento1 = document.createElement(DetalleMovimientoInventarioConstantesFunciones.DESCUENTO1);
		elementdescuento1.appendChild(document.createTextNode(detallemovimientoinventario.getdescuento1().toString().trim()));
		element.appendChild(elementdescuento1);

		Element elementdescuento2 = document.createElement(DetalleMovimientoInventarioConstantesFunciones.DESCUENTO2);
		elementdescuento2.appendChild(document.createTextNode(detallemovimientoinventario.getdescuento2().toString().trim()));
		element.appendChild(elementdescuento2);

		Element elementserie = document.createElement(DetalleMovimientoInventarioConstantesFunciones.SERIE);
		elementserie.appendChild(document.createTextNode(detallemovimientoinventario.getserie().trim()));
		element.appendChild(elementserie);

		Element elementlote = document.createElement(DetalleMovimientoInventarioConstantesFunciones.LOTE);
		elementlote.appendChild(document.createTextNode(detallemovimientoinventario.getlote().trim()));
		element.appendChild(elementlote);

		Element elementfecha_elaboracion_lote = document.createElement(DetalleMovimientoInventarioConstantesFunciones.FECHAELABORACIONLOTE);
		elementfecha_elaboracion_lote.appendChild(document.createTextNode(detallemovimientoinventario.getfecha_elaboracion_lote().toString().trim()));
		element.appendChild(elementfecha_elaboracion_lote);

		Element elementfecha_caducidad_lote = document.createElement(DetalleMovimientoInventarioConstantesFunciones.FECHACADUCIDADLOTE);
		elementfecha_caducidad_lote.appendChild(document.createTextNode(detallemovimientoinventario.getfecha_caducidad_lote().toString().trim()));
		element.appendChild(elementfecha_caducidad_lote);

		Element elementnovedadproducto_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDNOVEDADPRODUCTO);
		elementnovedadproducto_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getnovedadproducto_descripcion()));
		element.appendChild(elementnovedadproducto_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementcuentacontablecosto_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDCUENTACONTABLECOSTO);
		elementcuentacontablecosto_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.getcuentacontablecosto_descripcion()));
		element.appendChild(elementcuentacontablecosto_descripcion);

		Element elementtipodetallemovimientoinventario_descripcion = document.createElement(DetalleMovimientoInventarioConstantesFunciones.IDTIPODETALLEMOVIMIENTOINVENTARIO);
		elementtipodetallemovimientoinventario_descripcion.appendChild(document.createTextNode(detallemovimientoinventario.gettipodetallemovimientoinventario_descripcion()));
		element.appendChild(elementtipodetallemovimientoinventario_descripcion);

		Element elementnumero_comprobante = document.createElement(DetalleMovimientoInventarioConstantesFunciones.NUMEROCOMPROBANTE);
		elementnumero_comprobante.appendChild(document.createTextNode(detallemovimientoinventario.getnumero_comprobante().trim()));
		element.appendChild(elementnumero_comprobante);

		Element elementlote_cliente = document.createElement(DetalleMovimientoInventarioConstantesFunciones.LOTECLIENTE);
		elementlote_cliente.appendChild(document.createTextNode(detallemovimientoinventario.getlote_cliente().trim()));
		element.appendChild(elementlote_cliente);
	}
	
	public void generarReporteGroupGenericoDetalleMovimientoInventariosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados=new ArrayList<DetalleMovimientoInventario>();
		
		detallemovimientoinventariosSeleccionados=this.getDetalleMovimientoInventariosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleMovimientoInventario(detallemovimientoinventariosSeleccionados);
		
		this.generarReporteDetalleMovimientoInventarios("Todos",detallemovimientoinventariosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleMovimientoInventario(ArrayList<DetalleMovimientoInventario> detallemovimientoinventariosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleMovimientoInventario detallemovimientoinventarioAux:detallemovimientoinventariosSeleccionados) {
				detallemovimientoinventarioAux.setsDetalleGeneralEntityReporte(detallemovimientoinventarioAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMOVIMIENTOINVENTARIO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getmovimientoinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDESTADODETALLEMOVIMIENTOINVENTARIO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getestadodetallemovimientoinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDUNIDAD)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getunidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_CANTIDAD)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getcantidad().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_DISPONIBLE)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getdisponible().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_COSTOIVA)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(detallemovimientoinventarioAux.getcosto_iva()));
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_SERIE)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getserie());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTE)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getlote());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detallemovimientoinventarioAux.getfecha_elaboracion_lote()));
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detallemovimientoinventarioAux.getfecha_caducidad_lote()));
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDNOVEDADPRODUCTO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getnovedadproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getcuentacontablecosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_IDTIPODETALLEMOVIMIENTOINVENTARIO)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.gettipodetallemovimientoinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getnumero_comprobante());
				}
				 else if(sTipoSeleccionar.equals(DetalleMovimientoInventarioConstantesFunciones.LABEL_LOTECLIENTE)) {
					existe=true;
					detallemovimientoinventarioAux.setsDescripcionGeneralEntityReporte1(detallemovimientoinventarioAux.getlote_cliente());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleMovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleMovimientoInventario(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaModificarDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarDetalleMovimientoInventario=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleMovimientoInventario=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleMovimientoInventarioJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=true;
		} else {
			this.actualizarEstadoPanelsDetalleMovimientoInventario(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleMovimientoInventario=false;
			//this.isVisibilidadCeldaVerFormDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaDuplicarDetalleMovimientoInventario=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			if(!detallemovimientoinventarioSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;												
			}
			
			this.jButtonCerrarDetalleMovimientoInventario.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleMovimientoInventario=false;
		}
		
		if(!this.permiteMantenimiento(this.detallemovimientoinventario)) {
			this.isVisibilidadCeldaActualizarDetalleMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarDetalleMovimientoInventario=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleMovimientoInventario() {
		this.isVisibilidadCeldaNuevoDetalleMovimientoInventario=false;
		this.isVisibilidadCeldaGuardarCambiosDetalleMovimientoInventario=false;
	}
	
	public void actualizarEstadoPanelsDetalleMovimientoInventario(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionDetalleMovimientoInventario.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosDetalleMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleMovimientoInventario!=null) {
				this.jPanelPaginacionDetalleMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionDetalleMovimientoInventario.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(false);			
			}
			*/
			
			
			if(this.jScrollPanelDatosDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosDetalleMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleMovimientoInventario!=null) {
				this.jPanelPaginacionDetalleMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionDetalleMovimientoInventario.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosDetalleMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleMovimientoInventario!=null) {
				this.jPanelPaginacionDetalleMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionDetalleMovimientoInventario.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosDetalleMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleMovimientoInventario!=null) {
				this.jPanelPaginacionDetalleMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionDetalleMovimientoInventario.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosDetalleMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleMovimientoInventario!=null) {
				this.jPanelPaginacionDetalleMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionDetalleMovimientoInventario.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosDetalleMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleMovimientoInventario!=null) {
				this.jPanelPaginacionDetalleMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionDetalleMovimientoInventario.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleMovimientoInventario!=null) {
				this.jScrollPanelDatosDetalleMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleMovimientoInventario!=null) {
				this.jPanelPaginacionDetalleMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
					this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(false);				
				}
				*/
			}
			
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setVisible(true);			
			}
			*/
			if(this.jPanelParametrosReportesDetalleMovimientoInventario!=null) {
				this.jPanelParametrosReportesDetalleMovimientoInventario.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaMovimientoInventario(Boolean isParaMovimientoInventario){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaMovimientoInventarioNegation=!isParaMovimientoInventario;

			this.isVisibilidadFK_IdBodega=isParaMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaMovimientoInventario;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdBodega=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdBodega=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdBodega=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdBodega=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEstadoDetalleMovimientoInventario(Boolean isParaEstadoDetalleMovimientoInventario){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoDetalleMovimientoInventarioNegation=!isParaEstadoDetalleMovimientoInventario;

			this.isVisibilidadFK_IdBodega=isParaEstadoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaEstadoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEstadoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaEstadoDetalleMovimientoInventario;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaEstadoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEstadoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaEstadoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaEstadoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaEstadoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaUnidad(Boolean isParaUnidad){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaUnidadNegation=!isParaUnidad;

			this.isVisibilidadFK_IdBodega=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaUnidad;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaNovedadProducto(Boolean isParaNovedadProducto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaNovedadProductoNegation=!isParaNovedadProducto;

			this.isVisibilidadFK_IdBodega=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaNovedadProducto;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCuentaContableCosto(Boolean isParaCuentaContableCosto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoNegation=!isParaCuentaContableCosto;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableCosto;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoDetalleMovimientoInventario(Boolean isParaTipoDetalleMovimientoInventario){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoDetalleMovimientoInventarioNegation=!isParaTipoDetalleMovimientoInventario;

			this.isVisibilidadFK_IdBodega=isParaTipoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdBodegaDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCentroCosto=isParaTipoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCentroCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaTipoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario=isParaTipoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdMovimientoInventario=isParaTipoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdNovedadProducto=isParaTipoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdNovedadProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdProducto=isParaTipoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdProductoDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdTipoDetalleMovimientoInventario=isParaTipoDetalleMovimientoInventario;
			if(!this.isVisibilidadFK_IdTipoDetalleMovimientoInventario) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);}

			this.isVisibilidadFK_IdUnidad=isParaTipoDetalleMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(jPanelFK_IdUnidadDetalleMovimientoInventario);}
		}
		*/
	}
	
	

	public String registrarSesionDetalleMovimientoInventarioParaNovedadSeguimientoes() throws Exception {
		Boolean isPaginaPopupNovedadSeguimiento=false;

		try {

			if(this.detallemovimientoinventarioSessionBean==null) {
				this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean==null) {
				this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean=new NovedadSeguimientoSessionBean();
			}

			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean.setsPathNavegacionActual(detallemovimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+NovedadSeguimientoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupNovedadSeguimiento=this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeNovedadSeguimiento(true);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeNovedadSeguimiento(DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleMovimientoInventario(true);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoSessionBean.setlidDetalleMovimientoInventarioActual(this.idDetalleMovimientoInventarioActual);

			detallemovimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleMovimientoInventario(true);
			detallemovimientoinventarioSessionBean.setlIdDetalleMovimientoInventarioActualForeignKey(this.idDetalleMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionDetalleMovimientoInventarioParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(detallemovimientoinventarioSessionBean==null) {
				detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(detallemovimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.detallemovimientoinventarioFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleMovimientoInventario(true);
			//productoSessionBean.setlidDetalleMovimientoInventarioActual(this.idDetalleMovimientoInventarioActual);

			detallemovimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleMovimientoInventario(true);
			detallemovimientoinventarioSessionBean.setlIdDetalleMovimientoInventarioActualForeignKey(this.idDetalleMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleMovimientoInventarioParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(detallemovimientoinventarioSessionBean==null) {
				detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(detallemovimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.detallemovimientoinventarioFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleMovimientoInventario(true);
			//centrocostoSessionBean.setlidDetalleMovimientoInventarioActual(this.idDetalleMovimientoInventarioActual);

			detallemovimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleMovimientoInventario(true);
			detallemovimientoinventarioSessionBean.setlIdDetalleMovimientoInventarioActualForeignKey(this.idDetalleMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleMovimientoInventarioParaBusquedaCuentaContableCostos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(detallemovimientoinventarioSessionBean==null) {
				detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(cuentacontablecostoSessionBean==null) {
				cuentacontablecostoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecostoSessionBean.setsPathNavegacionActual(detallemovimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecostoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecostoSessionBean.getisPaginaPopup();
			cuentacontablecostoSessionBean.setisPaginaPopup(false);
			cuentacontablecostoSessionBean.setEstaModoBusqueda(true);
			cuentacontablecostoSessionBean.setsFuncionBusquedaRapida("window.opener.detallemovimientoinventarioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo(TO_REPLACE);");
			cuentacontablecostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionDetalleMovimientoInventario(true);
			//cuentacontableSessionBean.setlidDetalleMovimientoInventarioActual(this.idDetalleMovimientoInventarioActual);

			detallemovimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleMovimientoInventario(true);
			detallemovimientoinventarioSessionBean.setlIdDetalleMovimientoInventarioActualForeignKey(this.idDetalleMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleMovimientoInventarioParaBusquedaTipoDetalleMovimientoInventarios() throws Exception {
		Boolean isPaginaPopupTipoDetalleMovimientoInventario=false;

		try {

			if(detallemovimientoinventarioSessionBean==null) {
				detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			if(tipodetallemovimientoinventarioSessionBean==null) {
				tipodetallemovimientoinventarioSessionBean=new TipoDetalleMovimientoInventarioSessionBean();
			}

			tipodetallemovimientoinventarioSessionBean.setsPathNavegacionActual(detallemovimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TipoDetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO);
			tipodetallemovimientoinventarioSessionBean.setisPermiteRecargarInformacion(false);
			tipodetallemovimientoinventarioSessionBean.setisPaginaPopup(true);
			isPaginaPopupTipoDetalleMovimientoInventario=tipodetallemovimientoinventarioSessionBean.getisPaginaPopup();
			tipodetallemovimientoinventarioSessionBean.setisPaginaPopup(false);
			tipodetallemovimientoinventarioSessionBean.setEstaModoBusqueda(true);
			tipodetallemovimientoinventarioSessionBean.setsFuncionBusquedaRapida("window.opener.detallemovimientoinventarioFuncionGeneral.setCombosCodigoDesdeBusquedaid_tipo_detalle_movimiento_inventario(TO_REPLACE);");
			tipodetallemovimientoinventarioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTipoDetalleMovimientoInventario(true);
			tipodetallemovimientoinventarioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTipoDetalleMovimientoInventario(DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			//tipodetallemovimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionDetalleMovimientoInventario(true);
			//tipodetallemovimientoinventarioSessionBean.setlidDetalleMovimientoInventarioActual(this.idDetalleMovimientoInventarioActual);

			detallemovimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleMovimientoInventario(true);
			detallemovimientoinventarioSessionBean.setlIdDetalleMovimientoInventarioActualForeignKey(this.idDetalleMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleMovimientoInventarioSessionBean detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
		
		if(this.detallemovimientoinventarioSessionBean==null) {
			this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
		}
		
		this.detallemovimientoinventarioSessionBean.setsUltimaBusquedaDetalleMovimientoInventario(this.getsAccionBusqueda());
		this.detallemovimientoinventarioSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detallemovimientoinventarioSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			detallemovimientoinventarioSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			detallemovimientoinventarioSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCosto")) {
			detallemovimientoinventarioSessionBean.setid_cuenta_contable_costo(this.getid_cuenta_contable_costoFK_IdCuentaContableCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detallemovimientoinventarioSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detallemovimientoinventarioSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleMovimientoInventario")) {
			detallemovimientoinventarioSessionBean.setid_estado_detalle_movimiento_inventario(this.getid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMovimientoInventario")) {
			detallemovimientoinventarioSessionBean.setid_movimiento_inventario(this.getid_movimiento_inventarioFK_IdMovimientoInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdNovedadProducto")) {
			detallemovimientoinventarioSessionBean.setid_novedad_producto(this.getid_novedad_productoFK_IdNovedadProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detallemovimientoinventarioSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			detallemovimientoinventarioSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detallemovimientoinventarioSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoDetalleMovimientoInventario")) {
			detallemovimientoinventarioSessionBean.setid_tipo_detalle_movimiento_inventario(this.getid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
			detallemovimientoinventarioSessionBean.setid_unidad(this.getid_unidadFK_IdUnidad());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleMovimientoInventarioSessionBean detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
		
		if(this.detallemovimientoinventarioSessionBean==null) {
			this.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
		}
		
		if(this.detallemovimientoinventarioSessionBean.getsUltimaBusquedaDetalleMovimientoInventario()!=null&&!this.detallemovimientoinventarioSessionBean.getsUltimaBusquedaDetalleMovimientoInventario().equals("")) {
			this.setsAccionBusqueda(detallemovimientoinventarioSessionBean.getsUltimaBusquedaDetalleMovimientoInventario());
			this.setiNumeroPaginacion(detallemovimientoinventarioSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detallemovimientoinventarioSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(detallemovimientoinventarioSessionBean.getid_bodega());
				detallemovimientoinventarioSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(detallemovimientoinventarioSessionBean.getid_centro_costo());
				detallemovimientoinventarioSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCosto")) {
				this.setid_cuenta_contable_costoFK_IdCuentaContableCosto(detallemovimientoinventarioSessionBean.getid_cuenta_contable_costo());
				detallemovimientoinventarioSessionBean.setid_cuenta_contable_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detallemovimientoinventarioSessionBean.getid_ejercicio());
				detallemovimientoinventarioSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detallemovimientoinventarioSessionBean.getid_empresa());
				detallemovimientoinventarioSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleMovimientoInventario")) {
				this.setid_estado_detalle_movimiento_inventarioFK_IdEstadoDetalleMovimientoInventario(detallemovimientoinventarioSessionBean.getid_estado_detalle_movimiento_inventario());
				detallemovimientoinventarioSessionBean.setid_estado_detalle_movimiento_inventario(1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMovimientoInventario")) {
				this.setid_movimiento_inventarioFK_IdMovimientoInventario(detallemovimientoinventarioSessionBean.getid_movimiento_inventario());
				detallemovimientoinventarioSessionBean.setid_movimiento_inventario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdNovedadProducto")) {
				this.setid_novedad_productoFK_IdNovedadProducto(detallemovimientoinventarioSessionBean.getid_novedad_producto());
				detallemovimientoinventarioSessionBean.setid_novedad_producto(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detallemovimientoinventarioSessionBean.getid_periodo());
				detallemovimientoinventarioSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(detallemovimientoinventarioSessionBean.getid_producto());
				detallemovimientoinventarioSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detallemovimientoinventarioSessionBean.getid_sucursal());
				detallemovimientoinventarioSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoDetalleMovimientoInventario")) {
				this.setid_tipo_detalle_movimiento_inventarioFK_IdTipoDetalleMovimientoInventario(detallemovimientoinventarioSessionBean.getid_tipo_detalle_movimiento_inventario());
				detallemovimientoinventarioSessionBean.setid_tipo_detalle_movimiento_inventario(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
				this.setid_unidadFK_IdUnidad(detallemovimientoinventarioSessionBean.getid_unidad());
				detallemovimientoinventarioSessionBean.setid_unidad(-1L);
			}
		}
		
		this.detallemovimientoinventarioSessionBean.setsUltimaBusquedaDetalleMovimientoInventario("");
		this.detallemovimientoinventarioSessionBean.setiNumeroPaginacion(DetalleMovimientoInventarioConstantesFunciones.INUMEROPAGINACION);
		this.detallemovimientoinventarioSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleMovimientoInventario() {
		this.updateBorderResaltarBusquedasFormularioDetalleMovimientoInventario();
		this.updateVisibilidadBusquedasFormularioDetalleMovimientoInventario();
		this.updateHabilitarBusquedasFormularioDetalleMovimientoInventario();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleMovimientoInventario() {					
	//BYDAN_BUSQUEDAS
	/*	
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponents().length>0) {
	

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdBodegaDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdBodegaDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdBodegaDetalleMovimientoInventario);
			}
		}

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdCentroCostoDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdCentroCostoDetalleMovimientoInventario);
			}
		}

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleMovimientoInventario);
			}
		}

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);
			}
		}

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdMovimientoInventarioDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdMovimientoInventarioDetalleMovimientoInventario);
			}
		}

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdNovedadProductoDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdNovedadProductoDetalleMovimientoInventario);
			}
		}

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdProductoDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdProductoDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdProductoDetalleMovimientoInventario);
			}
		}

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);
			}
		}

		if(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdUnidadDetalleMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdUnidadDetalleMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdUnidadDetalleMovimientoInventario);
			}
		}
	}	
	*/
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleMovimientoInventario() {
	//BYDAN_BUSQUEDAS
	/*
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdBodegaDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdBodegaDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdBodegaDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdCentroCostoDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdCentroCostoDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdCuentaContableCostoDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdCuentaContableCostoDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdMovimientoInventarioDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdMovimientoInventarioDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdNovedadProductoDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdNovedadProductoDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdProductoDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdProductoDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdProductoDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdUnidadDetalleMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdUnidadDetalleMovimientoInventario);
			if(!this.detallemovimientoinventarioConstantesFunciones.mostrarFK_IdUnidadDetalleMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.remove(index);
			}
	}	
	*/
	}
	
	public void updateHabilitarBusquedasFormularioDetalleMovimientoInventario() {
	/*
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdBodegaDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdBodegaDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdBodegaDetalleMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdCentroCostoDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdCentroCostoDetalleMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdCuentaContableCostoDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdCuentaContableCostoDetalleMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdMovimientoInventarioDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdMovimientoInventarioDetalleMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdNovedadProductoDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdNovedadProductoDetalleMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdProductoDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdProductoDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdProductoDetalleMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdUnidadDetalleMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarFK_IdUnidadDetalleMovimientoInventario);
				this.jTabbedPaneBusquedasDetalleMovimientoInventario.setEnabledAt(index,this.detallemovimientoinventarioConstantesFunciones.activarFK_IdUnidadDetalleMovimientoInventario);
			}
		}	
	*/
	}
	
	
	public void resaltarPanelBusquedaDetalleMovimientoInventario(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		/*
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdBodegaDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdBodegaDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdBodegaDetalleMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdCentroCostoDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdCentroCostoDetalleMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCosto")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdCuentaContableCostoDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoDetalleMovimientoInventario")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdEstadoDetalleMovimientoInventarioDetalleMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdMovimientoInventario")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdMovimientoInventarioDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdMovimientoInventarioDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdMovimientoInventarioDetalleMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdNovedadProducto")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdNovedadProductoDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdNovedadProductoDetalleMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdProductoDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdProductoDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdProductoDetalleMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoDetalleMovimientoInventario")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdTipoDetalleMovimientoInventarioDetalleMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdUnidad")) {
			index= this.jTabbedPaneBusquedasDetalleMovimientoInventario.indexOfComponent(this.jPanelFK_IdUnidadDetalleMovimientoInventario);

			this.jTabbedPaneBusquedasDetalleMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleMovimientoInventario.getComponent(index);

			this.detallemovimientoinventarioConstantesFunciones.setResaltarFK_IdUnidadDetalleMovimientoInventario(resaltar);

			jPanel.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarFK_IdUnidadDetalleMovimientoInventario);
			existe=true;
		}
		*/

		if(existe) {
			/*
			this.jTtoolBarDetalleMovimientoInventario.setBorder(resaltar);
			*/
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleMovimientoInventario() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleMovimientoInventario();
		this.updateVisibilidadResaltarControlesFormularioDetalleMovimientoInventario();
		this.updateHabilitarResaltarControlesFormularioDetalleMovimientoInventario();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleMovimientoInventario() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detallemovimientoinventarioConstantesFunciones.resaltaridDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltaridDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_movimiento_inventarioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_movimiento_inventarioDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_empresaDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_empresaDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_sucursalDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_sucursalDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_ejercicioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_ejercicioDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_periodoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_periodoDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_anioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_anioDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_mesDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_mesDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_bodegaDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_bodegaDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_productoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_productoDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_unidadDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_unidadDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltardescripcionDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextAreadescripcionDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltardescripcionDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarcantidadDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarcantidadDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltardescuentoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuentoDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltardescuentoDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_unitarioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_unitarioDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_totalDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_totalDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltardisponibleDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddisponibleDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltardisponibleDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarivaDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldivaDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarivaDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltariva_valorDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldiva_valorDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltariva_valorDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_ivaDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxcosto_ivaDetalleMovimientoInventario.setBorderPainted(true);this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxcosto_ivaDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarcosto_ivaDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltariceDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldiceDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltariceDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarice_valorDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldice_valorDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarice_valorDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltardescuento1DetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuento1DetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltardescuento1DetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltardescuento2DetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuento2DetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltardescuento2DetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarserieDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldserieDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarserieDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarloteDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldloteDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarloteDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarfecha_elaboracion_loteDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jDateChooserfecha_elaboracion_loteDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarfecha_elaboracion_loteDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarfecha_caducidad_loteDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jDateChooserfecha_caducidad_loteDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarfecha_caducidad_loteDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_novedad_productoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_novedad_productoDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_centro_costoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_centro_costoDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_cuenta_contable_costoDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_cuenta_contable_costoDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarnumero_comprobanteDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldnumero_comprobanteDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarnumero_comprobanteDetalleMovimientoInventario);}
		if(this.detallemovimientoinventarioConstantesFunciones.resaltarlote_clienteDetalleMovimientoInventario!=null && this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldlote_clienteDetalleMovimientoInventario.setBorder(this.detallemovimientoinventarioConstantesFunciones.resaltarlote_clienteDetalleMovimientoInventario);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleMovimientoInventario() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
	
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostraridDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelidDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostraridDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_movimiento_inventarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_movimiento_inventarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_movimiento_inventarioDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_empresaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_empresaDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_empresaDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_sucursalDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_sucursalDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_sucursalDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_ejercicioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_ejercicioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_ejercicioDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_periodoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_periodoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_periodoDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_anioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_anioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_anioDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_mesDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_mesDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_mesDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_bodegaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_bodegaDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_bodegaDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_productoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_productoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_productoDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_productoDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_unidadDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_unidadDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_unidadDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextAreadescripcionDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardescripcionDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPaneldescripcionDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardescripcionDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarcantidadDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelcantidadDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarcantidadDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuentoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardescuentoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPaneldescuentoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardescuentoDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarcosto_unitarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelcosto_unitarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarcosto_unitarioDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarcosto_totalDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelcosto_totalDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarcosto_totalDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddisponibleDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardisponibleDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPaneldisponibleDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardisponibleDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldivaDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarivaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelivaDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarivaDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldiva_valorDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrariva_valorDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPaneliva_valorDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrariva_valorDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxcosto_ivaDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarcosto_ivaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelcosto_ivaDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarcosto_ivaDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldiceDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrariceDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPaneliceDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrariceDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldice_valorDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarice_valorDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelice_valorDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarice_valorDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuento1DetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardescuento1DetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPaneldescuento1DetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardescuento1DetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuento2DetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardescuento2DetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPaneldescuento2DetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrardescuento2DetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldserieDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarserieDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelserieDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarserieDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldloteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarloteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelloteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarloteDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jDateChooserfecha_elaboracion_loteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarfecha_elaboracion_loteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelfecha_elaboracion_loteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarfecha_elaboracion_loteDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jDateChooserfecha_caducidad_loteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarfecha_caducidad_loteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelfecha_caducidad_loteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarfecha_caducidad_loteDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_novedad_productoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_novedad_productoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_novedad_productoDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_centro_costoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_centro_costoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_centro_costoDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_centro_costoDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_cuenta_contable_costoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_cuenta_contable_costoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_cuenta_contable_costoDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_cuenta_contable_costoDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldnumero_comprobanteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarnumero_comprobanteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanelnumero_comprobanteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarnumero_comprobanteDetalleMovimientoInventario);
		//this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldlote_clienteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarlote_clienteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jPanellote_clienteDetalleMovimientoInventario.setVisible(this.detallemovimientoinventarioConstantesFunciones.mostrarlote_clienteDetalleMovimientoInventario);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleMovimientoInventario() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleMovimientoInventario!=null) {
	
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jLabelidDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activaridDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_movimiento_inventarioDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_movimiento_inventarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_empresaDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_empresaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_sucursalDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_sucursalDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_ejercicioDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_ejercicioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_periodoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_periodoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_anioDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_anioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_mesDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_mesDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_estado_detalle_movimiento_inventarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_bodegaDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_bodegaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_productoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_productoDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_productoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_productoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_unidadDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_unidadDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextAreadescripcionDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activardescripcionDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcantidadDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarcantidadDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuentoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activardescuentoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_unitarioDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarcosto_unitarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldcosto_totalDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarcosto_totalDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddisponibleDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activardisponibleDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldivaDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarivaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldiva_valorDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activariva_valorDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jCheckBoxcosto_ivaDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarcosto_ivaDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldiceDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activariceDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldice_valorDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarice_valorDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuento1DetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activardescuento1DetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFielddescuento2DetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activardescuento2DetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldserieDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarserieDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldloteDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarloteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jDateChooserfecha_elaboracion_loteDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarfecha_elaboracion_loteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jDateChooserfecha_caducidad_loteDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarfecha_caducidad_loteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_novedad_productoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_novedad_productoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_centro_costoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_centro_costoDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_centro_costoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_centro_costoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_cuenta_contable_costoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_cuenta_contable_costoDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_cuenta_contable_costoDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_cuenta_contable_costoDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jComboBoxid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario);
			this.jInternalFrameDetalleFormDetalleMovimientoInventario.jButtonid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarid_tipo_detalle_movimiento_inventarioDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldnumero_comprobanteDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarnumero_comprobanteDetalleMovimientoInventario);
		this.jInternalFrameDetalleFormDetalleMovimientoInventario.jTextFieldlote_clienteDetalleMovimientoInventario.setEnabled(this.detallemovimientoinventarioConstantesFunciones.activarlote_clienteDetalleMovimientoInventario);
		}
	}
	
		
}