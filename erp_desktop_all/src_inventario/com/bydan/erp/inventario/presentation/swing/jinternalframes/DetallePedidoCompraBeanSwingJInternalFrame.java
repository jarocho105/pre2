/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.DetallePedidoCompraConstantesFunciones;
import com.bydan.erp.inventario.util.DetallePedidoCompraParameterReturnGeneral;
//import com.bydan.erp.inventario.util.DetallePedidoCompraParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.DetallePedidoCompraBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetallePedidoCompraBeanSwingJInternalFrame extends DetallePedidoCompraJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetallePedidoCompraBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetallePedidoCompra> detallepedidocompraValidator = new ClassValidator<DetallePedidoCompra>(DetallePedidoCompra.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetallePedidoCompra detallepedidocompra;	
	public DetallePedidoCompra detallepedidocompraAux;
	public DetallePedidoCompra detallepedidocompraAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetallePedidoCompra detallepedidocompraTotales;
	public Long idDetallePedidoCompraActual;
	public Long iIdNuevoDetallePedidoCompra=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboPedidoCompra="";

	public List<PedidoCompra> pedidocomprasForeignKey;

	public List<PedidoCompra> getpedidocomprasForeignKey() {
		return pedidocomprasForeignKey;
	}

	public void setpedidocomprasForeignKey(List<PedidoCompra> pedidocomprasForeignKey) {
		this.pedidocomprasForeignKey = pedidocomprasForeignKey;
	}

	//OBJETO FK ACTUAL
	public PedidoCompra pedidocompraForeignKey;

	public PedidoCompra getpedidocompraForeignKey() {
		return pedidocompraForeignKey;
	}

	public void setpedidocompraForeignKey(PedidoCompra pedidocompraForeignKey) {
		this.pedidocompraForeignKey = pedidocompraForeignKey;
	}

	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboUnidad="";

	public List<Unidad> unidadsForeignKey;

	public List<Unidad> getunidadsForeignKey() {
		return unidadsForeignKey;
	}

	public void setunidadsForeignKey(List<Unidad> unidadsForeignKey) {
		this.unidadsForeignKey = unidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Unidad unidadForeignKey;

	public Unidad getunidadForeignKey() {
		return unidadForeignKey;
	}

	public void setunidadForeignKey(Unidad unidadForeignKey) {
		this.unidadForeignKey = unidadForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetallePedidoCompra;
	public Boolean isPermisoNuevoDetallePedidoCompra;
	public Boolean isPermisoActualizarDetallePedidoCompra;
	public Boolean isPermisoActualizarOriginalDetallePedidoCompra;
	public Boolean isPermisoEliminarDetallePedidoCompra;
	public Boolean isPermisoGuardarCambiosDetallePedidoCompra;
	public Boolean isPermisoConsultaDetallePedidoCompra;
	public Boolean isPermisoBusquedaDetallePedidoCompra;
	public Boolean isPermisoReporteDetallePedidoCompra;
	public Boolean isPermisoPaginacionMedioDetallePedidoCompra;
	public Boolean isPermisoPaginacionAltoDetallePedidoCompra;
	public Boolean isPermisoPaginacionTodoDetallePedidoCompra;
	public Boolean isPermisoCopiarDetallePedidoCompra;
	public Boolean isPermisoVerFormDetallePedidoCompra;
	public Boolean isPermisoDuplicarDetallePedidoCompra;
	public Boolean isPermisoOrdenDetallePedidoCompra;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetallePedidoCompraParameterReturnGeneral detallepedidocompraReturnGeneral;
	public DetallePedidoCompraParameterReturnGeneral detallepedidocompraParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetallePedidoCompra=false;
	public Boolean esParaAccionDesdeFormularioDetallePedidoCompra=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetallePedidoCompraSessionBeanAdditional detallepedidocompraSessionBeanAdditional=null;
	
	public DetallePedidoCompraSessionBeanAdditional getDetallePedidoCompraSessionBeanAdditional() {
		return this.detallepedidocompraSessionBeanAdditional;
	}
	
	public void setDetallePedidoCompraSessionBeanAdditional(DetallePedidoCompraSessionBeanAdditional detallepedidocompraSessionBeanAdditional) {
		try {
			this.detallepedidocompraSessionBeanAdditional=detallepedidocompraSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetallePedidoCompraBeanSwingJInternalFrameAdditional detallepedidocompraBeanSwingJInternalFrameAdditional=null;
	//public class DetallePedidoCompraBeanSwingJInternalFrame
	
	public DetallePedidoCompraBeanSwingJInternalFrameAdditional getDetallePedidoCompraBeanSwingJInternalFrameAdditional() {
		return this.detallepedidocompraBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetallePedidoCompraBeanSwingJInternalFrameAdditional(DetallePedidoCompraBeanSwingJInternalFrameAdditional detallepedidocompraBeanSwingJInternalFrameAdditional) {
		try {
			this.detallepedidocompraBeanSwingJInternalFrameAdditional=detallepedidocompraBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetallePedidoCompraLogic detallepedidocompraLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetallePedidoCompra detallepedidocompraBean;
	public DetallePedidoCompraConstantesFunciones detallepedidocompraConstantesFunciones;
	//public DetallePedidoCompraParameterReturnGeneral detallepedidocompraReturnGeneral;
	
	//FK
	
	public PedidoCompraLogic pedidocompraLogic;
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public UnidadLogic unidadLogic;
	public CentroCostoLogic centrocostoLogic;
	
	//PARAMETROS
	
	
	//public List<DetallePedidoCompra> detallepedidocompras;	
	//public List<DetallePedidoCompra> detallepedidocomprasEliminados;
	//public List<DetallePedidoCompra> detallepedidocomprasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetallePedidoCompra=false;
	public Boolean isVisibilidadCeldaDuplicarDetallePedidoCompra=true;
	public Boolean isVisibilidadCeldaCopiarDetallePedidoCompra=true;
	public Boolean isVisibilidadCeldaVerFormDetallePedidoCompra=true;
	public Boolean isVisibilidadCeldaOrdenDetallePedidoCompra=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
	public Boolean isVisibilidadCeldaModificarDetallePedidoCompra=false;
	public Boolean isVisibilidadCeldaActualizarDetallePedidoCompra=false;
	public Boolean isVisibilidadCeldaEliminarDetallePedidoCompra=false;
	public Boolean isVisibilidadCeldaCancelarDetallePedidoCompra=false;
	public Boolean isVisibilidadCeldaGuardarDetallePedidoCompra=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdPedidoCompra=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdUnidad=false;
	
	public Long getiIdNuevoDetallePedidoCompra() {
		return this.iIdNuevoDetallePedidoCompra;
	}

	public void setiIdNuevoDetallePedidoCompra(Long iIdNuevoDetallePedidoCompra) {
		this.iIdNuevoDetallePedidoCompra = iIdNuevoDetallePedidoCompra;
	}
	
	public Long getidDetallePedidoCompraActual() {
		return this.idDetallePedidoCompraActual;
	}

	public void setidDetallePedidoCompraActual(Long idDetallePedidoCompraActual) {
		this.idDetallePedidoCompraActual = idDetallePedidoCompraActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetallePedidoCompra getdetallepedidocompra() {
		return this.detallepedidocompra;
	}

	public void setdetallepedidocompra(DetallePedidoCompra detallepedidocompra) {
		this.detallepedidocompra = detallepedidocompra;
	}
	
	public DetallePedidoCompra getdetallepedidocompraAux() {
		return this.detallepedidocompraAux;
	}

	public void setdetallepedidocompraAux(DetallePedidoCompra detallepedidocompraAux) {
		this.detallepedidocompraAux = detallepedidocompraAux;
	}				
	
	public DetallePedidoCompra getdetallepedidocompraAnterior() {
		return this.detallepedidocompraAnterior;
	}

	public void setdetallepedidocompraAnterior(DetallePedidoCompra detallepedidocompraAnterior) {
		this.detallepedidocompraAnterior = detallepedidocompraAnterior;
	}	
	
	public DetallePedidoCompra getdetallepedidocompraTotales() {
		return this.detallepedidocompraTotales;
	}

	public void setdetallepedidocompraTotales(DetallePedidoCompra detallepedidocompraTotales) {
		this.detallepedidocompraTotales = detallepedidocompraTotales;
	}	
	
	public DetallePedidoCompra getdetallepedidocompraBean() {
		return this.detallepedidocompraBean;
	}

	public void setdetallepedidocompraBean(DetallePedidoCompra detallepedidocompraBean) {
		this.detallepedidocompraBean = detallepedidocompraBean;
	}	
	
	public DetallePedidoCompraParameterReturnGeneral getdetallepedidocompraReturnGeneral() {
		return this.detallepedidocompraReturnGeneral;
	}

	public void setdetallepedidocompraReturnGeneral(DetallePedidoCompraParameterReturnGeneral detallepedidocompraReturnGeneral) {
		this.detallepedidocompraReturnGeneral = detallepedidocompraReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_pedido_compraFK_IdPedidoCompra=-1L;

	public Long getid_pedido_compraFK_IdPedidoCompra() {
		return this.id_pedido_compraFK_IdPedidoCompra;
	}

	public void setid_pedido_compraFK_IdPedidoCompra(Long id_pedido_compraFK_IdPedidoCompra) {
		this.id_pedido_compraFK_IdPedidoCompra = id_pedido_compraFK_IdPedidoCompra;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_unidadFK_IdUnidad=-1L;

	public Long getid_unidadFK_IdUnidad() {
		return this.id_unidadFK_IdUnidad;
	}

	public void setid_unidadFK_IdUnidad(Long id_unidadFK_IdUnidad) {
		this.id_unidadFK_IdUnidad = id_unidadFK_IdUnidad;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetallePedidoCompraLogic getDetallePedidoCompraLogic()	{		
		return detallepedidocompraLogic;
	}

	public void setDetallePedidoCompraLogic(DetallePedidoCompraLogic detallepedidocompraLogic) {
		this.detallepedidocompraLogic = detallepedidocompraLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetallePedidoCompra() {
		return isEsNuevoDetallePedidoCompra;
	}

	public void setIsEsNuevoDetallePedidoCompra(Boolean isEsNuevoDetallePedidoCompra) {
		this.isEsNuevoDetallePedidoCompra = isEsNuevoDetallePedidoCompra;
	}

	public Boolean getEsParaAccionDesdeFormularioDetallePedidoCompra() {
		return esParaAccionDesdeFormularioDetallePedidoCompra;
	}
	
	public void setEsParaAccionDesdeFormularioDetallePedidoCompra(Boolean esParaAccionDesdeFormularioDetallePedidoCompra) {
		this.esParaAccionDesdeFormularioDetallePedidoCompra = esParaAccionDesdeFormularioDetallePedidoCompra;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosPedidoComprasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.pedidocomprasForeignKey=new ArrayList<PedidoCompra>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PedidoCompraLogic pedidocompraLogic=new PedidoCompraLogic();

			pedidocompraLogic.getPedidoCompraDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionPedidoCompra()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidocompraLogic.getPedidoCompraDataAccess().setIsForForeingKeyData(true);

					pedidocompraLogic.getTodosPedidoComprasWithConnection(sFinalQuery,new Pagination());

					this.pedidocomprasForeignKey=pedidocompraLogic.getPedidoCompras();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPedidoCompra(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidocompraLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidPedidoCompraActual());
					this.pedidocomprasForeignKey.add(pedidocompraLogic.getPedidoCompra());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUnidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.unidadsForeignKey=new ArrayList<Unidad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UnidadLogic unidadLogic=new UnidadLogic();

			//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

					unidadLogic.getTodosUnidadsWithConnection(sFinalQuery,new Pagination());

					this.unidadsForeignKey=unidadLogic.getUnidads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUnidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					unidadLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidUnidadActual());
					this.unidadsForeignKey.add(unidadLogic.getUnidad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCosto centrocostoNulo = new CentroCosto();

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centrocostosForeignKey.add(0, centrocostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(detallepedidocompraSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualPedidoCompraForeignKey(Long idPedidoCompraSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			PedidoCompra  pedidocompraTemp=null;

			for(PedidoCompra pedidocompraAux:pedidocomprasForeignKey) {
				if(pedidocompraAux.getId()!=null && pedidocompraAux.getId().equals(idPedidoCompraSeleccionado)) {
					pedidocompraTemp=pedidocompraAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(pedidocompraTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setPedidoCompra(pedidocompraTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setSelectedItem(pedidocompraTemp);
					}
				} else {
					//jComboBoxid_pedido_compraDetallePedidoCompra.setSelectedItem(pedidocompraTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPedidoCompra") || sFormularioTipoBusqueda.equals("Todos")){
					if(pedidocompraTemp!=null && jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra!=null) {
						jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.setSelectedItem(pedidocompraTemp);
					} else {
						if(jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra!=null) {
							//jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.setSelectedItem(pedidocompraTemp);
							if(jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.getItemCount()>0) {
								jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPedidoCompraForeignKeyDescripcion(Long idPedidoCompraSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			PedidoCompra  pedidocompraTemp=null;

			for(PedidoCompra pedidocompraAux:pedidocomprasForeignKey) {
				if(pedidocompraAux.getId()!=null && pedidocompraAux.getId().equals(idPedidoCompraSeleccionado)) {
					pedidocompraTemp=pedidocompraAux;
					break;
				}
			}


			sDescripcion=PedidoCompraConstantesFunciones.getPedidoCompraDescripcion(pedidocompraTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPedidoCompraForeignKeyGenerico(Long idPedidoCompraSeleccionado,JComboBox jComboBoxid_pedido_compraDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			PedidoCompra  pedidocompraTemp=null;

			for(PedidoCompra pedidocompraAux:pedidocomprasForeignKey) {
				if(pedidocompraAux.getId()!=null && pedidocompraAux.getId().equals(idPedidoCompraSeleccionado)) {
					pedidocompraTemp=pedidocompraAux;
					break;
				}
			}

			if(pedidocompraTemp!=null) {
				jComboBoxid_pedido_compraDetallePedidoCompraGenerico.setSelectedItem(pedidocompraTemp);
			} else {
				if(jComboBoxid_pedido_compraDetallePedidoCompraGenerico!=null && jComboBoxid_pedido_compraDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_pedido_compraDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetallePedidoCompra.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetallePedidoCompraGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetallePedidoCompraGenerico!=null && jComboBoxid_empresaDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetallePedidoCompra.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetallePedidoCompraGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetallePedidoCompraGenerico!=null && jComboBoxid_sucursalDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetallePedidoCompra.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetallePedidoCompraGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetallePedidoCompraGenerico!=null && jComboBoxid_ejercicioDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetallePedidoCompra.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetallePedidoCompraGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetallePedidoCompraGenerico!=null && jComboBoxid_periodoDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetallePedidoCompra.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetallePedidoCompraGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetallePedidoCompraGenerico!=null && jComboBoxid_anioDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_anioDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetallePedidoCompra.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetallePedidoCompraGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetallePedidoCompraGenerico!=null && jComboBoxid_mesDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_mesDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaDetallePedidoCompra.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra!=null) {
						jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra!=null) {
							//jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaDetallePedidoCompraGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaDetallePedidoCompraGenerico!=null && jComboBoxid_bodegaDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_bodegaDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoDetallePedidoCompra.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoDetallePedidoCompra!=null) {
						jComboBoxid_productoFK_IdProductoDetallePedidoCompra.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoDetallePedidoCompra!=null) {
							//jComboBoxid_productoFK_IdProductoDetallePedidoCompra.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoDetallePedidoCompra.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoDetallePedidoCompra.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoDetallePedidoCompraGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoDetallePedidoCompraGenerico!=null && jComboBoxid_productoDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_productoDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUnidadForeignKey(Long idUnidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(unidadTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setUnidad(unidadTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setSelectedItem(unidadTemp);
					}
				} else {
					//jComboBoxid_unidadDetallePedidoCompra.setSelectedItem(unidadTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){
					if(unidadTemp!=null && jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra!=null) {
						jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.setSelectedItem(unidadTemp);
					} else {
						if(jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra!=null) {
							//jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.setSelectedItem(unidadTemp);
							if(jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.getItemCount()>0) {
								jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUnidadForeignKeyDescripcion(Long idUnidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}


			sDescripcion=UnidadConstantesFunciones.getUnidadDescripcion(unidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUnidadForeignKeyGenerico(Long idUnidadSeleccionado,JComboBox jComboBoxid_unidadDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(unidadTemp!=null) {
				jComboBoxid_unidadDetallePedidoCompraGenerico.setSelectedItem(unidadTemp);
			} else {
				if(jComboBoxid_unidadDetallePedidoCompraGenerico!=null && jComboBoxid_unidadDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_unidadDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.detallepedidocompra!=null) {
						this.detallepedidocompra.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoDetallePedidoCompra.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoDetallePedidoCompraGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoDetallePedidoCompraGenerico!=null && jComboBoxid_centro_costoDetallePedidoCompraGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoDetallePedidoCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPedidoCompraForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_pedido_compraDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			PedidoCompra  pedidocompraAux=new PedidoCompra();

			if(jComboBoxid_pedido_compraDetallePedidoCompraGenerico==null) {
				pedidocompraAux=(PedidoCompra)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.getSelectedItem();
			} else {
				pedidocompraAux=(PedidoCompra)jComboBoxid_pedido_compraDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(pedidocompraAux!=null && pedidocompraAux.getId()!=null) {
				detallepedidocompra.setid_pedido_compra(pedidocompraAux.getId());
				detallepedidocompra.setpedidocompra_descripcion(DetallePedidoCompraConstantesFunciones.getPedidoCompraDescripcion(pedidocompraAux));
				detallepedidocompra.setPedidoCompra(pedidocompraAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_empresaDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetallePedidoCompraGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detallepedidocompra.setid_empresa(empresaAux.getId());
				detallepedidocompra.setempresa_descripcion(DetallePedidoCompraConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detallepedidocompra.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_sucursalDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetallePedidoCompraGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detallepedidocompra.setid_sucursal(sucursalAux.getId());
				detallepedidocompra.setsucursal_descripcion(DetallePedidoCompraConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detallepedidocompra.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_ejercicioDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetallePedidoCompraGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detallepedidocompra.setid_ejercicio(ejercicioAux.getId());
				detallepedidocompra.setejercicio_descripcion(DetallePedidoCompraConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detallepedidocompra.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_periodoDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetallePedidoCompraGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detallepedidocompra.setid_periodo(periodoAux.getId());
				detallepedidocompra.setperiodo_descripcion(DetallePedidoCompraConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detallepedidocompra.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_anioDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetallePedidoCompraGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detallepedidocompra.setid_anio(anioAux.getId());
				detallepedidocompra.setanio_descripcion(DetallePedidoCompraConstantesFunciones.getAnioDescripcion(anioAux));
				detallepedidocompra.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_mesDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetallePedidoCompraGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detallepedidocompra.setid_mes(mesAux.getId());
				detallepedidocompra.setmes_descripcion(DetallePedidoCompraConstantesFunciones.getMesDescripcion(mesAux));
				detallepedidocompra.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_bodegaDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaDetallePedidoCompraGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detallepedidocompra.setid_bodega(bodegaAux.getId());
				detallepedidocompra.setbodega_descripcion(DetallePedidoCompraConstantesFunciones.getBodegaDescripcion(bodegaAux));
				detallepedidocompra.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_productoDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoDetallePedidoCompraGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				detallepedidocompra.setid_producto(productoAux.getId());
				detallepedidocompra.setproducto_descripcion(DetallePedidoCompraConstantesFunciones.getProductoDescripcion(productoAux));
				detallepedidocompra.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUnidadForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_unidadDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			Unidad  unidadAux=new Unidad();

			if(jComboBoxid_unidadDetallePedidoCompraGenerico==null) {
				unidadAux=(Unidad)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.getSelectedItem();
			} else {
				unidadAux=(Unidad)jComboBoxid_unidadDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(unidadAux!=null && unidadAux.getId()!=null) {
				detallepedidocompra.setid_unidad(unidadAux.getId());
				detallepedidocompra.setunidad_descripcion(DetallePedidoCompraConstantesFunciones.getUnidadDescripcion(unidadAux));
				detallepedidocompra.setUnidad(unidadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(DetallePedidoCompra detallepedidocompra,JComboBox jComboBoxid_centro_costoDetallePedidoCompraGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoDetallePedidoCompraGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoDetallePedidoCompraGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				detallepedidocompra.setid_centro_costo(centrocostoAux.getId());
				detallepedidocompra.setcentrocosto_descripcion(DetallePedidoCompraConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				detallepedidocompra.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePedidoComprasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPedidoCompra=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.removeAllItems();

							for(PedidoCompra pedidocompra:this.pedidocomprasForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.addItem(pedidocompra);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPedidoCompra") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.removeAllItems();

							for(PedidoCompra pedidocompra:this.pedidocomprasForeignKey) {
								this.jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.addItem(pedidocompra);
							}
						}

						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.addItem(bodega);
							}
						}

						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.addItem(producto);
							}
						}

						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUnidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUnidad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.addItem(unidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.addItem(unidad);
							}
						}

						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { 
					}

					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.addItem(centrocosto);
							}
						}

						if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFramePedidoCompraForeignKey(PedidoCompra pedidocompra,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setSelectedItem(pedidocompra);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.setSelectedItem(pedidocompra);
						} else {
							this.jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUnidadForeignKey(Unidad unidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setSelectedItem(unidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.setSelectedItem(unidad);
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetallePedidoCompra() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetallePedidoCompraConstantesFunciones.refrescarForeignKeysDescripcionesDetallePedidoCompra(this.detallepedidocompraLogic.getDetallePedidoCompras());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetallePedidoCompraConstantesFunciones.refrescarForeignKeysDescripcionesDetallePedidoCompra(this.detallepedidocompras);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(PedidoCompra.class));
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(Unidad.class));
		classes.add(new Classe(CentroCosto.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detallepedidocompraLogic.setDetallePedidoCompras(this.detallepedidocompras);
			detallepedidocompraLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetallePedidoCompraParameterReturnGeneral getDetallePedidoCompraParameterGeneral() {
		return this.detallepedidocompraParameterGeneral;
	}
	
	public void setDetallePedidoCompraParameterGeneral(DetallePedidoCompraParameterReturnGeneral detallepedidocompraParameterGeneral) {
		this.detallepedidocompraParameterGeneral = detallepedidocompraParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetallePedidoCompra() {
		return isPermisoTodoDetallePedidoCompra;
	}

	public void setIsPermisoTodoDetallePedidoCompra(Boolean isPermisoTodoDetallePedidoCompra) {
		this.isPermisoTodoDetallePedidoCompra = isPermisoTodoDetallePedidoCompra;
	}

	public Boolean getIsPermisoNuevoDetallePedidoCompra() {
		return isPermisoNuevoDetallePedidoCompra;
	}

	public void setIsPermisoNuevoDetallePedidoCompra(Boolean isPermisoNuevoDetallePedidoCompra) {
		this.isPermisoNuevoDetallePedidoCompra = isPermisoNuevoDetallePedidoCompra;
	}

	public Boolean getIsPermisoActualizarDetallePedidoCompra() {
		return isPermisoActualizarDetallePedidoCompra;
	}

	public void setIsPermisoActualizarDetallePedidoCompra(Boolean isPermisoActualizarDetallePedidoCompra) {
		this.isPermisoActualizarDetallePedidoCompra = isPermisoActualizarDetallePedidoCompra;
	}

	public Boolean getIsPermisoEliminarDetallePedidoCompra() {
		return isPermisoEliminarDetallePedidoCompra;
	}

	public void setIsPermisoEliminarDetallePedidoCompra(Boolean isPermisoEliminarDetallePedidoCompra) {
		this.isPermisoEliminarDetallePedidoCompra = isPermisoEliminarDetallePedidoCompra;
	}

	public Boolean getIsPermisoGuardarCambiosDetallePedidoCompra() {
		return isPermisoGuardarCambiosDetallePedidoCompra;
	}

	public void setIsPermisoGuardarCambiosDetallePedidoCompra(Boolean isPermisoGuardarCambiosDetallePedidoCompra) {
		this.isPermisoGuardarCambiosDetallePedidoCompra = isPermisoGuardarCambiosDetallePedidoCompra;
	}
	
	public Boolean getIsPermisoConsultaDetallePedidoCompra() {
		return isPermisoConsultaDetallePedidoCompra;
	}

	public void setIsPermisoConsultaDetallePedidoCompra(Boolean isPermisoConsultaDetallePedidoCompra) {
		this.isPermisoConsultaDetallePedidoCompra = isPermisoConsultaDetallePedidoCompra;
	}

	public Boolean getIsPermisoBusquedaDetallePedidoCompra() {
		return isPermisoBusquedaDetallePedidoCompra;
	}

	public void setIsPermisoBusquedaDetallePedidoCompra(Boolean isPermisoBusquedaDetallePedidoCompra) {
		this.isPermisoBusquedaDetallePedidoCompra = isPermisoBusquedaDetallePedidoCompra;
	}

	public Boolean getIsPermisoReporteDetallePedidoCompra() {
		return isPermisoReporteDetallePedidoCompra;
	}

	public void setIsPermisoReporteDetallePedidoCompra(Boolean isPermisoReporteDetallePedidoCompra) {
		this.isPermisoReporteDetallePedidoCompra = isPermisoReporteDetallePedidoCompra;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetallePedidoCompra() {
		return isPermisoPaginacionMedioDetallePedidoCompra;
	}

	public void setIsPermisoPaginacionMedioDetallePedidoCompra(Boolean isPermisoPaginacionMedioDetallePedidoCompra) {
		this.isPermisoPaginacionMedioDetallePedidoCompra = isPermisoPaginacionMedioDetallePedidoCompra;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetallePedidoCompra() {
		return isPermisoPaginacionTodoDetallePedidoCompra;
	}

	public void setIsPermisoPaginacionTodoDetallePedidoCompra(Boolean isPermisoPaginacionTodoDetallePedidoCompra) {
		this.isPermisoPaginacionTodoDetallePedidoCompra = isPermisoPaginacionTodoDetallePedidoCompra;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetallePedidoCompra() {
		return isPermisoPaginacionAltoDetallePedidoCompra;
	}

	public void setIsPermisoPaginacionAltoDetallePedidoCompra(Boolean isPermisoPaginacionAltoDetallePedidoCompra) {
		this.isPermisoPaginacionAltoDetallePedidoCompra = isPermisoPaginacionAltoDetallePedidoCompra;
	}
	
	public Boolean getIsPermisoCopiarDetallePedidoCompra() {
		return isPermisoCopiarDetallePedidoCompra;
	}

	public void setIsPermisoCopiarDetallePedidoCompra(Boolean isPermisoCopiarDetallePedidoCompra) {
		this.isPermisoCopiarDetallePedidoCompra = isPermisoCopiarDetallePedidoCompra;
	}
	
	public Boolean getIsPermisoVerFormDetallePedidoCompra() {
		return isPermisoVerFormDetallePedidoCompra;
	}

	public void setIsPermisoVerFormDetallePedidoCompra(Boolean isPermisoVerFormDetallePedidoCompra) {
		this.isPermisoVerFormDetallePedidoCompra = isPermisoVerFormDetallePedidoCompra;
	}
	
	public Boolean getIsPermisoDuplicarDetallePedidoCompra() {
		return isPermisoDuplicarDetallePedidoCompra;
	}

	public void setIsPermisoDuplicarDetallePedidoCompra(Boolean isPermisoDuplicarDetallePedidoCompra) {
		this.isPermisoDuplicarDetallePedidoCompra = isPermisoDuplicarDetallePedidoCompra;
	}
	
	public Boolean getIsPermisoOrdenDetallePedidoCompra() {
		return isPermisoOrdenDetallePedidoCompra;
	}

	public void setIsPermisoOrdenDetallePedidoCompra(Boolean isPermisoOrdenDetallePedidoCompra) {
		this.isPermisoOrdenDetallePedidoCompra = isPermisoOrdenDetallePedidoCompra;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetallePedidoCompra() {
		return isVisibilidadCeldaNuevoDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaNuevoDetallePedidoCompra(Boolean isVisibilidadCeldaNuevoDetallePedidoCompra) {
		this.isVisibilidadCeldaNuevoDetallePedidoCompra = isVisibilidadCeldaNuevoDetallePedidoCompra;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetallePedidoCompra() {
		return isVisibilidadCeldaDuplicarDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaDuplicarDetallePedidoCompra(Boolean isVisibilidadCeldaDuplicarDetallePedidoCompra) {
		this.isVisibilidadCeldaDuplicarDetallePedidoCompra = isVisibilidadCeldaDuplicarDetallePedidoCompra;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetallePedidoCompra() {
		return isVisibilidadCeldaCopiarDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaCopiarDetallePedidoCompra(Boolean isVisibilidadCeldaCopiarDetallePedidoCompra) {
		this.isVisibilidadCeldaCopiarDetallePedidoCompra = isVisibilidadCeldaCopiarDetallePedidoCompra;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetallePedidoCompra() {
		return isVisibilidadCeldaVerFormDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaVerFormDetallePedidoCompra(Boolean isVisibilidadCeldaVerFormDetallePedidoCompra) {
		this.isVisibilidadCeldaVerFormDetallePedidoCompra = isVisibilidadCeldaVerFormDetallePedidoCompra;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetallePedidoCompra() {
		return isVisibilidadCeldaOrdenDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaOrdenDetallePedidoCompra(Boolean isVisibilidadCeldaOrdenDetallePedidoCompra) {
		this.isVisibilidadCeldaOrdenDetallePedidoCompra = isVisibilidadCeldaOrdenDetallePedidoCompra;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetallePedidoCompra() {
		return isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetallePedidoCompra(Boolean isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra) {
		this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra = isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetallePedidoCompra() {
		return isVisibilidadCeldaModificarDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaModificarDetallePedidoCompra(Boolean isVisibilidadCeldaModificarDetallePedidoCompra) {
		this.isVisibilidadCeldaModificarDetallePedidoCompra = isVisibilidadCeldaModificarDetallePedidoCompra;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetallePedidoCompra() {
		return isVisibilidadCeldaActualizarDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaActualizarDetallePedidoCompra(Boolean isVisibilidadCeldaActualizarDetallePedidoCompra) {
		this.isVisibilidadCeldaActualizarDetallePedidoCompra = isVisibilidadCeldaActualizarDetallePedidoCompra;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetallePedidoCompra() {
		return isVisibilidadCeldaEliminarDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaEliminarDetallePedidoCompra(Boolean isVisibilidadCeldaEliminarDetallePedidoCompra) {
		this.isVisibilidadCeldaEliminarDetallePedidoCompra = isVisibilidadCeldaEliminarDetallePedidoCompra;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetallePedidoCompra() {
		return isVisibilidadCeldaCancelarDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaCancelarDetallePedidoCompra(Boolean isVisibilidadCeldaCancelarDetallePedidoCompra) {
		this.isVisibilidadCeldaCancelarDetallePedidoCompra = isVisibilidadCeldaCancelarDetallePedidoCompra;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetallePedidoCompra() {
		return isVisibilidadCeldaGuardarDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaGuardarDetallePedidoCompra(Boolean isVisibilidadCeldaGuardarDetallePedidoCompra) {
		this.isVisibilidadCeldaGuardarDetallePedidoCompra = isVisibilidadCeldaGuardarDetallePedidoCompra;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetallePedidoCompra() {
		return isVisibilidadCeldaGuardarCambiosDetallePedidoCompra;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetallePedidoCompra(Boolean isVisibilidadCeldaGuardarCambiosDetallePedidoCompra) {
		this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra = isVisibilidadCeldaGuardarCambiosDetallePedidoCompra;
	}
		
	public DetallePedidoCompraSessionBean getdetallepedidocompraSessionBean() {
		return this.detallepedidocompraSessionBean;
	}
	
	public void setdetallepedidocompraSessionBean(DetallePedidoCompraSessionBean detallepedidocompraSessionBean) {
		this.detallepedidocompraSessionBean=detallepedidocompraSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdPedidoCompra() {
		return this.isVisibilidadFK_IdPedidoCompra;
	}

	public void setisVisibilidadFK_IdPedidoCompra(Boolean isVisibilidadFK_IdPedidoCompra) {
		this.isVisibilidadFK_IdPedidoCompra=isVisibilidadFK_IdPedidoCompra;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdUnidad() {
		return this.isVisibilidadFK_IdUnidad;
	}

	public void setisVisibilidadFK_IdUnidad(Boolean isVisibilidadFK_IdUnidad) {
		this.isVisibilidadFK_IdUnidad=isVisibilidadFK_IdUnidad;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(DetallePedidoCompra detallepedidocompra)throws Exception {
		try {
			
				this.setActualParaGuardarPedidoCompraForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarEmpresaForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarSucursalForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarEjercicioForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarPeriodoForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarAnioForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarMesForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarBodegaForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarProductoForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarUnidadForeignKey(detallepedidocompra,null);
				this.setActualParaGuardarCentroCostoForeignKey(detallepedidocompra,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(DetallePedidoCompra detallepedidocompra,DetallePedidoCompra detallepedidocompraAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetallePedidoCompra(detallepedidocompra);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detallepedidocompraAux.setId(detallepedidocompra.getId());
		detallepedidocompraAux.setVersionRow(detallepedidocompra.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetallePedidoCompra();
		
			int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detallepedidocompraValidator.getInvalidValues(this.detallepedidocompra);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detallepedidocompraLogic.setDatosCliente(datosCliente);
			detallepedidocompraLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detallepedidocompraAux=new  DetallePedidoCompra();
				
				detallepedidocompraAux.setIsNew(true);
				detallepedidocompraAux.setIsChanged(true);
				
				detallepedidocompraAux.setDetallePedidoCompraOriginal(this.detallepedidocompra);
				
				detallepedidocompraAux.setId(this.detallepedidocompra.getId());	
				detallepedidocompraAux.setVersionRow(this.detallepedidocompra.getVersionRow());	
				detallepedidocompraAux.setid_pedido_compra(this.detallepedidocompra.getid_pedido_compra());	
				detallepedidocompraAux.setid_empresa(this.detallepedidocompra.getid_empresa());	
				detallepedidocompraAux.setid_sucursal(this.detallepedidocompra.getid_sucursal());	
				detallepedidocompraAux.setid_ejercicio(this.detallepedidocompra.getid_ejercicio());	
				detallepedidocompraAux.setid_periodo(this.detallepedidocompra.getid_periodo());	
				detallepedidocompraAux.setid_anio(this.detallepedidocompra.getid_anio());	
				detallepedidocompraAux.setid_mes(this.detallepedidocompra.getid_mes());	
				detallepedidocompraAux.setid_bodega(this.detallepedidocompra.getid_bodega());	
				detallepedidocompraAux.setid_producto(this.detallepedidocompra.getid_producto());	
				detallepedidocompraAux.setid_unidad(this.detallepedidocompra.getid_unidad());	
				
				if(this.detallepedidocompra.getid_centro_costo()!=null && this.detallepedidocompra.getid_centro_costo()>0L) {
					detallepedidocompraAux.setid_centro_costo(this.detallepedidocompra.getid_centro_costo());
				} else {
					detallepedidocompraAux.setid_centro_costo(null);
				}	
				detallepedidocompraAux.setcantidad_pedido(this.detallepedidocompra.getcantidad_pedido());	
				detallepedidocompraAux.setcosto_unitario(this.detallepedidocompra.getcosto_unitario());	
				detallepedidocompraAux.setcosto_total(this.detallepedidocompra.getcosto_total());	
				detallepedidocompraAux.setdescripcion(this.detallepedidocompra.getdescripcion());	
				detallepedidocompraAux.setcantidad_entregada(this.detallepedidocompra.getcantidad_entregada());	
				detallepedidocompraAux.setcantidad_pendiente(this.detallepedidocompra.getcantidad_pendiente());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallepedidocompraSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detallepedidocompraAux,detallepedidocompraLogic.getDetallePedidoCompras());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallepedidocompraAux,detallepedidocompras);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallepedidocompraSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.saveDetallePedidoCompras();//WithConnection
						//detallepedidocompraLogic.getSetVersionRowDetallePedidoCompras();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallepedidocompra,detallepedidocompraAux);
					
					this.refrescarForeignKeysDescripcionesDetallePedidoCompra();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallepedidocompraLogic.saveDetallePedidoCompraRelaciones(detallepedidocompraAux);//WithConnection
								//detallepedidocompraLogic.getSetVersionRowDetallePedidoCompras();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallepedidocompra,detallepedidocompraAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallepedidocompraSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallepedidocompraAux,detallepedidocompraLogic.getDetallePedidoCompras());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallepedidocompraAux,detallepedidocompras);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallepedidocompra,detallepedidocompraAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detallepedidocompraAux=new  DetallePedidoCompra();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado() 
					|| (this.detallepedidocompraSessionBean.getEsGuardarRelacionado() && this.detallepedidocompra.getId()>=0)) {
						
					detallepedidocompraAux.setIsNew(false);
				}
				
				detallepedidocompraAux.setIsDeleted(false);
			
				detallepedidocompraAux.setId(this.detallepedidocompra.getId());	
				detallepedidocompraAux.setVersionRow(this.detallepedidocompra.getVersionRow());	
				detallepedidocompraAux.setid_pedido_compra(this.detallepedidocompra.getid_pedido_compra());	
				detallepedidocompraAux.setid_empresa(this.detallepedidocompra.getid_empresa());	
				detallepedidocompraAux.setid_sucursal(this.detallepedidocompra.getid_sucursal());	
				detallepedidocompraAux.setid_ejercicio(this.detallepedidocompra.getid_ejercicio());	
				detallepedidocompraAux.setid_periodo(this.detallepedidocompra.getid_periodo());	
				detallepedidocompraAux.setid_anio(this.detallepedidocompra.getid_anio());	
				detallepedidocompraAux.setid_mes(this.detallepedidocompra.getid_mes());	
				detallepedidocompraAux.setid_bodega(this.detallepedidocompra.getid_bodega());	
				detallepedidocompraAux.setid_producto(this.detallepedidocompra.getid_producto());	
				detallepedidocompraAux.setid_unidad(this.detallepedidocompra.getid_unidad());	
				
				if(this.detallepedidocompra.getid_centro_costo()!=null && this.detallepedidocompra.getid_centro_costo()>0L) {
					detallepedidocompraAux.setid_centro_costo(this.detallepedidocompra.getid_centro_costo());
				} else {
					detallepedidocompraAux.setid_centro_costo(null);
				}	
				detallepedidocompraAux.setcantidad_pedido(this.detallepedidocompra.getcantidad_pedido());	
				detallepedidocompraAux.setcosto_unitario(this.detallepedidocompra.getcosto_unitario());	
				detallepedidocompraAux.setcosto_total(this.detallepedidocompra.getcosto_total());	
				detallepedidocompraAux.setdescripcion(this.detallepedidocompra.getdescripcion());	
				detallepedidocompraAux.setcantidad_entregada(this.detallepedidocompra.getcantidad_entregada());	
				detallepedidocompraAux.setcantidad_pendiente(this.detallepedidocompra.getcantidad_pendiente());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallepedidocompraAux,detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallepedidocompraAux,detallepedidocompras);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallepedidocompraSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.saveDetallePedidoCompras();//WithConnection
						//detallepedidocompraLogic.getSetVersionRowDetallePedidoCompras();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallepedidocompra,detallepedidocompraAux);
					
					this.refrescarForeignKeysDescripcionesDetallePedidoCompra();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallepedidocompraLogic.saveDetallePedidoCompraRelaciones(detallepedidocompraAux);//WithConnection
								//detallepedidocompraLogic.getSetVersionRowDetallePedidoCompras();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallepedidocompra,detallepedidocompraAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallepedidocompraSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallepedidocompraAux,detallepedidocompraLogic.getDetallePedidoCompras());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallepedidocompraAux,detallepedidocompras);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallepedidocompra,detallepedidocompraAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detallepedidocompraAux=new  DetallePedidoCompra();
				
				detallepedidocompraAux.setIsNew(false);
				detallepedidocompraAux.setIsChanged(false);
				
				detallepedidocompraAux.setIsDeleted(true);
				
				detallepedidocompraAux.setId(this.detallepedidocompra.getId());	
				detallepedidocompraAux.setVersionRow(this.detallepedidocompra.getVersionRow());	
				detallepedidocompraAux.setid_pedido_compra(this.detallepedidocompra.getid_pedido_compra());	
				detallepedidocompraAux.setid_empresa(this.detallepedidocompra.getid_empresa());	
				detallepedidocompraAux.setid_sucursal(this.detallepedidocompra.getid_sucursal());	
				detallepedidocompraAux.setid_ejercicio(this.detallepedidocompra.getid_ejercicio());	
				detallepedidocompraAux.setid_periodo(this.detallepedidocompra.getid_periodo());	
				detallepedidocompraAux.setid_anio(this.detallepedidocompra.getid_anio());	
				detallepedidocompraAux.setid_mes(this.detallepedidocompra.getid_mes());	
				detallepedidocompraAux.setid_bodega(this.detallepedidocompra.getid_bodega());	
				detallepedidocompraAux.setid_producto(this.detallepedidocompra.getid_producto());	
				detallepedidocompraAux.setid_unidad(this.detallepedidocompra.getid_unidad());	
				
				if(this.detallepedidocompra.getid_centro_costo()!=null && this.detallepedidocompra.getid_centro_costo()>0L) {
					detallepedidocompraAux.setid_centro_costo(this.detallepedidocompra.getid_centro_costo());
				} else {
					detallepedidocompraAux.setid_centro_costo(null);
				}	
				detallepedidocompraAux.setcantidad_pedido(this.detallepedidocompra.getcantidad_pedido());	
				detallepedidocompraAux.setcosto_unitario(this.detallepedidocompra.getcosto_unitario());	
				detallepedidocompraAux.setcosto_total(this.detallepedidocompra.getcosto_total());	
				detallepedidocompraAux.setdescripcion(this.detallepedidocompra.getdescripcion());	
				detallepedidocompraAux.setcantidad_entregada(this.detallepedidocompra.getcantidad_entregada());	
				detallepedidocompraAux.setcantidad_pendiente(this.detallepedidocompra.getcantidad_pendiente());	
				
				if(this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detallepedidocompraAux.getId()>=0) {	
						this.detallepedidocomprasEliminados.add(detallepedidocompraAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detallepedidocompraAux,detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallepedidocompraAux,detallepedidocompras);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallepedidocompraSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.saveDetallePedidoCompras();//WithConnection
						//detallepedidocompraLogic.getSetVersionRowDetallePedidoCompras();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallepedidocompraLogic.saveDetallePedidoCompraRelaciones(detallepedidocompraAux);//WithConnection
								//detallepedidocompraLogic.getSetVersionRowDetallePedidoCompras();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detallepedidocompraSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detallepedidocompraAux,detallepedidocompraLogic.getDetallePedidoCompras());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detallepedidocompraAux,detallepedidocompras);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getDetallePedidoCompras().addAll(this.detallepedidocomprasEliminados);
					
					detallepedidocompraLogic.saveDetallePedidoCompras();//WithConnection
					//detallepedidocompraLogic.getSetVersionRowDetallePedidoCompras();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetallePedidoCompra();
				
				this.detallepedidocomprasEliminados= new ArrayList<DetallePedidoCompra>();		
			}
			
			if(this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.arrDatoGeneralTotales=DetallePedidoCompraConstantesFunciones.getTotalesListaDetallePedidoCompra(detallepedidocompraLogic.getDetallePedidoCompras());							
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				this.arrDatoGeneralTotales=DetallePedidoCompraConstantesFunciones.getTotalesListaDetallePedidoCompra(this.detallepedidocompras);
			}
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Pedido Compra GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detallepedidocompra=detallepedidocompraAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetallePedidoCompra();
      	}
		
	}	
	
	public void actualizarRelaciones(DetallePedidoCompra detallepedidocompraLocal) throws Exception {
		
		if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetallePedidoCompra detallepedidocompraLocal) throws Exception {	
		if(this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(PedidoCompraDetalleFormJInternalFrame.class)) {
				PedidoCompraBeanSwingJInternalFrame pedidocompraBeanSwingJInternalFrameLocal=(PedidoCompraBeanSwingJInternalFrame) ((PedidoCompraDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				pedidocompraBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPedidoCompra(pedidocompraBeanSwingJInternalFrameLocal.getpedidocompra(),true);
				pedidocompraBeanSwingJInternalFrameLocal.actualizarLista(pedidocompraBeanSwingJInternalFrameLocal.pedidocompra,this.pedidocomprasForeignKey);

				pedidocompraBeanSwingJInternalFrameLocal.actualizarRelaciones(pedidocompraBeanSwingJInternalFrameLocal.pedidocompra);

				detallepedidocompraLocal.setPedidoCompra(pedidocompraBeanSwingJInternalFrameLocal.pedidocompra);

				this.addItemDefectoCombosForeignKeyPedidoCompra();
				this.cargarCombosFramePedidoComprasForeignKey("Formulario");
				this.setActualPedidoCompraForeignKey(pedidocompraBeanSwingJInternalFrameLocal.pedidocompra.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detallepedidocompraLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detallepedidocompraLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detallepedidocompraLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detallepedidocompraLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detallepedidocompraLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detallepedidocompraLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				detallepedidocompraLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				detallepedidocompraLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UnidadDetalleFormJInternalFrame.class)) {
				UnidadBeanSwingJInternalFrame unidadBeanSwingJInternalFrameLocal=(UnidadBeanSwingJInternalFrame) ((UnidadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				unidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUnidad(unidadBeanSwingJInternalFrameLocal.getunidad(),true);
				unidadBeanSwingJInternalFrameLocal.actualizarLista(unidadBeanSwingJInternalFrameLocal.unidad,this.unidadsForeignKey);

				unidadBeanSwingJInternalFrameLocal.actualizarRelaciones(unidadBeanSwingJInternalFrameLocal.unidad);

				detallepedidocompraLocal.setUnidad(unidadBeanSwingJInternalFrameLocal.unidad);

				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey("Formulario");
				this.setActualUnidadForeignKey(unidadBeanSwingJInternalFrameLocal.unidad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				detallepedidocompraLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetallePedidoCompraActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detallepedidocompraValidator.getInvalidValues(this.detallepedidocompra);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetallePedidoCompra detallepedidocompra,List<DetallePedidoCompra> detallepedidocompras) throws Exception {
		try	{		
			DetallePedidoCompraConstantesFunciones.actualizarLista(detallepedidocompra,detallepedidocompras,this.detallepedidocompraSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetallePedidoCompra detallepedidocompra,List<DetallePedidoCompra> detallepedidocompras) throws Exception {
		try	{			
			DetallePedidoCompraConstantesFunciones.actualizarSelectedLista(detallepedidocompra,detallepedidocompras);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetallePedidoCompra> detallepedidocomprasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detallepedidocomprasLocal=this.detallepedidocompraLogic.getDetallePedidoCompras();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detallepedidocomprasLocal=this.detallepedidocompras;
			}
			//ARCHITECTURE
		
			for(DetallePedidoCompra detallepedidocompraLocal:detallepedidocomprasLocal) {
				if(this.permiteMantenimiento(detallepedidocompraLocal) && detallepedidocompraLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetallePedidoCompraConstantesFunciones.getDetallePedidoCompraLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDPEDIDOCOMPRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_pedido_compraDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_empresaDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_sucursalDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_ejercicioDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_periodoDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_anioDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_mesDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_bodegaDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_productoDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_unidadDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_centro_costoDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.CANTIDADPEDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_pedidoDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.COSTOUNITARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcosto_unitarioDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.COSTOTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcosto_totalDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabeldescripcionDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.CANTIDADENTREGADA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_entregadaDetallePedidoCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetallePedidoCompraConstantesFunciones.CANTIDADPENDIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_pendienteDetallePedidoCompra,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_pedido_compraDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_empresaDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_sucursalDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_ejercicioDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_periodoDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_anioDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_mesDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_bodegaDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_productoDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_unidadDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelid_centro_costoDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_pedidoDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcosto_unitarioDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcosto_totalDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabeldescripcionDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_entregadaDetallePedidoCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_pendienteDetallePedidoCompra,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetallePedidoCompra--;	
		
		
		this.detallepedidocompraAux=new DetallePedidoCompra();
		
		this.detallepedidocompraAux.setId(this.iIdNuevoDetallePedidoCompra);
		this.detallepedidocompraAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallepedidocompraLogic.getDetallePedidoCompras().add(this.detallepedidocompraAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detallepedidocompras.add(this.detallepedidocompraAux);
		}
		//ARCHITECTURE
		
		this.detallepedidocompra=this.detallepedidocompraAux;
		
		if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetallePedidoCompra(this.detallepedidocompra);
			this.setVariablesObjetoActualToFormularioForeignKeyDetallePedidoCompra(this.detallepedidocompra);
		}
				
		//this.setDefaultControlesDetallePedidoCompra();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetallePedidoCompra();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetallePedidoCompra();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetallePedidoCompra();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetallePedidoCompra(this.detallepedidocompraBean,this.detallepedidocompra,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
			classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detallepedidocompraReturnGeneral=detallepedidocompraLogic.procesarEventosDetallePedidoComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallepedidocompraLogic.getDetallePedidoCompras(),this.detallepedidocompra,this.detallepedidocompraParameterGeneral,this.isEsNuevoDetallePedidoCompra,classes);//this.detallepedidocompraLogic.getDetallePedidoCompra()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetallePedidoCompra(this.detallepedidocompraReturnGeneral,this.detallepedidocompraBean,false);
		
		if(this.detallepedidocompraReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetallePedidoCompra(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetallePedidoCompra(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra());
		}
		
		if(this.detallepedidocompraReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetallePedidoCompra(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra(),classes);//this.detallepedidocompraBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetallePedidoCompra();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetallePedidoCompra();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.RecargarFormDetallePedidoCompra(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetallePedidoCompra(false);
						
			if(detallepedidocompraSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetallePedidoCompra();
			}
			
			this.actualizarVisualTableDatosDetallePedidoCompra();
			
			this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(this.getIndiceNuevoDetallePedidoCompra(), this.getIndiceNuevoDetallePedidoCompra());
			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
						
			this.actualizarEstadoCeldasBotonesDetallePedidoCompra("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetallePedidoCompra(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarcantidad_pedidoDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarcosto_unitarioDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_totalDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarcosto_totalDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextAreadescripcionDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activardescripcionDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_entregadaDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarcantidad_entregadaDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pendienteDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarcantidad_pendienteDetallePedidoCompra);	
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_pedido_compraDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_empresaDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_sucursalDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_ejercicioDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_periodoDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_anioDetallePedidoCompra);//
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_mesDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_bodegaDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_productoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_unidadDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setEnabled(isHabilitar && this.detallepedidocompraConstantesFunciones.activarid_centro_costoDetallePedidoCompra);
	};
	
	public void setDefaultControlesDetallePedidoCompra() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetallePedidoCompra(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detallepedidocompraSessionBean.setConGuardarRelaciones(true);			
			this.detallepedidocompraSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.setVisible(true);
			
					
		} else {
			//this.detallepedidocompraSessionBean.setConGuardarRelaciones(false);			
			this.detallepedidocompraSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDetallePedidoCompra() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
				if(detallepedidocompraAux.getId().equals(this.iIdNuevoDetallePedidoCompra)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompras) {
				if(detallepedidocompraAux.getId().equals(this.iIdNuevoDetallePedidoCompra)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
				if(detallepedidocompraAux.getId().equals(detallepedidocompra.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompras) {
				if(detallepedidocompraAux.getId().equals(detallepedidocompra.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetallePedidoCompra(DetallePedidoCompra detallepedidocompraOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
				if(detallepedidocompraAux.getDetallePedidoCompraOriginal().getId().equals(detallepedidocompraOriginal.getId())) {
					existe=true;
					detallepedidocompraOriginal.setId(detallepedidocompraAux.getId());
					detallepedidocompraOriginal.setVersionRow(detallepedidocompraAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompras) {
				if(detallepedidocompraAux.getDetallePedidoCompraOriginal().getId().equals(detallepedidocompraOriginal.getId())) {
					existe=true;
					detallepedidocompraOriginal.setId(detallepedidocompraAux.getId());
					detallepedidocompraOriginal.setVersionRow(detallepedidocompraAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetallePedidoCompra(Boolean esParaCancelar) throws Exception {
		detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
		detallepedidocompraAux=new DetallePedidoCompra();
		
		if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
					if(detallepedidocompraAux.getId()<0) {
						detallepedidocomprasAux.add(detallepedidocompraAux);
					}		
				}
				this.iIdNuevoDetallePedidoCompra=0L;
				this.detallepedidocompraLogic.getDetallePedidoCompras().removeAll(detallepedidocomprasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompras) {
					if(detallepedidocompraAux.getId()<0) {
						detallepedidocomprasAux.add(detallepedidocompraAux);
					}		
				}
				this.iIdNuevoDetallePedidoCompra=0L;
				this.detallepedidocompras.removeAll(detallepedidocomprasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetallePedidoCompra 
					&& this.detallepedidocompraLogic.getDetallePedidoCompras().size()>0
					) {
					detallepedidocompraAux=this.detallepedidocompraLogic.getDetallePedidoCompras().get(this.detallepedidocompraLogic.getDetallePedidoCompras().size() - 1);
				
					if(detallepedidocompraAux.getId()<0) {
						this.detallepedidocompraLogic.getDetallePedidoCompras().remove(detallepedidocompraAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetallePedidoCompra && this.detallepedidocompras.size()>0) {
					detallepedidocompraAux=this.detallepedidocompras.get(this.detallepedidocompras.size() - 1);
				
					if(detallepedidocompraAux.getId()<0) {
						this.detallepedidocompras.remove(detallepedidocompraAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetallePedidoCompra(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detallepedidocompra.getId()<0) {
				this.detallepedidocompraLogic.getDetallePedidoCompras().remove(this.detallepedidocompra);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detallepedidocompra.getId()<0) {
				this.detallepedidocompras.remove(this.detallepedidocompra);
			}
		}			
	}
	
	public void setEstadosInicialesDetallePedidoCompra(List<DetallePedidoCompra> detallepedidocomprasAux) throws Exception {
		DetallePedidoCompraConstantesFunciones.setEstadosInicialesDetallePedidoCompra(detallepedidocomprasAux);
	}
	
	public void setEstadosInicialesDetallePedidoCompra(DetallePedidoCompra detallepedidocompraAux) throws Exception {
		DetallePedidoCompraConstantesFunciones.setEstadosInicialesDetallePedidoCompra(detallepedidocompraAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetallePedidoCompraActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetallePedidoCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetallePedidoCompraActual()) {
				if(!this.isEsNuevoDetallePedidoCompra) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetallePedidoCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetallePedidoCompra=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetallePedidoCompraActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Pedido Compra ?", "MANTENIMIENTO DE Detalle Pedido Compra", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetallePedidoCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetallePedidoCompra detallepedidocompra) throws Exception {
		DetallePedidoCompraConstantesFunciones.seleccionarAsignar(this.detallepedidocompra,detallepedidocompra);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetallePedidoCompra=this.isPermisoActualizarOriginalDetallePedidoCompra;
			
			
			this.seleccionarAsignar(detallepedidocompra);
			
			

			idProductoActual=detallepedidocompra.getid_producto();
			this.seleccionarProductoActual();

			idCentroCostoActual=detallepedidocompra.getid_centro_costo();
			this.seleccionarCentroCostoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetallePedidoCompraConstantesFunciones.quitarEspaciosDetallePedidoCompra(this.detallepedidocompra,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetallePedidoCompra("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detallepedidocompraSessionBean.setsFuncionBusquedaRapida(this.detallepedidocompraSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetallePedidoCompra) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetallePedidoCompra(esParaCancelar);				
				this.cancelarNuevoDetallePedidoCompra(esParaCancelar);								
			}
			
			this.detallepedidocompra=new DetallePedidoCompra();
			
			this.inicializarDetallePedidoCompra();
			
			this.actualizarEstadoCeldasBotonesDetallePedidoCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetallePedidoCompra() throws Exception {
		try {
			DetallePedidoCompraConstantesFunciones.inicializarDetallePedidoCompra(this.detallepedidocompra);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detallepedidocompraLogic.getDetallePedidoCompras().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetallePedidoCompras(String sAccionBusqueda,List<DetallePedidoCompra> detallepedidocomprasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetallePedidoCompra"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetallePedidoCompraMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetallePedidoCompraMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetallePedidoCompra"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Pedido Compras");		
		parameters.put("busquedapor", DetallePedidoCompraConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetallePedidoCompra=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetallePedidoCompraConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetallePedidoCompraConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetallePedidoCompra=new JRBeanArrayDataSource(DetallePedidoCompraJInternalFrame.TraerDetallePedidoCompraBeans(detallepedidocomprasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetallePedidoCompra);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetallePedidoCompraConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetallePedidoCompraConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetallePedidoCompraBean.TraerDetallePedidoCompraBeans(detallepedidocomprasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetallePedidoCompras(sAccionBusqueda,sTipoArchivoReporte,detallepedidocomprasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetallePedidoCompras(sAccionBusqueda,sTipoArchivoReporte,detallepedidocomprasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoDetallePedidoCompraActionPerformed(null);
					//this.generarExcelReporteDetallePedidoCompras(sAccionBusqueda,sTipoArchivoReporte,detallepedidocomprasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetallePedidoCompras(sAccionBusqueda,sTipoArchivoReporte,detallepedidocomprasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetallePedidoCompras(sAccionBusqueda,sTipoArchivoReporte,detallepedidocomprasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetallePedidoCompras(sAccionBusqueda,sTipoArchivoReporte,detallepedidocomprasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetallePedidoCompras(String sAccionBusqueda,String sTipoArchivoReporte,List<DetallePedidoCompra> detallepedidocomprasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallepedidocompra";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetallePedidoCompras");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetallePedidoCompra("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetallePedidoCompra detallepedidocompra : detallepedidocomprasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetallePedidoCompraConstantesFunciones.generarExcelReporteDataDetallePedidoCompra("NORMAL",row,workbook,detallepedidocompra,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetallePedidoCompra(String sTipo,Row row,Workbook workbook) {
		
		DetallePedidoCompraConstantesFunciones.generarExcelReporteHeaderDetallePedidoCompra(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetallePedidoCompras(String sAccionBusqueda,String sTipoArchivoReporte,List<DetallePedidoCompra> detallepedidocomprasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallepedidocompra_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetallePedidoCompras");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetallePedidoCompra detallepedidocompra : detallepedidocomprasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetallePedidoCompraConstantesFunciones.getDetallePedidoCompraDescripcion(detallepedidocompra));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getpedidocompra_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getunidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getcantidad_pedido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getcosto_unitario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getcosto_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getcantidad_entregada());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallepedidocompra.getcantidad_pendiente());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetallePedidoCompras(String sAccionBusqueda,String sTipoArchivoReporte,List<DetallePedidoCompra> detallepedidocomprasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetallePedidoCompra> detallepedidocomprasRespaldo=null;
		
		classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detallepedidocompraLogic.setDatosCliente(this.datosCliente);
		this.detallepedidocompraLogic.setDatosDeep(this.datosDeep);
		this.detallepedidocompraLogic.setIsConDeep(true);
		
		detallepedidocomprasRespaldo=this.detallepedidocompraLogic.getDetallePedidoCompras();
		
		this.detallepedidocompraLogic.setDetallePedidoCompras(detallepedidocomprasParaReportes);	
		this.detallepedidocompraLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detallepedidocomprasParaReportes=this.detallepedidocompraLogic.getDetallePedidoCompras();
		this.detallepedidocompraLogic.setDetallePedidoCompras(detallepedidocomprasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallepedidocompra_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetallePedidoCompras");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetallePedidoCompra("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetallePedidoCompra detallepedidocompra : detallepedidocomprasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetallePedidoCompra("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetallePedidoCompraConstantesFunciones.generarExcelReporteDataDetallePedidoCompra("NORMAL",row,workbook,detallepedidocompra,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetallePedidoCompraConstantesFunciones.getDetallePedidoCompraDescripcion(detallepedidocompra));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessDetallePedidoCompra() throws Exception {		
		this.startProcessDetallePedidoCompra(true);
	}
	
	public void startProcessDetallePedidoCompra(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetallePedidoCompra ,this.jPanelParametrosReportesDetallePedidoCompra, this.jScrollPanelDatosDetallePedidoCompra,this.jPanelPaginacionDetallePedidoCompra, this.jScrollPanelDatosEdicionDetallePedidoCompra, this.jPanelAccionesDetallePedidoCompra,this.jPanelAccionesFormularioDetallePedidoCompra,this.jmenuBarDetallePedidoCompra,this.jmenuBarDetalleDetallePedidoCompra,this.jTtoolBarDetallePedidoCompra,this.jTtoolBarDetalleDetallePedidoCompra);		
		
		final JTabbedPane jTabbedPaneBusquedasDetallePedidoCompra=this.jTabbedPaneBusquedasDetallePedidoCompra; 
		
		final JPanel jPanelParametrosReportesDetallePedidoCompra=this.jPanelParametrosReportesDetallePedidoCompra;
		//final JScrollPane jScrollPanelDatosDetallePedidoCompra=this.jScrollPanelDatosDetallePedidoCompra;
		final JTable jTableDatosDetallePedidoCompra=this.jTableDatosDetallePedidoCompra;		
		final JPanel jPanelPaginacionDetallePedidoCompra=this.jPanelPaginacionDetallePedidoCompra;
		//final JScrollPane jScrollPanelDatosEdicionDetallePedidoCompra=this.jScrollPanelDatosEdicionDetallePedidoCompra;
		final JPanel jPanelAccionesDetallePedidoCompra=this.jPanelAccionesDetallePedidoCompra;
		
		JPanel jPanelCamposAuxiliarDetallePedidoCompra=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetallePedidoCompra=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			jPanelCamposAuxiliarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelCamposDetallePedidoCompra;
			jPanelAccionesFormularioAuxiliarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelAccionesFormularioDetallePedidoCompra;
		}
		
		final JPanel jPanelCamposDetallePedidoCompra=jPanelCamposAuxiliarDetallePedidoCompra;
		final JPanel jPanelAccionesFormularioDetallePedidoCompra=jPanelAccionesFormularioAuxiliarDetallePedidoCompra;
		
		
		final JMenuBar jmenuBarDetallePedidoCompra=this.jmenuBarDetallePedidoCompra;
		final JToolBar jTtoolBarDetallePedidoCompra=this.jTtoolBarDetallePedidoCompra;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarDetallePedidoCompra=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetallePedidoCompra=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			jmenuBarDetalleAuxiliarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jmenuBarDetalleDetallePedidoCompra;
			jTtoolBarDetalleAuxiliarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jTtoolBarDetalleDetallePedidoCompra;
		}
		
		final JMenuBar jmenuBarDetalleDetallePedidoCompra=jmenuBarDetalleAuxiliarDetallePedidoCompra;
		final JToolBar jTtoolBarDetalleDetallePedidoCompra=jTtoolBarDetalleAuxiliarDetallePedidoCompra;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetallePedidoCompra;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetallePedidoCompra;
			processRunnable.jTableDatos=jTableDatosDetallePedidoCompra;
			processRunnable.jPanelCampos=jPanelCamposDetallePedidoCompra;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetallePedidoCompra;
			processRunnable.jPanelAcciones=jPanelAccionesDetallePedidoCompra;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetallePedidoCompra;
			
			
			processRunnable.jmenuBar=jmenuBarDetallePedidoCompra;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetallePedidoCompra;
			processRunnable.jTtoolBar=jTtoolBarDetallePedidoCompra;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetallePedidoCompra;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetallePedidoCompra ,jPanelParametrosReportesDetallePedidoCompra,jTableDatosDetallePedidoCompra, /*jScrollPanelDatosDetallePedidoCompra,*/jPanelCamposDetallePedidoCompra,jPanelPaginacionDetallePedidoCompra, /*jScrollPanelDatosEdicionDetallePedidoCompra,*/ jPanelAccionesDetallePedidoCompra,jPanelAccionesFormularioDetallePedidoCompra,jmenuBarDetallePedidoCompra,jmenuBarDetalleDetallePedidoCompra,jTtoolBarDetallePedidoCompra,jTtoolBarDetalleDetallePedidoCompra);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetallePedidoCompra ,jPanelParametrosReportesDetallePedidoCompra, jScrollPanelDatosDetallePedidoCompra,jPanelPaginacionDetallePedidoCompra, jScrollPanelDatosEdicionDetallePedidoCompra, jPanelAccionesDetallePedidoCompra,jPanelAccionesFormularioDetallePedidoCompra,jmenuBarDetallePedidoCompra,jmenuBarDetalleDetallePedidoCompra,jTtoolBarDetallePedidoCompra,jTtoolBarDetalleDetallePedidoCompra);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetallePedidoCompra() {// throws Exception 
		this.finishProcessDetallePedidoCompra(true);
	}
	
	public void finishProcessDetallePedidoCompra(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetallePedidoCompra ,this.jPanelParametrosReportesDetallePedidoCompra, this.jScrollPanelDatosDetallePedidoCompra,this.jPanelPaginacionDetallePedidoCompra, this.jScrollPanelDatosEdicionDetallePedidoCompra, this.jPanelAccionesDetallePedidoCompra,this.jPanelAccionesFormularioDetallePedidoCompra,this.jmenuBarDetallePedidoCompra,this.jmenuBarDetalleDetallePedidoCompra,this.jTtoolBarDetallePedidoCompra,this.jTtoolBarDetalleDetallePedidoCompra);		
		
		final JTabbedPane jTabbedPaneBusquedasDetallePedidoCompra=this.jTabbedPaneBusquedasDetallePedidoCompra; 
		
		final JPanel jPanelParametrosReportesDetallePedidoCompra=this.jPanelParametrosReportesDetallePedidoCompra;
		//final JScrollPane jScrollPanelDatosDetallePedidoCompra=this.jScrollPanelDatosDetallePedidoCompra;
		final JTable jTableDatosDetallePedidoCompra=this.jTableDatosDetallePedidoCompra;		
		final JPanel jPanelPaginacionDetallePedidoCompra=this.jPanelPaginacionDetallePedidoCompra;
		//final JScrollPane jScrollPanelDatosEdicionDetallePedidoCompra=this.jScrollPanelDatosEdicionDetallePedidoCompra;
		final JPanel jPanelAccionesDetallePedidoCompra=this.jPanelAccionesDetallePedidoCompra;
		
		JPanel jPanelCamposAuxiliarDetallePedidoCompra=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetallePedidoCompra=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			jPanelCamposAuxiliarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelCamposDetallePedidoCompra;
			jPanelAccionesFormularioAuxiliarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelAccionesFormularioDetallePedidoCompra;
		}
		
		final JPanel jPanelCamposDetallePedidoCompra=jPanelCamposAuxiliarDetallePedidoCompra;
		final JPanel jPanelAccionesFormularioDetallePedidoCompra=jPanelAccionesFormularioAuxiliarDetallePedidoCompra;
		
		
		final JMenuBar jmenuBarDetallePedidoCompra=this.jmenuBarDetallePedidoCompra;		
		final JToolBar jTtoolBarDetallePedidoCompra=this.jTtoolBarDetallePedidoCompra;
				
		JMenuBar jmenuBarDetalleAuxiliarDetallePedidoCompra=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetallePedidoCompra=new JToolBar();
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			jmenuBarDetalleAuxiliarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jmenuBarDetalleDetallePedidoCompra;
			jTtoolBarDetalleAuxiliarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jTtoolBarDetalleDetallePedidoCompra;		
		}
		
		final JMenuBar jmenuBarDetalleDetallePedidoCompra=jmenuBarDetalleAuxiliarDetallePedidoCompra;
		final JToolBar jTtoolBarDetalleDetallePedidoCompra=jTtoolBarDetalleAuxiliarDetallePedidoCompra;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetallePedidoCompra;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetallePedidoCompra;
			processRunnable.jTableDatos=jTableDatosDetallePedidoCompra;
			processRunnable.jPanelCampos=jPanelCamposDetallePedidoCompra;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetallePedidoCompra;
			processRunnable.jPanelAcciones=jPanelAccionesDetallePedidoCompra;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetallePedidoCompra;
			
			
			processRunnable.jmenuBar=jmenuBarDetallePedidoCompra;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetallePedidoCompra;
			processRunnable.jTtoolBar=jTtoolBarDetallePedidoCompra;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetallePedidoCompra;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetallePedidoCompra ,jPanelParametrosReportesDetallePedidoCompra, jTableDatosDetallePedidoCompra,/*jScrollPanelDatosDetallePedidoCompra,*/jPanelCamposDetallePedidoCompra,jPanelPaginacionDetallePedidoCompra, /*jScrollPanelDatosEdicionDetallePedidoCompra,*/ jPanelAccionesDetallePedidoCompra,jPanelAccionesFormularioDetallePedidoCompra,jmenuBarDetallePedidoCompra,jmenuBarDetalleDetallePedidoCompra,jTtoolBarDetallePedidoCompra,jTtoolBarDetalleDetallePedidoCompra));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetallePedidoCompra(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetallePedidoCompra(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetallePedidoCompra(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetallePedidoCompra(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetallePedidoCompra,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetallePedidoCompra,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetallePedidoCompra(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetallePedidoCompra,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetallePedidoCompra,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detallepedidocompraConstantesFunciones.getsFinalQueryDetallePedidoCompra();
		String  finalQueryPaginacionTodos=this.detallepedidocompraConstantesFunciones.getsFinalQueryDetallePedidoCompra();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetallePedidoCompraConstantesFunciones.getArrayColumnasGlobalesNoDetallePedidoCompra(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetallePedidoCompraConstantesFunciones.getArrayColumnasGlobalesDetallePedidoCompra(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetallePedidoCompraConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detallepedidocomprasEliminados= new ArrayList<DetallePedidoCompra>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetallePedidoCompra();
		
				///*DetallePedidoCompraSessionBean*/this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			
			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetallePedidoCompraConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetallePedidoCompraConstantesFunciones.getClassesForeignKeysOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detallepedidocompra."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detallepedidocomprasAux= new ArrayList<DetallePedidoCompra>();
			
				
			detallepedidocompraLogic.setDatosCliente(this.datosCliente);
			detallepedidocompraLogic.setDatosDeep(this.datosDeep);
			detallepedidocompraLogic.setIsConDeep(true);
			
			
			detallepedidocompraLogic.getDetallePedidoCompraDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detallepedidocompraLogic.getTodosDetallePedidoCompras(finalQueryGlobal,pagination);
					
					//detallepedidocompraLogic.getTodosDetallePedidoComprasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detallepedidocompraLogic.getDetallePedidoCompras()==null|| detallepedidocompraLogic.getDetallePedidoCompras().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallepedidocomprasAux= new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux= new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallepedidocompraLogic.getTodosDetallePedidoCompras(finalQueryGlobal+"",this.pagination);												
							
							//detallepedidocompraLogic.getTodosDetallePedidoComprasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetallePedidoCompras("Todos",detallepedidocompraLogic.getDetallePedidoCompras() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());					
							detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetallePedidoCompra=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetallePedidoCompra=this.idActual;
				
				} else if(this.idDetallePedidoCompraActual!=null && this.idDetallePedidoCompraActual!=0L) {
					idDetallePedidoCompra=idDetallePedidoCompraActual;
				}
				
					
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndicePorId(idDetallePedidoCompra);
				
				this.detallepedidocompras=new ArrayList<DetallePedidoCompra>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detallepedidocompraLogic.getEntity(idDetallePedidoCompra);
					
					//detallepedidocompraLogic.getEntityWithConnection(idDetallePedidoCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
					detallepedidocompraLogic.getDetallePedidoCompras().add(detallepedidocompraLogic.getDetallePedidoCompra());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompras=new ArrayList<DetallePedidoCompra>();
					this.detallepedidocompras.add(detallepedidocompra);
				}
				
				if(detallepedidocompraLogic.getDetallePedidoCompra()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdBodega",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdBodega",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdCentroCosto",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdCentroCosto",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdEjercicio",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdEjercicio",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdEmpresa",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdEmpresa",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPedidoCompra")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPedidoCompra(id_pedido_compraFK_IdPedidoCompra);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdPedidoCompra(finalQueryGlobal,pagination,id_pedido_compraFK_IdPedidoCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPedidoCompra(id_pedido_compraFK_IdPedidoCompra);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPedidoCompra(id_pedido_compraFK_IdPedidoCompra);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdPedidoCompra(finalQueryGlobal,pagination,id_pedido_compraFK_IdPedidoCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPedidoCompra(id_pedido_compraFK_IdPedidoCompra);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPedidoCompra(id_pedido_compraFK_IdPedidoCompra);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdPedidoCompra",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdPedidoCompra",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdPeriodo",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdPeriodo",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdProducto",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdProducto",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdSucursal",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdSucursal",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUnidad")) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallepedidocompraLogic.getDetallePedidoComprasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras()==null||detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallepedidocompras==null|| detallepedidocompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
						detallepedidocomprasAux.addAll(detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocomprasAux=new ArrayList<DetallePedidoCompra>();
							detallepedidocomprasAux.addAll(detallepedidocompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallepedidocompraLogic.getDetallePedidoComprasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetallePedidoCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetallePedidoCompras("FK_IdUnidad",detallepedidocompraLogic.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetallePedidoCompras("FK_IdUnidad",detallepedidocompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraLogic.setDetallePedidoCompras(new ArrayList<DetallePedidoCompra>());
						detallepedidocompraLogic.getDetallePedidoCompras().addAll(detallepedidocomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompras=new ArrayList<DetallePedidoCompra>();
							detallepedidocompras.addAll(detallepedidocomprasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetallePedidoCompra();
		
		this.traerValoresTablaTotales();	
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetallePedidoCompraConstantesFunciones.getTotalesListaDetallePedidoCompra(detallepedidocompraLogic.getDetallePedidoCompras());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetallePedidoCompraConstantesFunciones.getTotalesListaDetallePedidoCompra(this.detallepedidocompras);
		}
		*/
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetallePedidoCompra();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallepedidocompraLogic.getDetallePedidoCompras().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallepedidocompras.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallepedidocompraLogic.getDetallePedidoCompras().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallepedidocompras.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetallePedidoCompra detallepedidocompra) {
		Boolean permite=true;
		
		if(this.detallepedidocompra.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetallePedidoCompraConstantesFunciones.getTotalesListaDetallePedidoCompra(detallepedidocompraLogic.getDetallePedidoCompras());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetallePedidoCompraConstantesFunciones.getTotalesListaDetallePedidoCompra(this.detallepedidocompras);
		}
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetallePedidoCompraConstantesFunciones.getOrderByListaDetallePedidoCompra();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetallePedidoCompraConstantesFunciones.getOrderByListaDetallePedidoCompra();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetallePedidoCompra detallepedidocompra:detallepedidocompraLogic.getDetallePedidoCompras()) {
				if(detallepedidocompra.getsType().equals(Constantes2.S_TOTALES)) {
					detallepedidocompraTotales=detallepedidocompra;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetallePedidoCompra detallepedidocompra:this.detallepedidocompras) {
				if(detallepedidocompra.getsType().equals(Constantes2.S_TOTALES)) {
					detallepedidocompraTotales=detallepedidocompra;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detallepedidocompraAux=new DetallePedidoCompra();
			this.detallepedidocompraAux.setsType(Constantes2.S_TOTALES);
			this.detallepedidocompraAux.setIsNew(false);
			this.detallepedidocompraAux.setIsChanged(false);
			this.detallepedidocompraAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetallePedidoCompraConstantesFunciones.TotalizarValoresFilaDetallePedidoCompra(this.detallepedidocompraLogic.getDetallePedidoCompras(),this.detallepedidocompraAux);
				
				this.detallepedidocompraLogic.getDetallePedidoCompras().add(this.detallepedidocompraAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetallePedidoCompraConstantesFunciones.TotalizarValoresFilaDetallePedidoCompra(this.detallepedidocompras,this.detallepedidocompraAux);
				
				this.detallepedidocompras.add(this.detallepedidocompraAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detallepedidocompraTotales=new DetallePedidoCompra();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallepedidocompraLogic.getDetallePedidoCompras().remove(detallepedidocompraTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallepedidocompras.remove(detallepedidocompraTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detallepedidocompraTotales=new DetallePedidoCompra();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetallePedidoCompra detallepedidocompra:detallepedidocompraLogic.getDetallePedidoCompras()) {
				if(detallepedidocompra.getsType().equals(Constantes2.S_TOTALES)) {
					detallepedidocompraTotales=detallepedidocompra;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetallePedidoCompraConstantesFunciones.TotalizarValoresFilaDetallePedidoCompra(this.detallepedidocompraLogic.getDetallePedidoCompras(),detallepedidocompraTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetallePedidoCompra detallepedidocompra:this.detallepedidocompras) {
				if(detallepedidocompra.getsType().equals(Constantes2.S_TOTALES)) {
					detallepedidocompraTotales=detallepedidocompra;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetallePedidoCompraConstantesFunciones.TotalizarValoresFilaDetallePedidoCompra(this.detallepedidocompras,detallepedidocompraTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getDetallePedidoComprasFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdPedidoCompra()throws Exception {
		try {
			sAccionBusqueda="FK_IdPedidoCompra";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetallePedidoComprasFK_IdUnidad()throws Exception {
		try {
			sAccionBusqueda="FK_IdUnidad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getDetallePedidoComprasFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdPedidoCompra(String sFinalQuery,Long id_pedido_compra)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdPedidoCompra(sFinalQuery,this.pagination,id_pedido_compra);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdProducto(String sFinalQuery,Long id_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdProducto(sFinalQuery,this.pagination,id_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetallePedidoComprasFK_IdUnidad(String sFinalQuery,Long id_unidad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLogic.getDetallePedidoComprasFK_IdUnidad(sFinalQuery,this.pagination,id_unidad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetallePedidoCompra() {
		this.isPermisoTodoDetallePedidoCompra=false;
		this.isPermisoNuevoDetallePedidoCompra=false;
		this.isPermisoActualizarDetallePedidoCompra=false;
		this.isPermisoActualizarOriginalDetallePedidoCompra=false;
		this.isPermisoEliminarDetallePedidoCompra=false;
		this.isPermisoGuardarCambiosDetallePedidoCompra=false;
		this.isPermisoConsultaDetallePedidoCompra=false;
		this.isPermisoBusquedaDetallePedidoCompra=false;
		this.isPermisoReporteDetallePedidoCompra=false;		
		this.isPermisoOrdenDetallePedidoCompra=false;		
		this.isPermisoPaginacionMedioDetallePedidoCompra=false;		
		this.isPermisoPaginacionAltoDetallePedidoCompra=false;
		this.isPermisoPaginacionTodoDetallePedidoCompra=false;
		this.isPermisoCopiarDetallePedidoCompra=false;		
		this.isPermisoVerFormDetallePedidoCompra=false;		
		this.isPermisoDuplicarDetallePedidoCompra=false;		
		this.isPermisoOrdenDetallePedidoCompra=false;		
	}
	
	public void setPermisosUsuarioDetallePedidoCompra(Boolean isPermiso) {
		this.isPermisoTodoDetallePedidoCompra=isPermiso;
		this.isPermisoNuevoDetallePedidoCompra=isPermiso;
		this.isPermisoActualizarDetallePedidoCompra=isPermiso;
		this.isPermisoActualizarOriginalDetallePedidoCompra=isPermiso;
		this.isPermisoEliminarDetallePedidoCompra=isPermiso;
		this.isPermisoGuardarCambiosDetallePedidoCompra=isPermiso;
		this.isPermisoConsultaDetallePedidoCompra=isPermiso;
		this.isPermisoBusquedaDetallePedidoCompra=isPermiso;
		this.isPermisoReporteDetallePedidoCompra=isPermiso;
		this.isPermisoOrdenDetallePedidoCompra=isPermiso;		
		this.isPermisoPaginacionMedioDetallePedidoCompra=isPermiso;		
		this.isPermisoPaginacionAltoDetallePedidoCompra=isPermiso;		
		this.isPermisoPaginacionTodoDetallePedidoCompra=isPermiso;		
		this.isPermisoCopiarDetallePedidoCompra=isPermiso;		
		this.isPermisoVerFormDetallePedidoCompra=isPermiso;		
		this.isPermisoDuplicarDetallePedidoCompra=isPermiso;
		this.isPermisoOrdenDetallePedidoCompra=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetallePedidoCompra(Boolean isPermiso) {
		//this.isPermisoTodoDetallePedidoCompra=isPermiso;
		this.isPermisoNuevoDetallePedidoCompra=isPermiso;
		this.isPermisoActualizarDetallePedidoCompra=isPermiso;
		this.isPermisoActualizarOriginalDetallePedidoCompra=isPermiso;
		this.isPermisoEliminarDetallePedidoCompra=isPermiso;
		this.isPermisoGuardarCambiosDetallePedidoCompra=isPermiso;
		//this.isPermisoConsultaDetallePedidoCompra=isPermiso;
		//this.isPermisoBusquedaDetallePedidoCompra=isPermiso;
		//this.isPermisoReporteDetallePedidoCompra=isPermiso;
		//this.isPermisoOrdenDetallePedidoCompra=isPermiso;		
		//this.isPermisoPaginacionMedioDetallePedidoCompra=isPermiso;		
		//this.isPermisoPaginacionAltoDetallePedidoCompra=isPermiso;		
		//this.isPermisoPaginacionTodoDetallePedidoCompra=isPermiso;		
		//this.isPermisoCopiarDetallePedidoCompra=isPermiso;		
		//this.isPermisoDuplicarDetallePedidoCompra=isPermiso;
		//this.isPermisoOrdenDetallePedidoCompra=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetallePedidoCompraClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DetallePedidoCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetallePedidoCompraClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDetallePedidoCompraClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetallePedidoCompraClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetallePedidoCompraClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDetallePedidoCompra() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetallePedidoCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetallePedidoCompraConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetallePedidoCompra=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetallePedidoCompra=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetallePedidoCompra=this.isPermisoActualizarDetallePedidoCompra;
			this.isPermisoEliminarDetallePedidoCompra=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetallePedidoCompra=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetallePedidoCompra=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetallePedidoCompra=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetallePedidoCompra=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetallePedidoCompra=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetallePedidoCompra=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetallePedidoCompra=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetallePedidoCompra=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetallePedidoCompra=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetallePedidoCompra=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetallePedidoCompra=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetallePedidoCompra=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetallePedidoCompra=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetallePedidoCompra.setToolTipText(this.jTableDatosDetallePedidoCompra.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetallePedidoCompra(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetallePedidoCompra(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetallePedidoCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetallePedidoCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetallePedidoCompra() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetallePedidoCompraListas()throws Exception {
		try	{						
			
				this.pedidocomprasForeignKey=new ArrayList();
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.unidadsForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetallePedidoCompraListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetallePedidoCompraJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetallePedidoCompraListas(false);
			} else {
			
				this.cargarCombosForeignKeyPedidoCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyPedidoCompraListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.pedidocomprasForeignKey==null||this.pedidocomprasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PedidoCompraConstantesFunciones.getArrayColumnasGlobalesPedidoCompra(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PedidoCompraConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PedidoCompraConstantesFunciones.SFINALQUERY;

				this.cargarCombosPedidoComprasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UnidadConstantesFunciones.SFINALQUERY;

				this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetallePedidoCompraListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetallePedidoCompraParameterReturnGeneral detallepedidocompraReturnGeneral=new DetallePedidoCompraParameterReturnGeneral();
						
			


				String finalQueryGlobalPedidoCompra="";

				if(((this.pedidocomprasForeignKey==null||this.pedidocomprasForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_pedido_compraDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_pedido_compraDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionPedidoCompra()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PedidoCompraConstantesFunciones.getArrayColumnasGlobalesPedidoCompra(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPedidoCompra=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PedidoCompraConstantesFunciones.TABLENAME);

						finalQueryGlobalPedidoCompra=Funciones.GetFinalQueryAppend(finalQueryGlobalPedidoCompra, "");
						finalQueryGlobalPedidoCompra+=PedidoCompraConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPedidoComprasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPedidoCompra=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidPedidoCompraActual();
					}
				} else {
					finalQueryGlobalPedidoCompra="NONE";
				}


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_empresaDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_empresaDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_sucursalDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_sucursalDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_ejercicioDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_ejercicioDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_periodoDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_periodoDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_anioDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_anioDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_mesDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_mesDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_bodegaDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_bodegaDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(cargarCombosDependencia && ((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_productoDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_productoDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalUnidad="";

				if(cargarCombosDependencia && ((this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_unidadDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_unidadDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUnidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

						finalQueryGlobalUnidad=Funciones.GetFinalQueryAppend(finalQueryGlobalUnidad, "");
						finalQueryGlobalUnidad+=UnidadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUnidad=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidUnidadActual();
					}
				} else {
					finalQueryGlobalUnidad="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.detallepedidocompraConstantesFunciones.cargarid_centro_costoDetallePedidoCompra)
					 || (this.esRecargarFks && this.detallepedidocompraConstantesFunciones.cargarid_centro_costoDetallePedidoCompra)) {

					if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+detallepedidocompraSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detallepedidocompraReturnGeneral=detallepedidocompraLogic.cargarCombosLoteForeignKeyDetallePedidoCompra(finalQueryGlobalPedidoCompra,finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalUnidad,finalQueryGlobalCentroCosto);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalPedidoCompra.equals("NONE")) {
				this.pedidocomprasForeignKey=detallepedidocompraReturnGeneral.getpedidocomprasForeignKey();
			}

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detallepedidocompraReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detallepedidocompraReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detallepedidocompraReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detallepedidocompraReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detallepedidocompraReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detallepedidocompraReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=detallepedidocompraReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=detallepedidocompraReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalUnidad.equals("NONE")) {
				this.unidadsForeignKey=detallepedidocompraReturnGeneral.getunidadsForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=detallepedidocompraReturnGeneral.getcentrocostosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetallePedidoCompra()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyPedidoCompra();
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyUnidad();
			this.addItemDefectoCombosForeignKeyCentroCosto();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyPedidoCompra()throws Exception {
		try {
			if(this.detallepedidocompraSessionBean==null) {
				this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionPedidoCompra()) {
				PedidoCompra pedidocompra=new PedidoCompra();
				PedidoCompraConstantesFunciones.setPedidoCompraDescripcion(pedidocompra,Constantes.SMENSAJE_ESCOJA_OPCION);
				pedidocompra.setId(null);

				if(!PedidoCompraConstantesFunciones.ExisteEnLista(this.pedidocomprasForeignKey,pedidocompra,true)) {

					this.pedidocomprasForeignKey.add(0,pedidocompra);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUnidad()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				Unidad unidad=new Unidad();
				UnidadConstantesFunciones.setUnidadDescripcion(unidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				unidad.setId(null);

				if(!UnidadConstantesFunciones.ExisteEnLista(this.unidadsForeignKey,unidad,true)) {

					this.unidadsForeignKey.add(0,unidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.detallepedidocompraSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetallePedidoCompra()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega("Todos");
			this.initActionsCombosForeignKeyProducto("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetallePedidoCompra(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyProducto(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodega(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega="+bodegaLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryProductoFromBodega(bodegaLocal);

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboProducto=sFinalQueryCombo;

			this.productosForeignKey=new ArrayList<Producto>();
			this.cargarCombosForeignKeyProducto(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyProducto(JComboBox jComboBoxProductoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Producto productoLocal=(Producto)jComboBoxProductoGenerico.getSelectedItem();

			if(productoLocal!=null  && productoLocal.getId()!=null  && productoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_producto="+productoLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryUnidadFromBodegaYProducto(productoLocal,this.detallepedidocompra.getid_bodega());

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboUnidad=sFinalQueryCombo;

			this.unidadsForeignKey=new ArrayList<Unidad>();
			this.cargarCombosForeignKeyUnidad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.addItemListener(new ComboBoxItemListener(this,"id_bodegaDetallePedidoCompra"));
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetallePedidoCompra"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.addActionListener(new ComboBoxActionListener(this,"id_bodegaDetallePedidoCompra"));
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetallePedidoCompra"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra"));

						this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra"));

					} else {
						this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra"));

						this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.addItemListener(new ComboBoxItemListener(this,"id_productoDetallePedidoCompra"));
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetallePedidoCompra"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.addActionListener(new ComboBoxActionListener(this,"id_productoDetallePedidoCompra"));
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetallePedidoCompra"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_productoFK_IdProductoDetallePedidoCompra"));

						this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetallePedidoCompra"));

					} else {
						this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_productoFK_IdProductoDetallePedidoCompra"));

						this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetallePedidoCompra"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDetallePedidoCompra()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetallePedidoCompra();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetallePedidoCompra(DetallePedidoCompra detallepedidocompra)throws Exception {	
		try {
			
			this.setActualPedidoCompraForeignKey(detallepedidocompra.getid_pedido_compra(),false,"Formulario");
			this.setActualBodegaForeignKey(detallepedidocompra.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(detallepedidocompra.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(detallepedidocompra.getid_unidad(),false,"Formulario");
			this.setActualCentroCostoForeignKey(detallepedidocompra.getid_centro_costo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detallepedidocompra.getProducto()!=null && !sTipoEvento.equals("id_productoDetallePedidoCompra")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(detallepedidocompra.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				if(detallepedidocompra.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoDetallePedidoCompra")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(detallepedidocompra.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetallePedidoCompra()throws Exception {	
		try {
			
			this.setActualPedidoCompraForeignKey(this.detallepedidocompraConstantesFunciones.getid_pedido_compra(),false,"Formulario");
			this.setActualBodegaForeignKey(this.detallepedidocompraConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.detallepedidocompraConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(this.detallepedidocompraConstantesFunciones.getid_unidad(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.detallepedidocompraConstantesFunciones.getid_centro_costo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetallePedidoCompra()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetallePedidoCompra()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetallePedidoCompra()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetallePedidoCompra()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetallePedidoCompra()throws Exception {
		try {
			

			this.cargarCombosFramePedidoComprasForeignKey("Todos");
			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameUnidadsForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetallePedidoCompra(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFramePedidoComprasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetallePedidoCompra()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	















	public void recargarFormDetallePedidoCompraBodega(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetallePedidoCompraid_producto(jComboBoxGenericoBodega,sFormularioTipoBusqueda,"Bodega",false);
	}

	public void recargarFormDetallePedidoCompraProducto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetallePedidoCompraid_unidad(jComboBoxGenericoProducto,sFormularioTipoBusqueda,"Producto",false);
	}




	
	



	public void recargarFormDetallePedidoCompraid_producto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Bodega")){
				this.setActualParaGuardarBodegaForeignKey(this.detallepedidocompra,jComboBoxGenericoProducto);
			}

			if(this.detallepedidocompra.getid_bodega()!=null && this.detallepedidocompra.getid_bodega()!=0L) {
				sFinalQuery+="  WHERE  id_bodega="+this.detallepedidocompra.getid_bodega();
			} else {
				sFinalQuery+="  WHERE  id_bodega=-1";
			}



			//BUCLE RECURSIVO
			this.setActualProductoForeignKey(this.detallepedidocompra.getid_bodega(),true,sFormularioTipoBusqueda);

			this.cargarCombosProductosForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}



	public void recargarFormDetallePedidoCompraid_unidad(JComboBox<?> jComboBoxGenericoUnidad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Producto")){
				this.setActualParaGuardarProductoForeignKey(this.detallepedidocompra,jComboBoxGenericoUnidad);
			}

			if(this.detallepedidocompra.getid_producto()!=null && this.detallepedidocompra.getid_producto()!=0L) {
				sFinalQuery+="  WHERE  id_producto="+this.detallepedidocompra.getid_producto();
			} else {
				sFinalQuery+="  WHERE  id_producto=-1";
			}



			//BUCLE RECURSIVO
			this.setActualUnidadForeignKey(this.detallepedidocompra.getid_producto(),true,sFormularioTipoBusqueda);

			this.cargarCombosUnidadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public DetallePedidoCompraBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetallePedidoCompraBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetallePedidoCompraBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean(); 
		this.detallepedidocompraConstantesFunciones=new DetallePedidoCompraConstantesFunciones(); 
		this.detallepedidocompraBean=new DetallePedidoCompra();//(this.detallepedidocompraConstantesFunciones); 		
		this.detallepedidocompraReturnGeneral=new DetallePedidoCompraParameterReturnGeneral(); 
		
		this.detallepedidocompraSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detallepedidocompraSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetallePedidoCompraBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetallePedidoCompraBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetallePedidoCompraBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetallePedidoCompra(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detallepedidocompraConstantesFunciones=new DetallePedidoCompraConstantesFunciones(); 
			this.detallepedidocompraBean=new DetallePedidoCompra();//this.detallepedidocompraConstantesFunciones); 			
			this.detallepedidocompraReturnGeneral=new DetallePedidoCompraParameterReturnGeneral(); 
		
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Pedido Compra Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detallepedidocompra=new DetallePedidoCompra();
			this.detallepedidocompras = new ArrayList<DetallePedidoCompra>();
			this.detallepedidocomprasAux = new ArrayList<DetallePedidoCompra>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic=new DetallePedidoCompraLogic();
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}
			
			//this.detallepedidocompraSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detallepedidocompraSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetallePedidoCompra);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetallePedidoCompra);	
					}
					
					if(this.jInternalFrameImportacionDetallePedidoCompra!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetallePedidoCompra);							
					}
					
				}
				
				if(this.jInternalFrameTotalesDetallePedidoCompra!=null) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetallePedidoCompra);
				}
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByDetallePedidoCompra!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetallePedidoCompra);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetallePedidoCompra);
				this.jInternalFrameDetalleFormDetallePedidoCompra.setVisible(false);
				this.jInternalFrameDetalleFormDetallePedidoCompra.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetallePedidoCompra);
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.setVisible(false);
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetallePedidoCompra!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetallePedidoCompra);
					this.jInternalFrameImportacionDetallePedidoCompra.setVisible(false);
					this.jInternalFrameImportacionDetallePedidoCompra.setSelected(false);
				}
				
				
			}
			
			if(this.jInternalFrameTotalesDetallePedidoCompra!=null) {
				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetallePedidoCompra);
				this.jInternalFrameTotalesDetallePedidoCompra.setVisible(false);
				this.jInternalFrameTotalesDetallePedidoCompra.setSelected(false);
			}
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByDetallePedidoCompra!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetallePedidoCompra);
					this.jInternalFrameOrderByDetallePedidoCompra.setVisible(false);
					this.jInternalFrameOrderByDetallePedidoCompra.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetallePedidoCompraActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetallePedidoCompraConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detallepedidocompraReturnGeneral=new DetallePedidoCompraParameterReturnGeneral();
			
			this.detallepedidocompraParameterGeneral=new DetallePedidoCompraParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detallepedidocompraLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetallePedidoCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetallePedidoCompraConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),this.detallepedidocompraSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetallePedidoCompraConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),this.detallepedidocompraSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=false;
			this.isVisibilidadCeldaDuplicarDetallePedidoCompra=true;
			this.isVisibilidadCeldaCopiarDetallePedidoCompra=true;
			this.isVisibilidadCeldaVerFormDetallePedidoCompra=true;
			this.isVisibilidadCeldaOrdenDetallePedidoCompra=true;
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
			this.isVisibilidadCeldaModificarDetallePedidoCompra=false;
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=false;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=false;
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=false;
			this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdPedidoCompra=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdUnidad=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetallePedidoCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetallePedidoCompra();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetallePedidoCompra(false);
			
			this.setPermisosUsuarioDetallePedidoCompra();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado() 
				|| (this.detallepedidocompraSessionBean.getEsGuardarRelacionado() && this.detallepedidocompraSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetallePedidoCompraClasesRelacionadas();
			}
			
			if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetallePedidoCompraClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetallePedidoCompra();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetallePedidoCompra();
			}
			
			if(!this.isPermisoBusquedaDetallePedidoCompra) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetallePedidoCompra,this.isPermisoPaginacionMedioDetallePedidoCompra,this.isPermisoPaginacionTodoDetallePedidoCompra);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetallePedidoCompraConstantesFunciones.getTiposSeleccionarDetallePedidoCompra());
				
				this.tiposColumnasSelect=DetallePedidoCompraConstantesFunciones.getTiposSeleccionarDetallePedidoCompra(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetallePedidoCompra();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetallePedidoCompra(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetallePedidoCompra(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetallePedidoCompra() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			this.arrDatoGeneralTotales= new  ArrayList<DatoGeneral>();
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.pedidocompraLogic=new PedidoCompraLogic();
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.unidadLogic=new UnidadLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detallepedidocompraImplementable= (DetallePedidoCompraImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetallePedidoCompraConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detallepedidocompraImplementableHome= (DetallePedidoCompraImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetallePedidoCompraConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detallepedidocompras= new ArrayList<DetallePedidoCompra>();
			this.detallepedidocomprasEliminados= new ArrayList<DetallePedidoCompra>();
						
			this.isEsNuevoDetallePedidoCompra=false;
			this.esParaAccionDesdeFormularioDetallePedidoCompra=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idProductoActual=0L;
			this.idCentroCostoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.pedidocomprasForeignKey=new ArrayList<PedidoCompra>() ;
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.unidadsForeignKey=new ArrayList<Unidad>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetallePedidoCompra(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetallePedidoCompra();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetallePedidoCompraConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetallePedidoCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetallePedidoCompra(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetallePedidoCompra();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetallePedidoCompra();
			}
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetallePedidoCompra.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetallePedidoCompra.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetallePedidoCompra.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetallePedidoCompra(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetallePedidoCompra: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetallePedidoCompra() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetallePedidoCompra")) {
				iIndex=this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetallePedidoCompra();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDetallePedidoCompra(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetallePedidoCompra(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetallePedidoCompra(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetallePedidoCompraListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetallePedidoCompra();
		
		this.cargarCombosFrameForeignKeyDetallePedidoCompra();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetallePedidoCompra();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetallePedidoCompra();
		}
	}
	
	

	public void cargarCombosForeignKeyPedidoCompra(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPedidoCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPedidoCompra();
				this.cargarCombosFramePedidoComprasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPedidoCompra(this.pedidocomprasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodega("Todos");
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaUnidad(this.unidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetallePedidoCompraActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			
			if(jTableDatosDetallePedidoCompra.getRowCount()>=1) {
				jTableDatosDetallePedidoCompra.removeRowSelectionInterval(0, jTableDatosDetallePedidoCompra.getRowCount()-1);						
			}
			
			this.isEsNuevoDetallePedidoCompra=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetallePedidoCompra(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetallePedidoCompra(true);			
			//this.detallepedidocompra=new DetallePedidoCompra();
			//this.detallepedidocompra.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetallePedidoCompra(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetallePedidoCompra() ;
			
			if(DetallePedidoCompraJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetallePedidoCompra(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detallepedidocompra);	
			this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);				
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetallePedidoCompra: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetallePedidoCompraActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetallePedidoCompra.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetallePedidoCompra.getSelectedRows().length;			
			}
			
			detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetallePedidoCompra--;			
				//DetallePedidoCompra detallepedidocompraAux= new DetallePedidoCompra();			
				//detallepedidocompraAux.setId(this.iIdNuevoDetallePedidoCompra);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetallePedidoCompra detallepedidocompraOrigen=new DetallePedidoCompra();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetallePedidoCompra detallepedidocompraOrigen : detallepedidocomprasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detallepedidocompraOrigen =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallepedidocompraOrigen =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetallePedidoCompra();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detallepedidocompra.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetallePedidoCompra(detallepedidocompraOrigen,this.detallepedidocompra,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallepedidocompraLogic.getDetallePedidoCompras().add(this.detallepedidocompraAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallepedidocompras.add(this.detallepedidocompraAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
				
				this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(this.getIndiceNuevoDetallePedidoCompra(), this.getIndiceNuevoDetallePedidoCompra());
				
				int iLastRow =  this.jTableDatosDetallePedidoCompra.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetallePedidoCompra.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetallePedidoCompra.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();									
		
			DetallePedidoCompra detallepedidocompraOrigen=new DetallePedidoCompra();
			DetallePedidoCompra detallepedidocompraDestino=new DetallePedidoCompra();
				
			detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetallePedidoCompra.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detallepedidocomprasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetallePedidoCompra.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraOrigen =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallepedidocompraOrigen =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallepedidocompraDestino =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallepedidocompraDestino =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detallepedidocompraOrigen =detallepedidocomprasSeleccionados.get(0);
				detallepedidocompraDestino =detallepedidocomprasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetallePedidoCompra(detallepedidocompraOrigen,detallepedidocompraDestino,true,false);
				
				detallepedidocompraDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallepedidocompraDestino,detallepedidocompraLogic.getDetallePedidoCompras());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallepedidocompraDestino,detallepedidocompras);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
				
				//this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(this.getIndiceNuevoDetallePedidoCompra(), this.getIndiceNuevoDetallePedidoCompra());
				
				int iLastRow =  this.jTableDatosDetallePedidoCompra.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetallePedidoCompra.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetallePedidoCompra.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetallePedidoCompra.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetallePedidoCompra.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesDetallePedidoCompra.setVisible(!isVisible);
			this.jPanelPaginacionDetallePedidoCompra.setVisible(!isVisible);
			this.jPanelAccionesDetallePedidoCompra.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetallePedidoCompra();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoDetallePedidoCompra();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionDetallePedidoCompra();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirTotalesDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.abrirInicializarFrameTotalesDetallePedidoCompra();
			
			this.abrirFrameTotalesDetallePedidoCompra();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarTotalesDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.cerrarFrameTotalesDetallePedidoCompra();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirOrderByDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByDetallePedidoCompra();
			
			this.abrirFrameOrderByDetallePedidoCompra();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByDetallePedidoCompra();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetallePedidoCompra(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetallePedidoCompra);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetallePedidoCompra.isMaximum()) {
					this.jInternalFrameDetalleFormDetallePedidoCompra.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetallePedidoCompra.setSize(this.jInternalFrameDetalleFormDetallePedidoCompra.iWidthFormulario,this.jInternalFrameDetalleFormDetallePedidoCompra.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetallePedidoCompra.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetallePedidoCompra.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetallePedidoCompra.isMaximum()) {
						this.jInternalFrameDetalleFormDetallePedidoCompra.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetallePedidoCompra.jContentPaneDetalleDetallePedidoCompra.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetallePedidoCompra.jContentPaneDetalleDetallePedidoCompra.getWidth(),DetallePedidoCompraConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetallePedidoCompra.jContentPaneDetalleDetallePedidoCompra.getWidth(),DetallePedidoCompraConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetallePedidoCompra.jContentPaneDetalleDetallePedidoCompra.getWidth(),DetallePedidoCompraConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetallePedidoCompra.setVisible(true);
	        this.jInternalFrameDetalleFormDetallePedidoCompra.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByDetallePedidoCompra() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetallePedidoCompra==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetallePedidoCompra=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetallePedidoCompra,false,this);
				} else {
					this.jInternalFrameOrderByDetallePedidoCompra=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetallePedidoCompra,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetallePedidoCompra);
				this.jInternalFrameOrderByDetallePedidoCompra.setVisible(false);
				this.jInternalFrameOrderByDetallePedidoCompra.setSelected(false);
				
				this.jInternalFrameOrderByDetallePedidoCompra.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetallePedidoCompra"));
				
				this.inicializarActualizarBindingTablaOrderByDetallePedidoCompra();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionDetallePedidoCompra() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetallePedidoCompra==null) {
				
				this.jInternalFrameImportacionDetallePedidoCompra=new ImportacionJInternalFrame(DetallePedidoCompraConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetallePedidoCompra);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetallePedidoCompra);
				this.jInternalFrameImportacionDetallePedidoCompra.setVisible(false);
				this.jInternalFrameImportacionDetallePedidoCompra.setSelected(false);


				this.jInternalFrameImportacionDetallePedidoCompra.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetallePedidoCompra"));
				this.jInternalFrameImportacionDetallePedidoCompra.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetallePedidoCompra"));
				this.jInternalFrameImportacionDetallePedidoCompra.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetallePedidoCompra"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoDetallePedidoCompra() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetallePedidoCompra==null) {
				this.jInternalFrameReporteDinamicoDetallePedidoCompra=new ReporteDinamicoJInternalFrame(DetallePedidoCompraConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetallePedidoCompra);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetallePedidoCompra);
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.setVisible(false);
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetallePedidoCompra"));
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetallePedidoCompra"));
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetallePedidoCompra"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetallePedidoCompra();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	public void abrirInicializarFrameTotalesDetallePedidoCompra() throws Exception {	    	        
	    try {			
			if(this.jInternalFrameTotalesDetallePedidoCompra==null) {
				this.jInternalFrameTotalesDetallePedidoCompra=new TotalesJInternalFrame(this.jButtonAbrirTotalesDetallePedidoCompra,STIPO_TAMANIO_GENERAL,this);
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetallePedidoCompra);

				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetallePedidoCompra);
				this.jInternalFrameTotalesDetallePedidoCompra.setVisible(false);
				this.jInternalFrameTotalesDetallePedidoCompra.setSelected(false);


				this.jInternalFrameTotalesDetallePedidoCompra.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetallePedidoCompra"));
								
				this.inicializarActualizarBindingTablaTotalesDetallePedidoCompra();
				
				this.redimensionarTablaTotales();
			}			
		} catch (final Exception e) {
			
		}
	}	
	
		
					
	public void cerrarFrameDetalleDetallePedidoCompra() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetallePedidoCompra);
			
	       	this.jInternalFrameDetalleFormDetallePedidoCompra.setVisible(false);
	        this.jInternalFrameDetalleFormDetallePedidoCompra.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetallePedidoCompra.dispose();
			//this.jInternalFrameDetalleFormDetallePedidoCompra=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoDetallePedidoCompra() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetallePedidoCompra.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetallePedidoCompra.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionDetallePedidoCompra() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetallePedidoCompra.setVisible(true);
	        this.jInternalFrameImportacionDetallePedidoCompra.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	public void abrirFrameTotalesDetallePedidoCompra() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetallePedidoCompra.setVisible(true);
	        this.jInternalFrameTotalesDetallePedidoCompra.setSelected(true);
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }
	}
	
	public void cerrarFrameTotalesDetallePedidoCompra() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetallePedidoCompra.setVisible(false);
	        this.jInternalFrameTotalesDetallePedidoCompra.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	
	public void abrirFrameOrderByDetallePedidoCompra() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetallePedidoCompra.setVisible(true);
	        this.jInternalFrameOrderByDetallePedidoCompra.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByDetallePedidoCompra() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetallePedidoCompra.setVisible(false);
	        this.jInternalFrameOrderByDetallePedidoCompra.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoDetallePedidoCompra() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetallePedidoCompra.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetallePedidoCompra.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionDetallePedidoCompra() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetallePedidoCompra.setVisible(false);
	        this.jInternalFrameImportacionDetallePedidoCompra.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetallePedidoCompra(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetallePedidoCompra(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetallePedidoCompra(true);
			//this.isEsNuevoDetallePedidoCompra=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetallePedidoCompra("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetallePedidoCompra(false) ;
			
			if(detallepedidocompraSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DetallePedidoCompraJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetallePedidoCompra(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetallePedidoCompra(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetallePedidoCompraActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetallePedidoCompra(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetallePedidoCompra(true);
			//this.isEsNuevoDetallePedidoCompra=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detallepedidocompra.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetallePedidoCompra("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetallePedidoCompra(false) ;
			
			if(DetallePedidoCompraJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetallePedidoCompra(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetallePedidoCompra(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Producto")) {
				if(!this.detallepedidocompraConstantesFunciones.cargarid_productoDetallePedidoCompra) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
			
			if(sType.equals("CentroCosto")) {
				if(!this.detallepedidocompraConstantesFunciones.cargarid_centro_costoDetallePedidoCompra) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	
	
	public void recargarComboTablaPedidoCompra(List<PedidoCompra> pedidocomprasForeignKey)throws Exception{
		TableColumn tableColumnPedidoCompra=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA));
		TableCellEditor tableCellEditorPedidoCompra =tableColumnPedidoCompra.getCellEditor();

		PedidoCompraTableCell pedidocompraTableCellFk=(PedidoCompraTableCell)tableCellEditorPedidoCompra;

		if(pedidocompraTableCellFk!=null) {
			pedidocompraTableCellFk.setpedidocomprasForeignKey(pedidocomprasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//pedidocompraTableCellFk.setRowActual(intSelectedRow);
			//pedidocompraTableCellFk.setpedidocomprasForeignKeyActual(pedidocomprasForeignKey);
		//}


		if(pedidocompraTableCellFk!=null) {
			pedidocompraTableCellFk.RecargarPedidoComprasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaUnidad(List<Unidad> unidadsForeignKey)throws Exception{
		TableColumn tableColumnUnidad=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD));
		TableCellEditor tableCellEditorUnidad =tableColumnUnidad.getCellEditor();

		UnidadTableCell unidadTableCellFk=(UnidadTableCell)tableCellEditorUnidad;

		if(unidadTableCellFk!=null) {
			unidadTableCellFk.setunidadsForeignKey(unidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//unidadTableCellFk.setRowActual(intSelectedRow);
			//unidadTableCellFk.setunidadsForeignKeyActual(unidadsForeignKey);
		//}


		if(unidadTableCellFk!=null) {
			unidadTableCellFk.RecargarUnidadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetallePedidoCompra(false);
			
			//if(!this.isEsNuevoDetallePedidoCompra) {								
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				
			}
			
			if(this.permiteMantenimiento(this.detallepedidocompra)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetallePedidoCompra=true;
					this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
					this.isEsNuevoDetallePedidoCompra=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetallePedidoCompra=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetallePedidoCompra=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetallePedidoCompra(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetallePedidoCompra(false);
				
				this.habilitarDeshabilitarControlesDetallePedidoCompra(false);
			
												
				
				if(DetallePedidoCompraJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetallePedidoCompra();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetallePedidoCompraActionPerformed(evt,detallepedidocompraSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetallePedidoCompra(this.detallepedidocompra,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detallepedidocompraSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detallepedidocompra.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				this.detallepedidocompra.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				this.detallepedidocompra.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detallepedidocompra)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetallePedidoCompraModel) this.jTableDatosDetallePedidoCompra.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetallePedidoCompra=true;
				this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
				this.isEsNuevoDetallePedidoCompra=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetallePedidoCompra(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetallePedidoCompra(false);
				
				this.habilitarDeshabilitarControlesDetallePedidoCompra(false);
				
				
				
				if(DetallePedidoCompraJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetallePedidoCompra();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetallePedidoCompra.getRowCount()>=1) {
				jTableDatosDetallePedidoCompra.removeRowSelectionInterval(0, jTableDatosDetallePedidoCompra.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetallePedidoCompra(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetallePedidoCompra(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetallePedidoCompra(false) ;
			
			this.isEsNuevoDetallePedidoCompra=false;
			
			if(DetallePedidoCompraJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetallePedidoCompra();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetallePedidoCompra(false);
				
				//SI ES MANUAL
				if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetallePedidoCompra();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetallePedidoCompra--;			
			//DetallePedidoCompra detallepedidocompraAux= new DetallePedidoCompra();			
			//detallepedidocompraAux.setId(this.iIdNuevoDetallePedidoCompra);
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetallePedidoCompra();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
			
			this.detallepedidocompra.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detallepedidocompraLogic.getDetallePedidoCompras().add(this.detallepedidocompraAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detallepedidocompras.add(this.detallepedidocompraAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
			
			this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(this.getIndiceNuevoDetallePedidoCompra(), this.getIndiceNuevoDetallePedidoCompra());
			
			int iLastRow =  this.jTableDatosDetallePedidoCompra.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetallePedidoCompra.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetallePedidoCompra.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetallePedidoCompra(false);
			
			//SI ES MANUAL
			if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetallePedidoCompra();
			}
			
			//this.abrirFrameTreeDetallePedidoCompra();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle Pedido CompraS ?", "MANTENIMIENTO DE Detalle Pedido Compra", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetallePedidoCompra.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetallePedidoCompra();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detallepedidocompraReturnGeneral=detallepedidocompraLogic.procesarImportacionDetallePedidoComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detallepedidocompraParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetallePedidoCompraReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetallePedidoCompra.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetallePedidoCompra.setFileImportacion(this.jInternalFrameImportacionDetallePedidoCompra.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetallePedidoCompra.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetallePedidoCompra.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetallePedidoCompra.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetallePedidoCompra.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		

		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetallePedidoCompraBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetallePedidoCompraBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetallePedidoCompras("Todos",detallepedidocomprasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_PedidoCompra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_PedidoCompra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_PedidoCompra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_PedidoCompra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Unidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Unidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Unidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Unidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidadPedido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidadPedido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidadPedido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidadPedido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoUnitario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoUnitario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoUnitario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoUnitario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidadEntregada_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidadEntregada_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidadEntregada_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidadEntregada_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidadPendiente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidadPendiente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidadPendiente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidadPendiente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA:
					sNombreCampoCategoria="id_pedido_compra";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoria="id_unidad";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO:
					sNombreCampoCategoria="cantidad_pedido";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoria="costo_unitario";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoria="costo_total";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA:
					sNombreCampoCategoria="cantidad_entregada";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE:
					sNombreCampoCategoria="cantidad_pendiente";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA:
					sNombreCampoCategoriaValor="id_pedido_compra";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoriaValor="id_unidad";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO:
					sNombreCampoCategoriaValor="cantidad_pedido";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoriaValor="costo_unitario";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoriaValor="costo_total";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA:
					sNombreCampoCategoriaValor="cantidad_entregada";
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE:
					sNombreCampoCategoriaValor="cantidad_pendiente";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pedido Compra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pedido_compra");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Unidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_unidad");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad Pedido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad_pedido");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Unitario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_unitario");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_total");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad Entregada",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad_entregada");
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad Pendiente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad_pendiente");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallepedidocompra";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetallePedidoCompras");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getpedidocompra_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getunidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getcantidad_pedido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getcosto_unitario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getcosto_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getcantidad_entregada());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE);
					iRow++;

					for(DetallePedidoCompra detallepedidocompra:detallepedidocomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallepedidocompra.getcantidad_pendiente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetallePedidoCompra(row);				
			//	iRow++;
			//}				
			
			//for(DetallePedidoCompra detallepedidocompraAux:detallepedidocomprasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetallePedidoCompra(detallepedidocompraAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetallePedidoCompra(false);
			
			//SI ES MANUAL
			if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetallePedidoCompra();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetallePedidoCompra(false);
			
			//SI ES MANUAL
			if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetallePedidoCompra();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetallePedidoCompra(false);
			
			//SI ES MANUAL
			if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetallePedidoCompra();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetallePedidoCompra() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetallePedidoCompra.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetallePedidoCompra.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetallePedidoCompra.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetallePedidoCompra.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetallePedidoCompra.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetallePedidoCompra.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetallePedidoCompra.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetallePedidoCompra(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetallePedidoCompra(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetallePedidoCompra(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetallePedidoCompra(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetallePedidoCompra(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetallePedidoCompra(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetallePedidoCompra(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetallePedidoCompra(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetallePedidoCompra() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetallePedidoCompra();
		
		this.inicializarActualizarBindingBotonesManualDetallePedidoCompra(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualDetallePedidoCompra();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetallePedidoCompra() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetallePedidoCompra(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetallePedidoCompra(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetallePedidoCompra.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetallePedidoCompra.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetallePedidoCompra.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetallePedidoCompra.jCheckBoxPostAccionNuevoDetallePedidoCompra.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetallePedidoCompra.jCheckBoxPostAccionSinCerrarDetallePedidoCompra.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetallePedidoCompra.jCheckBoxPostAccionSinMensajeDetallePedidoCompra.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetallePedidoCompra.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetallePedidoCompra.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteDetallePedidoCompra.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jCheckBoxPostAccionNuevoDetallePedidoCompra.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetallePedidoCompra.jCheckBoxPostAccionSinCerrarDetallePedidoCompra.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetallePedidoCompra.jCheckBoxPostAccionSinMensajeDetallePedidoCompra.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionDetallePedidoCompra.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetallePedidoCompra.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetallePedidoCompra.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetallePedidoCompra.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetallePedidoCompra.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetallePedidoCompra.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetallePedidoCompra.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetallePedidoCompra.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetallePedidoCompra.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetallePedidoCompra(Boolean esInicializar) throws Exception {
		try	{	
			if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetallePedidoCompra(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetallePedidoCompra() throws Exception {
		try	{
			if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetallePedidoCompra();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetallePedidoCompra() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetallePedidoCompra() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetallePedidoCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetallePedidoCompra.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetallePedidoCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetallePedidoCompra.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetallePedidoCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetallePedidoCompra.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetallePedidoCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetallePedidoCompra.addItem(reporte);
			}
			
			
			if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetallePedidoCompra.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetallePedidoCompra.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetallePedidoCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetallePedidoCompra.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetallePedidoCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetallePedidoCompra.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetallePedidoCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetallePedidoCompra.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetallePedidoCompra.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetallePedidoCompra();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetallePedidoCompra() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetallePedidoCompraConstantesFunciones.getTiposSeleccionarDetallePedidoCompra(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetallePedidoCompraConstantesFunciones.getTiposSeleccionarDetallePedidoCompra(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetallePedidoCompraConstantesFunciones.getTiposSeleccionarDetallePedidoCompra(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualDetallePedidoCompra()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoDetallePedidoCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.getSelectedItem()!=null){this.id_pedido_compraFK_IdPedidoCompra=((PedidoCompra)this.jComboBoxid_pedido_compraFK_IdPedidoCompraDetallePedidoCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoDetallePedidoCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.getSelectedItem()!=null){this.id_unidadFK_IdUnidad=((Unidad)this.jComboBoxid_unidadFK_IdUnidadDetallePedidoCompra.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasDetallePedidoCompra(Boolean esInicializar) throws Exception {				
		if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualDetallePedidoCompra();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetallePedidoCompra() throws Exception {
		this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByDetallePedidoCompra() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetallePedidoCompraOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompraOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	public void inicializarActualizarBindingTablaTotalesDetallePedidoCompra() {		
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		
		//TABLA TOTALES
		this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
		//DEFINIR RENDERERS TOTALES
		tableColumn=this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales(),Constantes2.S_TIPO));			
		//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
				
				
		tableColumn=this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales(),Constantes2.S_TOTAL));
		//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());		
	}
	
	public void inicializarActualizarBindingTablaDetallePedidoCompra(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detallepedidocompraLogic.getDetallePedidoCompras().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detallepedidocompras.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetallePedidoCompra.setModel(new DetallePedidoCompraModel(this.detallepedidocompraLogic.getDetallePedidoCompras(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetallePedidoCompra.setModel(new DetallePedidoCompraModel(this.detallepedidocompras,this));
			}
			//ARCHITECTURE
			
			if(this.jInternalFrameTotalesDetallePedidoCompra!=null) {
				//TABLA TOTALES
				this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
				//DEFINIR RENDERERS TOTALES
				tableColumn=this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales(),Constantes2.S_TIPO));			
				//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
				
				
				tableColumn=this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetallePedidoCompra.getjTableDatosTotales(),Constantes2.S_TOTAL));
				//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
			}
							
			
			
			if(this.jInternalFrameOrderByDetallePedidoCompra!=null && this.jInternalFrameOrderByDetallePedidoCompra.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetallePedidoCompra();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetallePedidoCompraConstantesFunciones.SCLASSWEBTITULO,detallepedidocompraConstantesFunciones.resaltarSeleccionarDetallePedidoCompra,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetallePedidoCompraConstantesFunciones.SCLASSWEBTITULO,detallepedidocompraConstantesFunciones.resaltarSeleccionarDetallePedidoCompra,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_ID));

		if(this.detallepedidocompraConstantesFunciones.mostraridDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallepedidocompraConstantesFunciones.resaltaridDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activaridDetallePedidoCompra,iSizeTabla,this,true,"idDetallePedidoCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallepedidocompraConstantesFunciones.resaltaridDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activaridDetallePedidoCompra,this,true,"idDetallePedidoCompra","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_pedido_compraDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PedidoCompraTableCell(this.pedidocomprasForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_pedido_compraDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_pedido_compraDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new PedidoCompraTableCell(this.pedidocomprasForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_pedido_compraDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_pedido_compraDetallePedidoCompra,true,"id_pedido_compraDetallePedidoCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_empresaDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_empresaDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_empresaDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_empresaDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_empresaDetallePedidoCompra,false,"id_empresaDetallePedidoCompra","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_sucursalDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_sucursalDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_sucursalDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_sucursalDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_sucursalDetallePedidoCompra,false,"id_sucursalDetallePedidoCompra","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_ejercicioDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_ejercicioDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_ejercicioDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_ejercicioDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_ejercicioDetallePedidoCompra,false,"id_ejercicioDetallePedidoCompra","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_periodoDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_periodoDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_periodoDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_periodoDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_periodoDetallePedidoCompra,false,"id_periodoDetallePedidoCompra","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDANIO));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_anioDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_anioDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_anioDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_anioDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_anioDetallePedidoCompra,true,"id_anioDetallePedidoCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDMES));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_mesDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_mesDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_mesDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_mesDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_mesDetallePedidoCompra,true,"id_mesDetallePedidoCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_bodegaDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_bodegaDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_bodegaDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_bodegaDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_bodegaDetallePedidoCompra,true,"id_bodegaDetallePedidoCompra","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_productoDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_productoDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_productoDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_productoDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_productoDetallePedidoCompra,true,"id_productoDetallePedidoCompra","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_unidadDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new UnidadTableCell(this.unidadsForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_unidadDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_unidadDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new UnidadTableCell(this.unidadsForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_unidadDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_unidadDetallePedidoCompra,true,"id_unidadDetallePedidoCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.detallepedidocompraConstantesFunciones.mostrarid_centro_costoDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_centro_costoDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_centro_costoDetallePedidoCompra,iSizeTabla));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.detallepedidocompraConstantesFunciones.resaltarid_centro_costoDetallePedidoCompra,this,this.detallepedidocompraConstantesFunciones.activarid_centro_costoDetallePedidoCompra,true,"id_centro_costoDetallePedidoCompra","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO));

		if(this.detallepedidocompraConstantesFunciones.mostrarcantidad_pedidoDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallepedidocompraConstantesFunciones.resaltarcantidad_pedidoDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcantidad_pedidoDetallePedidoCompra,iSizeTabla,this,true,"cantidad_pedidoDetallePedidoCompra","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallepedidocompraConstantesFunciones.resaltarcantidad_pedidoDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcantidad_pedidoDetallePedidoCompra,this,true,"cantidad_pedidoDetallePedidoCompra","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO));

		if(this.detallepedidocompraConstantesFunciones.mostrarcosto_unitarioDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallepedidocompraConstantesFunciones.resaltarcosto_unitarioDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcosto_unitarioDetallePedidoCompra,iSizeTabla,this,true,"costo_unitarioDetallePedidoCompra","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallepedidocompraConstantesFunciones.resaltarcosto_unitarioDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcosto_unitarioDetallePedidoCompra,this,true,"costo_unitarioDetallePedidoCompra","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL));

		if(this.detallepedidocompraConstantesFunciones.mostrarcosto_totalDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallepedidocompraConstantesFunciones.resaltarcosto_totalDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcosto_totalDetallePedidoCompra,iSizeTabla,this,true,"costo_totalDetallePedidoCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallepedidocompraConstantesFunciones.resaltarcosto_totalDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcosto_totalDetallePedidoCompra,this,true,"costo_totalDetallePedidoCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detallepedidocompraConstantesFunciones.mostrardescripcionDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallepedidocompraConstantesFunciones.resaltardescripcionDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activardescripcionDetallePedidoCompra,iSizeTabla,this,true,"descripcionDetallePedidoCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallepedidocompraConstantesFunciones.resaltardescripcionDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activardescripcionDetallePedidoCompra,this,true,"descripcionDetallePedidoCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA));

		if(this.detallepedidocompraConstantesFunciones.mostrarcantidad_entregadaDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallepedidocompraConstantesFunciones.resaltarcantidad_entregadaDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcantidad_entregadaDetallePedidoCompra,iSizeTabla,this,true,"cantidad_entregadaDetallePedidoCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallepedidocompraConstantesFunciones.resaltarcantidad_entregadaDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcantidad_entregadaDetallePedidoCompra,this,true,"cantidad_entregadaDetallePedidoCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE));

		if(this.detallepedidocompraConstantesFunciones.mostrarcantidad_pendienteDetallePedidoCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallepedidocompraConstantesFunciones.resaltarcantidad_pendienteDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcantidad_pendienteDetallePedidoCompra,iSizeTabla,this,true,"cantidad_pendienteDetallePedidoCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallepedidocompraConstantesFunciones.resaltarcantidad_pendienteDetallePedidoCompra,this.detallepedidocompraConstantesFunciones.activarcantidad_pendienteDetallePedidoCompra,this,true,"cantidad_pendienteDetallePedidoCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetallePedidoCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetallePedidoCompra.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetallePedidoCompra.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetallePedidoCompra.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetallePedidoCompra.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetallePedidoCompra.moveColumn(this.jTableDatosDetallePedidoCompra.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetallePedidoCompra.moveColumn(this.jTableDatosDetallePedidoCompra.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetallePedidoCompra.moveColumn(this.jTableDatosDetallePedidoCompra.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetallePedidoCompra.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetallePedidoCompra.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetallePedidoCompra,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetallePedidoCompra.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetallePedidoCompra.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetallePedidoCompra.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetallePedidoCompra.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detallepedidocompraLogic.getDetallePedidoCompras().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detallepedidocompras.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetallePedidoCompra.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetallePedidoCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetallePedidoCompra();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetallePedidoCompra=false;
					
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetallePedidoCompra.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detallepedidocompra.getsType().equals("DUPLICADO")
				   || this.detallepedidocompra.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetallePedidoCompra=true;
				
				} else {
					this.isEsNuevoDetallePedidoCompra=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
					if(this.detallepedidocompra.getId()>=0 && !this.detallepedidocompra.getIsNew()) {						
						this.isEsNuevoDetallePedidoCompra=false;
						
					} else {
						this.isEsNuevoDetallePedidoCompra=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetallePedidoCompra(esRelaciones);						
				
				this.seleccionarDetallePedidoCompra(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detallepedidocompra.getId()<0) {
					this.isEsNuevoDetallePedidoCompra=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetallePedidoCompra(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetallePedidoCompra(evt,rowIndex);
				}	
				
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetallePedidoCompra: " + this.dDif); 
					}
				}								
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetallePedidoCompra(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detallepedidocompra)) {
					if(this.detallepedidocompra.getId()>0) {
						this.detallepedidocompra.setIsDeleted(true);
						
						this.detallepedidocomprasEliminados.add(this.detallepedidocompra);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallepedidocompraLogic.getDetallePedidoCompras().remove(this.detallepedidocompra);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallepedidocompras.remove(this.detallepedidocompra);				
					}
					
					
					((DetallePedidoCompraModel) this.jTableDatosDetallePedidoCompra.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetallePedidoCompra(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetallePedidoCompra(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetallePedidoCompra) {
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetallePedidoCompra.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetallePedidoCompra.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetallePedidoCompra(this.detallepedidocompra);
				}
				
				//ARCHITECTURE
				try {
					

					//PedidoCompra
					if(!this.detallepedidocompraConstantesFunciones.cargarid_pedido_compraDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_pedido_compraDetallePedidoCompra) {
						//this.cargarCombosPedidoComprasForeignKeyLista(" where id="+this.detallepedidocompra.getid_pedido_compra());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.pedidocomprasForeignKey=new ArrayList<PedidoCompra>();

						if(detallepedidocompra.getPedidoCompra()!=null) {
							this.pedidocomprasForeignKey.add(detallepedidocompra.getPedidoCompra());
						}

						this.addItemDefectoCombosForeignKeyPedidoCompra();
						this.cargarCombosFramePedidoComprasForeignKey("Todos");
					}
					this.setActualPedidoCompraForeignKey(this.detallepedidocompra.getid_pedido_compra(),false,"Formulario");

					//Empresa
					if(!this.detallepedidocompraConstantesFunciones.cargarid_empresaDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_empresaDetallePedidoCompra) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detallepedidocompra.getid_empresa());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detallepedidocompra.getEmpresa()!=null) {
							this.empresasForeignKey.add(detallepedidocompra.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detallepedidocompra.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detallepedidocompraConstantesFunciones.cargarid_sucursalDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_sucursalDetallePedidoCompra) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detallepedidocompra.getid_sucursal());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detallepedidocompra.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detallepedidocompra.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detallepedidocompra.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.detallepedidocompraConstantesFunciones.cargarid_ejercicioDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_ejercicioDetallePedidoCompra) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detallepedidocompra.getid_ejercicio());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detallepedidocompra.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detallepedidocompra.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detallepedidocompra.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detallepedidocompraConstantesFunciones.cargarid_periodoDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_periodoDetallePedidoCompra) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detallepedidocompra.getid_periodo());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detallepedidocompra.getPeriodo()!=null) {
							this.periodosForeignKey.add(detallepedidocompra.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detallepedidocompra.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.detallepedidocompraConstantesFunciones.cargarid_anioDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_anioDetallePedidoCompra) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detallepedidocompra.getid_anio());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detallepedidocompra.getAnio()!=null) {
							this.aniosForeignKey.add(detallepedidocompra.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detallepedidocompra.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detallepedidocompraConstantesFunciones.cargarid_mesDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_mesDetallePedidoCompra) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detallepedidocompra.getid_mes());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detallepedidocompra.getMes()!=null) {
							this.messForeignKey.add(detallepedidocompra.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detallepedidocompra.getid_mes(),false,"Formulario");

					//Bodega
					if(!this.detallepedidocompraConstantesFunciones.cargarid_bodegaDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_bodegaDetallePedidoCompra) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.detallepedidocompra.getid_bodega());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(detallepedidocompra.getBodega()!=null) {
							this.bodegasForeignKey.add(detallepedidocompra.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.detallepedidocompra.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.detallepedidocompraConstantesFunciones.cargarid_productoDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_productoDetallePedidoCompra) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.detallepedidocompra.getid_producto());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(detallepedidocompra.getProducto()!=null) {
							this.productosForeignKey.add(detallepedidocompra.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.detallepedidocompra.getid_producto(),false,"Formulario");

					//Unidad
					if(!this.detallepedidocompraConstantesFunciones.cargarid_unidadDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_unidadDetallePedidoCompra) {
						//this.cargarCombosUnidadsForeignKeyLista(" where id="+this.detallepedidocompra.getid_unidad());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.unidadsForeignKey=new ArrayList<Unidad>();

						if(detallepedidocompra.getUnidad()!=null) {
							this.unidadsForeignKey.add(detallepedidocompra.getUnidad());
						}

						this.addItemDefectoCombosForeignKeyUnidad();
						this.cargarCombosFrameUnidadsForeignKey("Todos");
					}
					this.setActualUnidadForeignKey(this.detallepedidocompra.getid_unidad(),false,"Formulario");

					//CentroCosto
					if(!this.detallepedidocompraConstantesFunciones.cargarid_centro_costoDetallePedidoCompra || this.detallepedidocompraConstantesFunciones.event_dependid_centro_costoDetallePedidoCompra) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.detallepedidocompra.getid_centro_costo());
									//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(detallepedidocompra.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(detallepedidocompra.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.detallepedidocompra.getid_centro_costo(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetallePedidoCompra("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetallePedidoCompra(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetallePedidoCompra() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetallePedidoCompra(DetallePedidoCompra detallepedidocompra) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetallePedidoCompra(detallepedidocompra,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetallePedidoCompra(detallepedidocompra);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetallePedidoCompra(detallepedidocompra,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetallePedidoCompra(detallepedidocompra);
	}
	
	public void setVariablesObjetoActualToFormularioDetallePedidoCompra(DetallePedidoCompra detallepedidocompra) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.setText(detallepedidocompra.getId().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.setText(detallepedidocompra.getcantidad_pedido().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.setText(detallepedidocompra.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_totalDetallePedidoCompra.setText(detallepedidocompra.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextAreadescripcionDetallePedidoCompra.setText(detallepedidocompra.getdescripcion());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_entregadaDetallePedidoCompra.setText(detallepedidocompra.getcantidad_entregada().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pendienteDetallePedidoCompra.setText(detallepedidocompra.getcantidad_pendiente().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetallePedidoCompra detallepedidocompraLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detallepedidocompraLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetallePedidoCompra detallepedidocompraLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detallepedidocompraLocal=this.detallepedidocompra;
			} else {
				detallepedidocompraLocal=this.detallepedidocompraAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detallepedidocompraLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetallePedidoCompra(detallepedidocompraLocal,true);
					
					if(detallepedidocompraSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detallepedidocompraLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detallepedidocompraLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetallePedidoCompra(detallepedidocompra,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(detallepedidocompra);
	}
	
	public void setVariablesFormularioToObjetoActualDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetallePedidoCompra(detallepedidocompra,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.getText()==null || this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.getText()=="" || this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.getText()=="Id") {
				this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.setText("0");
			}

			if(conColumnasBase) {detallepedidocompra.setId(Long.parseLong(this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetallePedidoCompraConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelIdDetallePedidoCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallepedidocompra.setcantidad_pedido(Integer.parseInt(this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_pedidoDetallePedidoCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallepedidocompra.setcosto_unitario(Double.parseDouble(this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcosto_unitarioDetallePedidoCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallepedidocompra.setcosto_total(Double.parseDouble(this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_totalDetallePedidoCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcosto_totalDetallePedidoCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallepedidocompra.setdescripcion(this.jInternalFrameDetalleFormDetallePedidoCompra.jTextAreadescripcionDetallePedidoCompra.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabeldescripcionDetallePedidoCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallepedidocompra.setcantidad_entregada(Integer.parseInt(this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_entregadaDetallePedidoCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_entregadaDetallePedidoCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallepedidocompra.setcantidad_pendiente(Integer.parseInt(this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pendienteDetallePedidoCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelcantidad_pendienteDetallePedidoCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetallePedidoCompra(DetallePedidoCompra detallepedidocompraBean,DetallePedidoCompra detallepedidocompra,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetallePedidoCompra(DetallePedidoCompra detallepedidocompraOrigen,DetallePedidoCompra detallepedidocompra,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallepedidocompraOrigen.getId()!=null && !detallepedidocompraOrigen.getId().equals(0L))) {detallepedidocompra.setId(detallepedidocompraOrigen.getId());}}
			if(conDefault || (!conDefault && detallepedidocompraOrigen.getcantidad_pedido()!=null && !detallepedidocompraOrigen.getcantidad_pedido().equals(0))) {detallepedidocompra.setcantidad_pedido(detallepedidocompraOrigen.getcantidad_pedido());}
			if(conDefault || (!conDefault && detallepedidocompraOrigen.getcosto_unitario()!=null && !detallepedidocompraOrigen.getcosto_unitario().equals(0.0))) {detallepedidocompra.setcosto_unitario(detallepedidocompraOrigen.getcosto_unitario());}
			if(conDefault || (!conDefault && detallepedidocompraOrigen.getcosto_total()!=null && !detallepedidocompraOrigen.getcosto_total().equals(0.0))) {detallepedidocompra.setcosto_total(detallepedidocompraOrigen.getcosto_total());}
			if(conDefault || (!conDefault && detallepedidocompraOrigen.getdescripcion()!=null && !detallepedidocompraOrigen.getdescripcion().equals(""))) {detallepedidocompra.setdescripcion(detallepedidocompraOrigen.getdescripcion());}
			if(conDefault || (!conDefault && detallepedidocompraOrigen.getcantidad_entregada()!=null && !detallepedidocompraOrigen.getcantidad_entregada().equals(0))) {detallepedidocompra.setcantidad_entregada(detallepedidocompraOrigen.getcantidad_entregada());}
			if(conDefault || (!conDefault && detallepedidocompraOrigen.getcantidad_pendiente()!=null && !detallepedidocompraOrigen.getcantidad_pendiente().equals(0))) {detallepedidocompra.setcantidad_pendiente(detallepedidocompraOrigen.getcantidad_pendiente());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetallePedidoCompra(DetallePedidoCompra detallepedidocompra) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.setText(detallepedidocompra.getId().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.setText(detallepedidocompra.getcantidad_pedido().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.setText(detallepedidocompra.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_totalDetallePedidoCompra.setText(detallepedidocompra.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextAreadescripcionDetallePedidoCompra.setText(detallepedidocompra.getdescripcion());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_entregadaDetallePedidoCompra.setText(detallepedidocompra.getcantidad_entregada().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pendienteDetallePedidoCompra.setText(detallepedidocompra.getcantidad_pendiente().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetallePedidoCompra(DetallePedidoCompraBean detallepedidocompraBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.setText(detallepedidocompraBean.getId().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.setText(detallepedidocompraBean.getcantidad_pedido().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.setText(detallepedidocompraBean.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_totalDetallePedidoCompra.setText(detallepedidocompraBean.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextAreadescripcionDetallePedidoCompra.setText(detallepedidocompraBean.getdescripcion());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_entregadaDetallePedidoCompra.setText(detallepedidocompraBean.getcantidad_entregada().toString());
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pendienteDetallePedidoCompra.setText(detallepedidocompraBean.getcantidad_pendiente().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetallePedidoCompra(DetallePedidoCompraParameterReturnGeneral detallepedidocompraReturnGeneral,DetallePedidoCompraBean detallepedidocompraBean,Boolean conDefault) throws Exception { 
		try {
			DetallePedidoCompra detallepedidocompraLocal=new DetallePedidoCompra();
			
			detallepedidocompraLocal=detallepedidocompraReturnGeneral.getDetallePedidoCompra();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallepedidocompraLocal.getId()!=null && !detallepedidocompraLocal.getId().equals(0L))) {detallepedidocompraBean.setId(detallepedidocompraLocal.getId());}}
			if(conDefault || (!conDefault && detallepedidocompraLocal.getcantidad_pedido()!=null && !detallepedidocompraLocal.getcantidad_pedido().equals(0))) {detallepedidocompraBean.setcantidad_pedido(detallepedidocompraLocal.getcantidad_pedido());}
			if(conDefault || (!conDefault && detallepedidocompraLocal.getcosto_unitario()!=null && !detallepedidocompraLocal.getcosto_unitario().equals(0.0))) {detallepedidocompraBean.setcosto_unitario(detallepedidocompraLocal.getcosto_unitario());}
			if(conDefault || (!conDefault && detallepedidocompraLocal.getcosto_total()!=null && !detallepedidocompraLocal.getcosto_total().equals(0.0))) {detallepedidocompraBean.setcosto_total(detallepedidocompraLocal.getcosto_total());}
			if(conDefault || (!conDefault && detallepedidocompraLocal.getdescripcion()!=null && !detallepedidocompraLocal.getdescripcion().equals(""))) {detallepedidocompraBean.setdescripcion(detallepedidocompraLocal.getdescripcion());}
			if(conDefault || (!conDefault && detallepedidocompraLocal.getcantidad_entregada()!=null && !detallepedidocompraLocal.getcantidad_entregada().equals(0))) {detallepedidocompraBean.setcantidad_entregada(detallepedidocompraLocal.getcantidad_entregada());}
			if(conDefault || (!conDefault && detallepedidocompraLocal.getcantidad_pendiente()!=null && !detallepedidocompraLocal.getcantidad_pendiente().equals(0))) {detallepedidocompraBean.setcantidad_pendiente(detallepedidocompraLocal.getcantidad_pendiente());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetallePedidoCompraGenerico(Long idDetallePedidoCompraSeleccionado,JComboBox jComboBoxDetallePedidoCompra,List<DetallePedidoCompra> detallepedidocomprasLocal)throws Exception {
		try {
			DetallePedidoCompra  detallepedidocompraTemp=null;

			for(DetallePedidoCompra detallepedidocompraAux:detallepedidocomprasLocal) {
				if(detallepedidocompraAux.getId()!=null && detallepedidocompraAux.getId().equals(idDetallePedidoCompraSeleccionado)) {
					detallepedidocompraTemp=detallepedidocompraAux;
					break;
				}
			}

			jComboBoxDetallePedidoCompra.setSelectedItem(detallepedidocompraTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetallePedidoCompraGenerico(JComboBox jComboBoxDetallePedidoCompra,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetallePedidoCompra.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetallePedidoCompra.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetallePedidoCompra.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetallePedidoCompra.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetallePedidoCompra.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetallePedidoCompra.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetallePedidoCompra.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetallePedidoCompra.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetallePedidoCompra.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetallePedidoCompra.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallepedidocompra=(DetallePedidoCompra) detallepedidocompraLogic.getDetallePedidoCompras().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallepedidocompra =(DetallePedidoCompra) detallepedidocompras.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("PedidoCompra")) {
			//sDescripcion=this.getActualPedidoCompraForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getpedidocompra_descripcion();
			} else {
				//sDescripcion=this.getActualPedidoCompraForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getpedidocompra_descripcion();
			}
		}

		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getmes_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getproducto_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallepedidocompra.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Unidad")) {
			//sDescripcion=this.getActualUnidadForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getunidad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallepedidocompra.getunidad_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!detallepedidocompra.getIsNew() && !detallepedidocompra.getIsChanged() && !detallepedidocompra.getIsDeleted()) {
				sDescripcion=detallepedidocompra.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detallepedidocompra.getcentrocosto_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetallePedidoCompra detallepedidocompraRow=new DetallePedidoCompra();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallepedidocompraRow=(DetallePedidoCompra) detallepedidocompraLogic.getDetallePedidoCompras().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallepedidocompraRow=(DetallePedidoCompra) detallepedidocompras.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetallePedidoCompra(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra));			
			this.jButtonDuplicarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaDuplicarDetallePedidoCompra && this.isPermisoDuplicarDetallePedidoCompra));			
			this.jButtonCopiarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaCopiarDetallePedidoCompra && this.isPermisoCopiarDetallePedidoCompra));
			this.jButtonVerFormDetallePedidoCompra.setVisible((this.isVisibilidadCeldaVerFormDetallePedidoCompra && this.isPermisoVerFormDetallePedidoCompra));
			
			this.jButtonAbrirOrderByDetallePedidoCompra.setVisible((this.isVisibilidadCeldaOrdenDetallePedidoCompra && this.isPermisoOrdenDetallePedidoCompra));			
			
			this.jButtonNuevoRelacionesDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra));			
			this.jButtonNuevoGuardarCambiosDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaModificarDetallePedidoCompra && this.isPermisoActualizarDetallePedidoCompra));	
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaActualizarDetallePedidoCompra && this.isPermisoActualizarDetallePedidoCompra));	
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaEliminarDetallePedidoCompra && this.isPermisoEliminarDetallePedidoCompra));
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarDetallePedidoCompra.setVisible(this.isVisibilidadCeldaCancelarDetallePedidoCompra);							
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosDetallePedidoCompra.setVisible((this.isVisibilidadCeldaGuardarDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetallePedidoCompra.setVisible((this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra));						
			this.jButtonDuplicarToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaDuplicarDetallePedidoCompra && this.isPermisoDuplicarDetallePedidoCompra));						
			this.jButtonCopiarToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaCopiarDetallePedidoCompra && this.isPermisoCopiarDetallePedidoCompra));			
			this.jButtonVerFormToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaVerFormDetallePedidoCompra && this.isPermisoVerFormDetallePedidoCompra));			
			this.jButtonAbrirOrderByToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaOrdenDetallePedidoCompra && this.isPermisoOrdenDetallePedidoCompra));
			this.jButtonNuevoRelacionesToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra));			
			this.jButtonNuevoGuardarCambiosToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));			
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaModificarDetallePedidoCompra && this.isPermisoActualizarDetallePedidoCompra));	
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaActualizarDetallePedidoCompra  && this.isPermisoActualizarDetallePedidoCompra));	
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaEliminarDetallePedidoCompra && this.isPermisoEliminarDetallePedidoCompra));
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarToolBarDetallePedidoCompra.setVisible(this.isVisibilidadCeldaCancelarDetallePedidoCompra);				
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaGuardarDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra));			
			this.jMenuItemDuplicarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaDuplicarDetallePedidoCompra && this.isPermisoDuplicarDetallePedidoCompra));			
			this.jMenuItemCopiarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaCopiarDetallePedidoCompra && this.isPermisoCopiarDetallePedidoCompra));			
			this.jMenuItemVerFormDetallePedidoCompra.setVisible((this.isVisibilidadCeldaVerFormDetallePedidoCompra && this.isPermisoVerFormDetallePedidoCompra));			
			this.jMenuItemAbrirOrderByDetallePedidoCompra.setVisible((this.isVisibilidadCeldaOrdenDetallePedidoCompra && this.isPermisoOrdenDetallePedidoCompra));			
			//this.jMenuItemMostrarOcultarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaOrdenDetallePedidoCompra && this.isPermisoOrdenDetallePedidoCompra));
			this.jMenuItemDetalleAbrirOrderByDetallePedidoCompra.setVisible((this.isVisibilidadCeldaOrdenDetallePedidoCompra && this.isPermisoOrdenDetallePedidoCompra));			
			//this.jMenuItemDetalleMostrarOcultarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaOrdenDetallePedidoCompra && this.isPermisoOrdenDetallePedidoCompra));			
			this.jMenuItemNuevoRelacionesDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra));			
			this.jMenuItemNuevoGuardarCambiosDetallePedidoCompra.setVisible((this.isVisibilidadCeldaNuevoDetallePedidoCompra && this.isPermisoNuevoDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));									
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemModificarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaModificarDetallePedidoCompra && this.isPermisoActualizarDetallePedidoCompra));	
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemActualizarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaActualizarDetallePedidoCompra && this.isPermisoActualizarDetallePedidoCompra));	
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemEliminarDetallePedidoCompra.setVisible((this.isVisibilidadCeldaEliminarDetallePedidoCompra && this.isPermisoEliminarDetallePedidoCompra));
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemCancelarDetallePedidoCompra.setVisible(this.isVisibilidadCeldaCancelarDetallePedidoCompra);				
			}
			
			this.jMenuItemGuardarCambiosDetallePedidoCompra.setVisible((this.isVisibilidadCeldaGuardarDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));						
			this.jMenuItemGuardarCambiosTablaDetallePedidoCompra.setVisible((this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=this.jButtonNuevoDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaDuplicarDetallePedidoCompra=this.jButtonDuplicarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaCopiarDetallePedidoCompra=this.jButtonCopiarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaVerFormDetallePedidoCompra=this.jButtonVerFormDetallePedidoCompra.isVisible();
			
			this.isVisibilidadCeldaOrdenDetallePedidoCompra=this.jButtonAbrirOrderByDetallePedidoCompra.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=this.jButtonNuevoRelacionesDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaModificarDetallePedidoCompra=this.jButtonModificarDetallePedidoCompra.isVisible();
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaGuardarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosDetallePedidoCompra.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=this.jButtonGuardarCambiosTablaDetallePedidoCompra.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=this.jButtonNuevoToolBarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=this.jButtonNuevoRelacionesToolBarDetallePedidoCompra.isVisible();
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			this.isVisibilidadCeldaModificarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarToolBarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarToolBarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarToolBarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarToolBarDetallePedidoCompra.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetallePedidoCompra=this.jButtonGuardarCambiosToolBarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=this.jButtonGuardarCambiosTablaToolBarDetallePedidoCompra.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=this.jMenuItemNuevoDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=this.jMenuItemNuevoRelacionesDetallePedidoCompra.isVisible();
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			this.isVisibilidadCeldaModificarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemModificarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemActualizarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemEliminarDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemCancelarDetallePedidoCompra.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetallePedidoCompra=this.jMenuItemGuardarCambiosDetallePedidoCompra.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=this.jMenuItemGuardarCambiosTablaDetallePedidoCompra.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetallePedidoCompra(Boolean esInicializar) {
		if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
				//if(this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetallePedidoCompra();
			}
			
			this.inicializarActualizarBindingBotonesManualDetallePedidoCompra(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetallePedidoCompra() {
		this.jButtonNuevoDetallePedidoCompra.setVisible(this.isPermisoNuevoDetallePedidoCompra);			
		this.jButtonDuplicarDetallePedidoCompra.setVisible(this.isPermisoDuplicarDetallePedidoCompra);			
		this.jButtonCopiarDetallePedidoCompra.setVisible(this.isPermisoCopiarDetallePedidoCompra);			
		this.jButtonVerFormDetallePedidoCompra.setVisible(this.isPermisoVerFormDetallePedidoCompra);			
		
		this.jButtonAbrirOrderByDetallePedidoCompra.setVisible(this.isPermisoOrdenDetallePedidoCompra);					
		
		this.jButtonNuevoRelacionesDetallePedidoCompra.setVisible(this.isPermisoNuevoDetallePedidoCompra);			
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarDetallePedidoCompra.setVisible(this.isPermisoActualizarDetallePedidoCompra);	
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarDetallePedidoCompra.setVisible(this.isPermisoActualizarDetallePedidoCompra);	
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarDetallePedidoCompra.setVisible(this.isPermisoEliminarDetallePedidoCompra);
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarDetallePedidoCompra.setVisible(this.isVisibilidadCeldaCancelarDetallePedidoCompra);						
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosDetallePedidoCompra.setVisible(this.isPermisoGuardarCambiosDetallePedidoCompra);							
		}
		
		this.jButtonGuardarCambiosTablaDetallePedidoCompra.setVisible(this.isPermisoActualizarDetallePedidoCompra);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetallePedidoCompra() {
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarDetallePedidoCompra.setVisible(this.isPermisoActualizarDetallePedidoCompra);	
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarDetallePedidoCompra.setVisible(this.isPermisoActualizarDetallePedidoCompra);	
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarDetallePedidoCompra.setVisible(this.isPermisoEliminarDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarDetallePedidoCompra.setVisible(this.isVisibilidadCeldaCancelarDetallePedidoCompra);							
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosDetallePedidoCompra.setVisible((this.isVisibilidadCeldaGuardarDetallePedidoCompra && this.isPermisoGuardarCambiosDetallePedidoCompra));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetallePedidoCompra() {
		if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetallePedidoCompra();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetallePedidoCompra() {
	}
	
	public void jTableDatosDetallePedidoCompraListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetallePedidoCompra(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detallepedidocompra.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_pedido_compraDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopedidocompra=true;

			idTienePermisopedidocompra=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(PedidoCompraConstantesFunciones.CLASSNAME);

			if(idTienePermisopedidocompra) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.pedidocompraBeanSwingJInternalFrame=new PedidoCompraBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.pedidocompraBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.pedidocompraBeanSwingJInternalFrame.getPedidoCompraLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_pedido_compra()!=null) {
					this.pedidocompraBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.pedidocompraBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_pedido_compra());
					this.pedidocompraBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.pedidocompraBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.pedidocompraBeanSwingJInternalFrame.inicializarActualizarBindingTablaPedidoCompra();
				}

				JInternalFrameBase jinternalFrame =this.pedidocompraBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBorderpedidocompra=(TitledBorder)this.pedidocompraBeanSwingJInternalFrame.jScrollPanelDatosPedidoCompra.getBorder();

				titledBorderpedidocompra.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Pedido Compra");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_pedido_compraDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_pedido_compra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pedido_compra = "+this.detallepedidocompra.getid_pedido_compra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detallepedidocompra.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detallepedidocompra.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detallepedidocompra.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detallepedidocompra.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detallepedidocompra.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detallepedidocompra.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.detallepedidocompra.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoDetallePedidoCompraActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {

				//BUSQUEDA FILTRADA DESDE COMBO EVENT Y EVENTDEPEND
				this.productoBeanSwingJInternalFrame.sFinalQueryGeneral=this.sFinalQueryComboProducto;
				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetallePedidoCompra=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosDetallePedidoCompra.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.detallepedidocompra.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_unidadDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisounidad=true;

			idTienePermisounidad=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(UnidadConstantesFunciones.CLASSNAME);

			if(idTienePermisounidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.unidadBeanSwingJInternalFrame=new UnidadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.unidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.unidadBeanSwingJInternalFrame.getUnidadLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_unidad()!=null) {
					this.unidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.unidadBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_unidad());
					this.unidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaUnidad();
				}

				JInternalFrameBase jinternalFrame =this.unidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBorderunidad=(TitledBorder)this.unidadBeanSwingJInternalFrame.jScrollPanelDatosUnidad.getBorder();

				titledBorderunidad.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Unidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_unidadDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_unidad = "+this.detallepedidocompra.getid_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoDetallePedidoCompraActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetallePedidoCompra=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosDetallePedidoCompra.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoDetallePedidoCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebDetallePedidoCompra(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetallePedidoCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetallePedidoCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.detallepedidocompraLogic.getConnexion());

				if(this.detallepedidocompra.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.detallepedidocompra.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetallePedidoCompra=(TitledBorder)this.jScrollPanelDatosDetallePedidoCompra.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetallePedidoCompra.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.detallepedidocompra.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidad_pedidoDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getcantidad_pedido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad_pedido = "+this.detallepedidocompra.getcantidad_pedido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_unitarioDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getcosto_unitario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_unitario = "+this.detallepedidocompra.getcosto_unitario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_totalDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getcosto_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_total = "+this.detallepedidocompra.getcosto_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detallepedidocompra.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidad_entregadaDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getcantidad_entregada()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad_entregada = "+this.detallepedidocompra.getcantidad_entregada().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidad_pendienteDetallePedidoCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.getdetallepedidocompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallepedidocompra==null) {
						this.detallepedidocompra = new DetallePedidoCompra();
					}

					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);
				}

				if(this.detallepedidocompra.getcantidad_pendiente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad_pendiente = "+this.detallepedidocompra.getcantidad_pendiente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetallePedidoCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdAnio();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdBodegaDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdBodega();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdCentroCosto();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdEjercicio();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdEmpresa();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdMes();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPedidoCompraDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdPedidoCompra();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdPeriodo();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProductoDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdProducto();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdSucursal();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUnidadDetallePedidoCompraActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);

			this.getDetallePedidoComprasFK_IdUnidad();

			this.inicializarActualizarBindingDetallePedidoCompra(false);

			//if(DetallePedidoCompraBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallepedidocompraLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameDetallePedidoCompra() {
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetallePedidoCompra.dispose();
			this.jInternalFrameDetalleFormDetallePedidoCompra=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
			this.jInternalFrameReporteDinamicoDetallePedidoCompra.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetallePedidoCompra.dispose();
			this.jInternalFrameReporteDinamicoDetallePedidoCompra=null;
		}
		
		if(this.jInternalFrameImportacionDetallePedidoCompra!=null) {
			this.jInternalFrameImportacionDetallePedidoCompra.setVisible(false);	    			
			this.jInternalFrameImportacionDetallePedidoCompra.dispose();
			this.jInternalFrameImportacionDetallePedidoCompra=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetallePedidoCompra();
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetallePedidoCompra")) {
				jButtonNuevoDetallePedidoCompraActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetallePedidoCompra")) {
				jButtonDuplicarDetallePedidoCompraActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetallePedidoCompra")) {
				jButtonCopiarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetallePedidoCompra")) {
				jButtonVerFormDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetallePedidoCompra")) {
				jButtonNuevoDetallePedidoCompraActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetallePedidoCompra")) {
				jButtonDuplicarDetallePedidoCompraActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetallePedidoCompra")) {
				jButtonNuevoDetallePedidoCompraActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetallePedidoCompra")) {
				jButtonDuplicarDetallePedidoCompraActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetallePedidoCompra")) {
				jButtonNuevoDetallePedidoCompraActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetallePedidoCompra")) {
				jButtonNuevoDetallePedidoCompraActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetallePedidoCompra")) {
				jButtonNuevoDetallePedidoCompraActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetallePedidoCompra")) {
				jButtonModificarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetallePedidoCompra")) {
				jButtonModificarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetallePedidoCompra")) {
				jButtonModificarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetallePedidoCompra")) {
				jButtonActualizarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetallePedidoCompra")) {
				jButtonActualizarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetallePedidoCompra")) {
				jButtonActualizarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetallePedidoCompra")) {
				jButtonEliminarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetallePedidoCompra")) {
				jButtonEliminarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetallePedidoCompra")) {
				jButtonEliminarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetallePedidoCompra")) {
				jButtonCancelarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetallePedidoCompra")) {
				jButtonCancelarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetallePedidoCompra")) {
				jButtonCancelarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetallePedidoCompra")) {
				jButtonCerrarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetallePedidoCompra")) {
				jButtonCerrarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetallePedidoCompra")) {
				jButtonCerrarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetallePedidoCompra")) {
				jButtonMostrarOcultarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetallePedidoCompra")) {
				jButtonCancelarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetallePedidoCompra")) {
				jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetallePedidoCompra")) {
				jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetallePedidoCompra")) {
				jButtonCopiarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetallePedidoCompra")) {
				jButtonVerFormDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetallePedidoCompra")) {
				jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetallePedidoCompra")) {
				jButtonCopiarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetallePedidoCompra")) {
				jButtonVerFormDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetallePedidoCompra")) {
				jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetallePedidoCompra")) {
				jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetallePedidoCompra")) {
				jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetallePedidoCompra")) {
				jButtonRecargarInformacionDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetallePedidoCompra")) {
				jButtonRecargarInformacionDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetallePedidoCompra")) {
				jButtonRecargarInformacionDetallePedidoCompraActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetallePedidoCompra")) {
				jButtonAnterioresDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetallePedidoCompra")) {
				jButtonAnterioresDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetallePedidoCompra")) {
				jButtonAnterioresDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetallePedidoCompra")) {
				jButtonSiguientesDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetallePedidoCompra")) {
				jButtonSiguientesDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetallePedidoCompra")) {
				jButtonSiguientesDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetallePedidoCompra") || sTipo.equals("MenuItemDetalleAbrirOrderByDetallePedidoCompra")) {
				jButtonAbrirOrderByDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetallePedidoCompra") || sTipo.equals("MenuItemDetalleMostrarOcultarDetallePedidoCompra")) {
				jButtonMostrarOcultarDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetallePedidoCompra")) {
				jButtonNuevoGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetallePedidoCompra")) {
				jButtonNuevoGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetallePedidoCompra")) {
				jButtonNuevoGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetallePedidoCompra")) {
				jButtonCerrarReporteDinamicoDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetallePedidoCompra")) {
				jButtonGenerarReporteDinamicoDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetallePedidoCompra")) {
				
				jButtonGenerarExcelReporteDinamicoDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionDetallePedidoCompra")) {
				jButtonCerrarImportacionDetallePedidoCompraActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetallePedidoCompra")) {
				
				jButtonGenerarImportacionDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionDetallePedidoCompra")) {
				
				jButtonAbrirImportacionDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesDetallePedidoCompra")) {
				jComboBoxTiposAccionesDetallePedidoCompraActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetallePedidoCompra")) {
				jComboBoxTiposRelacionesDetallePedidoCompraActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetallePedidoCompra")) {
				jComboBoxTiposAccionesDetallePedidoCompraActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetallePedidoCompra")) {
				
				jComboBoxTiposSeleccionarDetallePedidoCompraActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralDetallePedidoCompra")) {
				jTextFieldValorCampoGeneralDetallePedidoCompraActionListener(evt);
			}
			
			else if(sTipo.equals("AbrirTotalesDetallePedidoCompra")) {
				jButtonAbrirTotalesDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarTotalesDetallePedidoCompra")) {
				jButtonCerrarTotalesDetallePedidoCompraActionPerformed(evt);
			} 
			
			else if(sTipo.equals("AbrirOrderByDetallePedidoCompra")) {
				jButtonAbrirOrderByDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetallePedidoCompra")) {
				jButtonAbrirOrderByDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetallePedidoCompra")) {
				jButtonCerrarOrderByDetallePedidoCompraActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetallePedidoCompraBusqueda")) {
				this.jButtonidDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_pedido_compraDetallePedidoCompraUpdate")) {
				this.jButtonid_pedido_compraDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_pedido_compraDetallePedidoCompraBusqueda")) {
				this.jButtonid_pedido_compraDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetallePedidoCompraUpdate")) {
				this.jButtonid_empresaDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetallePedidoCompraBusqueda")) {
				this.jButtonid_empresaDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetallePedidoCompraUpdate")) {
				this.jButtonid_sucursalDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetallePedidoCompraBusqueda")) {
				this.jButtonid_sucursalDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetallePedidoCompraUpdate")) {
				this.jButtonid_ejercicioDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetallePedidoCompraBusqueda")) {
				this.jButtonid_ejercicioDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetallePedidoCompraUpdate")) {
				this.jButtonid_periodoDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetallePedidoCompraBusqueda")) {
				this.jButtonid_periodoDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetallePedidoCompraUpdate")) {
				this.jButtonid_anioDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetallePedidoCompraBusqueda")) {
				this.jButtonid_anioDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetallePedidoCompraUpdate")) {
				this.jButtonid_mesDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetallePedidoCompraBusqueda")) {
				this.jButtonid_mesDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetallePedidoCompraUpdate")) {
				this.jButtonid_bodegaDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetallePedidoCompraBusqueda")) {
				this.jButtonid_bodegaDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetallePedidoCompra")) {
				this.jButtonid_productoDetallePedidoCompraActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetallePedidoCompraUpdate")) {
				this.jButtonid_productoDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetallePedidoCompraBusqueda")) {
				this.jButtonid_productoDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetallePedidoCompraUpdate")) {
				this.jButtonid_unidadDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetallePedidoCompraBusqueda")) {
				this.jButtonid_unidadDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetallePedidoCompra")) {
				this.jButtonid_centro_costoDetallePedidoCompraActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetallePedidoCompraArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetallePedidoCompraUpdate")) {
				this.jButtonid_centro_costoDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetallePedidoCompraBusqueda")) {
				this.jButtonid_centro_costoDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_pedidoDetallePedidoCompraBusqueda")) {
				this.jButtoncantidad_pedidoDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetallePedidoCompraBusqueda")) {
				this.jButtoncosto_unitarioDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetallePedidoCompraBusqueda")) {
				this.jButtoncosto_totalDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetallePedidoCompraBusqueda")) {
				this.jButtondescripcionDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_entregadaDetallePedidoCompraBusqueda")) {
				this.jButtoncantidad_entregadaDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_pendienteDetallePedidoCompraBusqueda")) {
				this.jButtoncantidad_pendienteDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_centro_costoDetallePedidoCompra")) {
				this.jButtonid_centro_costoDetallePedidoCompraActionPerformed(evt);
			}
			else if(sTipo.equals("id_productoDetallePedidoCompra")) {
				this.jButtonid_productoDetallePedidoCompraActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdBodegaDetallePedidoCompra")) {
				this.jButtonFK_IdBodegaDetallePedidoCompraActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoDetallePedidoCompra")) {
				this.jButtonFK_IdCentroCostoDetallePedidoCompraActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPedidoCompraDetallePedidoCompra")) {
				this.jButtonFK_IdPedidoCompraDetallePedidoCompraActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdProductoDetallePedidoCompra")) {
				this.jButtonFK_IdProductoDetallePedidoCompraActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdUnidadDetallePedidoCompra")) {
				this.jButtonFK_IdUnidadDetallePedidoCompraActionPerformed(evt);
			}
			
			;
			
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetallePedidoCompra();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetallePedidoCompraActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				


			if(sTipo.equals("cantidad_pedidoDetallePedidoCompra")) {
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("costo_unitarioDetallePedidoCompra")) {
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetallePedidoCompra detallepedidocompraLocal=null;
			
			if(!this.getEsControlTabla()) {
				detallepedidocompraLocal=this.detallepedidocompra;
			} else {
				detallepedidocompraLocal=this.detallepedidocompraAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


				if(sTipo.equals("cantidad_pedidoDetallePedidoCompra")) {
					if(detallepedidocompraLocal.getcantidad_pedido()==Integer.parseInt(this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("costo_unitarioDetallePedidoCompra")) {
					if(detallepedidocompraLocal.getcosto_unitario()==Double.parseDouble(this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.getText())){existeCambio=false;};
				}
			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
							
				
				


			if(sTipo.equals("cantidad_pedidoDetallePedidoCompra")) {
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("costo_unitarioDetallePedidoCompra")) {
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			if(sTipo.equals("cantidad_pedidoDetallePedidoCompra")) {
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("costo_unitarioDetallePedidoCompra")) {
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetallePedidoCompraActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
								
						
				


				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
								
				
				


				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
							
				
				


				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetallePedidoCompraActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
								
				
				


			if(sTipo.equals("cantidad_pedidoDetallePedidoCompra")) {
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("costo_unitarioDetallePedidoCompra")) {
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetallePedidoCompraActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetallePedidoCompra")) {
					jCheckBoxSeleccionarTodosDetallePedidoCompraItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetallePedidoCompra")) {
					jCheckBoxSeleccionadosDetallePedidoCompraItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetallePedidoCompra")) {
					
				}
				
				


				
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
												
				
				


				
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetallePedidoCompraActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetallePedidoCompraActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_bodegaDetallePedidoCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra;
				}

				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra,"FK_IdBodega");
				//recargarFormDetallePedidoCompraBodega(jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetallePedidoCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra;
				}

				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetallePedidoCompra")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetallePedidoCompra,"FK_IdProducto");
				//recargarFormDetallePedidoCompraProducto(jComboBoxid_productoFK_IdProductoDetallePedidoCompra,"FK_IdProducto");
			}
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetallePedidoCompraActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetallePedidoCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra;
				}

				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra,"FK_IdBodega");
				//recargarFormDetallePedidoCompraBodega(jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetallePedidoCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra;
				}

				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetallePedidoCompra")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetallePedidoCompra,"FK_IdProducto");
				//recargarFormDetallePedidoCompraProducto(jComboBoxid_productoFK_IdProductoDetallePedidoCompra,"FK_IdProducto");
			}
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallepedidocompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallepedidocompra);
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetallePedidoCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra;
				}

				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra,"FK_IdBodega");
				//recargarFormDetallePedidoCompraBodega(jComboBoxid_bodegaFK_IdBodegaDetallePedidoCompra,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetallePedidoCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra;
				}

				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetallePedidoCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetallePedidoCompra")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetallePedidoCompra,"FK_IdProducto");
				//recargarFormDetallePedidoCompraProducto(jComboBoxid_productoFK_IdProductoDetallePedidoCompra,"FK_IdProducto");
			}
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetallePedidoCompra.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetallePedidoCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetallePedidoCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallepedidocompraAnterior =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetallePedidoCompra")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetallePedidoCompraListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetallePedidoCompra.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detallepedidocompra =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detallepedidocompra);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetallePedidoCompra")) {
				
				}
				
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetallePedidoCompra")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetallePedidoCompra.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetallePedidoCompra")) {
			
			}
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetallePedidoCompra();
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			if(sTipo.equals("NuevoDetallePedidoCompra")) {
				jButtonNuevoDetallePedidoCompraActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetallePedidoCompra")) {
				jButtonDuplicarDetallePedidoCompraActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetallePedidoCompra")) {
				jButtonCopiarDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetallePedidoCompra")) {
				jButtonVerFormDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetallePedidoCompra")) {
				jButtonNuevoDetallePedidoCompraActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetallePedidoCompra")) {
				jButtonModificarDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetallePedidoCompra")) {
				jButtonActualizarDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetallePedidoCompra")) {
				jButtonEliminarDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetallePedidoCompra")) {
				jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetallePedidoCompra")) {
				jButtonCancelarDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetallePedidoCompra")) {
				jButtonCerrarDetallePedidoCompraActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetallePedidoCompra")) {
				jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetallePedidoCompra")) {
				jButtonNuevoGuardarCambiosDetallePedidoCompraActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetallePedidoCompra")) {
				jButtonAbrirOrderByDetallePedidoCompraActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetallePedidoCompra")) {
				jButtonRecargarInformacionDetallePedidoCompraActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetallePedidoCompra")) {
				jButtonAnterioresDetallePedidoCompraActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetallePedidoCompra")) {
				jButtonSiguientesDetallePedidoCompraActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetallePedidoCompraBusqueda")) {
				this.jButtonidDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_pedido_compraDetallePedidoCompraUpdate")) {
				this.jButtonid_pedido_compraDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_pedido_compraDetallePedidoCompraBusqueda")) {
				this.jButtonid_pedido_compraDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetallePedidoCompraUpdate")) {
				this.jButtonid_empresaDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetallePedidoCompraBusqueda")) {
				this.jButtonid_empresaDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetallePedidoCompraUpdate")) {
				this.jButtonid_sucursalDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetallePedidoCompraBusqueda")) {
				this.jButtonid_sucursalDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetallePedidoCompraUpdate")) {
				this.jButtonid_ejercicioDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetallePedidoCompraBusqueda")) {
				this.jButtonid_ejercicioDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetallePedidoCompraUpdate")) {
				this.jButtonid_periodoDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetallePedidoCompraBusqueda")) {
				this.jButtonid_periodoDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetallePedidoCompraUpdate")) {
				this.jButtonid_anioDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetallePedidoCompraBusqueda")) {
				this.jButtonid_anioDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetallePedidoCompraUpdate")) {
				this.jButtonid_mesDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetallePedidoCompraBusqueda")) {
				this.jButtonid_mesDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetallePedidoCompraUpdate")) {
				this.jButtonid_bodegaDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetallePedidoCompraBusqueda")) {
				this.jButtonid_bodegaDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetallePedidoCompra")) {
				this.jButtonid_productoDetallePedidoCompraActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetallePedidoCompraUpdate")) {
				this.jButtonid_productoDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetallePedidoCompraBusqueda")) {
				this.jButtonid_productoDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetallePedidoCompraUpdate")) {
				this.jButtonid_unidadDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetallePedidoCompraBusqueda")) {
				this.jButtonid_unidadDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetallePedidoCompra")) {
				this.jButtonid_centro_costoDetallePedidoCompraActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetallePedidoCompraArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetallePedidoCompraUpdate")) {
				this.jButtonid_centro_costoDetallePedidoCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetallePedidoCompraBusqueda")) {
				this.jButtonid_centro_costoDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_pedidoDetallePedidoCompraBusqueda")) {
				this.jButtoncantidad_pedidoDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetallePedidoCompraBusqueda")) {
				this.jButtoncosto_unitarioDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetallePedidoCompraBusqueda")) {
				this.jButtoncosto_totalDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetallePedidoCompraBusqueda")) {
				this.jButtondescripcionDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_entregadaDetallePedidoCompraBusqueda")) {
				this.jButtoncantidad_entregadaDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_pendienteDetallePedidoCompraBusqueda")) {
				this.jButtoncantidad_pendienteDetallePedidoCompraBusquedaActionPerformed(evt);
			}
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetallePedidoCompra();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetallePedidoCompra")) {
				closingInternalFrameDetallePedidoCompra();
				
			} else if(sTipo.equals("jButtonCancelarDetallePedidoCompra")) {
				JInternalFrameBase jInternalFrameDetalleFormDetallePedidoCompra = (JInternalFrameBase)evt.getSource();
	            	
	            DetallePedidoCompraBeanSwingJInternalFrame jInternalFrameParent=(DetallePedidoCompraBeanSwingJInternalFrame)jInternalFrameDetalleFormDetallePedidoCompra.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetallePedidoCompraActionPerformed(null);
			}
			
			DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallepedidocompra,new Object(),this.detallepedidocompraParameterGeneral,this.detallepedidocompraReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetallePedidoCompra(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetallePedidoCompra(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetallePedidoCompra(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detallepedidocompra)) {
			if(!esControlTabla) {
				if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);			
				}
				
				if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetallePedidoCompra(this.detallepedidocompra,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallepedidocompraReturnGeneral=detallepedidocompraLogic.procesarEventosDetallePedidoComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallepedidocompraLogic.getDetallePedidoCompras(),this.detallepedidocompra,this.detallepedidocompraParameterGeneral,this.isEsNuevoDetallePedidoCompra,classes);//this.detallepedidocompraLogic.getDetallePedidoCompra()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetallePedidoCompra(this.detallepedidocompraReturnGeneral,this.detallepedidocompraBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetallePedidoCompra(classes,this.detallepedidocompraReturnGeneral,this.detallepedidocompraBean,false);
					}
						
					if(this.detallepedidocompraReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetallePedidoCompra(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetallePedidoCompra(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra());	
					}
						
					if(this.detallepedidocompraReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetallePedidoCompra(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra(),classes);//this.detallepedidocompraBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetallePedidoCompra(this.detallepedidocompra,classes);//this.detallepedidocompraBean);									
				}
			
				if(DetallePedidoCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetallePedidoCompra(this.detallepedidocompra,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetallePedidoCompra(this.detallepedidocompra);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detallepedidocompraAnterior!=null) {
						this.detallepedidocompra=this.detallepedidocompraAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallepedidocompraReturnGeneral=detallepedidocompraLogic.procesarEventosDetallePedidoComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallepedidocompraLogic.getDetallePedidoCompras(),this.detallepedidocompra,this.detallepedidocompraParameterGeneral,this.isEsNuevoDetallePedidoCompra,classes);//this.detallepedidocompraLogic.getDetallePedidoCompra()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallepedidocompraSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallepedidocompraSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra(),detallepedidocompraLogic.getDetallePedidoCompras());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra(),this.detallepedidocompras);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetallePedidoCompra.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetallePedidoCompra.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetallePedidoCompra();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetallePedidoCompra() throws Exception {
		
		DetallePedidoCompraModel detallepedidocompraModel=(DetallePedidoCompraModel)this.jTableDatosDetallePedidoCompra.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallepedidocompraModel.detallepedidocompras=this.detallepedidocompraLogic.getDetallePedidoCompras();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detallepedidocompraModel.detallepedidocompras=this.detallepedidocompras;
		}
		
		
		((DetallePedidoCompraModel) this.jTableDatosDetallePedidoCompra.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetallePedidoCompra() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetallepedidocompraAnterior(),this.detallepedidocompraLogic.getDetallePedidoCompras());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetallepedidocompraAnterior(),this.detallepedidocompras);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetallePedidoCompra();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallepedidocompra,new Object(),generalEntityParameterGeneral,this.detallepedidocompraReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detallepedidocompraSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsOfDetallePedidoCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetallePedidoCompraConstantesFunciones.getClassesRelationshipsFromStringsOfDetallePedidoCompra(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetallePedidoCompra(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetallePedidoCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallepedidocompra,new Object(),generalEntityParameterGeneral,this.detallepedidocompraReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetallePedidoCompra(DetallePedidoCompraBean detallepedidocompraBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetallePedidoCompra(ArrayList<Classe> classes,DetallePedidoCompraReturnGeneral detallepedidocompraReturnGeneral,DetallePedidoCompraBean detallepedidocompraBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detallepedidocompra)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetallePedidoCompra = new DetallePedidoCompraDetalleFormJInternalFrame(jDesktopPane,this.detallepedidocompraSessionBean.getConGuardarRelaciones(),this.detallepedidocompraSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.setVisible(false);
		this.jInternalFrameDetalleFormDetallePedidoCompra.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.detallepedidocompraLogic=this.detallepedidocompraLogic;
		
		this.cargarCombosFrameForeignKeyDetallePedidoCompra("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetallePedidoCompra();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetallePedidoCompra();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetallePedidoCompra("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetallePedidoCompra();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetallePedidoCompra"));
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"ModificarDetallePedidoCompra"));

		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarToolBarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetallePedidoCompra"));
					
		this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemModificarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetallePedidoCompra"));		
		
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"ActualizarDetallePedidoCompra"));
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarToolBarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetallePedidoCompra"));
						
		this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemActualizarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetallePedidoCompra"));		
		
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"EliminarDetallePedidoCompra"));
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetallePedidoCompra"));
								
		this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemEliminarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetallePedidoCompra"));		
		
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"CancelarDetallePedidoCompra"));
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetallePedidoCompra"));
					
		this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemCancelarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetallePedidoCompra"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemDetalleCerrarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetallePedidoCompra"));		
		
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetallePedidoCompra"));
		
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetallePedidoCompra"));
		
		
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetallePedidoCompra"));
		
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.addFocusListener(new TextFieldFocusListener(this,"cantidad_pedidoDetallePedidoCompra"));
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.addActionListener(new TextFieldActionListener(this,"cantidad_pedidoDetallePedidoCompra"));
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidad_pedidoDetallePedidoCompra,"cantidad_pedidoDetallePedidoCompra"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.addFocusListener(new TextFieldFocusListener(this,"costo_unitarioDetallePedidoCompra"));
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.addActionListener(new TextFieldActionListener(this,"costo_unitarioDetallePedidoCompra"));
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_unitarioDetallePedidoCompra,"costo_unitarioDetallePedidoCompra"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonidDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"idDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_pedido_compraDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_pedido_compraDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_pedido_compraDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_pedido_compraDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_empresaDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_empresaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_sucursalDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_sucursalDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_ejercicioDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_ejercicioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_periodoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_periodoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_anioDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_anioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_mesDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_mesDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_bodegaDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_bodegaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetallePedidoCompraBusqueda"));
		//jButtonid_productoDetallePedidoCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetallePedidoCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompra"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_unidadDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_unidadDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetallePedidoCompraBusqueda"));
		//jButtonid_centro_costoDetallePedidoCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetallePedidoCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompra"));
		//jButtonid_centro_costoDetallePedidoCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_pedidoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pedidoDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncosto_unitarioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncosto_totalDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtondescripcionDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_entregadaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_entregadaDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_pendienteDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pendienteDetallePedidoCompraBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetallePedidoCompra"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetallePedidoCompra"));
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetallePedidoCompra"));
		}
		
		this.jTableDatosDetallePedidoCompra.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetallePedidoCompra"));
		
		this.jTableDatosDetallePedidoCompra.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetallePedidoCompra"));
		
		this.jButtonNuevoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"NuevoDetallePedidoCompra"));
		
		this.jButtonDuplicarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"DuplicarDetallePedidoCompra"));
		
		this.jButtonCopiarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"CopiarDetallePedidoCompra"));
		
		this.jButtonVerFormDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"VerFormDetallePedidoCompra"));
		
		
		this.jButtonNuevoToolBarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetallePedidoCompra"));
			
		this.jButtonDuplicarToolBarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetallePedidoCompra"));
			
		this.jMenuItemNuevoDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetallePedidoCompra"));
			
		this.jMenuItemDuplicarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetallePedidoCompra"));		
		
		
		this.jButtonNuevoRelacionesDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetallePedidoCompra"));
		
		
		this.jButtonNuevoRelacionesToolBarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetallePedidoCompra"));
			
		this.jMenuItemNuevoRelacionesDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetallePedidoCompra"));		
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"ModificarDetallePedidoCompra"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonModificarToolBarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetallePedidoCompra"));
			
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemModificarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetallePedidoCompra"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"ActualizarDetallePedidoCompra"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonActualizarToolBarDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetallePedidoCompra"));
				
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemActualizarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetallePedidoCompra"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"EliminarDetallePedidoCompra"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonEliminarToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetallePedidoCompra"));
						
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemEliminarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetallePedidoCompra"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"CancelarDetallePedidoCompra"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonCancelarToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetallePedidoCompra"));
			
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemCancelarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetallePedidoCompra"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetallePedidoCompra"));		
		
		
		this.jButtonCerrarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"CerrarDetallePedidoCompra"));
		
		
		this.jButtonCerrarToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetallePedidoCompra"));
			
		this.jMenuItemCerrarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetallePedidoCompra"));
			
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jMenuItemDetalleCerrarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetallePedidoCompra"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetallePedidoCompra"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetallePedidoCompra"));
		}
		
		this.jButtonCopiarToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetallePedidoCompra"));
			
		this.jButtonVerFormToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetallePedidoCompra"));
		
		this.jMenuItemGuardarCambiosDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetallePedidoCompra"));
			
		this.jMenuItemCopiarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetallePedidoCompra"));		
		
		this.jMenuItemVerFormDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetallePedidoCompra"));		
		
		
		this.jButtonGuardarCambiosTablaDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetallePedidoCompra"));
		
		
		this.jButtonGuardarCambiosTablaToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetallePedidoCompra"));
			
		this.jMenuItemGuardarCambiosTablaDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetallePedidoCompra"));		
		
		
		
		this.jButtonRecargarInformacionDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetallePedidoCompra"));
					
		this.jButtonRecargarInformacionToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetallePedidoCompra"));
		
		this.jMenuItemRecargarInformacionDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetallePedidoCompra"));		
		
		
		
		this.jButtonAnterioresDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"AnterioresDetallePedidoCompra"));
		
		
		this.jButtonAnterioresToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetallePedidoCompra"));
		
		this.jMenuItemAnterioresDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetallePedidoCompra"));		
		
		
		this.jButtonSiguientesDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"SiguientesDetallePedidoCompra"));
		
		
		this.jButtonSiguientesToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetallePedidoCompra"));
			
		this.jMenuItemSiguientesDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetallePedidoCompra"));
			
		this.jMenuItemAbrirOrderByDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetallePedidoCompra"));
			
		this.jMenuItemMostrarOcultarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetallePedidoCompra"));
			
		this.jMenuItemDetalleAbrirOrderByDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetallePedidoCompra"));
			
		this.jMenuItemDetalleMostarOcultarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetallePedidoCompra"));		
		
		
		this.jButtonNuevoGuardarCambiosDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetallePedidoCompra"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetallePedidoCompra"));
			
		this.jMenuItemNuevoGuardarCambiosDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetallePedidoCompra"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetallePedidoCompra.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetallePedidoCompra"));

		this.jCheckBoxSeleccionadosDetallePedidoCompra.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetallePedidoCompra"));
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetallePedidoCompra"));
		}
		
		
		this.jComboBoxTiposRelacionesDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetallePedidoCompra"));
			
		this.jComboBoxTiposAccionesDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"TiposAccionesDetallePedidoCompra"));
					
		this.jComboBoxTiposSeleccionarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetallePedidoCompra"));
			
		this.jTextFieldValorCampoGeneralDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetallePedidoCompra"));		
		
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.addFocusListener(new TextFieldFocusListener(this,"cantidad_pedidoDetallePedidoCompra"));
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.addActionListener(new TextFieldActionListener(this,"cantidad_pedidoDetallePedidoCompra"));
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidad_pedidoDetallePedidoCompra,"cantidad_pedidoDetallePedidoCompra"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.addFocusListener(new TextFieldFocusListener(this,"costo_unitarioDetallePedidoCompra"));
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.addActionListener(new TextFieldActionListener(this,"costo_unitarioDetallePedidoCompra"));
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_unitarioDetallePedidoCompra,"costo_unitarioDetallePedidoCompra"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonidDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"idDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_pedido_compraDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_pedido_compraDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_pedido_compraDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_pedido_compraDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_empresaDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_empresaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_sucursalDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_sucursalDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_ejercicioDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_ejercicioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_periodoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_periodoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_anioDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_anioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_mesDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_mesDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_bodegaDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_bodegaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetallePedidoCompraBusqueda"));
		//jButtonid_productoDetallePedidoCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetallePedidoCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompra"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_unidadDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_unidadDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetallePedidoCompraBusqueda"));
		//jButtonid_centro_costoDetallePedidoCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetallePedidoCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompra"));
		//jButtonid_centro_costoDetallePedidoCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_pedidoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pedidoDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncosto_unitarioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncosto_totalDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtondescripcionDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_entregadaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_entregadaDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_pendienteDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pendienteDetallePedidoCompraBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBodegaDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetallePedidoCompra"));

			this.jButtonFK_IdCentroCostoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetallePedidoCompra"));

			this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompra"));

			this.jButtonFK_IdPedidoCompraDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdPedidoCompraDetallePedidoCompra"));

			this.jButtonFK_IdProductoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetallePedidoCompra"));

			this.jButtonBuscarFK_IdProductoid_productoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompra"));

			this.jButtonFK_IdUnidadDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetallePedidoCompra"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoDetallePedidoCompra!=null) {
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetallePedidoCompra"));
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetallePedidoCompra"));
				this.jInternalFrameReporteDinamicoDetallePedidoCompra.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetallePedidoCompra"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetallePedidoCompra"));				
			//this.jButtonGenerarReporteDinamicoDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetallePedidoCompra"));
			//this.jButtonGenerarExcelReporteDinamicoDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetallePedidoCompra"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetallePedidoCompra!=null) {
				this.jInternalFrameImportacionDetallePedidoCompra.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetallePedidoCompra"));
				this.jInternalFrameImportacionDetallePedidoCompra.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetallePedidoCompra"));
				this.jInternalFrameImportacionDetallePedidoCompra.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetallePedidoCompra"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetallePedidoCompra"));
			
			this.jButtonAbrirOrderByToolBarDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetallePedidoCompra"));			
			
			if(this.jInternalFrameOrderByDetallePedidoCompra!=null) {
				this.jInternalFrameOrderByDetallePedidoCompra.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetallePedidoCompra"));				
			}
			
			
		}
		
		this.jButtonAbrirTotalesDetallePedidoCompra.addActionListener (new ButtonActionListener(this,"AbrirTotalesDetallePedidoCompra"));
		
		if(this.jInternalFrameTotalesDetallePedidoCompra!=null) {
			this.jInternalFrameTotalesDetallePedidoCompra.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetallePedidoCompra"));
		}
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetallePedidoCompra.jTabbedPaneRelacionesDetallePedidoCompra.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetallePedidoCompra"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetallePedidoCompra();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetallePedidoCompra = (JInternalFrameBase)event.getSource();
	            	
	            DetallePedidoCompraBeanSwingJInternalFrame jInternalFrameParent=(DetallePedidoCompraBeanSwingJInternalFrame)jInternalFrameDetalleFormDetallePedidoCompra.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetallePedidoCompraActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetallePedidoCompra.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetallePedidoCompraListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetallePedidoCompra.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetallePedidoCompra.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetallePedidoCompraActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetallePedidoCompraActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetallePedidoCompraActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetallePedidoCompra";
		inputMap = this.jButtonNuevoDetallePedidoCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetallePedidoCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetallePedidoCompraActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetallePedidoCompraActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetallePedidoCompraActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetallePedidoCompraActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetallePedidoCompra";
		inputMap = this.jButtonNuevoRelacionesDetallePedidoCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetallePedidoCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetallePedidoCompraActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetallePedidoCompra";
		inputMap = this.jButtonModificarDetallePedidoCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetallePedidoCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetallePedidoCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetallePedidoCompra";
		inputMap = this.jButtonActualizarDetallePedidoCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetallePedidoCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetallePedidoCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetallePedidoCompra";
		inputMap = this.jButtonEliminarDetallePedidoCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetallePedidoCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetallePedidoCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetallePedidoCompra";
		inputMap = this.jButtonCancelarDetallePedidoCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetallePedidoCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetallePedidoCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetallePedidoCompra";
		inputMap = this.jButtonCerrarDetallePedidoCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetallePedidoCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetallePedidoCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetallePedidoCompra";
		inputMap = this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosDetallePedidoCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonGuardarCambiosDetallePedidoCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetallePedidoCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetallePedidoCompra.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetallePedidoCompraItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetallePedidoCompra.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetallePedidoCompraActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetallePedidoCompra.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetallePedidoCompraActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetallePedidoCompra.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetallePedidoCompraActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonidDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"idDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_pedido_compraDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_pedido_compraDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_pedido_compraDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_pedido_compraDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_empresaDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_empresaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_sucursalDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_sucursalDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_ejercicioDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_ejercicioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_periodoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_periodoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_anioDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_anioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_mesDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_mesDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_bodegaDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_bodegaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetallePedidoCompraBusqueda"));
		//jButtonid_productoDetallePedidoCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetallePedidoCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompra"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_unidadDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_unidadDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetallePedidoCompraBusqueda"));
		//jButtonid_centro_costoDetallePedidoCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetallePedidoCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompra"));
		//jButtonid_centro_costoDetallePedidoCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_pedidoDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pedidoDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncosto_unitarioDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncosto_totalDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtondescripcionDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_entregadaDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_entregadaDetallePedidoCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetallePedidoCompra.jButtoncantidad_pendienteDetallePedidoCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_pendienteDetallePedidoCompraBusqueda"));
		
		
		this.jButtonFK_IdBodegaDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetallePedidoCompra"));

		this.jButtonFK_IdCentroCostoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetallePedidoCompra"));

		this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetallePedidoCompra"));

		this.jButtonFK_IdPedidoCompraDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdPedidoCompraDetallePedidoCompra"));

		this.jButtonFK_IdProductoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetallePedidoCompra"));

		this.jButtonBuscarFK_IdProductoid_productoDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"id_productoDetallePedidoCompra"));

		this.jButtonFK_IdUnidadDetallePedidoCompra.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetallePedidoCompra"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetallePedidoCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetallePedidoCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarDetallePedidoCompraActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetallePedidoCompra.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosDetallePedidoCompra(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
					detallepedidocompraAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetallePedidoCompra detallepedidocompraAux:detallepedidocompras) {
					detallepedidocompraAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetallePedidoCompraItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
						detallepedidocompraAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetallePedidoCompra detallepedidocompraAux:detallepedidocompras) {
						detallepedidocompraAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetallePedidoCompra detallepedidocompraAux:detallepedidocompras) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetallePedidoCompra.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetallePedidoCompra.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetallePedidoCompraItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetallePedidoCompra.getSelectedRows();
			
			DetallePedidoCompra detallepedidocompraLocal=new DetallePedidoCompra();
			
			//this.seleccionarTodosDetallePedidoCompra(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallepedidocompraLocal =(DetallePedidoCompra) this.detallepedidocompraLogic.getDetallePedidoCompras().toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detallepedidocompraLocal =(DetallePedidoCompra) this.detallepedidocompras.toArray()[this.jTableDatosDetallePedidoCompra.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detallepedidocompraLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
						detallepedidocompraAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetallePedidoCompra detallepedidocompraAux:detallepedidocompras) {
						detallepedidocompraAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetallePedidoCompra.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetallePedidoCompra.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetallePedidoCompra,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetallePedidoCompraItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetallePedidoCompraParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetallePedidoCompraActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetallePedidoCompra.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompraLogic.getDetallePedidoCompras()) {
				
						if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO)) {
							existe=true;
							detallepedidocompraAux.setcantidad_pedido(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detallepedidocompraAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detallepedidocompraAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallepedidocompraAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA)) {
							existe=true;
							detallepedidocompraAux.setcantidad_entregada(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE)) {
							existe=true;
							detallepedidocompraAux.setcantidad_pendiente(Integer.parseInt(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetallePedidoCompra detallepedidocompraAux:detallepedidocompras) {
					
						if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO)) {
							existe=true;
							detallepedidocompraAux.setcantidad_pedido(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detallepedidocompraAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detallepedidocompraAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallepedidocompraAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA)) {
							existe=true;
							detallepedidocompraAux.setcantidad_entregada(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE)) {
							existe=true;
							detallepedidocompraAux.setcantidad_pendiente(Integer.parseInt(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetallePedidoCompraActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetallePedidoCompra=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesDetallePedidoCompra.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetallePedidoCompra) {				
					conSplash=true;//false;										
					
					//this.startProcessDetallePedidoCompra(conSplash);
				
					this.generarReporteDetallePedidoComprasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetallePedidoComprasSeleccionados();
				//this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetallePedidoComprasSeleccionados(false);
				//this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetallePedidoComprasSeleccionados(true);
				//this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetallePedidoCompra();
				
				this.exportarDetallePedidoComprasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetallePedidoCompras();
				//this.importarDetallePedidoCompras();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetallePedidoCompra();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetallePedidoComprasSeleccionados();
				//this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Pedido Compra", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetallePedidoCompra();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetallePedidoCompra)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetallePedidoCompra(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.setSelectedIndex(0);					
				}	
			} 			
			else if(DetallePedidoCompraBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetallePedidoCompra) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetallePedidoCompra(conSplash);
					
						//this.actualizarParametrosGeneralDetallePedidoCompra();
						
						this.generarReporteProcesoAccionDetallePedidoComprasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetallePedidoCompraBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle Pedido CompraS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Pedido Compra", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetallePedidoCompra();
				
						this.actualizarParametrosGeneralDetallePedidoCompra();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detallepedidocompraReturnGeneral=detallepedidocompraLogic.procesarAccionDetallePedidoComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detallepedidocompraLogic.getDetallePedidoCompras(),this.detallepedidocompraParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetallePedidoCompraReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetallePedidoCompra();
					
					DetallePedidoCompraBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetallePedidoCompraReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetallePedidoCompra.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxTiposAccionesFormularioDetallePedidoCompra.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetallePedidoCompra(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetallePedidoCompraActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetallePedidoCompra();
			
			if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		
			DetallePedidoCompra detallepedidocompra=new DetallePedidoCompra();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetallePedidoCompra(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetallePedidoCompra.getSelectedItem();
			
			
			
			
			detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
			//this.sTipoAccion;
			
			if(detallepedidocomprasSeleccionados.size()==1) {
				for(DetallePedidoCompra detallepedidocompraAux:detallepedidocomprasSeleccionados) {
					detallepedidocompra=detallepedidocompraAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetallePedidoCompra();
			
      		//this.finishProcessDetallePedidoCompra(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetallePedidoCompraReturnGeneral() throws Exception {
		if(this.detallepedidocompraReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detallepedidocompraReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detallepedidocompraReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detallepedidocompraReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detallepedidocompraReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detallepedidocompraReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetallePedidoCompra(false);
		}
		
		if(this.detallepedidocompraReturnGeneral.getConRetornoLista() || this.detallepedidocompraReturnGeneral.getConRetornoObjeto()) {
			if(this.detallepedidocompraReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallepedidocompraLogic.setDetallePedidoCompras(this.detallepedidocompraReturnGeneral.getDetallePedidoCompras());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detallepedidocompraReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallepedidocompraLogic.setDetallePedidoCompra(this.detallepedidocompraReturnGeneral.getDetallePedidoCompra());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetallePedidoCompra(false);
		}
	}
	
	public void actualizarParametrosGeneralDetallePedidoCompra() throws Exception {
		
		
	}
	
	public ArrayList<DetallePedidoCompra> getDetallePedidoComprasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetallePedidoCompra) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetallePedidoCompra detallepedidocompraAux:detallepedidocompraLogic.getDetallePedidoCompras()) {
					if(detallepedidocompraAux.getIsSelected()) {
						detallepedidocomprasSeleccionados.add(detallepedidocompraAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetallePedidoCompra detallepedidocompraAux:this.detallepedidocompras) {
					if(detallepedidocompraAux.getIsSelected()) {
						detallepedidocomprasSeleccionados.add(detallepedidocompraAux);				
					}
				}
			}
			
			if(detallepedidocomprasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detallepedidocomprasSeleccionados.addAll(this.detallepedidocompraLogic.getDetallePedidoCompras());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detallepedidocomprasSeleccionados.addAll(this.detallepedidocompras);				
					}
				}
			}
		} else {
			detallepedidocomprasSeleccionados.add(this.detallepedidocompra);
		}
		
		return detallepedidocomprasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetallePedidoComprasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetallePedidoComprasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetallePedidoComprasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetallePedidoComprasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetallePedidoComprasSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Pedido Compra",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetallePedidoComprasSeleccionados() throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetallePedidoCompras("Todos",detallepedidocomprasSeleccionados);
		
	}	
	
	public void generarReporteNormalDetallePedidoComprasSeleccionados() throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetallePedidoCompras("Todos",detallepedidocomprasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetallePedidoComprasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetallePedidoCompras("Todos",detallepedidocomprasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetallePedidoComprasSeleccionados() throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		
		
		
		this.abrirInicializarFrameReporteDinamicoDetallePedidoCompra();
		
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoDetallePedidoCompra();
		
		
		//this.generarReporteDetallePedidoCompras("Todos",detallepedidocomprasSeleccionados ,detallepedidocompraImplementable,detallepedidocompraImplementableHome);
	}
	
	public void mostrarImportacionDetallePedidoCompras() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionDetallePedidoCompra();
		
		this.abrirFrameImportacionDetallePedidoCompra();		
		
			
		//this.generarReporteDetallePedidoCompras("Todos",detallepedidocomprasSeleccionados ,detallepedidocompraImplementable,detallepedidocompraImplementableHome);
	}
	
	public void importarDetallePedidoCompras() throws Exception {		
	
	}
	
	public void exportarDetallePedidoComprasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetallePedidoComprasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetallePedidoComprasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetallePedidoComprasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Pedido Compra",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetallePedidoComprasSeleccionados() throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallepedidocompra."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetallePedidoCompra(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetallePedidoCompra detallepedidocompraAux:detallepedidocomprasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetallePedidoCompra(detallepedidocompraAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detallepedidocompraAux.setsDetalleGeneralEntityReporte(detallepedidocompraAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetallePedidoCompra(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detallepedidocompra.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getpedidocompra_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getunidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getcantidad_pedido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getcosto_unitario().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getcosto_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getcantidad_entregada().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallepedidocompra.getcantidad_pendiente().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetallePedidoComprasSeleccionados() throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallepedidocompra.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetallePedidoCompras");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetallePedidoCompra(row);				
				iRow++;
			}				
			
			for(DetallePedidoCompra detallepedidocompraAux:detallepedidocomprasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetallePedidoCompra(detallepedidocompraAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetallePedidoComprasSeleccionados() throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();		
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallepedidocompra.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detallepedidocompras");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detallepedidocompra");
			//elementRoot.appendChild(element);
		
			for(DetallePedidoCompra detallepedidocompraAux:detallepedidocomprasSeleccionados) {
				element = document.createElement("detallepedidocompra");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetallePedidoCompra(detallepedidocompraAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Pedido Compra",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetallePedidoCompra(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_COSTOUNITARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_COSTOTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getpedidocompra_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getunidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getcantidad_pedido());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getcosto_unitario());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getcosto_total());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getcantidad_entregada());
		cell = row.createCell(iColumn++);cell.setCellValue(detallepedidocompra.getcantidad_pendiente());				
	}
	
	public void setFilaDatosExportarXmlDetallePedidoCompra(DetallePedidoCompra detallepedidocompra,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetallePedidoCompraConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detallepedidocompra.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetallePedidoCompraConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detallepedidocompra.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementpedidocompra_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDPEDIDOCOMPRA);
		elementpedidocompra_descripcion.appendChild(document.createTextNode(detallepedidocompra.getpedidocompra_descripcion()));
		element.appendChild(elementpedidocompra_descripcion);

		Element elementempresa_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detallepedidocompra.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detallepedidocompra.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detallepedidocompra.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detallepedidocompra.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detallepedidocompra.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detallepedidocompra.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementbodega_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(detallepedidocompra.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(detallepedidocompra.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementunidad_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDUNIDAD);
		elementunidad_descripcion.appendChild(document.createTextNode(detallepedidocompra.getunidad_descripcion()));
		element.appendChild(elementunidad_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(DetallePedidoCompraConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(detallepedidocompra.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementcantidad_pedido = document.createElement(DetallePedidoCompraConstantesFunciones.CANTIDADPEDIDO);
		elementcantidad_pedido.appendChild(document.createTextNode(detallepedidocompra.getcantidad_pedido().toString().trim()));
		element.appendChild(elementcantidad_pedido);

		Element elementcosto_unitario = document.createElement(DetallePedidoCompraConstantesFunciones.COSTOUNITARIO);
		elementcosto_unitario.appendChild(document.createTextNode(detallepedidocompra.getcosto_unitario().toString().trim()));
		element.appendChild(elementcosto_unitario);

		Element elementcosto_total = document.createElement(DetallePedidoCompraConstantesFunciones.COSTOTOTAL);
		elementcosto_total.appendChild(document.createTextNode(detallepedidocompra.getcosto_total().toString().trim()));
		element.appendChild(elementcosto_total);

		Element elementdescripcion = document.createElement(DetallePedidoCompraConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detallepedidocompra.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementcantidad_entregada = document.createElement(DetallePedidoCompraConstantesFunciones.CANTIDADENTREGADA);
		elementcantidad_entregada.appendChild(document.createTextNode(detallepedidocompra.getcantidad_entregada().toString().trim()));
		element.appendChild(elementcantidad_entregada);

		Element elementcantidad_pendiente = document.createElement(DetallePedidoCompraConstantesFunciones.CANTIDADPENDIENTE);
		elementcantidad_pendiente.appendChild(document.createTextNode(detallepedidocompra.getcantidad_pendiente().toString().trim()));
		element.appendChild(elementcantidad_pendiente);
	}
	
	public void generarReporteGroupGenericoDetallePedidoComprasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados=new ArrayList<DetallePedidoCompra>();
		
		detallepedidocomprasSeleccionados=this.getDetallePedidoComprasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetallePedidoCompra(detallepedidocomprasSeleccionados);
		
		this.generarReporteDetallePedidoCompras("Todos",detallepedidocomprasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetallePedidoCompra(ArrayList<DetallePedidoCompra> detallepedidocomprasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetallePedidoCompra detallepedidocompraAux:detallepedidocomprasSeleccionados) {
				detallepedidocompraAux.setsDetalleGeneralEntityReporte(detallepedidocompraAux.toString());
			
				if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDPEDIDOCOMPRA)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getpedidocompra_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDUNIDAD)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getunidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPEDIDO)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getcantidad_pedido().toString());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADENTREGADA)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getcantidad_entregada().toString());
				}
				 else if(sTipoSeleccionar.equals(DetallePedidoCompraConstantesFunciones.LABEL_CANTIDADPENDIENTE)) {
					existe=true;
					detallepedidocompraAux.setsDescripcionGeneralEntityReporte1(detallepedidocompraAux.getcantidad_pendiente().toString());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetallePedidoCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetallePedidoCompra(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetallePedidoCompra=true;
				this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=true;
				this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=true;
			}
			
			this.isVisibilidadCeldaModificarDetallePedidoCompra=false;
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=false;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=false;
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=true;
				} else {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=false;
			this.isVisibilidadCeldaModificarDetallePedidoCompra=false;
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=true;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=false;
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=true;
				} else {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=false;
			this.isVisibilidadCeldaModificarDetallePedidoCompra=false;
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=true;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=true;
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=true;
				} else {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=false;
			this.isVisibilidadCeldaModificarDetallePedidoCompra=false;
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=true;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=false;
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				} else {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=true;
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=true;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=true;
			this.isVisibilidadCeldaModificarDetallePedidoCompra=false;
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=false;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=false;
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=true;
				} else {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=false;
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=false;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=false;
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				} else {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=false;
			this.isVisibilidadCeldaModificarDetallePedidoCompra=true;
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=false;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=false;
			this.isVisibilidadCeldaCancelarDetallePedidoCompra=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				} else {
					this.isVisibilidadCeldaGuardarDetallePedidoCompra=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetallePedidoCompraJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=true;
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=true;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=true;
		} else {
			this.actualizarEstadoPanelsDetallePedidoCompra(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetallePedidoCompra=false;
			//this.isVisibilidadCeldaVerFormDetallePedidoCompra=false;
			this.isVisibilidadCeldaDuplicarDetallePedidoCompra=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detallepedidocompraSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
		} else {
			this.isVisibilidadCeldaNuevoDetallePedidoCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetallePedidoCompra=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
			if(!detallepedidocompraSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;												
			}
			
			this.jButtonCerrarDetallePedidoCompra.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetallePedidoCompra=false;
		}
		
		if(!this.permiteMantenimiento(this.detallepedidocompra)) {
			this.isVisibilidadCeldaActualizarDetallePedidoCompra=false;
			this.isVisibilidadCeldaEliminarDetallePedidoCompra=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetallePedidoCompra() {
	}
	
	public void actualizarEstadoPanelsDetallePedidoCompra(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetallePedidoCompra!=null) {
				this.jScrollPanelDatosEdicionDetallePedidoCompra.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetallePedidoCompra!=null) {
				this.jScrollPanelDatosDetallePedidoCompra.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetallePedidoCompra!=null) {
				this.jPanelPaginacionDetallePedidoCompra.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetallePedidoCompra!=null) {
				this.jScrollPanelDatosEdicionDetallePedidoCompra.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosDetallePedidoCompra!=null) {
				this.jScrollPanelDatosDetallePedidoCompra.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetallePedidoCompra!=null) {
				this.jPanelPaginacionDetallePedidoCompra.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetallePedidoCompra!=null) {
				this.jScrollPanelDatosEdicionDetallePedidoCompra.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetallePedidoCompra!=null) {
				this.jScrollPanelDatosDetallePedidoCompra.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetallePedidoCompra!=null) {
				this.jPanelPaginacionDetallePedidoCompra.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetallePedidoCompra!=null) {
				this.jScrollPanelDatosEdicionDetallePedidoCompra.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetallePedidoCompra!=null) {
				this.jScrollPanelDatosDetallePedidoCompra.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetallePedidoCompra!=null) {
				this.jPanelPaginacionDetallePedidoCompra.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetallePedidoCompra!=null) {
				this.jScrollPanelDatosEdicionDetallePedidoCompra.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetallePedidoCompra!=null) {
				this.jScrollPanelDatosDetallePedidoCompra.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetallePedidoCompra!=null) {
				this.jPanelPaginacionDetallePedidoCompra.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetallePedidoCompra!=null) {
				this.jScrollPanelDatosEdicionDetallePedidoCompra.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetallePedidoCompra!=null) {
				this.jScrollPanelDatosDetallePedidoCompra.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetallePedidoCompra!=null) {
				this.jPanelPaginacionDetallePedidoCompra.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetallePedidoCompra!=null) {
				this.jScrollPanelDatosEdicionDetallePedidoCompra.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetallePedidoCompra!=null) {
				this.jScrollPanelDatosDetallePedidoCompra.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetallePedidoCompra!=null) {
				this.jPanelPaginacionDetallePedidoCompra.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
					this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detallepedidocompraSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetallePedidoCompra!=null) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesDetallePedidoCompra!=null) {
				this.jPanelParametrosReportesDetallePedidoCompra.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaPedidoCompra(Boolean isParaPedidoCompra){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPedidoCompraNegation=!isParaPedidoCompra;

			this.isVisibilidadFK_IdBodega=isParaPedidoCompraNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaPedidoCompraNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaPedidoCompra;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaPedidoCompraNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaPedidoCompraNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdBodega=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdBodega=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdBodega=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdBodega=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaMesNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaUnidad(Boolean isParaUnidad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUnidadNegation=!isParaUnidad;

			this.isVisibilidadFK_IdBodega=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaUnidad;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdBodegaDetallePedidoCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdCentroCostoDetallePedidoCompra);}

			this.isVisibilidadFK_IdPedidoCompra=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdPedidoCompra) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdPedidoCompraDetallePedidoCompra);}

			this.isVisibilidadFK_IdProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdProductoDetallePedidoCompra);}

			this.isVisibilidadFK_IdUnidad=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetallePedidoCompra.remove(jPanelFK_IdUnidadDetallePedidoCompra);}
		}
		
	}
	
	
	
	

	public String registrarSesionDetallePedidoCompraParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(detallepedidocompraSessionBean==null) {
				detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(detallepedidocompraSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.detallepedidocompraFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(DetallePedidoCompraConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionDetallePedidoCompra(true);
			//productoSessionBean.setlidDetallePedidoCompraActual(this.idDetallePedidoCompraActual);

			detallepedidocompraSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetallePedidoCompra(true);
			detallepedidocompraSessionBean.setlIdDetallePedidoCompraActualForeignKey(this.idDetallePedidoCompraActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetallePedidoCompraParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(detallepedidocompraSessionBean==null) {
				detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(detallepedidocompraSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.detallepedidocompraFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(DetallePedidoCompraConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionDetallePedidoCompra(true);
			//centrocostoSessionBean.setlidDetallePedidoCompraActual(this.idDetallePedidoCompraActual);

			detallepedidocompraSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetallePedidoCompra(true);
			detallepedidocompraSessionBean.setlIdDetallePedidoCompraActualForeignKey(this.idDetallePedidoCompraActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetallePedidoCompraSessionBean detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
		
		if(this.detallepedidocompraSessionBean==null) {
			this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
		}
		
		this.detallepedidocompraSessionBean.setsUltimaBusquedaDetallePedidoCompra(this.getsAccionBusqueda());
		this.detallepedidocompraSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detallepedidocompraSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			detallepedidocompraSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			detallepedidocompraSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detallepedidocompraSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detallepedidocompraSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPedidoCompra")) {
			detallepedidocompraSessionBean.setid_pedido_compra(this.getid_pedido_compraFK_IdPedidoCompra());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detallepedidocompraSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			detallepedidocompraSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detallepedidocompraSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
			detallepedidocompraSessionBean.setid_unidad(this.getid_unidadFK_IdUnidad());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetallePedidoCompraSessionBean detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
		
		if(this.detallepedidocompraSessionBean==null) {
			this.detallepedidocompraSessionBean=new DetallePedidoCompraSessionBean();
		}
		
		if(this.detallepedidocompraSessionBean.getsUltimaBusquedaDetallePedidoCompra()!=null&&!this.detallepedidocompraSessionBean.getsUltimaBusquedaDetallePedidoCompra().equals("")) {
			this.setsAccionBusqueda(detallepedidocompraSessionBean.getsUltimaBusquedaDetallePedidoCompra());
			this.setiNumeroPaginacion(detallepedidocompraSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detallepedidocompraSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(detallepedidocompraSessionBean.getid_bodega());
				detallepedidocompraSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(detallepedidocompraSessionBean.getid_centro_costo());
				detallepedidocompraSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detallepedidocompraSessionBean.getid_ejercicio());
				detallepedidocompraSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detallepedidocompraSessionBean.getid_empresa());
				detallepedidocompraSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPedidoCompra")) {
				this.setid_pedido_compraFK_IdPedidoCompra(detallepedidocompraSessionBean.getid_pedido_compra());
				detallepedidocompraSessionBean.setid_pedido_compra(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detallepedidocompraSessionBean.getid_periodo());
				detallepedidocompraSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(detallepedidocompraSessionBean.getid_producto());
				detallepedidocompraSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detallepedidocompraSessionBean.getid_sucursal());
				detallepedidocompraSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
				this.setid_unidadFK_IdUnidad(detallepedidocompraSessionBean.getid_unidad());
				detallepedidocompraSessionBean.setid_unidad(-1L);
			}
		}
		
		this.detallepedidocompraSessionBean.setsUltimaBusquedaDetallePedidoCompra("");
		this.detallepedidocompraSessionBean.setiNumeroPaginacion(DetallePedidoCompraConstantesFunciones.INUMEROPAGINACION);
		this.detallepedidocompraSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetallePedidoCompra(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetallePedidoCompra() {
		this.updateBorderResaltarBusquedasFormularioDetallePedidoCompra();
		this.updateVisibilidadBusquedasFormularioDetallePedidoCompra();
		this.updateHabilitarBusquedasFormularioDetallePedidoCompra();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetallePedidoCompra() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetallePedidoCompra.getComponents().length>0) {
	

		if(this.detallepedidocompraConstantesFunciones.resaltarFK_IdBodegaDetallePedidoCompra!=null) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdBodegaDetallePedidoCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdBodegaDetallePedidoCompra);
			}
		}

		if(this.detallepedidocompraConstantesFunciones.resaltarFK_IdCentroCostoDetallePedidoCompra!=null) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdCentroCostoDetallePedidoCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdCentroCostoDetallePedidoCompra);
			}
		}

		if(this.detallepedidocompraConstantesFunciones.resaltarFK_IdPedidoCompraDetallePedidoCompra!=null) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdPedidoCompraDetallePedidoCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdPedidoCompraDetallePedidoCompra);
			}
		}

		if(this.detallepedidocompraConstantesFunciones.resaltarFK_IdProductoDetallePedidoCompra!=null) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdProductoDetallePedidoCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdProductoDetallePedidoCompra);
			}
		}

		if(this.detallepedidocompraConstantesFunciones.resaltarFK_IdUnidadDetallePedidoCompra!=null) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdUnidadDetallePedidoCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdUnidadDetallePedidoCompra);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioDetallePedidoCompra() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetallePedidoCompra.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdBodegaDetallePedidoCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallepedidocompraConstantesFunciones.mostrarFK_IdBodegaDetallePedidoCompra);
			if(!this.detallepedidocompraConstantesFunciones.mostrarFK_IdBodegaDetallePedidoCompra && index>-1) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdCentroCostoDetallePedidoCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallepedidocompraConstantesFunciones.mostrarFK_IdCentroCostoDetallePedidoCompra);
			if(!this.detallepedidocompraConstantesFunciones.mostrarFK_IdCentroCostoDetallePedidoCompra && index>-1) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdPedidoCompraDetallePedidoCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallepedidocompraConstantesFunciones.mostrarFK_IdPedidoCompraDetallePedidoCompra);
			if(!this.detallepedidocompraConstantesFunciones.mostrarFK_IdPedidoCompraDetallePedidoCompra && index>-1) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdProductoDetallePedidoCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallepedidocompraConstantesFunciones.mostrarFK_IdProductoDetallePedidoCompra);
			if(!this.detallepedidocompraConstantesFunciones.mostrarFK_IdProductoDetallePedidoCompra && index>-1) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdUnidadDetallePedidoCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallepedidocompraConstantesFunciones.mostrarFK_IdUnidadDetallePedidoCompra);
			if(!this.detallepedidocompraConstantesFunciones.mostrarFK_IdUnidadDetallePedidoCompra && index>-1) {
				this.jTabbedPaneBusquedasDetallePedidoCompra.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioDetallePedidoCompra() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetallePedidoCompra.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdBodegaDetallePedidoCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallepedidocompraConstantesFunciones.activarFK_IdBodegaDetallePedidoCompra);
				this.jTabbedPaneBusquedasDetallePedidoCompra.setEnabledAt(index,this.detallepedidocompraConstantesFunciones.activarFK_IdBodegaDetallePedidoCompra);
			}

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdCentroCostoDetallePedidoCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallepedidocompraConstantesFunciones.activarFK_IdCentroCostoDetallePedidoCompra);
				this.jTabbedPaneBusquedasDetallePedidoCompra.setEnabledAt(index,this.detallepedidocompraConstantesFunciones.activarFK_IdCentroCostoDetallePedidoCompra);
			}

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdPedidoCompraDetallePedidoCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallepedidocompraConstantesFunciones.activarFK_IdPedidoCompraDetallePedidoCompra);
				this.jTabbedPaneBusquedasDetallePedidoCompra.setEnabledAt(index,this.detallepedidocompraConstantesFunciones.activarFK_IdPedidoCompraDetallePedidoCompra);
			}

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdProductoDetallePedidoCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallepedidocompraConstantesFunciones.activarFK_IdProductoDetallePedidoCompra);
				this.jTabbedPaneBusquedasDetallePedidoCompra.setEnabledAt(index,this.detallepedidocompraConstantesFunciones.activarFK_IdProductoDetallePedidoCompra);
			}

			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdUnidadDetallePedidoCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallepedidocompraConstantesFunciones.activarFK_IdUnidadDetallePedidoCompra);
				this.jTabbedPaneBusquedasDetallePedidoCompra.setEnabledAt(index,this.detallepedidocompraConstantesFunciones.activarFK_IdUnidadDetallePedidoCompra);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaDetallePedidoCompra(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdBodegaDetallePedidoCompra);

			this.jTabbedPaneBusquedasDetallePedidoCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);

			this.detallepedidocompraConstantesFunciones.setResaltarFK_IdBodegaDetallePedidoCompra(resaltar);

			jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdBodegaDetallePedidoCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdCentroCostoDetallePedidoCompra);

			this.jTabbedPaneBusquedasDetallePedidoCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);

			this.detallepedidocompraConstantesFunciones.setResaltarFK_IdCentroCostoDetallePedidoCompra(resaltar);

			jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdCentroCostoDetallePedidoCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPedidoCompra")) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdPedidoCompraDetallePedidoCompra);

			this.jTabbedPaneBusquedasDetallePedidoCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);

			this.detallepedidocompraConstantesFunciones.setResaltarFK_IdPedidoCompraDetallePedidoCompra(resaltar);

			jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdPedidoCompraDetallePedidoCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdProductoDetallePedidoCompra);

			this.jTabbedPaneBusquedasDetallePedidoCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);

			this.detallepedidocompraConstantesFunciones.setResaltarFK_IdProductoDetallePedidoCompra(resaltar);

			jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdProductoDetallePedidoCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdUnidad")) {
			index= this.jTabbedPaneBusquedasDetallePedidoCompra.indexOfComponent(this.jPanelFK_IdUnidadDetallePedidoCompra);

			this.jTabbedPaneBusquedasDetallePedidoCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetallePedidoCompra.getComponent(index);

			this.detallepedidocompraConstantesFunciones.setResaltarFK_IdUnidadDetallePedidoCompra(resaltar);

			jPanel.setBorder(this.detallepedidocompraConstantesFunciones.resaltarFK_IdUnidadDetallePedidoCompra);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarDetallePedidoCompra.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetallePedidoCompra() throws Exception {

		if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetallePedidoCompra();
		this.updateVisibilidadResaltarControlesFormularioDetallePedidoCompra();
		this.updateHabilitarResaltarControlesFormularioDetallePedidoCompra();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetallePedidoCompra() throws Exception {
		if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detallepedidocompraConstantesFunciones.resaltaridDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltaridDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_pedido_compraDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_pedido_compraDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_empresaDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_empresaDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_sucursalDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_sucursalDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_ejercicioDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_ejercicioDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_periodoDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_periodoDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_anioDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_anioDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_mesDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_mesDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_bodegaDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_bodegaDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_productoDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_productoDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_unidadDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_unidadDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarid_centro_costoDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarid_centro_costoDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarcantidad_pedidoDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarcantidad_pedidoDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarcosto_unitarioDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarcosto_unitarioDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarcosto_totalDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_totalDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarcosto_totalDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltardescripcionDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jTextAreadescripcionDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltardescripcionDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarcantidad_entregadaDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_entregadaDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarcantidad_entregadaDetallePedidoCompra);}
		if(this.detallepedidocompraConstantesFunciones.resaltarcantidad_pendienteDetallePedidoCompra!=null && this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pendienteDetallePedidoCompra.setBorder(this.detallepedidocompraConstantesFunciones.resaltarcantidad_pendienteDetallePedidoCompra);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetallePedidoCompra() throws Exception {		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
	
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostraridDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelidDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostraridDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_pedido_compraDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_pedido_compraDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_pedido_compraDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_empresaDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_empresaDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_empresaDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_sucursalDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_sucursalDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_sucursalDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_ejercicioDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_ejercicioDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_ejercicioDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_periodoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_periodoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_periodoDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_anioDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_anioDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_anioDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_mesDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_mesDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_mesDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_bodegaDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_bodegaDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_bodegaDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_productoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_productoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_productoDetallePedidoCompra);
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_productoDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_unidadDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_unidadDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_unidadDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_centro_costoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelid_centro_costoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_centro_costoDetallePedidoCompra);
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarid_centro_costoDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcantidad_pedidoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelcantidad_pedidoDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcantidad_pedidoDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcosto_unitarioDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelcosto_unitarioDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcosto_unitarioDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_totalDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcosto_totalDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelcosto_totalDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcosto_totalDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextAreadescripcionDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrardescripcionDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPaneldescripcionDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrardescripcionDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_entregadaDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcantidad_entregadaDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelcantidad_entregadaDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcantidad_entregadaDetallePedidoCompra);
		//this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pendienteDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcantidad_pendienteDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jPanelcantidad_pendienteDetallePedidoCompra.setVisible(this.detallepedidocompraConstantesFunciones.mostrarcantidad_pendienteDetallePedidoCompra);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetallePedidoCompra() throws Exception {
		if(this.jInternalFrameDetalleFormDetallePedidoCompra==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetallePedidoCompra!=null) {
	
		this.jInternalFrameDetalleFormDetallePedidoCompra.jLabelidDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activaridDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_pedido_compraDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_pedido_compraDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_empresaDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_empresaDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_sucursalDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_sucursalDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_ejercicioDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_ejercicioDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_periodoDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_periodoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_anioDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_anioDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_mesDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_mesDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_bodegaDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_bodegaDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_productoDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_productoDetallePedidoCompra);
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_productoDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_productoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_unidadDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_unidadDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jComboBoxid_centro_costoDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_centro_costoDetallePedidoCompra);
			this.jInternalFrameDetalleFormDetallePedidoCompra.jButtonid_centro_costoDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarid_centro_costoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pedidoDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarcantidad_pedidoDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_unitarioDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarcosto_unitarioDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcosto_totalDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarcosto_totalDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextAreadescripcionDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activardescripcionDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_entregadaDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarcantidad_entregadaDetallePedidoCompra);
		this.jInternalFrameDetalleFormDetallePedidoCompra.jTextFieldcantidad_pendienteDetallePedidoCompra.setEnabled(this.detallepedidocompraConstantesFunciones.activarcantidad_pendienteDetallePedidoCompra);
		}
	}
	
		
}