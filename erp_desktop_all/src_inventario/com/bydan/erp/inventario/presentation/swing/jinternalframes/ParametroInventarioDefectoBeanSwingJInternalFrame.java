/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.ParametroInventarioDefectoConstantesFunciones;
import com.bydan.erp.inventario.util.ParametroInventarioDefectoParameterReturnGeneral;
//import com.bydan.erp.inventario.util.ParametroInventarioDefectoParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.ParametroInventarioDefectoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ParametroInventarioDefectoBeanSwingJInternalFrame extends ParametroInventarioDefectoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ParametroInventarioDefectoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<ParametroInventarioDefecto> parametroinventariodefectoValidator = new ClassValidator<ParametroInventarioDefecto>(ParametroInventarioDefecto.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public ParametroInventarioDefecto parametroinventariodefecto;	
	public ParametroInventarioDefecto parametroinventariodefectoAux;
	public ParametroInventarioDefecto parametroinventariodefectoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public ParametroInventarioDefecto parametroinventariodefectoTotales;
	public Long idParametroInventarioDefectoActual;
	public Long iIdNuevoParametroInventarioDefecto=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboGrupoBodega="";

	public List<GrupoBodega> grupobodegasForeignKey;

	public List<GrupoBodega> getgrupobodegasForeignKey() {
		return grupobodegasForeignKey;
	}

	public void setgrupobodegasForeignKey(List<GrupoBodega> grupobodegasForeignKey) {
		this.grupobodegasForeignKey = grupobodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public GrupoBodega grupobodegaForeignKey;

	public GrupoBodega getgrupobodegaForeignKey() {
		return grupobodegaForeignKey;
	}

	public void setgrupobodegaForeignKey(GrupoBodega grupobodegaForeignKey) {
		this.grupobodegaForeignKey = grupobodegaForeignKey;
	}

	public String sFinalQueryComboCalidadProducto="";

	public List<CalidadProducto> calidadproductosForeignKey;

	public List<CalidadProducto> getcalidadproductosForeignKey() {
		return calidadproductosForeignKey;
	}

	public void setcalidadproductosForeignKey(List<CalidadProducto> calidadproductosForeignKey) {
		this.calidadproductosForeignKey = calidadproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CalidadProducto calidadproductoForeignKey;

	public CalidadProducto getcalidadproductoForeignKey() {
		return calidadproductoForeignKey;
	}

	public void setcalidadproductoForeignKey(CalidadProducto calidadproductoForeignKey) {
		this.calidadproductoForeignKey = calidadproductoForeignKey;
	}

	public String sFinalQueryComboTipoServicio="";

	public List<TipoServicio> tiposerviciosForeignKey;

	public List<TipoServicio> gettiposerviciosForeignKey() {
		return tiposerviciosForeignKey;
	}

	public void settiposerviciosForeignKey(List<TipoServicio> tiposerviciosForeignKey) {
		this.tiposerviciosForeignKey = tiposerviciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoServicio tiposervicioForeignKey;

	public TipoServicio gettiposervicioForeignKey() {
		return tiposervicioForeignKey;
	}

	public void settiposervicioForeignKey(TipoServicio tiposervicioForeignKey) {
		this.tiposervicioForeignKey = tiposervicioForeignKey;
	}

	public String sFinalQueryComboTipoProductoServicioInven="";

	public List<TipoProductoServicioInven> tipoproductoservicioinvensForeignKey;

	public List<TipoProductoServicioInven> gettipoproductoservicioinvensForeignKey() {
		return tipoproductoservicioinvensForeignKey;
	}

	public void settipoproductoservicioinvensForeignKey(List<TipoProductoServicioInven> tipoproductoservicioinvensForeignKey) {
		this.tipoproductoservicioinvensForeignKey = tipoproductoservicioinvensForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoProductoServicioInven tipoproductoservicioinvenForeignKey;

	public TipoProductoServicioInven gettipoproductoservicioinvenForeignKey() {
		return tipoproductoservicioinvenForeignKey;
	}

	public void settipoproductoservicioinvenForeignKey(TipoProductoServicioInven tipoproductoservicioinvenForeignKey) {
		this.tipoproductoservicioinvenForeignKey = tipoproductoservicioinvenForeignKey;
	}

	public String sFinalQueryComboTipoProductoServicio="";

	public List<TipoProductoServicio> tipoproductoserviciosForeignKey;

	public List<TipoProductoServicio> gettipoproductoserviciosForeignKey() {
		return tipoproductoserviciosForeignKey;
	}

	public void settipoproductoserviciosForeignKey(List<TipoProductoServicio> tipoproductoserviciosForeignKey) {
		this.tipoproductoserviciosForeignKey = tipoproductoserviciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoProductoServicio tipoproductoservicioForeignKey;

	public TipoProductoServicio gettipoproductoservicioForeignKey() {
		return tipoproductoservicioForeignKey;
	}

	public void settipoproductoservicioForeignKey(TipoProductoServicio tipoproductoservicioForeignKey) {
		this.tipoproductoservicioForeignKey = tipoproductoservicioForeignKey;
	}

	public String sFinalQueryComboTipoCosteo="";

	public List<TipoCosteo> tipocosteosForeignKey;

	public List<TipoCosteo> gettipocosteosForeignKey() {
		return tipocosteosForeignKey;
	}

	public void settipocosteosForeignKey(List<TipoCosteo> tipocosteosForeignKey) {
		this.tipocosteosForeignKey = tipocosteosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCosteo tipocosteoForeignKey;

	public TipoCosteo gettipocosteoForeignKey() {
		return tipocosteoForeignKey;
	}

	public void settipocosteoForeignKey(TipoCosteo tipocosteoForeignKey) {
		this.tipocosteoForeignKey = tipocosteoForeignKey;
	}

	public String sFinalQueryComboTipoProducto="";

	public List<TipoProducto> tipoproductosForeignKey;

	public List<TipoProducto> gettipoproductosForeignKey() {
		return tipoproductosForeignKey;
	}

	public void settipoproductosForeignKey(List<TipoProducto> tipoproductosForeignKey) {
		this.tipoproductosForeignKey = tipoproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoProducto tipoproductoForeignKey;

	public TipoProducto gettipoproductoForeignKey() {
		return tipoproductoForeignKey;
	}

	public void settipoproductoForeignKey(TipoProducto tipoproductoForeignKey) {
		this.tipoproductoForeignKey = tipoproductoForeignKey;
	}

	public String sFinalQueryComboTipoViaTransporte="";

	public List<TipoViaTransporte> tipoviatransportesForeignKey;

	public List<TipoViaTransporte> gettipoviatransportesForeignKey() {
		return tipoviatransportesForeignKey;
	}

	public void settipoviatransportesForeignKey(List<TipoViaTransporte> tipoviatransportesForeignKey) {
		this.tipoviatransportesForeignKey = tipoviatransportesForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoViaTransporte tipoviatransporteForeignKey;

	public TipoViaTransporte gettipoviatransporteForeignKey() {
		return tipoviatransporteForeignKey;
	}

	public void settipoviatransporteForeignKey(TipoViaTransporte tipoviatransporteForeignKey) {
		this.tipoviatransporteForeignKey = tipoviatransporteForeignKey;
	}

	public String sFinalQueryComboRangoUnidadVenta="";

	public List<RangoUnidadVenta> rangounidadventasForeignKey;

	public List<RangoUnidadVenta> getrangounidadventasForeignKey() {
		return rangounidadventasForeignKey;
	}

	public void setrangounidadventasForeignKey(List<RangoUnidadVenta> rangounidadventasForeignKey) {
		this.rangounidadventasForeignKey = rangounidadventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public RangoUnidadVenta rangounidadventaForeignKey;

	public RangoUnidadVenta getrangounidadventaForeignKey() {
		return rangounidadventaForeignKey;
	}

	public void setrangounidadventaForeignKey(RangoUnidadVenta rangounidadventaForeignKey) {
		this.rangounidadventaForeignKey = rangounidadventaForeignKey;
	}

	public String sFinalQueryComboPais="";

	public List<Pais> paissForeignKey;

	public List<Pais> getpaissForeignKey() {
		return paissForeignKey;
	}

	public void setpaissForeignKey(List<Pais> paissForeignKey) {
		this.paissForeignKey = paissForeignKey;
	}

	//OBJETO FK ACTUAL
	public Pais paisForeignKey;

	public Pais getpaisForeignKey() {
		return paisForeignKey;
	}

	public void setpaisForeignKey(Pais paisForeignKey) {
		this.paisForeignKey = paisForeignKey;
	}

	public String sFinalQueryComboCiudad="";

	public List<Ciudad> ciudadsForeignKey;

	public List<Ciudad> getciudadsForeignKey() {
		return ciudadsForeignKey;
	}

	public void setciudadsForeignKey(List<Ciudad> ciudadsForeignKey) {
		this.ciudadsForeignKey = ciudadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ciudad ciudadForeignKey;

	public Ciudad getciudadForeignKey() {
		return ciudadForeignKey;
	}

	public void setciudadForeignKey(Ciudad ciudadForeignKey) {
		this.ciudadForeignKey = ciudadForeignKey;
	}

	public String sFinalQueryComboColorProducto="";

	public List<ColorProducto> colorproductosForeignKey;

	public List<ColorProducto> getcolorproductosForeignKey() {
		return colorproductosForeignKey;
	}

	public void setcolorproductosForeignKey(List<ColorProducto> colorproductosForeignKey) {
		this.colorproductosForeignKey = colorproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public ColorProducto colorproductoForeignKey;

	public ColorProducto getcolorproductoForeignKey() {
		return colorproductoForeignKey;
	}

	public void setcolorproductoForeignKey(ColorProducto colorproductoForeignKey) {
		this.colorproductoForeignKey = colorproductoForeignKey;
	}

	public String sFinalQueryComboClaseProducto="";

	public List<ClaseProducto> claseproductosForeignKey;

	public List<ClaseProducto> getclaseproductosForeignKey() {
		return claseproductosForeignKey;
	}

	public void setclaseproductosForeignKey(List<ClaseProducto> claseproductosForeignKey) {
		this.claseproductosForeignKey = claseproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public ClaseProducto claseproductoForeignKey;

	public ClaseProducto getclaseproductoForeignKey() {
		return claseproductoForeignKey;
	}

	public void setclaseproductoForeignKey(ClaseProducto claseproductoForeignKey) {
		this.claseproductoForeignKey = claseproductoForeignKey;
	}

	public String sFinalQueryComboEfectoProducto="";

	public List<EfectoProducto> efectoproductosForeignKey;

	public List<EfectoProducto> getefectoproductosForeignKey() {
		return efectoproductosForeignKey;
	}

	public void setefectoproductosForeignKey(List<EfectoProducto> efectoproductosForeignKey) {
		this.efectoproductosForeignKey = efectoproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EfectoProducto efectoproductoForeignKey;

	public EfectoProducto getefectoproductoForeignKey() {
		return efectoproductoForeignKey;
	}

	public void setefectoproductoForeignKey(EfectoProducto efectoproductoForeignKey) {
		this.efectoproductoForeignKey = efectoproductoForeignKey;
	}

	public String sFinalQueryComboMarcaProducto="";

	public List<MarcaProducto> marcaproductosForeignKey;

	public List<MarcaProducto> getmarcaproductosForeignKey() {
		return marcaproductosForeignKey;
	}

	public void setmarcaproductosForeignKey(List<MarcaProducto> marcaproductosForeignKey) {
		this.marcaproductosForeignKey = marcaproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public MarcaProducto marcaproductoForeignKey;

	public MarcaProducto getmarcaproductoForeignKey() {
		return marcaproductoForeignKey;
	}

	public void setmarcaproductoForeignKey(MarcaProducto marcaproductoForeignKey) {
		this.marcaproductoForeignKey = marcaproductoForeignKey;
	}

	public String sFinalQueryComboModeloProducto="";

	public List<ModeloProducto> modeloproductosForeignKey;

	public List<ModeloProducto> getmodeloproductosForeignKey() {
		return modeloproductosForeignKey;
	}

	public void setmodeloproductosForeignKey(List<ModeloProducto> modeloproductosForeignKey) {
		this.modeloproductosForeignKey = modeloproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public ModeloProducto modeloproductoForeignKey;

	public ModeloProducto getmodeloproductoForeignKey() {
		return modeloproductoForeignKey;
	}

	public void setmodeloproductoForeignKey(ModeloProducto modeloproductoForeignKey) {
		this.modeloproductoForeignKey = modeloproductoForeignKey;
	}

	public String sFinalQueryComboMaterialProducto="";

	public List<MaterialProducto> materialproductosForeignKey;

	public List<MaterialProducto> getmaterialproductosForeignKey() {
		return materialproductosForeignKey;
	}

	public void setmaterialproductosForeignKey(List<MaterialProducto> materialproductosForeignKey) {
		this.materialproductosForeignKey = materialproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public MaterialProducto materialproductoForeignKey;

	public MaterialProducto getmaterialproductoForeignKey() {
		return materialproductoForeignKey;
	}

	public void setmaterialproductoForeignKey(MaterialProducto materialproductoForeignKey) {
		this.materialproductoForeignKey = materialproductoForeignKey;
	}

	public String sFinalQueryComboSegmentoProducto="";

	public List<SegmentoProducto> segmentoproductosForeignKey;

	public List<SegmentoProducto> getsegmentoproductosForeignKey() {
		return segmentoproductosForeignKey;
	}

	public void setsegmentoproductosForeignKey(List<SegmentoProducto> segmentoproductosForeignKey) {
		this.segmentoproductosForeignKey = segmentoproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public SegmentoProducto segmentoproductoForeignKey;

	public SegmentoProducto getsegmentoproductoForeignKey() {
		return segmentoproductoForeignKey;
	}

	public void setsegmentoproductoForeignKey(SegmentoProducto segmentoproductoForeignKey) {
		this.segmentoproductoForeignKey = segmentoproductoForeignKey;
	}

	public String sFinalQueryComboTallaProducto="";

	public List<TallaProducto> tallaproductosForeignKey;

	public List<TallaProducto> gettallaproductosForeignKey() {
		return tallaproductosForeignKey;
	}

	public void settallaproductosForeignKey(List<TallaProducto> tallaproductosForeignKey) {
		this.tallaproductosForeignKey = tallaproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TallaProducto tallaproductoForeignKey;

	public TallaProducto gettallaproductoForeignKey() {
		return tallaproductoForeignKey;
	}

	public void settallaproductoForeignKey(TallaProducto tallaproductoForeignKey) {
		this.tallaproductoForeignKey = tallaproductoForeignKey;
	}

		
	
	
	
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoParametroInventarioDefecto;
	public Boolean isPermisoNuevoParametroInventarioDefecto;
	public Boolean isPermisoActualizarParametroInventarioDefecto;
	public Boolean isPermisoActualizarOriginalParametroInventarioDefecto;
	public Boolean isPermisoEliminarParametroInventarioDefecto;
	public Boolean isPermisoGuardarCambiosParametroInventarioDefecto;
	public Boolean isPermisoConsultaParametroInventarioDefecto;
	public Boolean isPermisoBusquedaParametroInventarioDefecto;
	public Boolean isPermisoReporteParametroInventarioDefecto;
	public Boolean isPermisoPaginacionMedioParametroInventarioDefecto;
	public Boolean isPermisoPaginacionAltoParametroInventarioDefecto;
	public Boolean isPermisoPaginacionTodoParametroInventarioDefecto;
	public Boolean isPermisoCopiarParametroInventarioDefecto;
	public Boolean isPermisoVerFormParametroInventarioDefecto;
	public Boolean isPermisoDuplicarParametroInventarioDefecto;
	public Boolean isPermisoOrdenParametroInventarioDefecto;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ParametroInventarioDefectoParameterReturnGeneral parametroinventariodefectoReturnGeneral;
	public ParametroInventarioDefectoParameterReturnGeneral parametroinventariodefectoParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoParametroInventarioDefecto=false;
	public Boolean esParaAccionDesdeFormularioParametroInventarioDefecto=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ParametroInventarioDefectoSessionBeanAdditional parametroinventariodefectoSessionBeanAdditional=null;
	
	public ParametroInventarioDefectoSessionBeanAdditional getParametroInventarioDefectoSessionBeanAdditional() {
		return this.parametroinventariodefectoSessionBeanAdditional;
	}
	
	public void setParametroInventarioDefectoSessionBeanAdditional(ParametroInventarioDefectoSessionBeanAdditional parametroinventariodefectoSessionBeanAdditional) {
		try {
			this.parametroinventariodefectoSessionBeanAdditional=parametroinventariodefectoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ParametroInventarioDefectoBeanSwingJInternalFrameAdditional parametroinventariodefectoBeanSwingJInternalFrameAdditional=null;
	//public class ParametroInventarioDefectoBeanSwingJInternalFrame
	
	public ParametroInventarioDefectoBeanSwingJInternalFrameAdditional getParametroInventarioDefectoBeanSwingJInternalFrameAdditional() {
		return this.parametroinventariodefectoBeanSwingJInternalFrameAdditional;
	}
	
	public void setParametroInventarioDefectoBeanSwingJInternalFrameAdditional(ParametroInventarioDefectoBeanSwingJInternalFrameAdditional parametroinventariodefectoBeanSwingJInternalFrameAdditional) {
		try {
			this.parametroinventariodefectoBeanSwingJInternalFrameAdditional=parametroinventariodefectoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ParametroInventarioDefectoLogic parametroinventariodefectoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public ParametroInventarioDefecto parametroinventariodefectoBean;
	public ParametroInventarioDefectoConstantesFunciones parametroinventariodefectoConstantesFunciones;
	//public ParametroInventarioDefectoParameterReturnGeneral parametroinventariodefectoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public GrupoBodegaLogic grupobodegaLogic;
	public CalidadProductoLogic calidadproductoLogic;
	public TipoServicioLogic tiposervicioLogic;
	public TipoProductoServicioInvenLogic tipoproductoservicioinvenLogic;
	public TipoProductoServicioLogic tipoproductoservicioLogic;
	public TipoCosteoLogic tipocosteoLogic;
	public TipoProductoLogic tipoproductoLogic;
	public TipoViaTransporteLogic tipoviatransporteLogic;
	public RangoUnidadVentaLogic rangounidadventaLogic;
	public PaisLogic paisLogic;
	public CiudadLogic ciudadLogic;
	public ColorProductoLogic colorproductoLogic;
	public ClaseProductoLogic claseproductoLogic;
	public EfectoProductoLogic efectoproductoLogic;
	public MarcaProductoLogic marcaproductoLogic;
	public ModeloProductoLogic modeloproductoLogic;
	public MaterialProductoLogic materialproductoLogic;
	public SegmentoProductoLogic segmentoproductoLogic;
	public TallaProductoLogic tallaproductoLogic;
	
	//PARAMETROS
	
	
	//public List<ParametroInventarioDefecto> parametroinventariodefectos;	
	//public List<ParametroInventarioDefecto> parametroinventariodefectosEliminados;
	//public List<ParametroInventarioDefecto> parametroinventariodefectosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoParametroInventarioDefecto=false;
	public Boolean isVisibilidadCeldaDuplicarParametroInventarioDefecto=true;
	public Boolean isVisibilidadCeldaCopiarParametroInventarioDefecto=true;
	public Boolean isVisibilidadCeldaVerFormParametroInventarioDefecto=true;
	public Boolean isVisibilidadCeldaOrdenParametroInventarioDefecto=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
	public Boolean isVisibilidadCeldaModificarParametroInventarioDefecto=false;
	public Boolean isVisibilidadCeldaActualizarParametroInventarioDefecto=false;
	public Boolean isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
	public Boolean isVisibilidadCeldaCancelarParametroInventarioDefecto=false;
	public Boolean isVisibilidadCeldaGuardarParametroInventarioDefecto=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=false;	
	
	
	public Boolean isVisibilidadFK_IdCalidadProducto=false;
	public Boolean isVisibilidadFK_IdCiudad=false;
	public Boolean isVisibilidadFK_IdClaseProducto=false;
	public Boolean isVisibilidadFK_IdColorProducto=false;
	public Boolean isVisibilidadFK_IdEfectoProducto=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdGrupoBodega=false;
	public Boolean isVisibilidadFK_IdMarcaProducto=false;
	public Boolean isVisibilidadFK_IdMaterialProducto=false;
	public Boolean isVisibilidadFK_IdModeloProducto=false;
	public Boolean isVisibilidadFK_IdPais=false;
	public Boolean isVisibilidadFK_IdRangoUnidadVenta=false;
	public Boolean isVisibilidadFK_IdSegmentoProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTallaProducto=false;
	public Boolean isVisibilidadFK_IdTipoCosteo=false;
	public Boolean isVisibilidadFK_IdTipoProducto=false;
	public Boolean isVisibilidadFK_IdTipoProductoServicio=false;
	public Boolean isVisibilidadFK_IdTipoProductoServicioInven=false;
	public Boolean isVisibilidadFK_IdTipoServicio=false;
	public Boolean isVisibilidadFK_IdTipoViaTransporte=false;
	
	public Long getiIdNuevoParametroInventarioDefecto() {
		return this.iIdNuevoParametroInventarioDefecto;
	}

	public void setiIdNuevoParametroInventarioDefecto(Long iIdNuevoParametroInventarioDefecto) {
		this.iIdNuevoParametroInventarioDefecto = iIdNuevoParametroInventarioDefecto;
	}
	
	public Long getidParametroInventarioDefectoActual() {
		return this.idParametroInventarioDefectoActual;
	}

	public void setidParametroInventarioDefectoActual(Long idParametroInventarioDefectoActual) {
		this.idParametroInventarioDefectoActual = idParametroInventarioDefectoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public ParametroInventarioDefecto getparametroinventariodefecto() {
		return this.parametroinventariodefecto;
	}

	public void setparametroinventariodefecto(ParametroInventarioDefecto parametroinventariodefecto) {
		this.parametroinventariodefecto = parametroinventariodefecto;
	}
	
	public ParametroInventarioDefecto getparametroinventariodefectoAux() {
		return this.parametroinventariodefectoAux;
	}

	public void setparametroinventariodefectoAux(ParametroInventarioDefecto parametroinventariodefectoAux) {
		this.parametroinventariodefectoAux = parametroinventariodefectoAux;
	}				
	
	public ParametroInventarioDefecto getparametroinventariodefectoAnterior() {
		return this.parametroinventariodefectoAnterior;
	}

	public void setparametroinventariodefectoAnterior(ParametroInventarioDefecto parametroinventariodefectoAnterior) {
		this.parametroinventariodefectoAnterior = parametroinventariodefectoAnterior;
	}	
	
	public ParametroInventarioDefecto getparametroinventariodefectoTotales() {
		return this.parametroinventariodefectoTotales;
	}

	public void setparametroinventariodefectoTotales(ParametroInventarioDefecto parametroinventariodefectoTotales) {
		this.parametroinventariodefectoTotales = parametroinventariodefectoTotales;
	}	
	
	public ParametroInventarioDefecto getparametroinventariodefectoBean() {
		return this.parametroinventariodefectoBean;
	}

	public void setparametroinventariodefectoBean(ParametroInventarioDefecto parametroinventariodefectoBean) {
		this.parametroinventariodefectoBean = parametroinventariodefectoBean;
	}	
	
	public ParametroInventarioDefectoParameterReturnGeneral getparametroinventariodefectoReturnGeneral() {
		return this.parametroinventariodefectoReturnGeneral;
	}

	public void setparametroinventariodefectoReturnGeneral(ParametroInventarioDefectoParameterReturnGeneral parametroinventariodefectoReturnGeneral) {
		this.parametroinventariodefectoReturnGeneral = parametroinventariodefectoReturnGeneral;
	}	
	
	
	public Long id_calidad_productoFK_IdCalidadProducto=-1L;

	public Long getid_calidad_productoFK_IdCalidadProducto() {
		return this.id_calidad_productoFK_IdCalidadProducto;
	}

	public void setid_calidad_productoFK_IdCalidadProducto(Long id_calidad_productoFK_IdCalidadProducto) {
		this.id_calidad_productoFK_IdCalidadProducto = id_calidad_productoFK_IdCalidadProducto;
	}

	public Long id_ciudadFK_IdCiudad=-1L;

	public Long getid_ciudadFK_IdCiudad() {
		return this.id_ciudadFK_IdCiudad;
	}

	public void setid_ciudadFK_IdCiudad(Long id_ciudadFK_IdCiudad) {
		this.id_ciudadFK_IdCiudad = id_ciudadFK_IdCiudad;
	}

	public Long id_clase_productoFK_IdClaseProducto=-1L;

	public Long getid_clase_productoFK_IdClaseProducto() {
		return this.id_clase_productoFK_IdClaseProducto;
	}

	public void setid_clase_productoFK_IdClaseProducto(Long id_clase_productoFK_IdClaseProducto) {
		this.id_clase_productoFK_IdClaseProducto = id_clase_productoFK_IdClaseProducto;
	}

	public Long id_color_productoFK_IdColorProducto=-1L;

	public Long getid_color_productoFK_IdColorProducto() {
		return this.id_color_productoFK_IdColorProducto;
	}

	public void setid_color_productoFK_IdColorProducto(Long id_color_productoFK_IdColorProducto) {
		this.id_color_productoFK_IdColorProducto = id_color_productoFK_IdColorProducto;
	}

	public Long id_efecto_productoFK_IdEfectoProducto=-1L;

	public Long getid_efecto_productoFK_IdEfectoProducto() {
		return this.id_efecto_productoFK_IdEfectoProducto;
	}

	public void setid_efecto_productoFK_IdEfectoProducto(Long id_efecto_productoFK_IdEfectoProducto) {
		this.id_efecto_productoFK_IdEfectoProducto = id_efecto_productoFK_IdEfectoProducto;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_grupo_bodegaFK_IdGrupoBodega=-1L;

	public Long getid_grupo_bodegaFK_IdGrupoBodega() {
		return this.id_grupo_bodegaFK_IdGrupoBodega;
	}

	public void setid_grupo_bodegaFK_IdGrupoBodega(Long id_grupo_bodegaFK_IdGrupoBodega) {
		this.id_grupo_bodegaFK_IdGrupoBodega = id_grupo_bodegaFK_IdGrupoBodega;
	}

	public Long id_marca_productoFK_IdMarcaProducto=-1L;

	public Long getid_marca_productoFK_IdMarcaProducto() {
		return this.id_marca_productoFK_IdMarcaProducto;
	}

	public void setid_marca_productoFK_IdMarcaProducto(Long id_marca_productoFK_IdMarcaProducto) {
		this.id_marca_productoFK_IdMarcaProducto = id_marca_productoFK_IdMarcaProducto;
	}

	public Long id_material_productoFK_IdMaterialProducto=-1L;

	public Long getid_material_productoFK_IdMaterialProducto() {
		return this.id_material_productoFK_IdMaterialProducto;
	}

	public void setid_material_productoFK_IdMaterialProducto(Long id_material_productoFK_IdMaterialProducto) {
		this.id_material_productoFK_IdMaterialProducto = id_material_productoFK_IdMaterialProducto;
	}

	public Long id_modelo_productoFK_IdModeloProducto=-1L;

	public Long getid_modelo_productoFK_IdModeloProducto() {
		return this.id_modelo_productoFK_IdModeloProducto;
	}

	public void setid_modelo_productoFK_IdModeloProducto(Long id_modelo_productoFK_IdModeloProducto) {
		this.id_modelo_productoFK_IdModeloProducto = id_modelo_productoFK_IdModeloProducto;
	}

	public Long id_paisFK_IdPais=-1L;

	public Long getid_paisFK_IdPais() {
		return this.id_paisFK_IdPais;
	}

	public void setid_paisFK_IdPais(Long id_paisFK_IdPais) {
		this.id_paisFK_IdPais = id_paisFK_IdPais;
	}

	public Long id_rango_unidad_ventaFK_IdRangoUnidadVenta=-1L;

	public Long getid_rango_unidad_ventaFK_IdRangoUnidadVenta() {
		return this.id_rango_unidad_ventaFK_IdRangoUnidadVenta;
	}

	public void setid_rango_unidad_ventaFK_IdRangoUnidadVenta(Long id_rango_unidad_ventaFK_IdRangoUnidadVenta) {
		this.id_rango_unidad_ventaFK_IdRangoUnidadVenta = id_rango_unidad_ventaFK_IdRangoUnidadVenta;
	}

	public Long id_segmento_productoFK_IdSegmentoProducto=-1L;

	public Long getid_segmento_productoFK_IdSegmentoProducto() {
		return this.id_segmento_productoFK_IdSegmentoProducto;
	}

	public void setid_segmento_productoFK_IdSegmentoProducto(Long id_segmento_productoFK_IdSegmentoProducto) {
		this.id_segmento_productoFK_IdSegmentoProducto = id_segmento_productoFK_IdSegmentoProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_talla_productoFK_IdTallaProducto=-1L;

	public Long getid_talla_productoFK_IdTallaProducto() {
		return this.id_talla_productoFK_IdTallaProducto;
	}

	public void setid_talla_productoFK_IdTallaProducto(Long id_talla_productoFK_IdTallaProducto) {
		this.id_talla_productoFK_IdTallaProducto = id_talla_productoFK_IdTallaProducto;
	}

	public Long id_tipo_costeoFK_IdTipoCosteo=-1L;

	public Long getid_tipo_costeoFK_IdTipoCosteo() {
		return this.id_tipo_costeoFK_IdTipoCosteo;
	}

	public void setid_tipo_costeoFK_IdTipoCosteo(Long id_tipo_costeoFK_IdTipoCosteo) {
		this.id_tipo_costeoFK_IdTipoCosteo = id_tipo_costeoFK_IdTipoCosteo;
	}

	public Long id_tipo_productoFK_IdTipoProducto=-1L;

	public Long getid_tipo_productoFK_IdTipoProducto() {
		return this.id_tipo_productoFK_IdTipoProducto;
	}

	public void setid_tipo_productoFK_IdTipoProducto(Long id_tipo_productoFK_IdTipoProducto) {
		this.id_tipo_productoFK_IdTipoProducto = id_tipo_productoFK_IdTipoProducto;
	}

	public Long id_tipo_producto_servicioFK_IdTipoProductoServicio=-1L;

	public Long getid_tipo_producto_servicioFK_IdTipoProductoServicio() {
		return this.id_tipo_producto_servicioFK_IdTipoProductoServicio;
	}

	public void setid_tipo_producto_servicioFK_IdTipoProductoServicio(Long id_tipo_producto_servicioFK_IdTipoProductoServicio) {
		this.id_tipo_producto_servicioFK_IdTipoProductoServicio = id_tipo_producto_servicioFK_IdTipoProductoServicio;
	}

	public Long id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven=-1L;

	public Long getid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven() {
		return this.id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven;
	}

	public void setid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven(Long id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven) {
		this.id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven = id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven;
	}

	public Long id_tipo_servicioFK_IdTipoServicio=-1L;

	public Long getid_tipo_servicioFK_IdTipoServicio() {
		return this.id_tipo_servicioFK_IdTipoServicio;
	}

	public void setid_tipo_servicioFK_IdTipoServicio(Long id_tipo_servicioFK_IdTipoServicio) {
		this.id_tipo_servicioFK_IdTipoServicio = id_tipo_servicioFK_IdTipoServicio;
	}

	public Long id_tipo_via_transporteFK_IdTipoViaTransporte=-1L;

	public Long getid_tipo_via_transporteFK_IdTipoViaTransporte() {
		return this.id_tipo_via_transporteFK_IdTipoViaTransporte;
	}

	public void setid_tipo_via_transporteFK_IdTipoViaTransporte(Long id_tipo_via_transporteFK_IdTipoViaTransporte) {
		this.id_tipo_via_transporteFK_IdTipoViaTransporte = id_tipo_via_transporteFK_IdTipoViaTransporte;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ParametroInventarioDefectoLogic getParametroInventarioDefectoLogic()	{		
		return parametroinventariodefectoLogic;
	}

	public void setParametroInventarioDefectoLogic(ParametroInventarioDefectoLogic parametroinventariodefectoLogic) {
		this.parametroinventariodefectoLogic = parametroinventariodefectoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoParametroInventarioDefecto() {
		return isEsNuevoParametroInventarioDefecto;
	}

	public void setIsEsNuevoParametroInventarioDefecto(Boolean isEsNuevoParametroInventarioDefecto) {
		this.isEsNuevoParametroInventarioDefecto = isEsNuevoParametroInventarioDefecto;
	}

	public Boolean getEsParaAccionDesdeFormularioParametroInventarioDefecto() {
		return esParaAccionDesdeFormularioParametroInventarioDefecto;
	}
	
	public void setEsParaAccionDesdeFormularioParametroInventarioDefecto(Boolean esParaAccionDesdeFormularioParametroInventarioDefecto) {
		this.esParaAccionDesdeFormularioParametroInventarioDefecto = esParaAccionDesdeFormularioParametroInventarioDefecto;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosGrupoBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.grupobodegasForeignKey=new ArrayList<GrupoBodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			GrupoBodegaLogic grupobodegaLogic=new GrupoBodegaLogic();

			//grupobodegaLogic.getGrupoBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionGrupoBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//grupobodegaLogic.getGrupoBodegaDataAccess().setIsForForeingKeyData(true);

					grupobodegaLogic.getTodosGrupoBodegasWithConnection(sFinalQuery,new Pagination());

					this.grupobodegasForeignKey=grupobodegaLogic.getGrupoBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaGrupoBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					grupobodegaLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidGrupoBodegaActual());
					this.grupobodegasForeignKey.add(grupobodegaLogic.getGrupoBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCalidadProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.calidadproductosForeignKey=new ArrayList<CalidadProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CalidadProductoLogic calidadproductoLogic=new CalidadProductoLogic();

			//calidadproductoLogic.getCalidadProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionCalidadProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//calidadproductoLogic.getCalidadProductoDataAccess().setIsForForeingKeyData(true);

					calidadproductoLogic.getTodosCalidadProductosWithConnection(sFinalQuery,new Pagination());

					this.calidadproductosForeignKey=calidadproductoLogic.getCalidadProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCalidadProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					calidadproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidCalidadProductoActual());
					this.calidadproductosForeignKey.add(calidadproductoLogic.getCalidadProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoServiciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiposerviciosForeignKey=new ArrayList<TipoServicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoServicioLogic tiposervicioLogic=new TipoServicioLogic();

			//tiposervicioLogic.getTipoServicioDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoServicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiposervicioLogic.getTipoServicioDataAccess().setIsForForeingKeyData(true);

					tiposervicioLogic.getTodosTipoServiciosWithConnection(sFinalQuery,new Pagination());

					this.tiposerviciosForeignKey=tiposervicioLogic.getTipoServicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoServicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiposervicioLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidTipoServicioActual());
					this.tiposerviciosForeignKey.add(tiposervicioLogic.getTipoServicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoProductoServicioInvensForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoproductoservicioinvensForeignKey=new ArrayList<TipoProductoServicioInven>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoProductoServicioInvenLogic tipoproductoservicioinvenLogic=new TipoProductoServicioInvenLogic();

			//tipoproductoservicioinvenLogic.getTipoProductoServicioInvenDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProductoServicioInven()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoproductoservicioinvenLogic.getTipoProductoServicioInvenDataAccess().setIsForForeingKeyData(true);

					tipoproductoservicioinvenLogic.getTodosTipoProductoServicioInvensWithConnection(sFinalQuery,new Pagination());

					this.tipoproductoservicioinvensForeignKey=tipoproductoservicioinvenLogic.getTipoProductoServicioInvens();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoProductoServicioInven(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoproductoservicioinvenLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidTipoProductoServicioInvenActual());
					this.tipoproductoservicioinvensForeignKey.add(tipoproductoservicioinvenLogic.getTipoProductoServicioInven());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoProductoServiciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoproductoserviciosForeignKey=new ArrayList<TipoProductoServicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoProductoServicioLogic tipoproductoservicioLogic=new TipoProductoServicioLogic();

			//tipoproductoservicioLogic.getTipoProductoServicioDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProductoServicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoproductoservicioLogic.getTipoProductoServicioDataAccess().setIsForForeingKeyData(true);

					tipoproductoservicioLogic.getTodosTipoProductoServiciosWithConnection(sFinalQuery,new Pagination());

					this.tipoproductoserviciosForeignKey=tipoproductoservicioLogic.getTipoProductoServicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoProductoServicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoproductoservicioLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidTipoProductoServicioActual());
					this.tipoproductoserviciosForeignKey.add(tipoproductoservicioLogic.getTipoProductoServicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCosteosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocosteosForeignKey=new ArrayList<TipoCosteo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCosteoLogic tipocosteoLogic=new TipoCosteoLogic();

			//tipocosteoLogic.getTipoCosteoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCosteo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocosteoLogic.getTipoCosteoDataAccess().setIsForForeingKeyData(true);

					tipocosteoLogic.getTodosTipoCosteosWithConnection(sFinalQuery,new Pagination());

					this.tipocosteosForeignKey=tipocosteoLogic.getTipoCosteos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCosteo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocosteoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidTipoCosteoActual());
					this.tipocosteosForeignKey.add(tipocosteoLogic.getTipoCosteo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoproductosForeignKey=new ArrayList<TipoProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoProductoLogic tipoproductoLogic=new TipoProductoLogic();

			//tipoproductoLogic.getTipoProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoproductoLogic.getTipoProductoDataAccess().setIsForForeingKeyData(true);

					tipoproductoLogic.getTodosTipoProductosWithConnection(sFinalQuery,new Pagination());

					this.tipoproductosForeignKey=tipoproductoLogic.getTipoProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidTipoProductoActual());
					this.tipoproductosForeignKey.add(tipoproductoLogic.getTipoProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoViaTransportesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoviatransportesForeignKey=new ArrayList<TipoViaTransporte>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoViaTransporteLogic tipoviatransporteLogic=new TipoViaTransporteLogic();

			//tipoviatransporteLogic.getTipoViaTransporteDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoViaTransporte()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoviatransporteLogic.getTipoViaTransporteDataAccess().setIsForForeingKeyData(true);

					tipoviatransporteLogic.getTodosTipoViaTransportesWithConnection(sFinalQuery,new Pagination());

					this.tipoviatransportesForeignKey=tipoviatransporteLogic.getTipoViaTransportes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoViaTransporte(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoviatransporteLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidTipoViaTransporteActual());
					this.tipoviatransportesForeignKey.add(tipoviatransporteLogic.getTipoViaTransporte());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosRangoUnidadVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.rangounidadventasForeignKey=new ArrayList<RangoUnidadVenta>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			RangoUnidadVentaLogic rangounidadventaLogic=new RangoUnidadVentaLogic();

			//rangounidadventaLogic.getRangoUnidadVentaDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionRangoUnidadVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//rangounidadventaLogic.getRangoUnidadVentaDataAccess().setIsForForeingKeyData(true);

					rangounidadventaLogic.getTodosRangoUnidadVentasWithConnection(sFinalQuery,new Pagination());

					this.rangounidadventasForeignKey=rangounidadventaLogic.getRangoUnidadVentas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaRangoUnidadVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					rangounidadventaLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidRangoUnidadVentaActual());
					this.rangounidadventasForeignKey.add(rangounidadventaLogic.getRangoUnidadVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPaissForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.paissForeignKey=new ArrayList<Pais>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PaisLogic paisLogic=new PaisLogic();

			//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

					paisLogic.getTodosPaissWithConnection(sFinalQuery,new Pagination());

					this.paissForeignKey=paisLogic.getPaiss();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPais(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					paisLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidPaisActual());
					this.paissForeignKey.add(paisLogic.getPais());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCiudadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ciudadsForeignKey=new ArrayList<Ciudad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CiudadLogic ciudadLogic=new CiudadLogic();

			//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

					ciudadLogic.getTodosCiudadsWithConnection(sFinalQuery,new Pagination());

					this.ciudadsForeignKey=ciudadLogic.getCiudads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCiudad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ciudadLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidCiudadActual());
					this.ciudadsForeignKey.add(ciudadLogic.getCiudad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosColorProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.colorproductosForeignKey=new ArrayList<ColorProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ColorProductoLogic colorproductoLogic=new ColorProductoLogic();

			//colorproductoLogic.getColorProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionColorProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//colorproductoLogic.getColorProductoDataAccess().setIsForForeingKeyData(true);

					colorproductoLogic.getTodosColorProductosWithConnection(sFinalQuery,new Pagination());

					this.colorproductosForeignKey=colorproductoLogic.getColorProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaColorProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					colorproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidColorProductoActual());
					this.colorproductosForeignKey.add(colorproductoLogic.getColorProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClaseProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.claseproductosForeignKey=new ArrayList<ClaseProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClaseProductoLogic claseproductoLogic=new ClaseProductoLogic();

			//claseproductoLogic.getClaseProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionClaseProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//claseproductoLogic.getClaseProductoDataAccess().setIsForForeingKeyData(true);

					claseproductoLogic.getTodosClaseProductosWithConnection(sFinalQuery,new Pagination());

					this.claseproductosForeignKey=claseproductoLogic.getClaseProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaClaseProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					claseproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidClaseProductoActual());
					this.claseproductosForeignKey.add(claseproductoLogic.getClaseProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEfectoProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.efectoproductosForeignKey=new ArrayList<EfectoProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EfectoProductoLogic efectoproductoLogic=new EfectoProductoLogic();

			//efectoproductoLogic.getEfectoProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionEfectoProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//efectoproductoLogic.getEfectoProductoDataAccess().setIsForForeingKeyData(true);

					efectoproductoLogic.getTodosEfectoProductosWithConnection(sFinalQuery,new Pagination());

					this.efectoproductosForeignKey=efectoproductoLogic.getEfectoProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEfectoProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					efectoproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidEfectoProductoActual());
					this.efectoproductosForeignKey.add(efectoproductoLogic.getEfectoProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMarcaProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.marcaproductosForeignKey=new ArrayList<MarcaProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MarcaProductoLogic marcaproductoLogic=new MarcaProductoLogic();

			//marcaproductoLogic.getMarcaProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionMarcaProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//marcaproductoLogic.getMarcaProductoDataAccess().setIsForForeingKeyData(true);

					marcaproductoLogic.getTodosMarcaProductosWithConnection(sFinalQuery,new Pagination());

					this.marcaproductosForeignKey=marcaproductoLogic.getMarcaProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMarcaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					marcaproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidMarcaProductoActual());
					this.marcaproductosForeignKey.add(marcaproductoLogic.getMarcaProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModeloProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modeloproductosForeignKey=new ArrayList<ModeloProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModeloProductoLogic modeloproductoLogic=new ModeloProductoLogic();

			//modeloproductoLogic.getModeloProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionModeloProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//modeloproductoLogic.getModeloProductoDataAccess().setIsForForeingKeyData(true);

					modeloproductoLogic.getTodosModeloProductosWithConnection(sFinalQuery,new Pagination());

					this.modeloproductosForeignKey=modeloproductoLogic.getModeloProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModeloProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					modeloproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidModeloProductoActual());
					this.modeloproductosForeignKey.add(modeloproductoLogic.getModeloProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMaterialProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.materialproductosForeignKey=new ArrayList<MaterialProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MaterialProductoLogic materialproductoLogic=new MaterialProductoLogic();

			//materialproductoLogic.getMaterialProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionMaterialProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//materialproductoLogic.getMaterialProductoDataAccess().setIsForForeingKeyData(true);

					materialproductoLogic.getTodosMaterialProductosWithConnection(sFinalQuery,new Pagination());

					this.materialproductosForeignKey=materialproductoLogic.getMaterialProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMaterialProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					materialproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidMaterialProductoActual());
					this.materialproductosForeignKey.add(materialproductoLogic.getMaterialProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSegmentoProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.segmentoproductosForeignKey=new ArrayList<SegmentoProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SegmentoProductoLogic segmentoproductoLogic=new SegmentoProductoLogic();

			//segmentoproductoLogic.getSegmentoProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionSegmentoProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//segmentoproductoLogic.getSegmentoProductoDataAccess().setIsForForeingKeyData(true);

					segmentoproductoLogic.getTodosSegmentoProductosWithConnection(sFinalQuery,new Pagination());

					this.segmentoproductosForeignKey=segmentoproductoLogic.getSegmentoProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSegmentoProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					segmentoproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidSegmentoProductoActual());
					this.segmentoproductosForeignKey.add(segmentoproductoLogic.getSegmentoProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTallaProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tallaproductosForeignKey=new ArrayList<TallaProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TallaProductoLogic tallaproductoLogic=new TallaProductoLogic();

			//tallaproductoLogic.getTallaProductoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTallaProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tallaproductoLogic.getTallaProductoDataAccess().setIsForForeingKeyData(true);

					tallaproductoLogic.getTodosTallaProductosWithConnection(sFinalQuery,new Pagination());

					this.tallaproductosForeignKey=tallaproductoLogic.getTallaProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTallaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tallaproductoLogic.getEntityWithConnection(parametroinventariodefectoSessionBean.getlidTallaProductoActual());
					this.tallaproductosForeignKey.add(tallaproductoLogic.getTallaProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaParametroInventarioDefecto.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaParametroInventarioDefectoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaParametroInventarioDefectoGenerico!=null && jComboBoxid_empresaParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_empresaParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalParametroInventarioDefecto.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalParametroInventarioDefectoGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalParametroInventarioDefectoGenerico!=null && jComboBoxid_sucursalParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_sucursalParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualGrupoBodegaForeignKey(Long idGrupoBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			GrupoBodega  grupobodegaTemp=null;

			for(GrupoBodega grupobodegaAux:grupobodegasForeignKey) {
				if(grupobodegaAux.getId()!=null && grupobodegaAux.getId().equals(idGrupoBodegaSeleccionado)) {
					grupobodegaTemp=grupobodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(grupobodegaTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setGrupoBodega(grupobodegaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setSelectedItem(grupobodegaTemp);
					}
				} else {
					//jComboBoxid_grupo_bodegaParametroInventarioDefecto.setSelectedItem(grupobodegaTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdGrupoBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(grupobodegaTemp!=null && jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto!=null) {
						jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.setSelectedItem(grupobodegaTemp);
					} else {
						if(jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto!=null) {
							//jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.setSelectedItem(grupobodegaTemp);
							if(jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualGrupoBodegaForeignKeyDescripcion(Long idGrupoBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			GrupoBodega  grupobodegaTemp=null;

			for(GrupoBodega grupobodegaAux:grupobodegasForeignKey) {
				if(grupobodegaAux.getId()!=null && grupobodegaAux.getId().equals(idGrupoBodegaSeleccionado)) {
					grupobodegaTemp=grupobodegaAux;
					break;
				}
			}


			sDescripcion=GrupoBodegaConstantesFunciones.getGrupoBodegaDescripcion(grupobodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualGrupoBodegaForeignKeyGenerico(Long idGrupoBodegaSeleccionado,JComboBox jComboBoxid_grupo_bodegaParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			GrupoBodega  grupobodegaTemp=null;

			for(GrupoBodega grupobodegaAux:grupobodegasForeignKey) {
				if(grupobodegaAux.getId()!=null && grupobodegaAux.getId().equals(idGrupoBodegaSeleccionado)) {
					grupobodegaTemp=grupobodegaAux;
					break;
				}
			}

			if(grupobodegaTemp!=null) {
				jComboBoxid_grupo_bodegaParametroInventarioDefectoGenerico.setSelectedItem(grupobodegaTemp);
			} else {
				if(jComboBoxid_grupo_bodegaParametroInventarioDefectoGenerico!=null && jComboBoxid_grupo_bodegaParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_grupo_bodegaParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCalidadProductoForeignKey(Long idCalidadProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CalidadProducto  calidadproductoTemp=null;

			for(CalidadProducto calidadproductoAux:calidadproductosForeignKey) {
				if(calidadproductoAux.getId()!=null && calidadproductoAux.getId().equals(idCalidadProductoSeleccionado)) {
					calidadproductoTemp=calidadproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(calidadproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setCalidadProducto(calidadproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setSelectedItem(calidadproductoTemp);
					}
				} else {
					//jComboBoxid_calidad_productoParametroInventarioDefecto.setSelectedItem(calidadproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCalidadProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(calidadproductoTemp!=null && jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto!=null) {
						jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.setSelectedItem(calidadproductoTemp);
					} else {
						if(jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.setSelectedItem(calidadproductoTemp);
							if(jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCalidadProductoForeignKeyDescripcion(Long idCalidadProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CalidadProducto  calidadproductoTemp=null;

			for(CalidadProducto calidadproductoAux:calidadproductosForeignKey) {
				if(calidadproductoAux.getId()!=null && calidadproductoAux.getId().equals(idCalidadProductoSeleccionado)) {
					calidadproductoTemp=calidadproductoAux;
					break;
				}
			}


			sDescripcion=CalidadProductoConstantesFunciones.getCalidadProductoDescripcion(calidadproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCalidadProductoForeignKeyGenerico(Long idCalidadProductoSeleccionado,JComboBox jComboBoxid_calidad_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			CalidadProducto  calidadproductoTemp=null;

			for(CalidadProducto calidadproductoAux:calidadproductosForeignKey) {
				if(calidadproductoAux.getId()!=null && calidadproductoAux.getId().equals(idCalidadProductoSeleccionado)) {
					calidadproductoTemp=calidadproductoAux;
					break;
				}
			}

			if(calidadproductoTemp!=null) {
				jComboBoxid_calidad_productoParametroInventarioDefectoGenerico.setSelectedItem(calidadproductoTemp);
			} else {
				if(jComboBoxid_calidad_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_calidad_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_calidad_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoServicioForeignKey(Long idTipoServicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoServicio  tiposervicioTemp=null;

			for(TipoServicio tiposervicioAux:tiposerviciosForeignKey) {
				if(tiposervicioAux.getId()!=null && tiposervicioAux.getId().equals(idTipoServicioSeleccionado)) {
					tiposervicioTemp=tiposervicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiposervicioTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setTipoServicio(tiposervicioTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setSelectedItem(tiposervicioTemp);
					}
				} else {
					//jComboBoxid_tipo_servicioParametroInventarioDefecto.setSelectedItem(tiposervicioTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoServicio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiposervicioTemp!=null && jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto!=null) {
						jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.setSelectedItem(tiposervicioTemp);
					} else {
						if(jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto!=null) {
							//jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.setSelectedItem(tiposervicioTemp);
							if(jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoServicioForeignKeyDescripcion(Long idTipoServicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoServicio  tiposervicioTemp=null;

			for(TipoServicio tiposervicioAux:tiposerviciosForeignKey) {
				if(tiposervicioAux.getId()!=null && tiposervicioAux.getId().equals(idTipoServicioSeleccionado)) {
					tiposervicioTemp=tiposervicioAux;
					break;
				}
			}


			sDescripcion=TipoServicioConstantesFunciones.getTipoServicioDescripcion(tiposervicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoServicioForeignKeyGenerico(Long idTipoServicioSeleccionado,JComboBox jComboBoxid_tipo_servicioParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoServicio  tiposervicioTemp=null;

			for(TipoServicio tiposervicioAux:tiposerviciosForeignKey) {
				if(tiposervicioAux.getId()!=null && tiposervicioAux.getId().equals(idTipoServicioSeleccionado)) {
					tiposervicioTemp=tiposervicioAux;
					break;
				}
			}

			if(tiposervicioTemp!=null) {
				jComboBoxid_tipo_servicioParametroInventarioDefectoGenerico.setSelectedItem(tiposervicioTemp);
			} else {
				if(jComboBoxid_tipo_servicioParametroInventarioDefectoGenerico!=null && jComboBoxid_tipo_servicioParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_servicioParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoProductoServicioInvenForeignKey(Long idTipoProductoServicioInvenSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoProductoServicioInven  tipoproductoservicioinvenTemp=null;

			for(TipoProductoServicioInven tipoproductoservicioinvenAux:tipoproductoservicioinvensForeignKey) {
				if(tipoproductoservicioinvenAux.getId()!=null && tipoproductoservicioinvenAux.getId().equals(idTipoProductoServicioInvenSeleccionado)) {
					tipoproductoservicioinvenTemp=tipoproductoservicioinvenAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoproductoservicioinvenTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setTipoProductoServicioInven(tipoproductoservicioinvenTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setSelectedItem(tipoproductoservicioinvenTemp);
					}
				} else {
					//jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setSelectedItem(tipoproductoservicioinvenTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoProductoServicioInven") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoproductoservicioinvenTemp!=null && jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto!=null) {
						jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.setSelectedItem(tipoproductoservicioinvenTemp);
					} else {
						if(jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto!=null) {
							//jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.setSelectedItem(tipoproductoservicioinvenTemp);
							if(jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoProductoServicioInvenForeignKeyDescripcion(Long idTipoProductoServicioInvenSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoProductoServicioInven  tipoproductoservicioinvenTemp=null;

			for(TipoProductoServicioInven tipoproductoservicioinvenAux:tipoproductoservicioinvensForeignKey) {
				if(tipoproductoservicioinvenAux.getId()!=null && tipoproductoservicioinvenAux.getId().equals(idTipoProductoServicioInvenSeleccionado)) {
					tipoproductoservicioinvenTemp=tipoproductoservicioinvenAux;
					break;
				}
			}


			sDescripcion=TipoProductoServicioInvenConstantesFunciones.getTipoProductoServicioInvenDescripcion(tipoproductoservicioinvenTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoProductoServicioInvenForeignKeyGenerico(Long idTipoProductoServicioInvenSeleccionado,JComboBox jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoProductoServicioInven  tipoproductoservicioinvenTemp=null;

			for(TipoProductoServicioInven tipoproductoservicioinvenAux:tipoproductoservicioinvensForeignKey) {
				if(tipoproductoservicioinvenAux.getId()!=null && tipoproductoservicioinvenAux.getId().equals(idTipoProductoServicioInvenSeleccionado)) {
					tipoproductoservicioinvenTemp=tipoproductoservicioinvenAux;
					break;
				}
			}

			if(tipoproductoservicioinvenTemp!=null) {
				jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefectoGenerico.setSelectedItem(tipoproductoservicioinvenTemp);
			} else {
				if(jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefectoGenerico!=null && jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoProductoServicioForeignKey(Long idTipoProductoServicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoProductoServicio  tipoproductoservicioTemp=null;

			for(TipoProductoServicio tipoproductoservicioAux:tipoproductoserviciosForeignKey) {
				if(tipoproductoservicioAux.getId()!=null && tipoproductoservicioAux.getId().equals(idTipoProductoServicioSeleccionado)) {
					tipoproductoservicioTemp=tipoproductoservicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoproductoservicioTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setTipoProductoServicio(tipoproductoservicioTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setSelectedItem(tipoproductoservicioTemp);
					}
				} else {
					//jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setSelectedItem(tipoproductoservicioTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoProductoServicio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoproductoservicioTemp!=null && jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto!=null) {
						jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.setSelectedItem(tipoproductoservicioTemp);
					} else {
						if(jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto!=null) {
							//jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.setSelectedItem(tipoproductoservicioTemp);
							if(jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoProductoServicioForeignKeyDescripcion(Long idTipoProductoServicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoProductoServicio  tipoproductoservicioTemp=null;

			for(TipoProductoServicio tipoproductoservicioAux:tipoproductoserviciosForeignKey) {
				if(tipoproductoservicioAux.getId()!=null && tipoproductoservicioAux.getId().equals(idTipoProductoServicioSeleccionado)) {
					tipoproductoservicioTemp=tipoproductoservicioAux;
					break;
				}
			}


			sDescripcion=TipoProductoServicioConstantesFunciones.getTipoProductoServicioDescripcion(tipoproductoservicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoProductoServicioForeignKeyGenerico(Long idTipoProductoServicioSeleccionado,JComboBox jComboBoxid_tipo_producto_servicioParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoProductoServicio  tipoproductoservicioTemp=null;

			for(TipoProductoServicio tipoproductoservicioAux:tipoproductoserviciosForeignKey) {
				if(tipoproductoservicioAux.getId()!=null && tipoproductoservicioAux.getId().equals(idTipoProductoServicioSeleccionado)) {
					tipoproductoservicioTemp=tipoproductoservicioAux;
					break;
				}
			}

			if(tipoproductoservicioTemp!=null) {
				jComboBoxid_tipo_producto_servicioParametroInventarioDefectoGenerico.setSelectedItem(tipoproductoservicioTemp);
			} else {
				if(jComboBoxid_tipo_producto_servicioParametroInventarioDefectoGenerico!=null && jComboBoxid_tipo_producto_servicioParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_producto_servicioParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCosteoForeignKey(Long idTipoCosteoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCosteo  tipocosteoTemp=null;

			for(TipoCosteo tipocosteoAux:tipocosteosForeignKey) {
				if(tipocosteoAux.getId()!=null && tipocosteoAux.getId().equals(idTipoCosteoSeleccionado)) {
					tipocosteoTemp=tipocosteoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocosteoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setTipoCosteo(tipocosteoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setSelectedItem(tipocosteoTemp);
					}
				} else {
					//jComboBoxid_tipo_costeoParametroInventarioDefecto.setSelectedItem(tipocosteoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoCosteo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocosteoTemp!=null && jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto!=null) {
						jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.setSelectedItem(tipocosteoTemp);
					} else {
						if(jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto!=null) {
							//jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.setSelectedItem(tipocosteoTemp);
							if(jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCosteoForeignKeyDescripcion(Long idTipoCosteoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCosteo  tipocosteoTemp=null;

			for(TipoCosteo tipocosteoAux:tipocosteosForeignKey) {
				if(tipocosteoAux.getId()!=null && tipocosteoAux.getId().equals(idTipoCosteoSeleccionado)) {
					tipocosteoTemp=tipocosteoAux;
					break;
				}
			}


			sDescripcion=TipoCosteoConstantesFunciones.getTipoCosteoDescripcion(tipocosteoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCosteoForeignKeyGenerico(Long idTipoCosteoSeleccionado,JComboBox jComboBoxid_tipo_costeoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoCosteo  tipocosteoTemp=null;

			for(TipoCosteo tipocosteoAux:tipocosteosForeignKey) {
				if(tipocosteoAux.getId()!=null && tipocosteoAux.getId().equals(idTipoCosteoSeleccionado)) {
					tipocosteoTemp=tipocosteoAux;
					break;
				}
			}

			if(tipocosteoTemp!=null) {
				jComboBoxid_tipo_costeoParametroInventarioDefectoGenerico.setSelectedItem(tipocosteoTemp);
			} else {
				if(jComboBoxid_tipo_costeoParametroInventarioDefectoGenerico!=null && jComboBoxid_tipo_costeoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_costeoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoProductoForeignKey(Long idTipoProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoProducto  tipoproductoTemp=null;

			for(TipoProducto tipoproductoAux:tipoproductosForeignKey) {
				if(tipoproductoAux.getId()!=null && tipoproductoAux.getId().equals(idTipoProductoSeleccionado)) {
					tipoproductoTemp=tipoproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setTipoProducto(tipoproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setSelectedItem(tipoproductoTemp);
					}
				} else {
					//jComboBoxid_tipo_productoParametroInventarioDefecto.setSelectedItem(tipoproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoproductoTemp!=null && jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto!=null) {
						jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.setSelectedItem(tipoproductoTemp);
					} else {
						if(jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.setSelectedItem(tipoproductoTemp);
							if(jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoProductoForeignKeyDescripcion(Long idTipoProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoProducto  tipoproductoTemp=null;

			for(TipoProducto tipoproductoAux:tipoproductosForeignKey) {
				if(tipoproductoAux.getId()!=null && tipoproductoAux.getId().equals(idTipoProductoSeleccionado)) {
					tipoproductoTemp=tipoproductoAux;
					break;
				}
			}


			sDescripcion=TipoProductoConstantesFunciones.getTipoProductoDescripcion(tipoproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoProductoForeignKeyGenerico(Long idTipoProductoSeleccionado,JComboBox jComboBoxid_tipo_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoProducto  tipoproductoTemp=null;

			for(TipoProducto tipoproductoAux:tipoproductosForeignKey) {
				if(tipoproductoAux.getId()!=null && tipoproductoAux.getId().equals(idTipoProductoSeleccionado)) {
					tipoproductoTemp=tipoproductoAux;
					break;
				}
			}

			if(tipoproductoTemp!=null) {
				jComboBoxid_tipo_productoParametroInventarioDefectoGenerico.setSelectedItem(tipoproductoTemp);
			} else {
				if(jComboBoxid_tipo_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_tipo_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoViaTransporteForeignKey(Long idTipoViaTransporteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoViaTransporte  tipoviatransporteTemp=null;

			for(TipoViaTransporte tipoviatransporteAux:tipoviatransportesForeignKey) {
				if(tipoviatransporteAux.getId()!=null && tipoviatransporteAux.getId().equals(idTipoViaTransporteSeleccionado)) {
					tipoviatransporteTemp=tipoviatransporteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoviatransporteTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setTipoViaTransporte(tipoviatransporteTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setSelectedItem(tipoviatransporteTemp);
					}
				} else {
					//jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setSelectedItem(tipoviatransporteTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoViaTransporte") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoviatransporteTemp!=null && jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto!=null) {
						jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.setSelectedItem(tipoviatransporteTemp);
					} else {
						if(jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto!=null) {
							//jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.setSelectedItem(tipoviatransporteTemp);
							if(jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoViaTransporteForeignKeyDescripcion(Long idTipoViaTransporteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoViaTransporte  tipoviatransporteTemp=null;

			for(TipoViaTransporte tipoviatransporteAux:tipoviatransportesForeignKey) {
				if(tipoviatransporteAux.getId()!=null && tipoviatransporteAux.getId().equals(idTipoViaTransporteSeleccionado)) {
					tipoviatransporteTemp=tipoviatransporteAux;
					break;
				}
			}


			sDescripcion=TipoViaTransporteConstantesFunciones.getTipoViaTransporteDescripcion(tipoviatransporteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoViaTransporteForeignKeyGenerico(Long idTipoViaTransporteSeleccionado,JComboBox jComboBoxid_tipo_via_transporteParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoViaTransporte  tipoviatransporteTemp=null;

			for(TipoViaTransporte tipoviatransporteAux:tipoviatransportesForeignKey) {
				if(tipoviatransporteAux.getId()!=null && tipoviatransporteAux.getId().equals(idTipoViaTransporteSeleccionado)) {
					tipoviatransporteTemp=tipoviatransporteAux;
					break;
				}
			}

			if(tipoviatransporteTemp!=null) {
				jComboBoxid_tipo_via_transporteParametroInventarioDefectoGenerico.setSelectedItem(tipoviatransporteTemp);
			} else {
				if(jComboBoxid_tipo_via_transporteParametroInventarioDefectoGenerico!=null && jComboBoxid_tipo_via_transporteParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_via_transporteParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualRangoUnidadVentaForeignKey(Long idRangoUnidadVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			RangoUnidadVenta  rangounidadventaTemp=null;

			for(RangoUnidadVenta rangounidadventaAux:rangounidadventasForeignKey) {
				if(rangounidadventaAux.getId()!=null && rangounidadventaAux.getId().equals(idRangoUnidadVentaSeleccionado)) {
					rangounidadventaTemp=rangounidadventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(rangounidadventaTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setRangoUnidadVenta(rangounidadventaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setSelectedItem(rangounidadventaTemp);
					}
				} else {
					//jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setSelectedItem(rangounidadventaTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdRangoUnidadVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(rangounidadventaTemp!=null && jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto!=null) {
						jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.setSelectedItem(rangounidadventaTemp);
					} else {
						if(jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto!=null) {
							//jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.setSelectedItem(rangounidadventaTemp);
							if(jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualRangoUnidadVentaForeignKeyDescripcion(Long idRangoUnidadVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			RangoUnidadVenta  rangounidadventaTemp=null;

			for(RangoUnidadVenta rangounidadventaAux:rangounidadventasForeignKey) {
				if(rangounidadventaAux.getId()!=null && rangounidadventaAux.getId().equals(idRangoUnidadVentaSeleccionado)) {
					rangounidadventaTemp=rangounidadventaAux;
					break;
				}
			}


			sDescripcion=RangoUnidadVentaConstantesFunciones.getRangoUnidadVentaDescripcion(rangounidadventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualRangoUnidadVentaForeignKeyGenerico(Long idRangoUnidadVentaSeleccionado,JComboBox jComboBoxid_rango_unidad_ventaParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			RangoUnidadVenta  rangounidadventaTemp=null;

			for(RangoUnidadVenta rangounidadventaAux:rangounidadventasForeignKey) {
				if(rangounidadventaAux.getId()!=null && rangounidadventaAux.getId().equals(idRangoUnidadVentaSeleccionado)) {
					rangounidadventaTemp=rangounidadventaAux;
					break;
				}
			}

			if(rangounidadventaTemp!=null) {
				jComboBoxid_rango_unidad_ventaParametroInventarioDefectoGenerico.setSelectedItem(rangounidadventaTemp);
			} else {
				if(jComboBoxid_rango_unidad_ventaParametroInventarioDefectoGenerico!=null && jComboBoxid_rango_unidad_ventaParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_rango_unidad_ventaParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPaisForeignKey(Long idPaisSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(paisTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setPais(paisTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setSelectedItem(paisTemp);
					}
				} else {
					//jComboBoxid_paisParametroInventarioDefecto.setSelectedItem(paisTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){
					if(paisTemp!=null && jComboBoxid_paisFK_IdPaisParametroInventarioDefecto!=null) {
						jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.setSelectedItem(paisTemp);
					} else {
						if(jComboBoxid_paisFK_IdPaisParametroInventarioDefecto!=null) {
							//jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.setSelectedItem(paisTemp);
							if(jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPaisForeignKeyDescripcion(Long idPaisSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}


			sDescripcion=PaisConstantesFunciones.getPaisDescripcion(paisTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPaisForeignKeyGenerico(Long idPaisSeleccionado,JComboBox jComboBoxid_paisParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(paisTemp!=null) {
				jComboBoxid_paisParametroInventarioDefectoGenerico.setSelectedItem(paisTemp);
			} else {
				if(jComboBoxid_paisParametroInventarioDefectoGenerico!=null && jComboBoxid_paisParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_paisParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCiudadForeignKey(Long idCiudadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ciudadTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setCiudad(ciudadTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setSelectedItem(ciudadTemp);
					}
				} else {
					//jComboBoxid_ciudadParametroInventarioDefecto.setSelectedItem(ciudadTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCiudad") || sFormularioTipoBusqueda.equals("Todos")){
					if(ciudadTemp!=null && jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto!=null) {
						jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.setSelectedItem(ciudadTemp);
					} else {
						if(jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto!=null) {
							//jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.setSelectedItem(ciudadTemp);
							if(jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCiudadForeignKeyDescripcion(Long idCiudadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}


			sDescripcion=CiudadConstantesFunciones.getCiudadDescripcion(ciudadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCiudadForeignKeyGenerico(Long idCiudadSeleccionado,JComboBox jComboBoxid_ciudadParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(ciudadTemp!=null) {
				jComboBoxid_ciudadParametroInventarioDefectoGenerico.setSelectedItem(ciudadTemp);
			} else {
				if(jComboBoxid_ciudadParametroInventarioDefectoGenerico!=null && jComboBoxid_ciudadParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_ciudadParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualColorProductoForeignKey(Long idColorProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			ColorProducto  colorproductoTemp=null;

			for(ColorProducto colorproductoAux:colorproductosForeignKey) {
				if(colorproductoAux.getId()!=null && colorproductoAux.getId().equals(idColorProductoSeleccionado)) {
					colorproductoTemp=colorproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(colorproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setColorProducto(colorproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setSelectedItem(colorproductoTemp);
					}
				} else {
					//jComboBoxid_color_productoParametroInventarioDefecto.setSelectedItem(colorproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdColorProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(colorproductoTemp!=null && jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto!=null) {
						jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.setSelectedItem(colorproductoTemp);
					} else {
						if(jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.setSelectedItem(colorproductoTemp);
							if(jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualColorProductoForeignKeyDescripcion(Long idColorProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			ColorProducto  colorproductoTemp=null;

			for(ColorProducto colorproductoAux:colorproductosForeignKey) {
				if(colorproductoAux.getId()!=null && colorproductoAux.getId().equals(idColorProductoSeleccionado)) {
					colorproductoTemp=colorproductoAux;
					break;
				}
			}


			sDescripcion=ColorProductoConstantesFunciones.getColorProductoDescripcion(colorproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualColorProductoForeignKeyGenerico(Long idColorProductoSeleccionado,JComboBox jComboBoxid_color_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			ColorProducto  colorproductoTemp=null;

			for(ColorProducto colorproductoAux:colorproductosForeignKey) {
				if(colorproductoAux.getId()!=null && colorproductoAux.getId().equals(idColorProductoSeleccionado)) {
					colorproductoTemp=colorproductoAux;
					break;
				}
			}

			if(colorproductoTemp!=null) {
				jComboBoxid_color_productoParametroInventarioDefectoGenerico.setSelectedItem(colorproductoTemp);
			} else {
				if(jComboBoxid_color_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_color_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_color_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClaseProductoForeignKey(Long idClaseProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			ClaseProducto  claseproductoTemp=null;

			for(ClaseProducto claseproductoAux:claseproductosForeignKey) {
				if(claseproductoAux.getId()!=null && claseproductoAux.getId().equals(idClaseProductoSeleccionado)) {
					claseproductoTemp=claseproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(claseproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setClaseProducto(claseproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setSelectedItem(claseproductoTemp);
					}
				} else {
					//jComboBoxid_clase_productoParametroInventarioDefecto.setSelectedItem(claseproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdClaseProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(claseproductoTemp!=null && jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto!=null) {
						jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.setSelectedItem(claseproductoTemp);
					} else {
						if(jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.setSelectedItem(claseproductoTemp);
							if(jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClaseProductoForeignKeyDescripcion(Long idClaseProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			ClaseProducto  claseproductoTemp=null;

			for(ClaseProducto claseproductoAux:claseproductosForeignKey) {
				if(claseproductoAux.getId()!=null && claseproductoAux.getId().equals(idClaseProductoSeleccionado)) {
					claseproductoTemp=claseproductoAux;
					break;
				}
			}


			sDescripcion=ClaseProductoConstantesFunciones.getClaseProductoDescripcion(claseproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClaseProductoForeignKeyGenerico(Long idClaseProductoSeleccionado,JComboBox jComboBoxid_clase_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			ClaseProducto  claseproductoTemp=null;

			for(ClaseProducto claseproductoAux:claseproductosForeignKey) {
				if(claseproductoAux.getId()!=null && claseproductoAux.getId().equals(idClaseProductoSeleccionado)) {
					claseproductoTemp=claseproductoAux;
					break;
				}
			}

			if(claseproductoTemp!=null) {
				jComboBoxid_clase_productoParametroInventarioDefectoGenerico.setSelectedItem(claseproductoTemp);
			} else {
				if(jComboBoxid_clase_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_clase_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_clase_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEfectoProductoForeignKey(Long idEfectoProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EfectoProducto  efectoproductoTemp=null;

			for(EfectoProducto efectoproductoAux:efectoproductosForeignKey) {
				if(efectoproductoAux.getId()!=null && efectoproductoAux.getId().equals(idEfectoProductoSeleccionado)) {
					efectoproductoTemp=efectoproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(efectoproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setEfectoProducto(efectoproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setSelectedItem(efectoproductoTemp);
					}
				} else {
					//jComboBoxid_efecto_productoParametroInventarioDefecto.setSelectedItem(efectoproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEfectoProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(efectoproductoTemp!=null && jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto!=null) {
						jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.setSelectedItem(efectoproductoTemp);
					} else {
						if(jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.setSelectedItem(efectoproductoTemp);
							if(jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEfectoProductoForeignKeyDescripcion(Long idEfectoProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EfectoProducto  efectoproductoTemp=null;

			for(EfectoProducto efectoproductoAux:efectoproductosForeignKey) {
				if(efectoproductoAux.getId()!=null && efectoproductoAux.getId().equals(idEfectoProductoSeleccionado)) {
					efectoproductoTemp=efectoproductoAux;
					break;
				}
			}


			sDescripcion=EfectoProductoConstantesFunciones.getEfectoProductoDescripcion(efectoproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEfectoProductoForeignKeyGenerico(Long idEfectoProductoSeleccionado,JComboBox jComboBoxid_efecto_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			EfectoProducto  efectoproductoTemp=null;

			for(EfectoProducto efectoproductoAux:efectoproductosForeignKey) {
				if(efectoproductoAux.getId()!=null && efectoproductoAux.getId().equals(idEfectoProductoSeleccionado)) {
					efectoproductoTemp=efectoproductoAux;
					break;
				}
			}

			if(efectoproductoTemp!=null) {
				jComboBoxid_efecto_productoParametroInventarioDefectoGenerico.setSelectedItem(efectoproductoTemp);
			} else {
				if(jComboBoxid_efecto_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_efecto_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_efecto_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMarcaProductoForeignKey(Long idMarcaProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			MarcaProducto  marcaproductoTemp=null;

			for(MarcaProducto marcaproductoAux:marcaproductosForeignKey) {
				if(marcaproductoAux.getId()!=null && marcaproductoAux.getId().equals(idMarcaProductoSeleccionado)) {
					marcaproductoTemp=marcaproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(marcaproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setMarcaProducto(marcaproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setSelectedItem(marcaproductoTemp);
					}
				} else {
					//jComboBoxid_marca_productoParametroInventarioDefecto.setSelectedItem(marcaproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdMarcaProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(marcaproductoTemp!=null && jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto!=null) {
						jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.setSelectedItem(marcaproductoTemp);
					} else {
						if(jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.setSelectedItem(marcaproductoTemp);
							if(jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMarcaProductoForeignKeyDescripcion(Long idMarcaProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			MarcaProducto  marcaproductoTemp=null;

			for(MarcaProducto marcaproductoAux:marcaproductosForeignKey) {
				if(marcaproductoAux.getId()!=null && marcaproductoAux.getId().equals(idMarcaProductoSeleccionado)) {
					marcaproductoTemp=marcaproductoAux;
					break;
				}
			}


			sDescripcion=MarcaProductoConstantesFunciones.getMarcaProductoDescripcion(marcaproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMarcaProductoForeignKeyGenerico(Long idMarcaProductoSeleccionado,JComboBox jComboBoxid_marca_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			MarcaProducto  marcaproductoTemp=null;

			for(MarcaProducto marcaproductoAux:marcaproductosForeignKey) {
				if(marcaproductoAux.getId()!=null && marcaproductoAux.getId().equals(idMarcaProductoSeleccionado)) {
					marcaproductoTemp=marcaproductoAux;
					break;
				}
			}

			if(marcaproductoTemp!=null) {
				jComboBoxid_marca_productoParametroInventarioDefectoGenerico.setSelectedItem(marcaproductoTemp);
			} else {
				if(jComboBoxid_marca_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_marca_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_marca_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModeloProductoForeignKey(Long idModeloProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			ModeloProducto  modeloproductoTemp=null;

			for(ModeloProducto modeloproductoAux:modeloproductosForeignKey) {
				if(modeloproductoAux.getId()!=null && modeloproductoAux.getId().equals(idModeloProductoSeleccionado)) {
					modeloproductoTemp=modeloproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(modeloproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setModeloProducto(modeloproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setSelectedItem(modeloproductoTemp);
					}
				} else {
					//jComboBoxid_modelo_productoParametroInventarioDefecto.setSelectedItem(modeloproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdModeloProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(modeloproductoTemp!=null && jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto!=null) {
						jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.setSelectedItem(modeloproductoTemp);
					} else {
						if(jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.setSelectedItem(modeloproductoTemp);
							if(jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModeloProductoForeignKeyDescripcion(Long idModeloProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			ModeloProducto  modeloproductoTemp=null;

			for(ModeloProducto modeloproductoAux:modeloproductosForeignKey) {
				if(modeloproductoAux.getId()!=null && modeloproductoAux.getId().equals(idModeloProductoSeleccionado)) {
					modeloproductoTemp=modeloproductoAux;
					break;
				}
			}


			sDescripcion=ModeloProductoConstantesFunciones.getModeloProductoDescripcion(modeloproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModeloProductoForeignKeyGenerico(Long idModeloProductoSeleccionado,JComboBox jComboBoxid_modelo_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			ModeloProducto  modeloproductoTemp=null;

			for(ModeloProducto modeloproductoAux:modeloproductosForeignKey) {
				if(modeloproductoAux.getId()!=null && modeloproductoAux.getId().equals(idModeloProductoSeleccionado)) {
					modeloproductoTemp=modeloproductoAux;
					break;
				}
			}

			if(modeloproductoTemp!=null) {
				jComboBoxid_modelo_productoParametroInventarioDefectoGenerico.setSelectedItem(modeloproductoTemp);
			} else {
				if(jComboBoxid_modelo_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_modelo_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_modelo_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMaterialProductoForeignKey(Long idMaterialProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			MaterialProducto  materialproductoTemp=null;

			for(MaterialProducto materialproductoAux:materialproductosForeignKey) {
				if(materialproductoAux.getId()!=null && materialproductoAux.getId().equals(idMaterialProductoSeleccionado)) {
					materialproductoTemp=materialproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(materialproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setMaterialProducto(materialproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setSelectedItem(materialproductoTemp);
					}
				} else {
					//jComboBoxid_material_productoParametroInventarioDefecto.setSelectedItem(materialproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdMaterialProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(materialproductoTemp!=null && jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto!=null) {
						jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.setSelectedItem(materialproductoTemp);
					} else {
						if(jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.setSelectedItem(materialproductoTemp);
							if(jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMaterialProductoForeignKeyDescripcion(Long idMaterialProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			MaterialProducto  materialproductoTemp=null;

			for(MaterialProducto materialproductoAux:materialproductosForeignKey) {
				if(materialproductoAux.getId()!=null && materialproductoAux.getId().equals(idMaterialProductoSeleccionado)) {
					materialproductoTemp=materialproductoAux;
					break;
				}
			}


			sDescripcion=MaterialProductoConstantesFunciones.getMaterialProductoDescripcion(materialproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMaterialProductoForeignKeyGenerico(Long idMaterialProductoSeleccionado,JComboBox jComboBoxid_material_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			MaterialProducto  materialproductoTemp=null;

			for(MaterialProducto materialproductoAux:materialproductosForeignKey) {
				if(materialproductoAux.getId()!=null && materialproductoAux.getId().equals(idMaterialProductoSeleccionado)) {
					materialproductoTemp=materialproductoAux;
					break;
				}
			}

			if(materialproductoTemp!=null) {
				jComboBoxid_material_productoParametroInventarioDefectoGenerico.setSelectedItem(materialproductoTemp);
			} else {
				if(jComboBoxid_material_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_material_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_material_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSegmentoProductoForeignKey(Long idSegmentoProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			SegmentoProducto  segmentoproductoTemp=null;

			for(SegmentoProducto segmentoproductoAux:segmentoproductosForeignKey) {
				if(segmentoproductoAux.getId()!=null && segmentoproductoAux.getId().equals(idSegmentoProductoSeleccionado)) {
					segmentoproductoTemp=segmentoproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(segmentoproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setSegmentoProducto(segmentoproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setSelectedItem(segmentoproductoTemp);
					}
				} else {
					//jComboBoxid_segmento_productoParametroInventarioDefecto.setSelectedItem(segmentoproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdSegmentoProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(segmentoproductoTemp!=null && jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto!=null) {
						jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.setSelectedItem(segmentoproductoTemp);
					} else {
						if(jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.setSelectedItem(segmentoproductoTemp);
							if(jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSegmentoProductoForeignKeyDescripcion(Long idSegmentoProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			SegmentoProducto  segmentoproductoTemp=null;

			for(SegmentoProducto segmentoproductoAux:segmentoproductosForeignKey) {
				if(segmentoproductoAux.getId()!=null && segmentoproductoAux.getId().equals(idSegmentoProductoSeleccionado)) {
					segmentoproductoTemp=segmentoproductoAux;
					break;
				}
			}


			sDescripcion=SegmentoProductoConstantesFunciones.getSegmentoProductoDescripcion(segmentoproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSegmentoProductoForeignKeyGenerico(Long idSegmentoProductoSeleccionado,JComboBox jComboBoxid_segmento_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			SegmentoProducto  segmentoproductoTemp=null;

			for(SegmentoProducto segmentoproductoAux:segmentoproductosForeignKey) {
				if(segmentoproductoAux.getId()!=null && segmentoproductoAux.getId().equals(idSegmentoProductoSeleccionado)) {
					segmentoproductoTemp=segmentoproductoAux;
					break;
				}
			}

			if(segmentoproductoTemp!=null) {
				jComboBoxid_segmento_productoParametroInventarioDefectoGenerico.setSelectedItem(segmentoproductoTemp);
			} else {
				if(jComboBoxid_segmento_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_segmento_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_segmento_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTallaProductoForeignKey(Long idTallaProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TallaProducto  tallaproductoTemp=null;

			for(TallaProducto tallaproductoAux:tallaproductosForeignKey) {
				if(tallaproductoAux.getId()!=null && tallaproductoAux.getId().equals(idTallaProductoSeleccionado)) {
					tallaproductoTemp=tallaproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tallaproductoTemp!=null) {

					if(this.parametroinventariodefecto!=null) {
						this.parametroinventariodefecto.setTallaProducto(tallaproductoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setSelectedItem(tallaproductoTemp);
					}
				} else {
					//jComboBoxid_talla_productoParametroInventarioDefecto.setSelectedItem(tallaproductoTemp);
					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTallaProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(tallaproductoTemp!=null && jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto!=null) {
						jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.setSelectedItem(tallaproductoTemp);
					} else {
						if(jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto!=null) {
							//jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.setSelectedItem(tallaproductoTemp);
							if(jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.getItemCount()>0) {
								jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTallaProductoForeignKeyDescripcion(Long idTallaProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TallaProducto  tallaproductoTemp=null;

			for(TallaProducto tallaproductoAux:tallaproductosForeignKey) {
				if(tallaproductoAux.getId()!=null && tallaproductoAux.getId().equals(idTallaProductoSeleccionado)) {
					tallaproductoTemp=tallaproductoAux;
					break;
				}
			}


			sDescripcion=TallaProductoConstantesFunciones.getTallaProductoDescripcion(tallaproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTallaProductoForeignKeyGenerico(Long idTallaProductoSeleccionado,JComboBox jComboBoxid_talla_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TallaProducto  tallaproductoTemp=null;

			for(TallaProducto tallaproductoAux:tallaproductosForeignKey) {
				if(tallaproductoAux.getId()!=null && tallaproductoAux.getId().equals(idTallaProductoSeleccionado)) {
					tallaproductoTemp=tallaproductoAux;
					break;
				}
			}

			if(tallaproductoTemp!=null) {
				jComboBoxid_talla_productoParametroInventarioDefectoGenerico.setSelectedItem(tallaproductoTemp);
			} else {
				if(jComboBoxid_talla_productoParametroInventarioDefectoGenerico!=null && jComboBoxid_talla_productoParametroInventarioDefectoGenerico.getItemCount()>0) {
					jComboBoxid_talla_productoParametroInventarioDefectoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_empresaParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaParametroInventarioDefectoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				parametroinventariodefecto.setid_empresa(empresaAux.getId());
				parametroinventariodefecto.setempresa_descripcion(ParametroInventarioDefectoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				parametroinventariodefecto.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_sucursalParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalParametroInventarioDefectoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				parametroinventariodefecto.setid_sucursal(sucursalAux.getId());
				parametroinventariodefecto.setsucursal_descripcion(ParametroInventarioDefectoConstantesFunciones.getSucursalDescripcion(sucursalAux));
				parametroinventariodefecto.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarGrupoBodegaForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_grupo_bodegaParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			GrupoBodega  grupobodegaAux=new GrupoBodega();

			if(jComboBoxid_grupo_bodegaParametroInventarioDefectoGenerico==null) {
				grupobodegaAux=(GrupoBodega)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.getSelectedItem();
			} else {
				grupobodegaAux=(GrupoBodega)jComboBoxid_grupo_bodegaParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(grupobodegaAux!=null && grupobodegaAux.getId()!=null) {
				parametroinventariodefecto.setid_grupo_bodega(grupobodegaAux.getId());
				parametroinventariodefecto.setgrupobodega_descripcion(ParametroInventarioDefectoConstantesFunciones.getGrupoBodegaDescripcion(grupobodegaAux));
				parametroinventariodefecto.setGrupoBodega(grupobodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCalidadProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_calidad_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			CalidadProducto  calidadproductoAux=new CalidadProducto();

			if(jComboBoxid_calidad_productoParametroInventarioDefectoGenerico==null) {
				calidadproductoAux=(CalidadProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				calidadproductoAux=(CalidadProducto)jComboBoxid_calidad_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(calidadproductoAux!=null && calidadproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_calidad_producto(calidadproductoAux.getId());
				parametroinventariodefecto.setcalidadproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getCalidadProductoDescripcion(calidadproductoAux));
				parametroinventariodefecto.setCalidadProducto(calidadproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoServicioForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_tipo_servicioParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoServicio  tiposervicioAux=new TipoServicio();

			if(jComboBoxid_tipo_servicioParametroInventarioDefectoGenerico==null) {
				tiposervicioAux=(TipoServicio)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.getSelectedItem();
			} else {
				tiposervicioAux=(TipoServicio)jComboBoxid_tipo_servicioParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(tiposervicioAux!=null && tiposervicioAux.getId()!=null) {
				parametroinventariodefecto.setid_tipo_servicio(tiposervicioAux.getId());
				parametroinventariodefecto.settiposervicio_descripcion(ParametroInventarioDefectoConstantesFunciones.getTipoServicioDescripcion(tiposervicioAux));
				parametroinventariodefecto.setTipoServicio(tiposervicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoProductoServicioInvenForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoProductoServicioInven  tipoproductoservicioinvenAux=new TipoProductoServicioInven();

			if(jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefectoGenerico==null) {
				tipoproductoservicioinvenAux=(TipoProductoServicioInven)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.getSelectedItem();
			} else {
				tipoproductoservicioinvenAux=(TipoProductoServicioInven)jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(tipoproductoservicioinvenAux!=null && tipoproductoservicioinvenAux.getId()!=null) {
				parametroinventariodefecto.setid_tipo_producto_servicio_inven(tipoproductoservicioinvenAux.getId());
				parametroinventariodefecto.settipoproductoservicioinven_descripcion(ParametroInventarioDefectoConstantesFunciones.getTipoProductoServicioInvenDescripcion(tipoproductoservicioinvenAux));
				parametroinventariodefecto.setTipoProductoServicioInven(tipoproductoservicioinvenAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoProductoServicioForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_tipo_producto_servicioParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoProductoServicio  tipoproductoservicioAux=new TipoProductoServicio();

			if(jComboBoxid_tipo_producto_servicioParametroInventarioDefectoGenerico==null) {
				tipoproductoservicioAux=(TipoProductoServicio)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.getSelectedItem();
			} else {
				tipoproductoservicioAux=(TipoProductoServicio)jComboBoxid_tipo_producto_servicioParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(tipoproductoservicioAux!=null && tipoproductoservicioAux.getId()!=null) {
				parametroinventariodefecto.setid_tipo_producto_servicio(tipoproductoservicioAux.getId());
				parametroinventariodefecto.settipoproductoservicio_descripcion(ParametroInventarioDefectoConstantesFunciones.getTipoProductoServicioDescripcion(tipoproductoservicioAux));
				parametroinventariodefecto.setTipoProductoServicio(tipoproductoservicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCosteoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_tipo_costeoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoCosteo  tipocosteoAux=new TipoCosteo();

			if(jComboBoxid_tipo_costeoParametroInventarioDefectoGenerico==null) {
				tipocosteoAux=(TipoCosteo)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.getSelectedItem();
			} else {
				tipocosteoAux=(TipoCosteo)jComboBoxid_tipo_costeoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(tipocosteoAux!=null && tipocosteoAux.getId()!=null) {
				parametroinventariodefecto.setid_tipo_costeo(tipocosteoAux.getId());
				parametroinventariodefecto.settipocosteo_descripcion(ParametroInventarioDefectoConstantesFunciones.getTipoCosteoDescripcion(tipocosteoAux));
				parametroinventariodefecto.setTipoCosteo(tipocosteoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_tipo_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoProducto  tipoproductoAux=new TipoProducto();

			if(jComboBoxid_tipo_productoParametroInventarioDefectoGenerico==null) {
				tipoproductoAux=(TipoProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				tipoproductoAux=(TipoProducto)jComboBoxid_tipo_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(tipoproductoAux!=null && tipoproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_tipo_producto(tipoproductoAux.getId());
				parametroinventariodefecto.settipoproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getTipoProductoDescripcion(tipoproductoAux));
				parametroinventariodefecto.setTipoProducto(tipoproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoViaTransporteForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_tipo_via_transporteParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TipoViaTransporte  tipoviatransporteAux=new TipoViaTransporte();

			if(jComboBoxid_tipo_via_transporteParametroInventarioDefectoGenerico==null) {
				tipoviatransporteAux=(TipoViaTransporte)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.getSelectedItem();
			} else {
				tipoviatransporteAux=(TipoViaTransporte)jComboBoxid_tipo_via_transporteParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(tipoviatransporteAux!=null && tipoviatransporteAux.getId()!=null) {
				parametroinventariodefecto.setid_tipo_via_transporte(tipoviatransporteAux.getId());
				parametroinventariodefecto.settipoviatransporte_descripcion(ParametroInventarioDefectoConstantesFunciones.getTipoViaTransporteDescripcion(tipoviatransporteAux));
				parametroinventariodefecto.setTipoViaTransporte(tipoviatransporteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarRangoUnidadVentaForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_rango_unidad_ventaParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			RangoUnidadVenta  rangounidadventaAux=new RangoUnidadVenta();

			if(jComboBoxid_rango_unidad_ventaParametroInventarioDefectoGenerico==null) {
				rangounidadventaAux=(RangoUnidadVenta)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.getSelectedItem();
			} else {
				rangounidadventaAux=(RangoUnidadVenta)jComboBoxid_rango_unidad_ventaParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(rangounidadventaAux!=null && rangounidadventaAux.getId()!=null) {
				parametroinventariodefecto.setid_rango_unidad_venta(rangounidadventaAux.getId());
				parametroinventariodefecto.setrangounidadventa_descripcion(ParametroInventarioDefectoConstantesFunciones.getRangoUnidadVentaDescripcion(rangounidadventaAux));
				parametroinventariodefecto.setRangoUnidadVenta(rangounidadventaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPaisForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_paisParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			Pais  paisAux=new Pais();

			if(jComboBoxid_paisParametroInventarioDefectoGenerico==null) {
				paisAux=(Pais)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.getSelectedItem();
			} else {
				paisAux=(Pais)jComboBoxid_paisParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(paisAux!=null && paisAux.getId()!=null) {
				parametroinventariodefecto.setid_pais(paisAux.getId());
				parametroinventariodefecto.setpais_descripcion(ParametroInventarioDefectoConstantesFunciones.getPaisDescripcion(paisAux));
				parametroinventariodefecto.setPais(paisAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCiudadForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_ciudadParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadAux=new Ciudad();

			if(jComboBoxid_ciudadParametroInventarioDefectoGenerico==null) {
				ciudadAux=(Ciudad)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.getSelectedItem();
			} else {
				ciudadAux=(Ciudad)jComboBoxid_ciudadParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(ciudadAux!=null && ciudadAux.getId()!=null) {
				parametroinventariodefecto.setid_ciudad(ciudadAux.getId());
				parametroinventariodefecto.setciudad_descripcion(ParametroInventarioDefectoConstantesFunciones.getCiudadDescripcion(ciudadAux));
				parametroinventariodefecto.setCiudad(ciudadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarColorProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_color_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			ColorProducto  colorproductoAux=new ColorProducto();

			if(jComboBoxid_color_productoParametroInventarioDefectoGenerico==null) {
				colorproductoAux=(ColorProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				colorproductoAux=(ColorProducto)jComboBoxid_color_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(colorproductoAux!=null && colorproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_color_producto(colorproductoAux.getId());
				parametroinventariodefecto.setcolorproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getColorProductoDescripcion(colorproductoAux));
				parametroinventariodefecto.setColorProducto(colorproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClaseProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_clase_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			ClaseProducto  claseproductoAux=new ClaseProducto();

			if(jComboBoxid_clase_productoParametroInventarioDefectoGenerico==null) {
				claseproductoAux=(ClaseProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				claseproductoAux=(ClaseProducto)jComboBoxid_clase_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(claseproductoAux!=null && claseproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_clase_producto(claseproductoAux.getId());
				parametroinventariodefecto.setclaseproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getClaseProductoDescripcion(claseproductoAux));
				parametroinventariodefecto.setClaseProducto(claseproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEfectoProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_efecto_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			EfectoProducto  efectoproductoAux=new EfectoProducto();

			if(jComboBoxid_efecto_productoParametroInventarioDefectoGenerico==null) {
				efectoproductoAux=(EfectoProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				efectoproductoAux=(EfectoProducto)jComboBoxid_efecto_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(efectoproductoAux!=null && efectoproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_efecto_producto(efectoproductoAux.getId());
				parametroinventariodefecto.setefectoproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getEfectoProductoDescripcion(efectoproductoAux));
				parametroinventariodefecto.setEfectoProducto(efectoproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMarcaProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_marca_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			MarcaProducto  marcaproductoAux=new MarcaProducto();

			if(jComboBoxid_marca_productoParametroInventarioDefectoGenerico==null) {
				marcaproductoAux=(MarcaProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				marcaproductoAux=(MarcaProducto)jComboBoxid_marca_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(marcaproductoAux!=null && marcaproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_marca_producto(marcaproductoAux.getId());
				parametroinventariodefecto.setmarcaproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getMarcaProductoDescripcion(marcaproductoAux));
				parametroinventariodefecto.setMarcaProducto(marcaproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModeloProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_modelo_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			ModeloProducto  modeloproductoAux=new ModeloProducto();

			if(jComboBoxid_modelo_productoParametroInventarioDefectoGenerico==null) {
				modeloproductoAux=(ModeloProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				modeloproductoAux=(ModeloProducto)jComboBoxid_modelo_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(modeloproductoAux!=null && modeloproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_modelo_producto(modeloproductoAux.getId());
				parametroinventariodefecto.setmodeloproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getModeloProductoDescripcion(modeloproductoAux));
				parametroinventariodefecto.setModeloProducto(modeloproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMaterialProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_material_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			MaterialProducto  materialproductoAux=new MaterialProducto();

			if(jComboBoxid_material_productoParametroInventarioDefectoGenerico==null) {
				materialproductoAux=(MaterialProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				materialproductoAux=(MaterialProducto)jComboBoxid_material_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(materialproductoAux!=null && materialproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_material_producto(materialproductoAux.getId());
				parametroinventariodefecto.setmaterialproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getMaterialProductoDescripcion(materialproductoAux));
				parametroinventariodefecto.setMaterialProducto(materialproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSegmentoProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_segmento_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			SegmentoProducto  segmentoproductoAux=new SegmentoProducto();

			if(jComboBoxid_segmento_productoParametroInventarioDefectoGenerico==null) {
				segmentoproductoAux=(SegmentoProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				segmentoproductoAux=(SegmentoProducto)jComboBoxid_segmento_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(segmentoproductoAux!=null && segmentoproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_segmento_producto(segmentoproductoAux.getId());
				parametroinventariodefecto.setsegmentoproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getSegmentoProductoDescripcion(segmentoproductoAux));
				parametroinventariodefecto.setSegmentoProducto(segmentoproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTallaProductoForeignKey(ParametroInventarioDefecto parametroinventariodefecto,JComboBox jComboBoxid_talla_productoParametroInventarioDefectoGenerico)throws Exception
	{
		try
		{
			TallaProducto  tallaproductoAux=new TallaProducto();

			if(jComboBoxid_talla_productoParametroInventarioDefectoGenerico==null) {
				tallaproductoAux=(TallaProducto)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.getSelectedItem();
			} else {
				tallaproductoAux=(TallaProducto)jComboBoxid_talla_productoParametroInventarioDefectoGenerico.getSelectedItem();
			}

			if(tallaproductoAux!=null && tallaproductoAux.getId()!=null) {
				parametroinventariodefecto.setid_talla_producto(tallaproductoAux.getId());
				parametroinventariodefecto.settallaproducto_descripcion(ParametroInventarioDefectoConstantesFunciones.getTallaProductoDescripcion(tallaproductoAux));
				parametroinventariodefecto.setTallaProducto(tallaproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameGrupoBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingGrupoBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.removeAllItems();

							for(GrupoBodega grupobodega:this.grupobodegasForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.addItem(grupobodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdGrupoBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.removeAllItems();

							for(GrupoBodega grupobodega:this.grupobodegasForeignKey) {
								this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.addItem(grupobodega);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCalidadProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCalidadProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.removeAllItems();

							for(CalidadProducto calidadproducto:this.calidadproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.addItem(calidadproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCalidadProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.removeAllItems();

							for(CalidadProducto calidadproducto:this.calidadproductosForeignKey) {
								this.jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.addItem(calidadproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoServiciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoServicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.removeAllItems();

							for(TipoServicio tiposervicio:this.tiposerviciosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.addItem(tiposervicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoServicio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.removeAllItems();

							for(TipoServicio tiposervicio:this.tiposerviciosForeignKey) {
								this.jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.addItem(tiposervicio);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoProductoServicioInvensForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoProductoServicioInven=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.removeAllItems();

							for(TipoProductoServicioInven tipoproductoservicioinven:this.tipoproductoservicioinvensForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.addItem(tipoproductoservicioinven);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoProductoServicioInven") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.removeAllItems();

							for(TipoProductoServicioInven tipoproductoservicioinven:this.tipoproductoservicioinvensForeignKey) {
								this.jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.addItem(tipoproductoservicioinven);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoProductoServiciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoProductoServicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.removeAllItems();

							for(TipoProductoServicio tipoproductoservicio:this.tipoproductoserviciosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.addItem(tipoproductoservicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoProductoServicio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.removeAllItems();

							for(TipoProductoServicio tipoproductoservicio:this.tipoproductoserviciosForeignKey) {
								this.jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.addItem(tipoproductoservicio);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCosteosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCosteo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.removeAllItems();

							for(TipoCosteo tipocosteo:this.tipocosteosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.addItem(tipocosteo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoCosteo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.removeAllItems();

							for(TipoCosteo tipocosteo:this.tipocosteosForeignKey) {
								this.jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.addItem(tipocosteo);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.removeAllItems();

							for(TipoProducto tipoproducto:this.tipoproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.addItem(tipoproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.removeAllItems();

							for(TipoProducto tipoproducto:this.tipoproductosForeignKey) {
								this.jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.addItem(tipoproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoViaTransportesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoViaTransporte=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.removeAllItems();

							for(TipoViaTransporte tipoviatransporte:this.tipoviatransportesForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.addItem(tipoviatransporte);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoViaTransporte") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.removeAllItems();

							for(TipoViaTransporte tipoviatransporte:this.tipoviatransportesForeignKey) {
								this.jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.addItem(tipoviatransporte);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameRangoUnidadVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingRangoUnidadVenta=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.removeAllItems();

							for(RangoUnidadVenta rangounidadventa:this.rangounidadventasForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.addItem(rangounidadventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdRangoUnidadVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.removeAllItems();

							for(RangoUnidadVenta rangounidadventa:this.rangounidadventasForeignKey) {
								this.jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.addItem(rangounidadventa);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePaissForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPais=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.addItem(pais);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.addItem(pais);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCiudadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCiudad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.removeAllItems();

							for(Ciudad ciudad:this.ciudadsForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.addItem(ciudad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCiudad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.removeAllItems();

							for(Ciudad ciudad:this.ciudadsForeignKey) {
								this.jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.addItem(ciudad);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameColorProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingColorProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.removeAllItems();

							for(ColorProducto colorproducto:this.colorproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.addItem(colorproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdColorProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.removeAllItems();

							for(ColorProducto colorproducto:this.colorproductosForeignKey) {
								this.jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.addItem(colorproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClaseProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingClaseProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.removeAllItems();

							for(ClaseProducto claseproducto:this.claseproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.addItem(claseproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdClaseProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.removeAllItems();

							for(ClaseProducto claseproducto:this.claseproductosForeignKey) {
								this.jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.addItem(claseproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEfectoProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEfectoProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.removeAllItems();

							for(EfectoProducto efectoproducto:this.efectoproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.addItem(efectoproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEfectoProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.removeAllItems();

							for(EfectoProducto efectoproducto:this.efectoproductosForeignKey) {
								this.jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.addItem(efectoproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMarcaProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMarcaProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.removeAllItems();

							for(MarcaProducto marcaproducto:this.marcaproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.addItem(marcaproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdMarcaProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.removeAllItems();

							for(MarcaProducto marcaproducto:this.marcaproductosForeignKey) {
								this.jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.addItem(marcaproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModeloProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModeloProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.removeAllItems();

							for(ModeloProducto modeloproducto:this.modeloproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.addItem(modeloproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdModeloProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.removeAllItems();

							for(ModeloProducto modeloproducto:this.modeloproductosForeignKey) {
								this.jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.addItem(modeloproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMaterialProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMaterialProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.removeAllItems();

							for(MaterialProducto materialproducto:this.materialproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.addItem(materialproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdMaterialProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.removeAllItems();

							for(MaterialProducto materialproducto:this.materialproductosForeignKey) {
								this.jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.addItem(materialproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSegmentoProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSegmentoProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.removeAllItems();

							for(SegmentoProducto segmentoproducto:this.segmentoproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.addItem(segmentoproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdSegmentoProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.removeAllItems();

							for(SegmentoProducto segmentoproducto:this.segmentoproductosForeignKey) {
								this.jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.addItem(segmentoproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTallaProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTallaProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.removeAllItems();

							for(TallaProducto tallaproducto:this.tallaproductosForeignKey) {
								this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.addItem(tallaproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { 
					}

					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTallaProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.removeAllItems();

							for(TallaProducto tallaproducto:this.tallaproductosForeignKey) {
								this.jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.addItem(tallaproducto);
							}
						}

						if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameGrupoBodegaForeignKey(GrupoBodega grupobodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setSelectedItem(grupobodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.setSelectedItem(grupobodega);
						} else {
							this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCalidadProductoForeignKey(CalidadProducto calidadproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setSelectedItem(calidadproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.setSelectedItem(calidadproducto);
						} else {
							this.jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoServicioForeignKey(TipoServicio tiposervicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setSelectedItem(tiposervicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.setSelectedItem(tiposervicio);
						} else {
							this.jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoProductoServicioInvenForeignKey(TipoProductoServicioInven tipoproductoservicioinven,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setSelectedItem(tipoproductoservicioinven);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.setSelectedItem(tipoproductoservicioinven);
						} else {
							this.jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoProductoServicioForeignKey(TipoProductoServicio tipoproductoservicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setSelectedItem(tipoproductoservicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.setSelectedItem(tipoproductoservicio);
						} else {
							this.jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCosteoForeignKey(TipoCosteo tipocosteo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setSelectedItem(tipocosteo);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.setSelectedItem(tipocosteo);
						} else {
							this.jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoProductoForeignKey(TipoProducto tipoproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setSelectedItem(tipoproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.setSelectedItem(tipoproducto);
						} else {
							this.jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoViaTransporteForeignKey(TipoViaTransporte tipoviatransporte,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setSelectedItem(tipoviatransporte);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.setSelectedItem(tipoviatransporte);
						} else {
							this.jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameRangoUnidadVentaForeignKey(RangoUnidadVenta rangounidadventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setSelectedItem(rangounidadventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.setSelectedItem(rangounidadventa);
						} else {
							this.jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePaisForeignKey(Pais pais,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setSelectedItem(pais);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.setSelectedItem(pais);
						} else {
							this.jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCiudadForeignKey(Ciudad ciudad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setSelectedItem(ciudad);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.setSelectedItem(ciudad);
						} else {
							this.jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameColorProductoForeignKey(ColorProducto colorproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setSelectedItem(colorproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.setSelectedItem(colorproducto);
						} else {
							this.jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClaseProductoForeignKey(ClaseProducto claseproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setSelectedItem(claseproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.setSelectedItem(claseproducto);
						} else {
							this.jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEfectoProductoForeignKey(EfectoProducto efectoproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setSelectedItem(efectoproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.setSelectedItem(efectoproducto);
						} else {
							this.jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMarcaProductoForeignKey(MarcaProducto marcaproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setSelectedItem(marcaproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.setSelectedItem(marcaproducto);
						} else {
							this.jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModeloProductoForeignKey(ModeloProducto modeloproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setSelectedItem(modeloproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.setSelectedItem(modeloproducto);
						} else {
							this.jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMaterialProductoForeignKey(MaterialProducto materialproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setSelectedItem(materialproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.setSelectedItem(materialproducto);
						} else {
							this.jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSegmentoProductoForeignKey(SegmentoProducto segmentoproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setSelectedItem(segmentoproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.setSelectedItem(segmentoproducto);
						} else {
							this.jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTallaProductoForeignKey(TallaProducto tallaproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setSelectedItem(tallaproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.setSelectedItem(tallaproducto);
						} else {
							this.jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesParametroInventarioDefecto() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			ParametroInventarioDefectoConstantesFunciones.refrescarForeignKeysDescripcionesParametroInventarioDefecto(this.parametroinventariodefectoLogic.getParametroInventarioDefectos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			ParametroInventarioDefectoConstantesFunciones.refrescarForeignKeysDescripcionesParametroInventarioDefecto(this.parametroinventariodefectos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(GrupoBodega.class));
		classes.add(new Classe(CalidadProducto.class));
		classes.add(new Classe(TipoServicio.class));
		classes.add(new Classe(TipoProductoServicioInven.class));
		classes.add(new Classe(TipoProductoServicio.class));
		classes.add(new Classe(TipoCosteo.class));
		classes.add(new Classe(TipoProducto.class));
		classes.add(new Classe(TipoViaTransporte.class));
		classes.add(new Classe(RangoUnidadVenta.class));
		classes.add(new Classe(Pais.class));
		classes.add(new Classe(Ciudad.class));
		classes.add(new Classe(ColorProducto.class));
		classes.add(new Classe(ClaseProducto.class));
		classes.add(new Classe(EfectoProducto.class));
		classes.add(new Classe(MarcaProducto.class));
		classes.add(new Classe(ModeloProducto.class));
		classes.add(new Classe(MaterialProducto.class));
		classes.add(new Classe(SegmentoProducto.class));
		classes.add(new Classe(TallaProducto.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//parametroinventariodefectoLogic.setParametroInventarioDefectos(this.parametroinventariodefectos);
			parametroinventariodefectoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ParametroInventarioDefectoParameterReturnGeneral getParametroInventarioDefectoParameterGeneral() {
		return this.parametroinventariodefectoParameterGeneral;
	}
	
	public void setParametroInventarioDefectoParameterGeneral(ParametroInventarioDefectoParameterReturnGeneral parametroinventariodefectoParameterGeneral) {
		this.parametroinventariodefectoParameterGeneral = parametroinventariodefectoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoParametroInventarioDefecto() {
		return isPermisoTodoParametroInventarioDefecto;
	}

	public void setIsPermisoTodoParametroInventarioDefecto(Boolean isPermisoTodoParametroInventarioDefecto) {
		this.isPermisoTodoParametroInventarioDefecto = isPermisoTodoParametroInventarioDefecto;
	}

	public Boolean getIsPermisoNuevoParametroInventarioDefecto() {
		return isPermisoNuevoParametroInventarioDefecto;
	}

	public void setIsPermisoNuevoParametroInventarioDefecto(Boolean isPermisoNuevoParametroInventarioDefecto) {
		this.isPermisoNuevoParametroInventarioDefecto = isPermisoNuevoParametroInventarioDefecto;
	}

	public Boolean getIsPermisoActualizarParametroInventarioDefecto() {
		return isPermisoActualizarParametroInventarioDefecto;
	}

	public void setIsPermisoActualizarParametroInventarioDefecto(Boolean isPermisoActualizarParametroInventarioDefecto) {
		this.isPermisoActualizarParametroInventarioDefecto = isPermisoActualizarParametroInventarioDefecto;
	}

	public Boolean getIsPermisoEliminarParametroInventarioDefecto() {
		return isPermisoEliminarParametroInventarioDefecto;
	}

	public void setIsPermisoEliminarParametroInventarioDefecto(Boolean isPermisoEliminarParametroInventarioDefecto) {
		this.isPermisoEliminarParametroInventarioDefecto = isPermisoEliminarParametroInventarioDefecto;
	}

	public Boolean getIsPermisoGuardarCambiosParametroInventarioDefecto() {
		return isPermisoGuardarCambiosParametroInventarioDefecto;
	}

	public void setIsPermisoGuardarCambiosParametroInventarioDefecto(Boolean isPermisoGuardarCambiosParametroInventarioDefecto) {
		this.isPermisoGuardarCambiosParametroInventarioDefecto = isPermisoGuardarCambiosParametroInventarioDefecto;
	}
	
	public Boolean getIsPermisoConsultaParametroInventarioDefecto() {
		return isPermisoConsultaParametroInventarioDefecto;
	}

	public void setIsPermisoConsultaParametroInventarioDefecto(Boolean isPermisoConsultaParametroInventarioDefecto) {
		this.isPermisoConsultaParametroInventarioDefecto = isPermisoConsultaParametroInventarioDefecto;
	}

	public Boolean getIsPermisoBusquedaParametroInventarioDefecto() {
		return isPermisoBusquedaParametroInventarioDefecto;
	}

	public void setIsPermisoBusquedaParametroInventarioDefecto(Boolean isPermisoBusquedaParametroInventarioDefecto) {
		this.isPermisoBusquedaParametroInventarioDefecto = isPermisoBusquedaParametroInventarioDefecto;
	}

	public Boolean getIsPermisoReporteParametroInventarioDefecto() {
		return isPermisoReporteParametroInventarioDefecto;
	}

	public void setIsPermisoReporteParametroInventarioDefecto(Boolean isPermisoReporteParametroInventarioDefecto) {
		this.isPermisoReporteParametroInventarioDefecto = isPermisoReporteParametroInventarioDefecto;
	}
	
	public Boolean getIsPermisoPaginacionMedioParametroInventarioDefecto() {
		return isPermisoPaginacionMedioParametroInventarioDefecto;
	}

	public void setIsPermisoPaginacionMedioParametroInventarioDefecto(Boolean isPermisoPaginacionMedioParametroInventarioDefecto) {
		this.isPermisoPaginacionMedioParametroInventarioDefecto = isPermisoPaginacionMedioParametroInventarioDefecto;
	}
	
	public Boolean getIsPermisoPaginacionTodoParametroInventarioDefecto() {
		return isPermisoPaginacionTodoParametroInventarioDefecto;
	}

	public void setIsPermisoPaginacionTodoParametroInventarioDefecto(Boolean isPermisoPaginacionTodoParametroInventarioDefecto) {
		this.isPermisoPaginacionTodoParametroInventarioDefecto = isPermisoPaginacionTodoParametroInventarioDefecto;
	}
	
	public Boolean getIsPermisoPaginacionAltoParametroInventarioDefecto() {
		return isPermisoPaginacionAltoParametroInventarioDefecto;
	}

	public void setIsPermisoPaginacionAltoParametroInventarioDefecto(Boolean isPermisoPaginacionAltoParametroInventarioDefecto) {
		this.isPermisoPaginacionAltoParametroInventarioDefecto = isPermisoPaginacionAltoParametroInventarioDefecto;
	}
	
	public Boolean getIsPermisoCopiarParametroInventarioDefecto() {
		return isPermisoCopiarParametroInventarioDefecto;
	}

	public void setIsPermisoCopiarParametroInventarioDefecto(Boolean isPermisoCopiarParametroInventarioDefecto) {
		this.isPermisoCopiarParametroInventarioDefecto = isPermisoCopiarParametroInventarioDefecto;
	}
	
	public Boolean getIsPermisoVerFormParametroInventarioDefecto() {
		return isPermisoVerFormParametroInventarioDefecto;
	}

	public void setIsPermisoVerFormParametroInventarioDefecto(Boolean isPermisoVerFormParametroInventarioDefecto) {
		this.isPermisoVerFormParametroInventarioDefecto = isPermisoVerFormParametroInventarioDefecto;
	}
	
	public Boolean getIsPermisoDuplicarParametroInventarioDefecto() {
		return isPermisoDuplicarParametroInventarioDefecto;
	}

	public void setIsPermisoDuplicarParametroInventarioDefecto(Boolean isPermisoDuplicarParametroInventarioDefecto) {
		this.isPermisoDuplicarParametroInventarioDefecto = isPermisoDuplicarParametroInventarioDefecto;
	}
	
	public Boolean getIsPermisoOrdenParametroInventarioDefecto() {
		return isPermisoOrdenParametroInventarioDefecto;
	}

	public void setIsPermisoOrdenParametroInventarioDefecto(Boolean isPermisoOrdenParametroInventarioDefecto) {
		this.isPermisoOrdenParametroInventarioDefecto = isPermisoOrdenParametroInventarioDefecto;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoParametroInventarioDefecto() {
		return isVisibilidadCeldaNuevoParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaNuevoParametroInventarioDefecto(Boolean isVisibilidadCeldaNuevoParametroInventarioDefecto) {
		this.isVisibilidadCeldaNuevoParametroInventarioDefecto = isVisibilidadCeldaNuevoParametroInventarioDefecto;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarParametroInventarioDefecto() {
		return isVisibilidadCeldaDuplicarParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaDuplicarParametroInventarioDefecto(Boolean isVisibilidadCeldaDuplicarParametroInventarioDefecto) {
		this.isVisibilidadCeldaDuplicarParametroInventarioDefecto = isVisibilidadCeldaDuplicarParametroInventarioDefecto;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarParametroInventarioDefecto() {
		return isVisibilidadCeldaCopiarParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaCopiarParametroInventarioDefecto(Boolean isVisibilidadCeldaCopiarParametroInventarioDefecto) {
		this.isVisibilidadCeldaCopiarParametroInventarioDefecto = isVisibilidadCeldaCopiarParametroInventarioDefecto;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormParametroInventarioDefecto() {
		return isVisibilidadCeldaVerFormParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaVerFormParametroInventarioDefecto(Boolean isVisibilidadCeldaVerFormParametroInventarioDefecto) {
		this.isVisibilidadCeldaVerFormParametroInventarioDefecto = isVisibilidadCeldaVerFormParametroInventarioDefecto;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenParametroInventarioDefecto() {
		return isVisibilidadCeldaOrdenParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaOrdenParametroInventarioDefecto(Boolean isVisibilidadCeldaOrdenParametroInventarioDefecto) {
		this.isVisibilidadCeldaOrdenParametroInventarioDefecto = isVisibilidadCeldaOrdenParametroInventarioDefecto;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto() {
		return isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto(Boolean isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto) {
		this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto = isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto;
	}
	
	public Boolean getIsVisibilidadCeldaModificarParametroInventarioDefecto() {
		return isVisibilidadCeldaModificarParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaModificarParametroInventarioDefecto(Boolean isVisibilidadCeldaModificarParametroInventarioDefecto) {
		this.isVisibilidadCeldaModificarParametroInventarioDefecto = isVisibilidadCeldaModificarParametroInventarioDefecto;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarParametroInventarioDefecto() {
		return isVisibilidadCeldaActualizarParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaActualizarParametroInventarioDefecto(Boolean isVisibilidadCeldaActualizarParametroInventarioDefecto) {
		this.isVisibilidadCeldaActualizarParametroInventarioDefecto = isVisibilidadCeldaActualizarParametroInventarioDefecto;
	}

	public Boolean getIsVisibilidadCeldaEliminarParametroInventarioDefecto() {
		return isVisibilidadCeldaEliminarParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaEliminarParametroInventarioDefecto(Boolean isVisibilidadCeldaEliminarParametroInventarioDefecto) {
		this.isVisibilidadCeldaEliminarParametroInventarioDefecto = isVisibilidadCeldaEliminarParametroInventarioDefecto;
	}

	public Boolean getIsVisibilidadCeldaCancelarParametroInventarioDefecto() {
		return isVisibilidadCeldaCancelarParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaCancelarParametroInventarioDefecto(Boolean isVisibilidadCeldaCancelarParametroInventarioDefecto) {
		this.isVisibilidadCeldaCancelarParametroInventarioDefecto = isVisibilidadCeldaCancelarParametroInventarioDefecto;
	}

	public Boolean getIsVisibilidadCeldaGuardarParametroInventarioDefecto() {
		return isVisibilidadCeldaGuardarParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaGuardarParametroInventarioDefecto(Boolean isVisibilidadCeldaGuardarParametroInventarioDefecto) {
		this.isVisibilidadCeldaGuardarParametroInventarioDefecto = isVisibilidadCeldaGuardarParametroInventarioDefecto;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosParametroInventarioDefecto() {
		return isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto;
	}

	public void setIsVisibilidadCeldaGuardarCambiosParametroInventarioDefecto(Boolean isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto) {
		this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto = isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto;
	}
		
	public ParametroInventarioDefectoSessionBean getparametroinventariodefectoSessionBean() {
		return this.parametroinventariodefectoSessionBean;
	}
	
	public void setparametroinventariodefectoSessionBean(ParametroInventarioDefectoSessionBean parametroinventariodefectoSessionBean) {
		this.parametroinventariodefectoSessionBean=parametroinventariodefectoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdCalidadProducto() {
		return this.isVisibilidadFK_IdCalidadProducto;
	}

	public void setisVisibilidadFK_IdCalidadProducto(Boolean isVisibilidadFK_IdCalidadProducto) {
		this.isVisibilidadFK_IdCalidadProducto=isVisibilidadFK_IdCalidadProducto;
	}

	public Boolean getisVisibilidadFK_IdCiudad() {
		return this.isVisibilidadFK_IdCiudad;
	}

	public void setisVisibilidadFK_IdCiudad(Boolean isVisibilidadFK_IdCiudad) {
		this.isVisibilidadFK_IdCiudad=isVisibilidadFK_IdCiudad;
	}

	public Boolean getisVisibilidadFK_IdClaseProducto() {
		return this.isVisibilidadFK_IdClaseProducto;
	}

	public void setisVisibilidadFK_IdClaseProducto(Boolean isVisibilidadFK_IdClaseProducto) {
		this.isVisibilidadFK_IdClaseProducto=isVisibilidadFK_IdClaseProducto;
	}

	public Boolean getisVisibilidadFK_IdColorProducto() {
		return this.isVisibilidadFK_IdColorProducto;
	}

	public void setisVisibilidadFK_IdColorProducto(Boolean isVisibilidadFK_IdColorProducto) {
		this.isVisibilidadFK_IdColorProducto=isVisibilidadFK_IdColorProducto;
	}

	public Boolean getisVisibilidadFK_IdEfectoProducto() {
		return this.isVisibilidadFK_IdEfectoProducto;
	}

	public void setisVisibilidadFK_IdEfectoProducto(Boolean isVisibilidadFK_IdEfectoProducto) {
		this.isVisibilidadFK_IdEfectoProducto=isVisibilidadFK_IdEfectoProducto;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdGrupoBodega() {
		return this.isVisibilidadFK_IdGrupoBodega;
	}

	public void setisVisibilidadFK_IdGrupoBodega(Boolean isVisibilidadFK_IdGrupoBodega) {
		this.isVisibilidadFK_IdGrupoBodega=isVisibilidadFK_IdGrupoBodega;
	}

	public Boolean getisVisibilidadFK_IdMarcaProducto() {
		return this.isVisibilidadFK_IdMarcaProducto;
	}

	public void setisVisibilidadFK_IdMarcaProducto(Boolean isVisibilidadFK_IdMarcaProducto) {
		this.isVisibilidadFK_IdMarcaProducto=isVisibilidadFK_IdMarcaProducto;
	}

	public Boolean getisVisibilidadFK_IdMaterialProducto() {
		return this.isVisibilidadFK_IdMaterialProducto;
	}

	public void setisVisibilidadFK_IdMaterialProducto(Boolean isVisibilidadFK_IdMaterialProducto) {
		this.isVisibilidadFK_IdMaterialProducto=isVisibilidadFK_IdMaterialProducto;
	}

	public Boolean getisVisibilidadFK_IdModeloProducto() {
		return this.isVisibilidadFK_IdModeloProducto;
	}

	public void setisVisibilidadFK_IdModeloProducto(Boolean isVisibilidadFK_IdModeloProducto) {
		this.isVisibilidadFK_IdModeloProducto=isVisibilidadFK_IdModeloProducto;
	}

	public Boolean getisVisibilidadFK_IdPais() {
		return this.isVisibilidadFK_IdPais;
	}

	public void setisVisibilidadFK_IdPais(Boolean isVisibilidadFK_IdPais) {
		this.isVisibilidadFK_IdPais=isVisibilidadFK_IdPais;
	}

	public Boolean getisVisibilidadFK_IdRangoUnidadVenta() {
		return this.isVisibilidadFK_IdRangoUnidadVenta;
	}

	public void setisVisibilidadFK_IdRangoUnidadVenta(Boolean isVisibilidadFK_IdRangoUnidadVenta) {
		this.isVisibilidadFK_IdRangoUnidadVenta=isVisibilidadFK_IdRangoUnidadVenta;
	}

	public Boolean getisVisibilidadFK_IdSegmentoProducto() {
		return this.isVisibilidadFK_IdSegmentoProducto;
	}

	public void setisVisibilidadFK_IdSegmentoProducto(Boolean isVisibilidadFK_IdSegmentoProducto) {
		this.isVisibilidadFK_IdSegmentoProducto=isVisibilidadFK_IdSegmentoProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTallaProducto() {
		return this.isVisibilidadFK_IdTallaProducto;
	}

	public void setisVisibilidadFK_IdTallaProducto(Boolean isVisibilidadFK_IdTallaProducto) {
		this.isVisibilidadFK_IdTallaProducto=isVisibilidadFK_IdTallaProducto;
	}

	public Boolean getisVisibilidadFK_IdTipoCosteo() {
		return this.isVisibilidadFK_IdTipoCosteo;
	}

	public void setisVisibilidadFK_IdTipoCosteo(Boolean isVisibilidadFK_IdTipoCosteo) {
		this.isVisibilidadFK_IdTipoCosteo=isVisibilidadFK_IdTipoCosteo;
	}

	public Boolean getisVisibilidadFK_IdTipoProducto() {
		return this.isVisibilidadFK_IdTipoProducto;
	}

	public void setisVisibilidadFK_IdTipoProducto(Boolean isVisibilidadFK_IdTipoProducto) {
		this.isVisibilidadFK_IdTipoProducto=isVisibilidadFK_IdTipoProducto;
	}

	public Boolean getisVisibilidadFK_IdTipoProductoServicio() {
		return this.isVisibilidadFK_IdTipoProductoServicio;
	}

	public void setisVisibilidadFK_IdTipoProductoServicio(Boolean isVisibilidadFK_IdTipoProductoServicio) {
		this.isVisibilidadFK_IdTipoProductoServicio=isVisibilidadFK_IdTipoProductoServicio;
	}

	public Boolean getisVisibilidadFK_IdTipoProductoServicioInven() {
		return this.isVisibilidadFK_IdTipoProductoServicioInven;
	}

	public void setisVisibilidadFK_IdTipoProductoServicioInven(Boolean isVisibilidadFK_IdTipoProductoServicioInven) {
		this.isVisibilidadFK_IdTipoProductoServicioInven=isVisibilidadFK_IdTipoProductoServicioInven;
	}

	public Boolean getisVisibilidadFK_IdTipoServicio() {
		return this.isVisibilidadFK_IdTipoServicio;
	}

	public void setisVisibilidadFK_IdTipoServicio(Boolean isVisibilidadFK_IdTipoServicio) {
		this.isVisibilidadFK_IdTipoServicio=isVisibilidadFK_IdTipoServicio;
	}

	public Boolean getisVisibilidadFK_IdTipoViaTransporte() {
		return this.isVisibilidadFK_IdTipoViaTransporte;
	}

	public void setisVisibilidadFK_IdTipoViaTransporte(Boolean isVisibilidadFK_IdTipoViaTransporte) {
		this.isVisibilidadFK_IdTipoViaTransporte=isVisibilidadFK_IdTipoViaTransporte;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarSucursalForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarGrupoBodegaForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarCalidadProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarTipoServicioForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarTipoProductoServicioInvenForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarTipoProductoServicioForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarTipoCosteoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarTipoProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarTipoViaTransporteForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarRangoUnidadVentaForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarPaisForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarCiudadForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarColorProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarClaseProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarEfectoProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarMarcaProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarModeloProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarMaterialProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarSegmentoProductoForeignKey(parametroinventariodefecto,null);
				this.setActualParaGuardarTallaProductoForeignKey(parametroinventariodefecto,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(ParametroInventarioDefecto parametroinventariodefecto,ParametroInventarioDefecto parametroinventariodefectoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalParametroInventarioDefecto(parametroinventariodefecto);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		parametroinventariodefectoAux.setId(parametroinventariodefecto.getId());
		parametroinventariodefectoAux.setVersionRow(parametroinventariodefecto.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessParametroInventarioDefecto();
		
			int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = parametroinventariodefectoValidator.getInvalidValues(this.parametroinventariodefecto);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			parametroinventariodefectoLogic.setDatosCliente(datosCliente);
			parametroinventariodefectoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				parametroinventariodefectoAux=new  ParametroInventarioDefecto();
				
				parametroinventariodefectoAux.setIsNew(true);
				parametroinventariodefectoAux.setIsChanged(true);
				
				parametroinventariodefectoAux.setParametroInventarioDefectoOriginal(this.parametroinventariodefecto);
				
				parametroinventariodefectoAux.setId(this.parametroinventariodefecto.getId());	
				parametroinventariodefectoAux.setVersionRow(this.parametroinventariodefecto.getVersionRow());	
				parametroinventariodefectoAux.setid_empresa(this.parametroinventariodefecto.getid_empresa());	
				parametroinventariodefectoAux.setid_sucursal(this.parametroinventariodefecto.getid_sucursal());	
				parametroinventariodefectoAux.setid_grupo_bodega(this.parametroinventariodefecto.getid_grupo_bodega());	
				parametroinventariodefectoAux.setid_calidad_producto(this.parametroinventariodefecto.getid_calidad_producto());	
				parametroinventariodefectoAux.setid_tipo_servicio(this.parametroinventariodefecto.getid_tipo_servicio());	
				parametroinventariodefectoAux.setid_tipo_producto_servicio_inven(this.parametroinventariodefecto.getid_tipo_producto_servicio_inven());	
				parametroinventariodefectoAux.setid_tipo_producto_servicio(this.parametroinventariodefecto.getid_tipo_producto_servicio());	
				parametroinventariodefectoAux.setid_tipo_costeo(this.parametroinventariodefecto.getid_tipo_costeo());	
				parametroinventariodefectoAux.setid_tipo_producto(this.parametroinventariodefecto.getid_tipo_producto());	
				parametroinventariodefectoAux.setid_tipo_via_transporte(this.parametroinventariodefecto.getid_tipo_via_transporte());	
				parametroinventariodefectoAux.setid_rango_unidad_venta(this.parametroinventariodefecto.getid_rango_unidad_venta());	
				parametroinventariodefectoAux.setid_pais(this.parametroinventariodefecto.getid_pais());	
				parametroinventariodefectoAux.setid_ciudad(this.parametroinventariodefecto.getid_ciudad());	
				parametroinventariodefectoAux.setid_color_producto(this.parametroinventariodefecto.getid_color_producto());	
				parametroinventariodefectoAux.setid_clase_producto(this.parametroinventariodefecto.getid_clase_producto());	
				parametroinventariodefectoAux.setid_efecto_producto(this.parametroinventariodefecto.getid_efecto_producto());	
				parametroinventariodefectoAux.setid_marca_producto(this.parametroinventariodefecto.getid_marca_producto());	
				parametroinventariodefectoAux.setid_modelo_producto(this.parametroinventariodefecto.getid_modelo_producto());	
				parametroinventariodefectoAux.setid_material_producto(this.parametroinventariodefecto.getid_material_producto());	
				parametroinventariodefectoAux.setid_segmento_producto(this.parametroinventariodefecto.getid_segmento_producto());	
				parametroinventariodefectoAux.setid_talla_producto(this.parametroinventariodefecto.getid_talla_producto());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(parametroinventariodefectoAux,parametroinventariodefectoLogic.getParametroInventarioDefectos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametroinventariodefectoAux,parametroinventariodefectos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.saveParametroInventarioDefectos();//WithConnection
						//parametroinventariodefectoLogic.getSetVersionRowParametroInventarioDefectos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.parametroinventariodefecto,parametroinventariodefectoAux);
					
					this.refrescarForeignKeysDescripcionesParametroInventarioDefecto();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametroinventariodefectoLogic.saveParametroInventarioDefectoRelaciones(parametroinventariodefectoAux);//WithConnection
								//parametroinventariodefectoLogic.getSetVersionRowParametroInventarioDefectos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.parametroinventariodefecto,parametroinventariodefectoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(parametroinventariodefectoAux,parametroinventariodefectoLogic.getParametroInventarioDefectos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(parametroinventariodefectoAux,parametroinventariodefectos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.parametroinventariodefecto,parametroinventariodefectoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				parametroinventariodefectoAux=new  ParametroInventarioDefecto();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado() 
					|| (this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado() && this.parametroinventariodefecto.getId()>=0)) {
						
					parametroinventariodefectoAux.setIsNew(false);
				}
				
				parametroinventariodefectoAux.setIsDeleted(false);
			
				parametroinventariodefectoAux.setId(this.parametroinventariodefecto.getId());	
				parametroinventariodefectoAux.setVersionRow(this.parametroinventariodefecto.getVersionRow());	
				parametroinventariodefectoAux.setid_empresa(this.parametroinventariodefecto.getid_empresa());	
				parametroinventariodefectoAux.setid_sucursal(this.parametroinventariodefecto.getid_sucursal());	
				parametroinventariodefectoAux.setid_grupo_bodega(this.parametroinventariodefecto.getid_grupo_bodega());	
				parametroinventariodefectoAux.setid_calidad_producto(this.parametroinventariodefecto.getid_calidad_producto());	
				parametroinventariodefectoAux.setid_tipo_servicio(this.parametroinventariodefecto.getid_tipo_servicio());	
				parametroinventariodefectoAux.setid_tipo_producto_servicio_inven(this.parametroinventariodefecto.getid_tipo_producto_servicio_inven());	
				parametroinventariodefectoAux.setid_tipo_producto_servicio(this.parametroinventariodefecto.getid_tipo_producto_servicio());	
				parametroinventariodefectoAux.setid_tipo_costeo(this.parametroinventariodefecto.getid_tipo_costeo());	
				parametroinventariodefectoAux.setid_tipo_producto(this.parametroinventariodefecto.getid_tipo_producto());	
				parametroinventariodefectoAux.setid_tipo_via_transporte(this.parametroinventariodefecto.getid_tipo_via_transporte());	
				parametroinventariodefectoAux.setid_rango_unidad_venta(this.parametroinventariodefecto.getid_rango_unidad_venta());	
				parametroinventariodefectoAux.setid_pais(this.parametroinventariodefecto.getid_pais());	
				parametroinventariodefectoAux.setid_ciudad(this.parametroinventariodefecto.getid_ciudad());	
				parametroinventariodefectoAux.setid_color_producto(this.parametroinventariodefecto.getid_color_producto());	
				parametroinventariodefectoAux.setid_clase_producto(this.parametroinventariodefecto.getid_clase_producto());	
				parametroinventariodefectoAux.setid_efecto_producto(this.parametroinventariodefecto.getid_efecto_producto());	
				parametroinventariodefectoAux.setid_marca_producto(this.parametroinventariodefecto.getid_marca_producto());	
				parametroinventariodefectoAux.setid_modelo_producto(this.parametroinventariodefecto.getid_modelo_producto());	
				parametroinventariodefectoAux.setid_material_producto(this.parametroinventariodefecto.getid_material_producto());	
				parametroinventariodefectoAux.setid_segmento_producto(this.parametroinventariodefecto.getid_segmento_producto());	
				parametroinventariodefectoAux.setid_talla_producto(this.parametroinventariodefecto.getid_talla_producto());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(parametroinventariodefectoAux,parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametroinventariodefectoAux,parametroinventariodefectos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.saveParametroInventarioDefectos();//WithConnection
						//parametroinventariodefectoLogic.getSetVersionRowParametroInventarioDefectos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.parametroinventariodefecto,parametroinventariodefectoAux);
					
					this.refrescarForeignKeysDescripcionesParametroInventarioDefecto();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametroinventariodefectoLogic.saveParametroInventarioDefectoRelaciones(parametroinventariodefectoAux);//WithConnection
								//parametroinventariodefectoLogic.getSetVersionRowParametroInventarioDefectos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.parametroinventariodefecto,parametroinventariodefectoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(parametroinventariodefectoAux,parametroinventariodefectoLogic.getParametroInventarioDefectos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(parametroinventariodefectoAux,parametroinventariodefectos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.parametroinventariodefecto,parametroinventariodefectoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				parametroinventariodefectoAux=new  ParametroInventarioDefecto();
				
				parametroinventariodefectoAux.setIsNew(false);
				parametroinventariodefectoAux.setIsChanged(false);
				
				parametroinventariodefectoAux.setIsDeleted(true);
				
				parametroinventariodefectoAux.setId(this.parametroinventariodefecto.getId());	
				parametroinventariodefectoAux.setVersionRow(this.parametroinventariodefecto.getVersionRow());	
				parametroinventariodefectoAux.setid_empresa(this.parametroinventariodefecto.getid_empresa());	
				parametroinventariodefectoAux.setid_sucursal(this.parametroinventariodefecto.getid_sucursal());	
				parametroinventariodefectoAux.setid_grupo_bodega(this.parametroinventariodefecto.getid_grupo_bodega());	
				parametroinventariodefectoAux.setid_calidad_producto(this.parametroinventariodefecto.getid_calidad_producto());	
				parametroinventariodefectoAux.setid_tipo_servicio(this.parametroinventariodefecto.getid_tipo_servicio());	
				parametroinventariodefectoAux.setid_tipo_producto_servicio_inven(this.parametroinventariodefecto.getid_tipo_producto_servicio_inven());	
				parametroinventariodefectoAux.setid_tipo_producto_servicio(this.parametroinventariodefecto.getid_tipo_producto_servicio());	
				parametroinventariodefectoAux.setid_tipo_costeo(this.parametroinventariodefecto.getid_tipo_costeo());	
				parametroinventariodefectoAux.setid_tipo_producto(this.parametroinventariodefecto.getid_tipo_producto());	
				parametroinventariodefectoAux.setid_tipo_via_transporte(this.parametroinventariodefecto.getid_tipo_via_transporte());	
				parametroinventariodefectoAux.setid_rango_unidad_venta(this.parametroinventariodefecto.getid_rango_unidad_venta());	
				parametroinventariodefectoAux.setid_pais(this.parametroinventariodefecto.getid_pais());	
				parametroinventariodefectoAux.setid_ciudad(this.parametroinventariodefecto.getid_ciudad());	
				parametroinventariodefectoAux.setid_color_producto(this.parametroinventariodefecto.getid_color_producto());	
				parametroinventariodefectoAux.setid_clase_producto(this.parametroinventariodefecto.getid_clase_producto());	
				parametroinventariodefectoAux.setid_efecto_producto(this.parametroinventariodefecto.getid_efecto_producto());	
				parametroinventariodefectoAux.setid_marca_producto(this.parametroinventariodefecto.getid_marca_producto());	
				parametroinventariodefectoAux.setid_modelo_producto(this.parametroinventariodefecto.getid_modelo_producto());	
				parametroinventariodefectoAux.setid_material_producto(this.parametroinventariodefecto.getid_material_producto());	
				parametroinventariodefectoAux.setid_segmento_producto(this.parametroinventariodefecto.getid_segmento_producto());	
				parametroinventariodefectoAux.setid_talla_producto(this.parametroinventariodefecto.getid_talla_producto());	
				
				if(this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.parametroinventariodefectoAux.getId()>=0) {	
						this.parametroinventariodefectosEliminados.add(parametroinventariodefectoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(parametroinventariodefectoAux,parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametroinventariodefectoAux,parametroinventariodefectos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.saveParametroInventarioDefectos();//WithConnection
						//parametroinventariodefectoLogic.getSetVersionRowParametroInventarioDefectos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametroinventariodefectoLogic.saveParametroInventarioDefectoRelaciones(parametroinventariodefectoAux);//WithConnection
								//parametroinventariodefectoLogic.getSetVersionRowParametroInventarioDefectos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(parametroinventariodefectoAux,parametroinventariodefectoLogic.getParametroInventarioDefectos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(parametroinventariodefectoAux,parametroinventariodefectos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(this.parametroinventariodefectosEliminados);
					
					parametroinventariodefectoLogic.saveParametroInventarioDefectos();//WithConnection
					//parametroinventariodefectoLogic.getSetVersionRowParametroInventarioDefectos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesParametroInventarioDefecto();
				
				this.parametroinventariodefectosEliminados= new ArrayList<ParametroInventarioDefecto>();		
			}
			
			if(this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Parametro Inventario Defecto GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.parametroinventariodefecto=parametroinventariodefectoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessParametroInventarioDefecto();
      	}
		
	}	
	
	public void actualizarRelaciones(ParametroInventarioDefecto parametroinventariodefectoLocal) throws Exception {
		
		if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(ParametroInventarioDefecto parametroinventariodefectoLocal) throws Exception {	
		if(this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				parametroinventariodefectoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				parametroinventariodefectoLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(GrupoBodegaDetalleFormJInternalFrame.class)) {
				GrupoBodegaBeanSwingJInternalFrame grupobodegaBeanSwingJInternalFrameLocal=(GrupoBodegaBeanSwingJInternalFrame) ((GrupoBodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				grupobodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoGrupoBodega(grupobodegaBeanSwingJInternalFrameLocal.getgrupobodega(),true);
				grupobodegaBeanSwingJInternalFrameLocal.actualizarLista(grupobodegaBeanSwingJInternalFrameLocal.grupobodega,this.grupobodegasForeignKey);

				grupobodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(grupobodegaBeanSwingJInternalFrameLocal.grupobodega);

				parametroinventariodefectoLocal.setGrupoBodega(grupobodegaBeanSwingJInternalFrameLocal.grupobodega);

				this.addItemDefectoCombosForeignKeyGrupoBodega();
				this.cargarCombosFrameGrupoBodegasForeignKey("Formulario");
				this.setActualGrupoBodegaForeignKey(grupobodegaBeanSwingJInternalFrameLocal.grupobodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CalidadProductoDetalleFormJInternalFrame.class)) {
				CalidadProductoBeanSwingJInternalFrame calidadproductoBeanSwingJInternalFrameLocal=(CalidadProductoBeanSwingJInternalFrame) ((CalidadProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				calidadproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCalidadProducto(calidadproductoBeanSwingJInternalFrameLocal.getcalidadproducto(),true);
				calidadproductoBeanSwingJInternalFrameLocal.actualizarLista(calidadproductoBeanSwingJInternalFrameLocal.calidadproducto,this.calidadproductosForeignKey);

				calidadproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(calidadproductoBeanSwingJInternalFrameLocal.calidadproducto);

				parametroinventariodefectoLocal.setCalidadProducto(calidadproductoBeanSwingJInternalFrameLocal.calidadproducto);

				this.addItemDefectoCombosForeignKeyCalidadProducto();
				this.cargarCombosFrameCalidadProductosForeignKey("Formulario");
				this.setActualCalidadProductoForeignKey(calidadproductoBeanSwingJInternalFrameLocal.calidadproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoServicioDetalleFormJInternalFrame.class)) {
				TipoServicioBeanSwingJInternalFrame tiposervicioBeanSwingJInternalFrameLocal=(TipoServicioBeanSwingJInternalFrame) ((TipoServicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiposervicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoServicio(tiposervicioBeanSwingJInternalFrameLocal.gettiposervicio(),true);
				tiposervicioBeanSwingJInternalFrameLocal.actualizarLista(tiposervicioBeanSwingJInternalFrameLocal.tiposervicio,this.tiposerviciosForeignKey);

				tiposervicioBeanSwingJInternalFrameLocal.actualizarRelaciones(tiposervicioBeanSwingJInternalFrameLocal.tiposervicio);

				parametroinventariodefectoLocal.setTipoServicio(tiposervicioBeanSwingJInternalFrameLocal.tiposervicio);

				this.addItemDefectoCombosForeignKeyTipoServicio();
				this.cargarCombosFrameTipoServiciosForeignKey("Formulario");
				this.setActualTipoServicioForeignKey(tiposervicioBeanSwingJInternalFrameLocal.tiposervicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoProductoServicioInvenDetalleFormJInternalFrame.class)) {
				TipoProductoServicioInvenBeanSwingJInternalFrame tipoproductoservicioinvenBeanSwingJInternalFrameLocal=(TipoProductoServicioInvenBeanSwingJInternalFrame) ((TipoProductoServicioInvenDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoproductoservicioinvenBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoProductoServicioInven(tipoproductoservicioinvenBeanSwingJInternalFrameLocal.gettipoproductoservicioinven(),true);
				tipoproductoservicioinvenBeanSwingJInternalFrameLocal.actualizarLista(tipoproductoservicioinvenBeanSwingJInternalFrameLocal.tipoproductoservicioinven,this.tipoproductoservicioinvensForeignKey);

				tipoproductoservicioinvenBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoproductoservicioinvenBeanSwingJInternalFrameLocal.tipoproductoservicioinven);

				parametroinventariodefectoLocal.setTipoProductoServicioInven(tipoproductoservicioinvenBeanSwingJInternalFrameLocal.tipoproductoservicioinven);

				this.addItemDefectoCombosForeignKeyTipoProductoServicioInven();
				this.cargarCombosFrameTipoProductoServicioInvensForeignKey("Formulario");
				this.setActualTipoProductoServicioInvenForeignKey(tipoproductoservicioinvenBeanSwingJInternalFrameLocal.tipoproductoservicioinven.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoProductoServicioDetalleFormJInternalFrame.class)) {
				TipoProductoServicioBeanSwingJInternalFrame tipoproductoservicioBeanSwingJInternalFrameLocal=(TipoProductoServicioBeanSwingJInternalFrame) ((TipoProductoServicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoproductoservicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoProductoServicio(tipoproductoservicioBeanSwingJInternalFrameLocal.gettipoproductoservicio(),true);
				tipoproductoservicioBeanSwingJInternalFrameLocal.actualizarLista(tipoproductoservicioBeanSwingJInternalFrameLocal.tipoproductoservicio,this.tipoproductoserviciosForeignKey);

				tipoproductoservicioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoproductoservicioBeanSwingJInternalFrameLocal.tipoproductoservicio);

				parametroinventariodefectoLocal.setTipoProductoServicio(tipoproductoservicioBeanSwingJInternalFrameLocal.tipoproductoservicio);

				this.addItemDefectoCombosForeignKeyTipoProductoServicio();
				this.cargarCombosFrameTipoProductoServiciosForeignKey("Formulario");
				this.setActualTipoProductoServicioForeignKey(tipoproductoservicioBeanSwingJInternalFrameLocal.tipoproductoservicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCosteoDetalleFormJInternalFrame.class)) {
				TipoCosteoBeanSwingJInternalFrame tipocosteoBeanSwingJInternalFrameLocal=(TipoCosteoBeanSwingJInternalFrame) ((TipoCosteoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocosteoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCosteo(tipocosteoBeanSwingJInternalFrameLocal.gettipocosteo(),true);
				tipocosteoBeanSwingJInternalFrameLocal.actualizarLista(tipocosteoBeanSwingJInternalFrameLocal.tipocosteo,this.tipocosteosForeignKey);

				tipocosteoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocosteoBeanSwingJInternalFrameLocal.tipocosteo);

				parametroinventariodefectoLocal.setTipoCosteo(tipocosteoBeanSwingJInternalFrameLocal.tipocosteo);

				this.addItemDefectoCombosForeignKeyTipoCosteo();
				this.cargarCombosFrameTipoCosteosForeignKey("Formulario");
				this.setActualTipoCosteoForeignKey(tipocosteoBeanSwingJInternalFrameLocal.tipocosteo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoProductoDetalleFormJInternalFrame.class)) {
				TipoProductoBeanSwingJInternalFrame tipoproductoBeanSwingJInternalFrameLocal=(TipoProductoBeanSwingJInternalFrame) ((TipoProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoProducto(tipoproductoBeanSwingJInternalFrameLocal.gettipoproducto(),true);
				tipoproductoBeanSwingJInternalFrameLocal.actualizarLista(tipoproductoBeanSwingJInternalFrameLocal.tipoproducto,this.tipoproductosForeignKey);

				tipoproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoproductoBeanSwingJInternalFrameLocal.tipoproducto);

				parametroinventariodefectoLocal.setTipoProducto(tipoproductoBeanSwingJInternalFrameLocal.tipoproducto);

				this.addItemDefectoCombosForeignKeyTipoProducto();
				this.cargarCombosFrameTipoProductosForeignKey("Formulario");
				this.setActualTipoProductoForeignKey(tipoproductoBeanSwingJInternalFrameLocal.tipoproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoViaTransporteDetalleFormJInternalFrame.class)) {
				TipoViaTransporteBeanSwingJInternalFrame tipoviatransporteBeanSwingJInternalFrameLocal=(TipoViaTransporteBeanSwingJInternalFrame) ((TipoViaTransporteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoviatransporteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoViaTransporte(tipoviatransporteBeanSwingJInternalFrameLocal.gettipoviatransporte(),true);
				tipoviatransporteBeanSwingJInternalFrameLocal.actualizarLista(tipoviatransporteBeanSwingJInternalFrameLocal.tipoviatransporte,this.tipoviatransportesForeignKey);

				tipoviatransporteBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoviatransporteBeanSwingJInternalFrameLocal.tipoviatransporte);

				parametroinventariodefectoLocal.setTipoViaTransporte(tipoviatransporteBeanSwingJInternalFrameLocal.tipoviatransporte);

				this.addItemDefectoCombosForeignKeyTipoViaTransporte();
				this.cargarCombosFrameTipoViaTransportesForeignKey("Formulario");
				this.setActualTipoViaTransporteForeignKey(tipoviatransporteBeanSwingJInternalFrameLocal.tipoviatransporte.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(RangoUnidadVentaDetalleFormJInternalFrame.class)) {
				RangoUnidadVentaBeanSwingJInternalFrame rangounidadventaBeanSwingJInternalFrameLocal=(RangoUnidadVentaBeanSwingJInternalFrame) ((RangoUnidadVentaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				rangounidadventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoRangoUnidadVenta(rangounidadventaBeanSwingJInternalFrameLocal.getrangounidadventa(),true);
				rangounidadventaBeanSwingJInternalFrameLocal.actualizarLista(rangounidadventaBeanSwingJInternalFrameLocal.rangounidadventa,this.rangounidadventasForeignKey);

				rangounidadventaBeanSwingJInternalFrameLocal.actualizarRelaciones(rangounidadventaBeanSwingJInternalFrameLocal.rangounidadventa);

				parametroinventariodefectoLocal.setRangoUnidadVenta(rangounidadventaBeanSwingJInternalFrameLocal.rangounidadventa);

				this.addItemDefectoCombosForeignKeyRangoUnidadVenta();
				this.cargarCombosFrameRangoUnidadVentasForeignKey("Formulario");
				this.setActualRangoUnidadVentaForeignKey(rangounidadventaBeanSwingJInternalFrameLocal.rangounidadventa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PaisDetalleFormJInternalFrame.class)) {
				PaisBeanSwingJInternalFrame paisBeanSwingJInternalFrameLocal=(PaisBeanSwingJInternalFrame) ((PaisDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				paisBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPais(paisBeanSwingJInternalFrameLocal.getpais(),true);
				paisBeanSwingJInternalFrameLocal.actualizarLista(paisBeanSwingJInternalFrameLocal.pais,this.paissForeignKey);

				paisBeanSwingJInternalFrameLocal.actualizarRelaciones(paisBeanSwingJInternalFrameLocal.pais);

				parametroinventariodefectoLocal.setPais(paisBeanSwingJInternalFrameLocal.pais);

				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey("Formulario");
				this.setActualPaisForeignKey(paisBeanSwingJInternalFrameLocal.pais.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CiudadDetalleFormJInternalFrame.class)) {
				CiudadBeanSwingJInternalFrame ciudadBeanSwingJInternalFrameLocal=(CiudadBeanSwingJInternalFrame) ((CiudadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ciudadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCiudad(ciudadBeanSwingJInternalFrameLocal.getciudad(),true);
				ciudadBeanSwingJInternalFrameLocal.actualizarLista(ciudadBeanSwingJInternalFrameLocal.ciudad,this.ciudadsForeignKey);

				ciudadBeanSwingJInternalFrameLocal.actualizarRelaciones(ciudadBeanSwingJInternalFrameLocal.ciudad);

				parametroinventariodefectoLocal.setCiudad(ciudadBeanSwingJInternalFrameLocal.ciudad);

				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey("Formulario");
				this.setActualCiudadForeignKey(ciudadBeanSwingJInternalFrameLocal.ciudad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ColorProductoDetalleFormJInternalFrame.class)) {
				ColorProductoBeanSwingJInternalFrame colorproductoBeanSwingJInternalFrameLocal=(ColorProductoBeanSwingJInternalFrame) ((ColorProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				colorproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoColorProducto(colorproductoBeanSwingJInternalFrameLocal.getcolorproducto(),true);
				colorproductoBeanSwingJInternalFrameLocal.actualizarLista(colorproductoBeanSwingJInternalFrameLocal.colorproducto,this.colorproductosForeignKey);

				colorproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(colorproductoBeanSwingJInternalFrameLocal.colorproducto);

				parametroinventariodefectoLocal.setColorProducto(colorproductoBeanSwingJInternalFrameLocal.colorproducto);

				this.addItemDefectoCombosForeignKeyColorProducto();
				this.cargarCombosFrameColorProductosForeignKey("Formulario");
				this.setActualColorProductoForeignKey(colorproductoBeanSwingJInternalFrameLocal.colorproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClaseProductoDetalleFormJInternalFrame.class)) {
				ClaseProductoBeanSwingJInternalFrame claseproductoBeanSwingJInternalFrameLocal=(ClaseProductoBeanSwingJInternalFrame) ((ClaseProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				claseproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoClaseProducto(claseproductoBeanSwingJInternalFrameLocal.getclaseproducto(),true);
				claseproductoBeanSwingJInternalFrameLocal.actualizarLista(claseproductoBeanSwingJInternalFrameLocal.claseproducto,this.claseproductosForeignKey);

				claseproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(claseproductoBeanSwingJInternalFrameLocal.claseproducto);

				parametroinventariodefectoLocal.setClaseProducto(claseproductoBeanSwingJInternalFrameLocal.claseproducto);

				this.addItemDefectoCombosForeignKeyClaseProducto();
				this.cargarCombosFrameClaseProductosForeignKey("Formulario");
				this.setActualClaseProductoForeignKey(claseproductoBeanSwingJInternalFrameLocal.claseproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EfectoProductoDetalleFormJInternalFrame.class)) {
				EfectoProductoBeanSwingJInternalFrame efectoproductoBeanSwingJInternalFrameLocal=(EfectoProductoBeanSwingJInternalFrame) ((EfectoProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				efectoproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEfectoProducto(efectoproductoBeanSwingJInternalFrameLocal.getefectoproducto(),true);
				efectoproductoBeanSwingJInternalFrameLocal.actualizarLista(efectoproductoBeanSwingJInternalFrameLocal.efectoproducto,this.efectoproductosForeignKey);

				efectoproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(efectoproductoBeanSwingJInternalFrameLocal.efectoproducto);

				parametroinventariodefectoLocal.setEfectoProducto(efectoproductoBeanSwingJInternalFrameLocal.efectoproducto);

				this.addItemDefectoCombosForeignKeyEfectoProducto();
				this.cargarCombosFrameEfectoProductosForeignKey("Formulario");
				this.setActualEfectoProductoForeignKey(efectoproductoBeanSwingJInternalFrameLocal.efectoproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MarcaProductoDetalleFormJInternalFrame.class)) {
				MarcaProductoBeanSwingJInternalFrame marcaproductoBeanSwingJInternalFrameLocal=(MarcaProductoBeanSwingJInternalFrame) ((MarcaProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				marcaproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMarcaProducto(marcaproductoBeanSwingJInternalFrameLocal.getmarcaproducto(),true);
				marcaproductoBeanSwingJInternalFrameLocal.actualizarLista(marcaproductoBeanSwingJInternalFrameLocal.marcaproducto,this.marcaproductosForeignKey);

				marcaproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(marcaproductoBeanSwingJInternalFrameLocal.marcaproducto);

				parametroinventariodefectoLocal.setMarcaProducto(marcaproductoBeanSwingJInternalFrameLocal.marcaproducto);

				this.addItemDefectoCombosForeignKeyMarcaProducto();
				this.cargarCombosFrameMarcaProductosForeignKey("Formulario");
				this.setActualMarcaProductoForeignKey(marcaproductoBeanSwingJInternalFrameLocal.marcaproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModeloProductoDetalleFormJInternalFrame.class)) {
				ModeloProductoBeanSwingJInternalFrame modeloproductoBeanSwingJInternalFrameLocal=(ModeloProductoBeanSwingJInternalFrame) ((ModeloProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				modeloproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModeloProducto(modeloproductoBeanSwingJInternalFrameLocal.getmodeloproducto(),true);
				modeloproductoBeanSwingJInternalFrameLocal.actualizarLista(modeloproductoBeanSwingJInternalFrameLocal.modeloproducto,this.modeloproductosForeignKey);

				modeloproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(modeloproductoBeanSwingJInternalFrameLocal.modeloproducto);

				parametroinventariodefectoLocal.setModeloProducto(modeloproductoBeanSwingJInternalFrameLocal.modeloproducto);

				this.addItemDefectoCombosForeignKeyModeloProducto();
				this.cargarCombosFrameModeloProductosForeignKey("Formulario");
				this.setActualModeloProductoForeignKey(modeloproductoBeanSwingJInternalFrameLocal.modeloproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MaterialProductoDetalleFormJInternalFrame.class)) {
				MaterialProductoBeanSwingJInternalFrame materialproductoBeanSwingJInternalFrameLocal=(MaterialProductoBeanSwingJInternalFrame) ((MaterialProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				materialproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMaterialProducto(materialproductoBeanSwingJInternalFrameLocal.getmaterialproducto(),true);
				materialproductoBeanSwingJInternalFrameLocal.actualizarLista(materialproductoBeanSwingJInternalFrameLocal.materialproducto,this.materialproductosForeignKey);

				materialproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(materialproductoBeanSwingJInternalFrameLocal.materialproducto);

				parametroinventariodefectoLocal.setMaterialProducto(materialproductoBeanSwingJInternalFrameLocal.materialproducto);

				this.addItemDefectoCombosForeignKeyMaterialProducto();
				this.cargarCombosFrameMaterialProductosForeignKey("Formulario");
				this.setActualMaterialProductoForeignKey(materialproductoBeanSwingJInternalFrameLocal.materialproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SegmentoProductoDetalleFormJInternalFrame.class)) {
				SegmentoProductoBeanSwingJInternalFrame segmentoproductoBeanSwingJInternalFrameLocal=(SegmentoProductoBeanSwingJInternalFrame) ((SegmentoProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				segmentoproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSegmentoProducto(segmentoproductoBeanSwingJInternalFrameLocal.getsegmentoproducto(),true);
				segmentoproductoBeanSwingJInternalFrameLocal.actualizarLista(segmentoproductoBeanSwingJInternalFrameLocal.segmentoproducto,this.segmentoproductosForeignKey);

				segmentoproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(segmentoproductoBeanSwingJInternalFrameLocal.segmentoproducto);

				parametroinventariodefectoLocal.setSegmentoProducto(segmentoproductoBeanSwingJInternalFrameLocal.segmentoproducto);

				this.addItemDefectoCombosForeignKeySegmentoProducto();
				this.cargarCombosFrameSegmentoProductosForeignKey("Formulario");
				this.setActualSegmentoProductoForeignKey(segmentoproductoBeanSwingJInternalFrameLocal.segmentoproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TallaProductoDetalleFormJInternalFrame.class)) {
				TallaProductoBeanSwingJInternalFrame tallaproductoBeanSwingJInternalFrameLocal=(TallaProductoBeanSwingJInternalFrame) ((TallaProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tallaproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTallaProducto(tallaproductoBeanSwingJInternalFrameLocal.gettallaproducto(),true);
				tallaproductoBeanSwingJInternalFrameLocal.actualizarLista(tallaproductoBeanSwingJInternalFrameLocal.tallaproducto,this.tallaproductosForeignKey);

				tallaproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(tallaproductoBeanSwingJInternalFrameLocal.tallaproducto);

				parametroinventariodefectoLocal.setTallaProducto(tallaproductoBeanSwingJInternalFrameLocal.tallaproducto);

				this.addItemDefectoCombosForeignKeyTallaProducto();
				this.cargarCombosFrameTallaProductosForeignKey("Formulario");
				this.setActualTallaProductoForeignKey(tallaproductoBeanSwingJInternalFrameLocal.tallaproducto.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarParametroInventarioDefectoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = parametroinventariodefectoValidator.getInvalidValues(this.parametroinventariodefecto);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(ParametroInventarioDefecto parametroinventariodefecto,List<ParametroInventarioDefecto> parametroinventariodefectos) throws Exception {
		try	{		
			ParametroInventarioDefectoConstantesFunciones.actualizarLista(parametroinventariodefecto,parametroinventariodefectos,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(ParametroInventarioDefecto parametroinventariodefecto,List<ParametroInventarioDefecto> parametroinventariodefectos) throws Exception {
		try	{			
			ParametroInventarioDefectoConstantesFunciones.actualizarSelectedLista(parametroinventariodefecto,parametroinventariodefectos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<ParametroInventarioDefecto> parametroinventariodefectosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				parametroinventariodefectosLocal=this.parametroinventariodefectoLogic.getParametroInventarioDefectos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				parametroinventariodefectosLocal=this.parametroinventariodefectos;
			}
			//ARCHITECTURE
		
			for(ParametroInventarioDefecto parametroinventariodefectoLocal:parametroinventariodefectosLocal) {
				if(this.permiteMantenimiento(parametroinventariodefectoLocal) && parametroinventariodefectoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ParametroInventarioDefectoConstantesFunciones.getParametroInventarioDefectoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_empresaParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_sucursalParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDGRUPOBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_grupo_bodegaParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDCALIDADPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_calidad_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDTIPOSERVICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_servicioParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDTIPOPRODUCTOSERVICIOINVEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_producto_servicio_invenParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDTIPOPRODUCTOSERVICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_producto_servicioParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDTIPOCOSTEO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_costeoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDTIPOPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDTIPOVIATRANSPORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_via_transporteParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDRANGOUNIDADVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_rango_unidad_ventaParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDPAIS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_paisParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDCIUDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_ciudadParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDCOLORPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_color_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDCLASEPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_clase_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDEFECTOPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_efecto_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDMARCAPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_marca_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDMODELOPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_modelo_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDMATERIALPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_material_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDSEGMENTOPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_segmento_productoParametroInventarioDefecto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroInventarioDefectoConstantesFunciones.IDTALLAPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_talla_productoParametroInventarioDefecto,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_empresaParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_sucursalParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_grupo_bodegaParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_calidad_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_servicioParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_producto_servicio_invenParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_producto_servicioParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_costeoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_tipo_via_transporteParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_rango_unidad_ventaParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_paisParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_ciudadParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_color_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_clase_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_efecto_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_marca_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_modelo_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_material_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_segmento_productoParametroInventarioDefecto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelid_talla_productoParametroInventarioDefecto,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoParametroInventarioDefecto--;	
		
		
		this.parametroinventariodefectoAux=new ParametroInventarioDefecto();
		
		this.parametroinventariodefectoAux.setId(this.iIdNuevoParametroInventarioDefecto);
		this.parametroinventariodefectoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.parametroinventariodefectoLogic.getParametroInventarioDefectos().add(this.parametroinventariodefectoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.parametroinventariodefectos.add(this.parametroinventariodefectoAux);
		}
		//ARCHITECTURE
		
		this.parametroinventariodefecto=this.parametroinventariodefectoAux;
		
		if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioParametroInventarioDefecto(this.parametroinventariodefecto);
			this.setVariablesObjetoActualToFormularioForeignKeyParametroInventarioDefecto(this.parametroinventariodefecto);
		}
				
		//this.setDefaultControlesParametroInventarioDefecto();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyParametroInventarioDefecto();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyParametroInventarioDefecto();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyParametroInventarioDefecto();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualParametroInventarioDefecto(this.parametroinventariodefectoBean,this.parametroinventariodefecto,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
			classes=ParametroInventarioDefectoConstantesFunciones.getClassesRelationshipsOfParametroInventarioDefecto(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.parametroinventariodefectoReturnGeneral=parametroinventariodefectoLogic.procesarEventosParametroInventarioDefectosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametroinventariodefectoLogic.getParametroInventarioDefectos(),this.parametroinventariodefecto,this.parametroinventariodefectoParameterGeneral,this.isEsNuevoParametroInventarioDefecto,classes);//this.parametroinventariodefectoLogic.getParametroInventarioDefecto()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral,this.parametroinventariodefectoBean,false);
		
		if(this.parametroinventariodefectoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto());
		}
		
		if(this.parametroinventariodefectoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto(),classes);//this.parametroinventariodefectoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyParametroInventarioDefecto();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyParametroInventarioDefecto();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.RecargarFormParametroInventarioDefecto(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingParametroInventarioDefecto(false);
						
			if(parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroInventarioDefecto();
			}
			
			this.actualizarVisualTableDatosParametroInventarioDefecto();
			
			this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(this.getIndiceNuevoParametroInventarioDefecto(), this.getIndiceNuevoParametroInventarioDefecto());
			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
						
			this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesParametroInventarioDefecto(Boolean isHabilitar) throws Exception {
			
		//
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_empresaParametroInventarioDefecto);//
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_sucursalParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_grupo_bodegaParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_calidad_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_tipo_servicioParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_tipo_producto_servicio_invenParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_tipo_producto_servicioParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_tipo_costeoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_tipo_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_tipo_via_transporteParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_rango_unidad_ventaParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_paisParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_ciudadParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_color_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_clase_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_efecto_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_marca_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_modelo_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_material_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_segmento_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setEnabled(isHabilitar && this.parametroinventariodefectoConstantesFunciones.activarid_talla_productoParametroInventarioDefecto);
	};
	
	public void setDefaultControlesParametroInventarioDefecto() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoParametroInventarioDefecto(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.parametroinventariodefectoSessionBean.setConGuardarRelaciones(true);			
			this.parametroinventariodefectoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.setVisible(true);
			
					
		} else {
			//this.parametroinventariodefectoSessionBean.setConGuardarRelaciones(false);			
			this.parametroinventariodefectoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoParametroInventarioDefecto() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
				if(parametroinventariodefectoAux.getId().equals(this.iIdNuevoParametroInventarioDefecto)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectos) {
				if(parametroinventariodefectoAux.getId().equals(this.iIdNuevoParametroInventarioDefecto)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
				if(parametroinventariodefectoAux.getId().equals(parametroinventariodefecto.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectos) {
				if(parametroinventariodefectoAux.getId().equals(parametroinventariodefecto.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefectoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
				if(parametroinventariodefectoAux.getParametroInventarioDefectoOriginal().getId().equals(parametroinventariodefectoOriginal.getId())) {
					existe=true;
					parametroinventariodefectoOriginal.setId(parametroinventariodefectoAux.getId());
					parametroinventariodefectoOriginal.setVersionRow(parametroinventariodefectoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectos) {
				if(parametroinventariodefectoAux.getParametroInventarioDefectoOriginal().getId().equals(parametroinventariodefectoOriginal.getId())) {
					existe=true;
					parametroinventariodefectoOriginal.setId(parametroinventariodefectoAux.getId());
					parametroinventariodefectoOriginal.setVersionRow(parametroinventariodefectoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosParametroInventarioDefecto(Boolean esParaCancelar) throws Exception {
		parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
		parametroinventariodefectoAux=new ParametroInventarioDefecto();
		
		if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
					if(parametroinventariodefectoAux.getId()<0) {
						parametroinventariodefectosAux.add(parametroinventariodefectoAux);
					}		
				}
				this.iIdNuevoParametroInventarioDefecto=0L;
				this.parametroinventariodefectoLogic.getParametroInventarioDefectos().removeAll(parametroinventariodefectosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectos) {
					if(parametroinventariodefectoAux.getId()<0) {
						parametroinventariodefectosAux.add(parametroinventariodefectoAux);
					}		
				}
				this.iIdNuevoParametroInventarioDefecto=0L;
				this.parametroinventariodefectos.removeAll(parametroinventariodefectosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoParametroInventarioDefecto 
					&& this.parametroinventariodefectoLogic.getParametroInventarioDefectos().size()>0
					) {
					parametroinventariodefectoAux=this.parametroinventariodefectoLogic.getParametroInventarioDefectos().get(this.parametroinventariodefectoLogic.getParametroInventarioDefectos().size() - 1);
				
					if(parametroinventariodefectoAux.getId()<0) {
						this.parametroinventariodefectoLogic.getParametroInventarioDefectos().remove(parametroinventariodefectoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoParametroInventarioDefecto && this.parametroinventariodefectos.size()>0) {
					parametroinventariodefectoAux=this.parametroinventariodefectos.get(this.parametroinventariodefectos.size() - 1);
				
					if(parametroinventariodefectoAux.getId()<0) {
						this.parametroinventariodefectos.remove(parametroinventariodefectoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoParametroInventarioDefecto(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(parametroinventariodefecto.getId()<0) {
				this.parametroinventariodefectoLogic.getParametroInventarioDefectos().remove(this.parametroinventariodefecto);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(parametroinventariodefecto.getId()<0) {
				this.parametroinventariodefectos.remove(this.parametroinventariodefecto);
			}
		}			
	}
	
	public void setEstadosInicialesParametroInventarioDefecto(List<ParametroInventarioDefecto> parametroinventariodefectosAux) throws Exception {
		ParametroInventarioDefectoConstantesFunciones.setEstadosInicialesParametroInventarioDefecto(parametroinventariodefectosAux);
	}
	
	public void setEstadosInicialesParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefectoAux) throws Exception {
		ParametroInventarioDefectoConstantesFunciones.setEstadosInicialesParametroInventarioDefecto(parametroinventariodefectoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarParametroInventarioDefectoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarParametroInventarioDefectoActual()) {
				if(!this.isEsNuevoParametroInventarioDefecto) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoParametroInventarioDefecto=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarParametroInventarioDefectoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Parametro Inventario Defecto ?", "MANTENIMIENTO DE Parametro Inventario Defecto", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(ParametroInventarioDefecto parametroinventariodefecto) throws Exception {
		ParametroInventarioDefectoConstantesFunciones.seleccionarAsignar(this.parametroinventariodefecto,parametroinventariodefecto);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarParametroInventarioDefecto=this.isPermisoActualizarOriginalParametroInventarioDefecto;
			
			
			this.seleccionarAsignar(parametroinventariodefecto);
			
			
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ParametroInventarioDefectoConstantesFunciones.quitarEspaciosParametroInventarioDefecto(this.parametroinventariodefecto,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.parametroinventariodefectoSessionBean.setsFuncionBusquedaRapida(this.parametroinventariodefectoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoParametroInventarioDefecto) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosParametroInventarioDefecto(esParaCancelar);				
				this.cancelarNuevoParametroInventarioDefecto(esParaCancelar);								
			}
			
			this.parametroinventariodefecto=new ParametroInventarioDefecto();
			
			this.inicializarParametroInventarioDefecto();
			
			this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarParametroInventarioDefecto() throws Exception {
		try {
			ParametroInventarioDefectoConstantesFunciones.inicializarParametroInventarioDefecto(this.parametroinventariodefecto);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.parametroinventariodefectoLogic.getParametroInventarioDefectos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteParametroInventarioDefectos(String sAccionBusqueda,List<ParametroInventarioDefecto> parametroinventariodefectosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="ParametroInventarioDefecto"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ParametroInventarioDefectoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ParametroInventarioDefectoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="ParametroInventarioDefecto"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Parametro Inventario Defectos");		
		parameters.put("busquedapor", ParametroInventarioDefectoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceParametroInventarioDefecto=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ParametroInventarioDefectoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ParametroInventarioDefectoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceParametroInventarioDefecto=new JRBeanArrayDataSource(ParametroInventarioDefectoJInternalFrame.TraerParametroInventarioDefectoBeans(parametroinventariodefectosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceParametroInventarioDefecto);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ParametroInventarioDefectoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ParametroInventarioDefectoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ParametroInventarioDefectoBean.TraerParametroInventarioDefectoBeans(parametroinventariodefectosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteParametroInventarioDefectos(sAccionBusqueda,sTipoArchivoReporte,parametroinventariodefectosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalParametroInventarioDefectos(sAccionBusqueda,sTipoArchivoReporte,parametroinventariodefectosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoParametroInventarioDefectoActionPerformed(null);
					//this.generarExcelReporteParametroInventarioDefectos(sAccionBusqueda,sTipoArchivoReporte,parametroinventariodefectosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalParametroInventarioDefectos(sAccionBusqueda,sTipoArchivoReporte,parametroinventariodefectosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesParametroInventarioDefectos(sAccionBusqueda,sTipoArchivoReporte,parametroinventariodefectosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesParametroInventarioDefectos(sAccionBusqueda,sTipoArchivoReporte,parametroinventariodefectosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteParametroInventarioDefectos(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroInventarioDefecto> parametroinventariodefectosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroinventariodefecto";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroInventarioDefectos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderParametroInventarioDefecto("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(ParametroInventarioDefecto parametroinventariodefecto : parametroinventariodefectosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ParametroInventarioDefectoConstantesFunciones.generarExcelReporteDataParametroInventarioDefecto("NORMAL",row,workbook,parametroinventariodefecto,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderParametroInventarioDefecto(String sTipo,Row row,Workbook workbook) {
		
		ParametroInventarioDefectoConstantesFunciones.generarExcelReporteHeaderParametroInventarioDefecto(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalParametroInventarioDefectos(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroInventarioDefecto> parametroinventariodefectosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroinventariodefecto_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroInventarioDefectos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(ParametroInventarioDefecto parametroinventariodefecto : parametroinventariodefectosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.getParametroInventarioDefectoDescripcion(parametroinventariodefecto));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getgrupobodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getcalidadproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.gettiposervicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.gettipoproductoservicioinven_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.gettipoproductoservicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.gettipocosteo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.gettipoproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.gettipoviatransporte_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getrangounidadventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getpais_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getciudad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getcolorproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getclaseproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getefectoproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getmarcaproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getmodeloproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getmaterialproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.getsegmentoproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroinventariodefecto.gettallaproducto_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesParametroInventarioDefectos(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroInventarioDefecto> parametroinventariodefectosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<ParametroInventarioDefecto> parametroinventariodefectosRespaldo=null;
		
		classes=ParametroInventarioDefectoConstantesFunciones.getClassesRelationshipsOfParametroInventarioDefecto(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.parametroinventariodefectoLogic.setDatosCliente(this.datosCliente);
		this.parametroinventariodefectoLogic.setDatosDeep(this.datosDeep);
		this.parametroinventariodefectoLogic.setIsConDeep(true);
		
		parametroinventariodefectosRespaldo=this.parametroinventariodefectoLogic.getParametroInventarioDefectos();
		
		this.parametroinventariodefectoLogic.setParametroInventarioDefectos(parametroinventariodefectosParaReportes);	
		this.parametroinventariodefectoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		parametroinventariodefectosParaReportes=this.parametroinventariodefectoLogic.getParametroInventarioDefectos();
		this.parametroinventariodefectoLogic.setParametroInventarioDefectos(parametroinventariodefectosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroinventariodefecto_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroInventarioDefectos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderParametroInventarioDefecto("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(ParametroInventarioDefecto parametroinventariodefecto : parametroinventariodefectosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderParametroInventarioDefecto("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ParametroInventarioDefectoConstantesFunciones.generarExcelReporteDataParametroInventarioDefecto("NORMAL",row,workbook,parametroinventariodefecto,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.getParametroInventarioDefectoDescripcion(parametroinventariodefecto));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessParametroInventarioDefecto() throws Exception {		
		this.startProcessParametroInventarioDefecto(true);
	}
	
	public void startProcessParametroInventarioDefecto(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasParametroInventarioDefecto ,this.jPanelParametrosReportesParametroInventarioDefecto, this.jScrollPanelDatosParametroInventarioDefecto,this.jPanelPaginacionParametroInventarioDefecto, this.jScrollPanelDatosEdicionParametroInventarioDefecto, this.jPanelAccionesParametroInventarioDefecto,this.jPanelAccionesFormularioParametroInventarioDefecto,this.jmenuBarParametroInventarioDefecto,this.jmenuBarDetalleParametroInventarioDefecto,this.jTtoolBarParametroInventarioDefecto,this.jTtoolBarDetalleParametroInventarioDefecto);		
		
		final JTabbedPane jTabbedPaneBusquedasParametroInventarioDefecto=this.jTabbedPaneBusquedasParametroInventarioDefecto; 
		
		final JPanel jPanelParametrosReportesParametroInventarioDefecto=this.jPanelParametrosReportesParametroInventarioDefecto;
		//final JScrollPane jScrollPanelDatosParametroInventarioDefecto=this.jScrollPanelDatosParametroInventarioDefecto;
		final JTable jTableDatosParametroInventarioDefecto=this.jTableDatosParametroInventarioDefecto;		
		final JPanel jPanelPaginacionParametroInventarioDefecto=this.jPanelPaginacionParametroInventarioDefecto;
		//final JScrollPane jScrollPanelDatosEdicionParametroInventarioDefecto=this.jScrollPanelDatosEdicionParametroInventarioDefecto;
		final JPanel jPanelAccionesParametroInventarioDefecto=this.jPanelAccionesParametroInventarioDefecto;
		
		JPanel jPanelCamposAuxiliarParametroInventarioDefecto=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarParametroInventarioDefecto=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			jPanelCamposAuxiliarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelCamposParametroInventarioDefecto;
			jPanelAccionesFormularioAuxiliarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelAccionesFormularioParametroInventarioDefecto;
		}
		
		final JPanel jPanelCamposParametroInventarioDefecto=jPanelCamposAuxiliarParametroInventarioDefecto;
		final JPanel jPanelAccionesFormularioParametroInventarioDefecto=jPanelAccionesFormularioAuxiliarParametroInventarioDefecto;
		
		
		final JMenuBar jmenuBarParametroInventarioDefecto=this.jmenuBarParametroInventarioDefecto;
		final JToolBar jTtoolBarParametroInventarioDefecto=this.jTtoolBarParametroInventarioDefecto;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarParametroInventarioDefecto=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarParametroInventarioDefecto=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			jmenuBarDetalleAuxiliarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jmenuBarDetalleParametroInventarioDefecto;
			jTtoolBarDetalleAuxiliarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jTtoolBarDetalleParametroInventarioDefecto;
		}
		
		final JMenuBar jmenuBarDetalleParametroInventarioDefecto=jmenuBarDetalleAuxiliarParametroInventarioDefecto;
		final JToolBar jTtoolBarDetalleParametroInventarioDefecto=jTtoolBarDetalleAuxiliarParametroInventarioDefecto;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasParametroInventarioDefecto;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesParametroInventarioDefecto;
			processRunnable.jTableDatos=jTableDatosParametroInventarioDefecto;
			processRunnable.jPanelCampos=jPanelCamposParametroInventarioDefecto;
			processRunnable.jPanelPaginacion=jPanelPaginacionParametroInventarioDefecto;
			processRunnable.jPanelAcciones=jPanelAccionesParametroInventarioDefecto;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioParametroInventarioDefecto;
			
			
			processRunnable.jmenuBar=jmenuBarParametroInventarioDefecto;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleParametroInventarioDefecto;
			processRunnable.jTtoolBar=jTtoolBarParametroInventarioDefecto;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleParametroInventarioDefecto;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasParametroInventarioDefecto ,jPanelParametrosReportesParametroInventarioDefecto,jTableDatosParametroInventarioDefecto, /*jScrollPanelDatosParametroInventarioDefecto,*/jPanelCamposParametroInventarioDefecto,jPanelPaginacionParametroInventarioDefecto, /*jScrollPanelDatosEdicionParametroInventarioDefecto,*/ jPanelAccionesParametroInventarioDefecto,jPanelAccionesFormularioParametroInventarioDefecto,jmenuBarParametroInventarioDefecto,jmenuBarDetalleParametroInventarioDefecto,jTtoolBarParametroInventarioDefecto,jTtoolBarDetalleParametroInventarioDefecto);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasParametroInventarioDefecto ,jPanelParametrosReportesParametroInventarioDefecto, jScrollPanelDatosParametroInventarioDefecto,jPanelPaginacionParametroInventarioDefecto, jScrollPanelDatosEdicionParametroInventarioDefecto, jPanelAccionesParametroInventarioDefecto,jPanelAccionesFormularioParametroInventarioDefecto,jmenuBarParametroInventarioDefecto,jmenuBarDetalleParametroInventarioDefecto,jTtoolBarParametroInventarioDefecto,jTtoolBarDetalleParametroInventarioDefecto);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessParametroInventarioDefecto() {// throws Exception 
		this.finishProcessParametroInventarioDefecto(true);
	}
	
	public void finishProcessParametroInventarioDefecto(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasParametroInventarioDefecto ,this.jPanelParametrosReportesParametroInventarioDefecto, this.jScrollPanelDatosParametroInventarioDefecto,this.jPanelPaginacionParametroInventarioDefecto, this.jScrollPanelDatosEdicionParametroInventarioDefecto, this.jPanelAccionesParametroInventarioDefecto,this.jPanelAccionesFormularioParametroInventarioDefecto,this.jmenuBarParametroInventarioDefecto,this.jmenuBarDetalleParametroInventarioDefecto,this.jTtoolBarParametroInventarioDefecto,this.jTtoolBarDetalleParametroInventarioDefecto);		
		
		final JTabbedPane jTabbedPaneBusquedasParametroInventarioDefecto=this.jTabbedPaneBusquedasParametroInventarioDefecto; 
		
		final JPanel jPanelParametrosReportesParametroInventarioDefecto=this.jPanelParametrosReportesParametroInventarioDefecto;
		//final JScrollPane jScrollPanelDatosParametroInventarioDefecto=this.jScrollPanelDatosParametroInventarioDefecto;
		final JTable jTableDatosParametroInventarioDefecto=this.jTableDatosParametroInventarioDefecto;		
		final JPanel jPanelPaginacionParametroInventarioDefecto=this.jPanelPaginacionParametroInventarioDefecto;
		//final JScrollPane jScrollPanelDatosEdicionParametroInventarioDefecto=this.jScrollPanelDatosEdicionParametroInventarioDefecto;
		final JPanel jPanelAccionesParametroInventarioDefecto=this.jPanelAccionesParametroInventarioDefecto;
		
		JPanel jPanelCamposAuxiliarParametroInventarioDefecto=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarParametroInventarioDefecto=new JPanel();
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			jPanelCamposAuxiliarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelCamposParametroInventarioDefecto;
			jPanelAccionesFormularioAuxiliarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelAccionesFormularioParametroInventarioDefecto;
		}
		
		final JPanel jPanelCamposParametroInventarioDefecto=jPanelCamposAuxiliarParametroInventarioDefecto;
		final JPanel jPanelAccionesFormularioParametroInventarioDefecto=jPanelAccionesFormularioAuxiliarParametroInventarioDefecto;
		
		
		final JMenuBar jmenuBarParametroInventarioDefecto=this.jmenuBarParametroInventarioDefecto;		
		final JToolBar jTtoolBarParametroInventarioDefecto=this.jTtoolBarParametroInventarioDefecto;
				
		JMenuBar jmenuBarDetalleAuxiliarParametroInventarioDefecto=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarParametroInventarioDefecto=new JToolBar();
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			jmenuBarDetalleAuxiliarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jmenuBarDetalleParametroInventarioDefecto;
			jTtoolBarDetalleAuxiliarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jTtoolBarDetalleParametroInventarioDefecto;		
		}
		
		final JMenuBar jmenuBarDetalleParametroInventarioDefecto=jmenuBarDetalleAuxiliarParametroInventarioDefecto;
		final JToolBar jTtoolBarDetalleParametroInventarioDefecto=jTtoolBarDetalleAuxiliarParametroInventarioDefecto;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasParametroInventarioDefecto;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesParametroInventarioDefecto;
			processRunnable.jTableDatos=jTableDatosParametroInventarioDefecto;
			processRunnable.jPanelCampos=jPanelCamposParametroInventarioDefecto;
			processRunnable.jPanelPaginacion=jPanelPaginacionParametroInventarioDefecto;
			processRunnable.jPanelAcciones=jPanelAccionesParametroInventarioDefecto;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioParametroInventarioDefecto;
			
			
			processRunnable.jmenuBar=jmenuBarParametroInventarioDefecto;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleParametroInventarioDefecto;
			processRunnable.jTtoolBar=jTtoolBarParametroInventarioDefecto;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleParametroInventarioDefecto;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasParametroInventarioDefecto ,jPanelParametrosReportesParametroInventarioDefecto, jTableDatosParametroInventarioDefecto,/*jScrollPanelDatosParametroInventarioDefecto,*/jPanelCamposParametroInventarioDefecto,jPanelPaginacionParametroInventarioDefecto, /*jScrollPanelDatosEdicionParametroInventarioDefecto,*/ jPanelAccionesParametroInventarioDefecto,jPanelAccionesFormularioParametroInventarioDefecto,jmenuBarParametroInventarioDefecto,jmenuBarDetalleParametroInventarioDefecto,jTtoolBarParametroInventarioDefecto,jTtoolBarDetalleParametroInventarioDefecto));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesParametroInventarioDefecto(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarParametroInventarioDefecto(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuParametroInventarioDefecto(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarParametroInventarioDefecto(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarParametroInventarioDefecto,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleParametroInventarioDefecto,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuParametroInventarioDefecto(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarParametroInventarioDefecto,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleParametroInventarioDefecto,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.parametroinventariodefectoConstantesFunciones.getsFinalQueryParametroInventarioDefecto();
		String  finalQueryPaginacionTodos=this.parametroinventariodefectoConstantesFunciones.getsFinalQueryParametroInventarioDefecto();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ParametroInventarioDefectoConstantesFunciones.getArrayColumnasGlobalesNoParametroInventarioDefecto(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ParametroInventarioDefectoConstantesFunciones.getArrayColumnasGlobalesParametroInventarioDefecto(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ParametroInventarioDefectoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.parametroinventariodefectosEliminados= new ArrayList<ParametroInventarioDefecto>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessParametroInventarioDefecto();
		
				///*ParametroInventarioDefectoSessionBean*/this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			
			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ParametroInventarioDefectoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ParametroInventarioDefectoConstantesFunciones.getClassesForeignKeysOfParametroInventarioDefecto(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/parametroinventariodefecto."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			parametroinventariodefectosAux= new ArrayList<ParametroInventarioDefecto>();
			
				
			parametroinventariodefectoLogic.setDatosCliente(this.datosCliente);
			parametroinventariodefectoLogic.setDatosDeep(this.datosDeep);
			parametroinventariodefectoLogic.setIsConDeep(true);
			
			
			parametroinventariodefectoLogic.getParametroInventarioDefectoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					parametroinventariodefectoLogic.getTodosParametroInventarioDefectos(finalQueryGlobal,pagination);
					
					//parametroinventariodefectoLogic.getTodosParametroInventarioDefectosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(parametroinventariodefectoLogic.getParametroInventarioDefectos()==null|| parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametroinventariodefectosAux= new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux= new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametroinventariodefectoLogic.getTodosParametroInventarioDefectos(finalQueryGlobal+"",this.pagination);												
							
							//parametroinventariodefectoLogic.getTodosParametroInventarioDefectosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteParametroInventarioDefectos("Todos",parametroinventariodefectoLogic.getParametroInventarioDefectos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());					
							parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idParametroInventarioDefecto=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idParametroInventarioDefecto=this.idActual;
				
				} else if(this.idParametroInventarioDefectoActual!=null && this.idParametroInventarioDefectoActual!=0L) {
					idParametroInventarioDefecto=idParametroInventarioDefectoActual;
				}
				
					
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndicePorId(idParametroInventarioDefecto);
				
				this.parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					parametroinventariodefectoLogic.getEntity(idParametroInventarioDefecto);
					
					//parametroinventariodefectoLogic.getEntityWithConnection(idParametroInventarioDefecto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
					parametroinventariodefectoLogic.getParametroInventarioDefectos().add(parametroinventariodefectoLogic.getParametroInventarioDefecto());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
					this.parametroinventariodefectos.add(parametroinventariodefecto);
				}
				
				if(parametroinventariodefectoLogic.getParametroInventarioDefecto()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCalidadProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdCalidadProducto(finalQueryGlobal,pagination,id_calidad_productoFK_IdCalidadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdCalidadProducto(finalQueryGlobal,pagination,id_calidad_productoFK_IdCalidadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdCalidadProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdCalidadProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCiudad")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdCiudad(finalQueryGlobal,pagination,id_ciudadFK_IdCiudad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdCiudad(finalQueryGlobal,pagination,id_ciudadFK_IdCiudad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdCiudad",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdCiudad",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdClaseProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdClaseProducto(id_clase_productoFK_IdClaseProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdClaseProducto(finalQueryGlobal,pagination,id_clase_productoFK_IdClaseProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdClaseProducto(id_clase_productoFK_IdClaseProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdClaseProducto(id_clase_productoFK_IdClaseProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdClaseProducto(finalQueryGlobal,pagination,id_clase_productoFK_IdClaseProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdClaseProducto(id_clase_productoFK_IdClaseProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdClaseProducto(id_clase_productoFK_IdClaseProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdClaseProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdClaseProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdColorProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdColorProducto(id_color_productoFK_IdColorProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdColorProducto(finalQueryGlobal,pagination,id_color_productoFK_IdColorProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdColorProducto(id_color_productoFK_IdColorProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdColorProducto(id_color_productoFK_IdColorProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdColorProducto(finalQueryGlobal,pagination,id_color_productoFK_IdColorProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdColorProducto(id_color_productoFK_IdColorProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdColorProducto(id_color_productoFK_IdColorProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdColorProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdColorProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEfectoProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEfectoProducto(id_efecto_productoFK_IdEfectoProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdEfectoProducto(finalQueryGlobal,pagination,id_efecto_productoFK_IdEfectoProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEfectoProducto(id_efecto_productoFK_IdEfectoProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEfectoProducto(id_efecto_productoFK_IdEfectoProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdEfectoProducto(finalQueryGlobal,pagination,id_efecto_productoFK_IdEfectoProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEfectoProducto(id_efecto_productoFK_IdEfectoProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEfectoProducto(id_efecto_productoFK_IdEfectoProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdEfectoProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdEfectoProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdEmpresa",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdEmpresa",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdGrupoBodega")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdGrupoBodega(finalQueryGlobal,pagination,id_grupo_bodegaFK_IdGrupoBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdGrupoBodega(finalQueryGlobal,pagination,id_grupo_bodegaFK_IdGrupoBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdGrupoBodega",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdGrupoBodega",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMarcaProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMarcaProducto(id_marca_productoFK_IdMarcaProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdMarcaProducto(finalQueryGlobal,pagination,id_marca_productoFK_IdMarcaProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMarcaProducto(id_marca_productoFK_IdMarcaProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMarcaProducto(id_marca_productoFK_IdMarcaProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdMarcaProducto(finalQueryGlobal,pagination,id_marca_productoFK_IdMarcaProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMarcaProducto(id_marca_productoFK_IdMarcaProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMarcaProducto(id_marca_productoFK_IdMarcaProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdMarcaProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdMarcaProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMaterialProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMaterialProducto(id_material_productoFK_IdMaterialProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdMaterialProducto(finalQueryGlobal,pagination,id_material_productoFK_IdMaterialProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMaterialProducto(id_material_productoFK_IdMaterialProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMaterialProducto(id_material_productoFK_IdMaterialProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdMaterialProducto(finalQueryGlobal,pagination,id_material_productoFK_IdMaterialProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMaterialProducto(id_material_productoFK_IdMaterialProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdMaterialProducto(id_material_productoFK_IdMaterialProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdMaterialProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdMaterialProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModeloProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdModeloProducto(id_modelo_productoFK_IdModeloProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdModeloProducto(finalQueryGlobal,pagination,id_modelo_productoFK_IdModeloProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdModeloProducto(id_modelo_productoFK_IdModeloProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdModeloProducto(id_modelo_productoFK_IdModeloProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdModeloProducto(finalQueryGlobal,pagination,id_modelo_productoFK_IdModeloProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdModeloProducto(id_modelo_productoFK_IdModeloProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdModeloProducto(id_modelo_productoFK_IdModeloProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdModeloProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdModeloProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPais")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdPais",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdPais",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdRangoUnidadVenta")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdRangoUnidadVenta(id_rango_unidad_ventaFK_IdRangoUnidadVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdRangoUnidadVenta(finalQueryGlobal,pagination,id_rango_unidad_ventaFK_IdRangoUnidadVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdRangoUnidadVenta(id_rango_unidad_ventaFK_IdRangoUnidadVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdRangoUnidadVenta(id_rango_unidad_ventaFK_IdRangoUnidadVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdRangoUnidadVenta(finalQueryGlobal,pagination,id_rango_unidad_ventaFK_IdRangoUnidadVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdRangoUnidadVenta(id_rango_unidad_ventaFK_IdRangoUnidadVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdRangoUnidadVenta(id_rango_unidad_ventaFK_IdRangoUnidadVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdRangoUnidadVenta",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdRangoUnidadVenta",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSegmentoProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSegmentoProducto(id_segmento_productoFK_IdSegmentoProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdSegmentoProducto(finalQueryGlobal,pagination,id_segmento_productoFK_IdSegmentoProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSegmentoProducto(id_segmento_productoFK_IdSegmentoProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSegmentoProducto(id_segmento_productoFK_IdSegmentoProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdSegmentoProducto(finalQueryGlobal,pagination,id_segmento_productoFK_IdSegmentoProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSegmentoProducto(id_segmento_productoFK_IdSegmentoProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSegmentoProducto(id_segmento_productoFK_IdSegmentoProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdSegmentoProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdSegmentoProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdSucursal",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdSucursal",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTallaProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTallaProducto(id_talla_productoFK_IdTallaProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTallaProducto(finalQueryGlobal,pagination,id_talla_productoFK_IdTallaProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTallaProducto(id_talla_productoFK_IdTallaProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTallaProducto(id_talla_productoFK_IdTallaProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTallaProducto(finalQueryGlobal,pagination,id_talla_productoFK_IdTallaProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTallaProducto(id_talla_productoFK_IdTallaProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTallaProducto(id_talla_productoFK_IdTallaProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdTallaProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdTallaProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoCosteo")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoCosteo(id_tipo_costeoFK_IdTipoCosteo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoCosteo(finalQueryGlobal,pagination,id_tipo_costeoFK_IdTipoCosteo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoCosteo(id_tipo_costeoFK_IdTipoCosteo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoCosteo(id_tipo_costeoFK_IdTipoCosteo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoCosteo(finalQueryGlobal,pagination,id_tipo_costeoFK_IdTipoCosteo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoCosteo(id_tipo_costeoFK_IdTipoCosteo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoCosteo(id_tipo_costeoFK_IdTipoCosteo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdTipoCosteo",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdTipoCosteo",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoProducto")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProducto(id_tipo_productoFK_IdTipoProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProducto(finalQueryGlobal,pagination,id_tipo_productoFK_IdTipoProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProducto(id_tipo_productoFK_IdTipoProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProducto(id_tipo_productoFK_IdTipoProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProducto(finalQueryGlobal,pagination,id_tipo_productoFK_IdTipoProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProducto(id_tipo_productoFK_IdTipoProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProducto(id_tipo_productoFK_IdTipoProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdTipoProducto",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdTipoProducto",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoProductoServicio")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicio(id_tipo_producto_servicioFK_IdTipoProductoServicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProductoServicio(finalQueryGlobal,pagination,id_tipo_producto_servicioFK_IdTipoProductoServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicio(id_tipo_producto_servicioFK_IdTipoProductoServicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicio(id_tipo_producto_servicioFK_IdTipoProductoServicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProductoServicio(finalQueryGlobal,pagination,id_tipo_producto_servicioFK_IdTipoProductoServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicio(id_tipo_producto_servicioFK_IdTipoProductoServicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicio(id_tipo_producto_servicioFK_IdTipoProductoServicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdTipoProductoServicio",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdTipoProductoServicio",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoProductoServicioInven")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicioInven(id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProductoServicioInven(finalQueryGlobal,pagination,id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicioInven(id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicioInven(id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProductoServicioInven(finalQueryGlobal,pagination,id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicioInven(id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoProductoServicioInven(id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdTipoProductoServicioInven",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdTipoProductoServicioInven",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoServicio")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoServicio(finalQueryGlobal,pagination,id_tipo_servicioFK_IdTipoServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoServicio(finalQueryGlobal,pagination,id_tipo_servicioFK_IdTipoServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdTipoServicio",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdTipoServicio",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoViaTransporte")) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoViaTransporte(id_tipo_via_transporteFK_IdTipoViaTransporte);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoViaTransporte(finalQueryGlobal,pagination,id_tipo_via_transporteFK_IdTipoViaTransporte);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoViaTransporte(id_tipo_via_transporteFK_IdTipoViaTransporte);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoViaTransporte(id_tipo_via_transporteFK_IdTipoViaTransporte);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos()==null||parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroinventariodefectos==null|| parametroinventariodefectos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
						parametroinventariodefectosAux.addAll(parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectosAux=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectosAux.addAll(parametroinventariodefectos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoViaTransporte(finalQueryGlobal,pagination,id_tipo_via_transporteFK_IdTipoViaTransporte);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoViaTransporte(id_tipo_via_transporteFK_IdTipoViaTransporte);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroInventarioDefectoConstantesFunciones.getDetalleIndiceFK_IdTipoViaTransporte(id_tipo_via_transporteFK_IdTipoViaTransporte);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroInventarioDefectos("FK_IdTipoViaTransporte",parametroinventariodefectoLogic.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroInventarioDefectos("FK_IdTipoViaTransporte",parametroinventariodefectos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoLogic.setParametroInventarioDefectos(new ArrayList<ParametroInventarioDefecto>());
						parametroinventariodefectoLogic.getParametroInventarioDefectos().addAll(parametroinventariodefectosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectos=new ArrayList<ParametroInventarioDefecto>();
							parametroinventariodefectos.addAll(parametroinventariodefectosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesParametroInventarioDefecto();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessParametroInventarioDefecto();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=parametroinventariodefectoLogic.getParametroInventarioDefectos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=parametroinventariodefectos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=parametroinventariodefectoLogic.getParametroInventarioDefectos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=parametroinventariodefectos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(ParametroInventarioDefecto parametroinventariodefecto) {
		Boolean permite=true;
		
		if(this.parametroinventariodefecto.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ParametroInventarioDefectoConstantesFunciones.getOrderByListaParametroInventarioDefecto();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ParametroInventarioDefectoConstantesFunciones.getOrderByListaParametroInventarioDefecto();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
				if(parametroinventariodefecto.getsType().equals(Constantes2.S_TOTALES)) {
					parametroinventariodefectoTotales=parametroinventariodefecto;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroInventarioDefecto parametroinventariodefecto:this.parametroinventariodefectos) {
				if(parametroinventariodefecto.getsType().equals(Constantes2.S_TOTALES)) {
					parametroinventariodefectoTotales=parametroinventariodefecto;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.parametroinventariodefectoAux=new ParametroInventarioDefecto();
			this.parametroinventariodefectoAux.setsType(Constantes2.S_TOTALES);
			this.parametroinventariodefectoAux.setIsNew(false);
			this.parametroinventariodefectoAux.setIsChanged(false);
			this.parametroinventariodefectoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				ParametroInventarioDefectoConstantesFunciones.TotalizarValoresFilaParametroInventarioDefecto(this.parametroinventariodefectoLogic.getParametroInventarioDefectos(),this.parametroinventariodefectoAux);
				
				this.parametroinventariodefectoLogic.getParametroInventarioDefectos().add(this.parametroinventariodefectoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ParametroInventarioDefectoConstantesFunciones.TotalizarValoresFilaParametroInventarioDefecto(this.parametroinventariodefectos,this.parametroinventariodefectoAux);
				
				this.parametroinventariodefectos.add(this.parametroinventariodefectoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		parametroinventariodefectoTotales=new ParametroInventarioDefecto();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.parametroinventariodefectoLogic.getParametroInventarioDefectos().remove(parametroinventariodefectoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.parametroinventariodefectos.remove(parametroinventariodefectoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		parametroinventariodefectoTotales=new ParametroInventarioDefecto();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
				if(parametroinventariodefecto.getsType().equals(Constantes2.S_TOTALES)) {
					parametroinventariodefectoTotales=parametroinventariodefecto;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ParametroInventarioDefectoConstantesFunciones.TotalizarValoresFilaParametroInventarioDefecto(this.parametroinventariodefectoLogic.getParametroInventarioDefectos(),parametroinventariodefectoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroInventarioDefecto parametroinventariodefecto:this.parametroinventariodefectos) {
				if(parametroinventariodefecto.getsType().equals(Constantes2.S_TOTALES)) {
					parametroinventariodefectoTotales=parametroinventariodefecto;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ParametroInventarioDefectoConstantesFunciones.TotalizarValoresFilaParametroInventarioDefecto(this.parametroinventariodefectos,parametroinventariodefectoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getParametroInventarioDefectosFK_IdCalidadProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCalidadProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdCiudad()throws Exception {
		try {
			sAccionBusqueda="FK_IdCiudad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdClaseProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdClaseProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdColorProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdColorProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdEfectoProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdEfectoProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdGrupoBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdGrupoBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdMarcaProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdMarcaProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdMaterialProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdMaterialProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdModeloProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdModeloProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdPais()throws Exception {
		try {
			sAccionBusqueda="FK_IdPais";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdRangoUnidadVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdRangoUnidadVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdSegmentoProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdSegmentoProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdTallaProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdTallaProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoCosteo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCosteo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoProductoServicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoProductoServicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoProductoServicioInven()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoProductoServicioInven";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoServicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoServicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoViaTransporte()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoViaTransporte";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getParametroInventarioDefectosFK_IdCalidadProducto(String sFinalQuery,Long id_calidad_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdCalidadProducto(sFinalQuery,this.pagination,id_calidad_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdCiudad(String sFinalQuery,Long id_ciudad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdCiudad(sFinalQuery,this.pagination,id_ciudad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdClaseProducto(String sFinalQuery,Long id_clase_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdClaseProducto(sFinalQuery,this.pagination,id_clase_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdColorProducto(String sFinalQuery,Long id_color_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdColorProducto(sFinalQuery,this.pagination,id_color_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdEfectoProducto(String sFinalQuery,Long id_efecto_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdEfectoProducto(sFinalQuery,this.pagination,id_efecto_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdGrupoBodega(String sFinalQuery,Long id_grupo_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdGrupoBodega(sFinalQuery,this.pagination,id_grupo_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdMarcaProducto(String sFinalQuery,Long id_marca_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdMarcaProducto(sFinalQuery,this.pagination,id_marca_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdMaterialProducto(String sFinalQuery,Long id_material_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdMaterialProducto(sFinalQuery,this.pagination,id_material_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdModeloProducto(String sFinalQuery,Long id_modelo_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdModeloProducto(sFinalQuery,this.pagination,id_modelo_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdPais(String sFinalQuery,Long id_pais)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdPais(sFinalQuery,this.pagination,id_pais);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdRangoUnidadVenta(String sFinalQuery,Long id_rango_unidad_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdRangoUnidadVenta(sFinalQuery,this.pagination,id_rango_unidad_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdSegmentoProducto(String sFinalQuery,Long id_segmento_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdSegmentoProducto(sFinalQuery,this.pagination,id_segmento_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdTallaProducto(String sFinalQuery,Long id_talla_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTallaProducto(sFinalQuery,this.pagination,id_talla_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoCosteo(String sFinalQuery,Long id_tipo_costeo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoCosteo(sFinalQuery,this.pagination,id_tipo_costeo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoProducto(String sFinalQuery,Long id_tipo_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProducto(sFinalQuery,this.pagination,id_tipo_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoProductoServicio(String sFinalQuery,Long id_tipo_producto_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProductoServicio(sFinalQuery,this.pagination,id_tipo_producto_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoProductoServicioInven(String sFinalQuery,Long id_tipo_producto_servicio_inven)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoProductoServicioInven(sFinalQuery,this.pagination,id_tipo_producto_servicio_inven);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoServicio(String sFinalQuery,Long id_tipo_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoServicio(sFinalQuery,this.pagination,id_tipo_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroInventarioDefectosFK_IdTipoViaTransporte(String sFinalQuery,Long id_tipo_via_transporte)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLogic.getParametroInventarioDefectosFK_IdTipoViaTransporte(sFinalQuery,this.pagination,id_tipo_via_transporte);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosParametroInventarioDefecto() {
		this.isPermisoTodoParametroInventarioDefecto=false;
		this.isPermisoNuevoParametroInventarioDefecto=false;
		this.isPermisoActualizarParametroInventarioDefecto=false;
		this.isPermisoActualizarOriginalParametroInventarioDefecto=false;
		this.isPermisoEliminarParametroInventarioDefecto=false;
		this.isPermisoGuardarCambiosParametroInventarioDefecto=false;
		this.isPermisoConsultaParametroInventarioDefecto=false;
		this.isPermisoBusquedaParametroInventarioDefecto=false;
		this.isPermisoReporteParametroInventarioDefecto=false;		
		this.isPermisoOrdenParametroInventarioDefecto=false;		
		this.isPermisoPaginacionMedioParametroInventarioDefecto=false;		
		this.isPermisoPaginacionAltoParametroInventarioDefecto=false;
		this.isPermisoPaginacionTodoParametroInventarioDefecto=false;
		this.isPermisoCopiarParametroInventarioDefecto=false;		
		this.isPermisoVerFormParametroInventarioDefecto=false;		
		this.isPermisoDuplicarParametroInventarioDefecto=false;		
		this.isPermisoOrdenParametroInventarioDefecto=false;		
	}
	
	public void setPermisosUsuarioParametroInventarioDefecto(Boolean isPermiso) {
		this.isPermisoTodoParametroInventarioDefecto=isPermiso;
		this.isPermisoNuevoParametroInventarioDefecto=isPermiso;
		this.isPermisoActualizarParametroInventarioDefecto=isPermiso;
		this.isPermisoActualizarOriginalParametroInventarioDefecto=isPermiso;
		this.isPermisoEliminarParametroInventarioDefecto=isPermiso;
		this.isPermisoGuardarCambiosParametroInventarioDefecto=isPermiso;
		this.isPermisoConsultaParametroInventarioDefecto=isPermiso;
		this.isPermisoBusquedaParametroInventarioDefecto=isPermiso;
		this.isPermisoReporteParametroInventarioDefecto=isPermiso;
		this.isPermisoOrdenParametroInventarioDefecto=isPermiso;		
		this.isPermisoPaginacionMedioParametroInventarioDefecto=isPermiso;		
		this.isPermisoPaginacionAltoParametroInventarioDefecto=isPermiso;		
		this.isPermisoPaginacionTodoParametroInventarioDefecto=isPermiso;		
		this.isPermisoCopiarParametroInventarioDefecto=isPermiso;		
		this.isPermisoVerFormParametroInventarioDefecto=isPermiso;		
		this.isPermisoDuplicarParametroInventarioDefecto=isPermiso;
		this.isPermisoOrdenParametroInventarioDefecto=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioParametroInventarioDefecto(Boolean isPermiso) {
		//this.isPermisoTodoParametroInventarioDefecto=isPermiso;
		this.isPermisoNuevoParametroInventarioDefecto=isPermiso;
		this.isPermisoActualizarParametroInventarioDefecto=isPermiso;
		this.isPermisoActualizarOriginalParametroInventarioDefecto=isPermiso;
		this.isPermisoEliminarParametroInventarioDefecto=isPermiso;
		this.isPermisoGuardarCambiosParametroInventarioDefecto=isPermiso;
		//this.isPermisoConsultaParametroInventarioDefecto=isPermiso;
		//this.isPermisoBusquedaParametroInventarioDefecto=isPermiso;
		//this.isPermisoReporteParametroInventarioDefecto=isPermiso;
		//this.isPermisoOrdenParametroInventarioDefecto=isPermiso;		
		//this.isPermisoPaginacionMedioParametroInventarioDefecto=isPermiso;		
		//this.isPermisoPaginacionAltoParametroInventarioDefecto=isPermiso;		
		//this.isPermisoPaginacionTodoParametroInventarioDefecto=isPermiso;		
		//this.isPermisoCopiarParametroInventarioDefecto=isPermiso;		
		//this.isPermisoDuplicarParametroInventarioDefecto=isPermiso;
		//this.isPermisoOrdenParametroInventarioDefecto=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioParametroInventarioDefectoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(ParametroInventarioDefectoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioParametroInventarioDefectoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioParametroInventarioDefectoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionParametroInventarioDefectoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioParametroInventarioDefectoClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioParametroInventarioDefecto() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ParametroInventarioDefectoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ParametroInventarioDefectoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoParametroInventarioDefecto=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarParametroInventarioDefecto=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalParametroInventarioDefecto=this.isPermisoActualizarParametroInventarioDefecto;
			this.isPermisoEliminarParametroInventarioDefecto=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosParametroInventarioDefecto=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaParametroInventarioDefecto=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaParametroInventarioDefecto=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoParametroInventarioDefecto=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteParametroInventarioDefecto=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenParametroInventarioDefecto=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioParametroInventarioDefecto=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoParametroInventarioDefecto=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoParametroInventarioDefecto=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarParametroInventarioDefecto=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormParametroInventarioDefecto=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarParametroInventarioDefecto=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenParametroInventarioDefecto=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosParametroInventarioDefecto.setToolTipText(this.jTableDatosParametroInventarioDefecto.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioParametroInventarioDefecto(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioParametroInventarioDefecto(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ParametroInventarioDefectoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ParametroInventarioDefectoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioParametroInventarioDefecto() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyParametroInventarioDefectoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.grupobodegasForeignKey=new ArrayList();
				this.calidadproductosForeignKey=new ArrayList();
				this.tiposerviciosForeignKey=new ArrayList();
				this.tipoproductoservicioinvensForeignKey=new ArrayList();
				this.tipoproductoserviciosForeignKey=new ArrayList();
				this.tipocosteosForeignKey=new ArrayList();
				this.tipoproductosForeignKey=new ArrayList();
				this.tipoviatransportesForeignKey=new ArrayList();
				this.rangounidadventasForeignKey=new ArrayList();
				this.paissForeignKey=new ArrayList();
				this.ciudadsForeignKey=new ArrayList();
				this.colorproductosForeignKey=new ArrayList();
				this.claseproductosForeignKey=new ArrayList();
				this.efectoproductosForeignKey=new ArrayList();
				this.marcaproductosForeignKey=new ArrayList();
				this.modeloproductosForeignKey=new ArrayList();
				this.materialproductosForeignKey=new ArrayList();
				this.segmentoproductosForeignKey=new ArrayList();
				this.tallaproductosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyParametroInventarioDefectoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ParametroInventarioDefectoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyParametroInventarioDefectoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyGrupoBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCalidadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoProductoServicioInvenListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoProductoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCosteoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoViaTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyRangoUnidadVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyColorProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClaseProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEfectoProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMarcaProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModeloProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMaterialProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySegmentoProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTallaProductoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyGrupoBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.grupobodegasForeignKey==null||this.grupobodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=GrupoBodegaConstantesFunciones.getArrayColumnasGlobalesGrupoBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,GrupoBodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=GrupoBodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosGrupoBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCalidadProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.calidadproductosForeignKey==null||this.calidadproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CalidadProductoConstantesFunciones.getArrayColumnasGlobalesCalidadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CalidadProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CalidadProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCalidadProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoServicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiposerviciosForeignKey==null||this.tiposerviciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoServicioConstantesFunciones.getArrayColumnasGlobalesTipoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoServicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoServicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoServiciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoProductoServicioInvenListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoproductoservicioinvensForeignKey==null||this.tipoproductoservicioinvensForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoProductoServicioInvenConstantesFunciones.getArrayColumnasGlobalesTipoProductoServicioInven(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoProductoServicioInvenConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoProductoServicioInvenConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoProductoServicioInvensForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoProductoServicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoproductoserviciosForeignKey==null||this.tipoproductoserviciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoProductoServicioConstantesFunciones.getArrayColumnasGlobalesTipoProductoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoProductoServicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoProductoServicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoProductoServiciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCosteoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocosteosForeignKey==null||this.tipocosteosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCosteoConstantesFunciones.getArrayColumnasGlobalesTipoCosteo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCosteoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCosteoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCosteosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoproductosForeignKey==null||this.tipoproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoProductoConstantesFunciones.getArrayColumnasGlobalesTipoProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoViaTransporteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoviatransportesForeignKey==null||this.tipoviatransportesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoViaTransporteConstantesFunciones.getArrayColumnasGlobalesTipoViaTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoViaTransporteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoViaTransporteConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoViaTransportesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyRangoUnidadVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.rangounidadventasForeignKey==null||this.rangounidadventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=RangoUnidadVentaConstantesFunciones.getArrayColumnasGlobalesRangoUnidadVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,RangoUnidadVentaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=RangoUnidadVentaConstantesFunciones.SFINALQUERY;

				this.cargarCombosRangoUnidadVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPaisListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.paissForeignKey==null||this.paissForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PaisConstantesFunciones.SFINALQUERY;

				this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CiudadConstantesFunciones.SFINALQUERY;

				this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyColorProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.colorproductosForeignKey==null||this.colorproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ColorProductoConstantesFunciones.getArrayColumnasGlobalesColorProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ColorProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ColorProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosColorProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClaseProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.claseproductosForeignKey==null||this.claseproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClaseProductoConstantesFunciones.getArrayColumnasGlobalesClaseProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClaseProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClaseProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosClaseProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEfectoProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.efectoproductosForeignKey==null||this.efectoproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EfectoProductoConstantesFunciones.getArrayColumnasGlobalesEfectoProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EfectoProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EfectoProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEfectoProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMarcaProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.marcaproductosForeignKey==null||this.marcaproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MarcaProductoConstantesFunciones.getArrayColumnasGlobalesMarcaProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MarcaProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MarcaProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosMarcaProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModeloProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modeloproductosForeignKey==null||this.modeloproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModeloProductoConstantesFunciones.getArrayColumnasGlobalesModeloProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModeloProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModeloProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosModeloProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMaterialProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.materialproductosForeignKey==null||this.materialproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MaterialProductoConstantesFunciones.getArrayColumnasGlobalesMaterialProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MaterialProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MaterialProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosMaterialProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySegmentoProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.segmentoproductosForeignKey==null||this.segmentoproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SegmentoProductoConstantesFunciones.getArrayColumnasGlobalesSegmentoProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SegmentoProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SegmentoProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosSegmentoProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTallaProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tallaproductosForeignKey==null||this.tallaproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TallaProductoConstantesFunciones.getArrayColumnasGlobalesTallaProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TallaProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TallaProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTallaProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyParametroInventarioDefectoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			ParametroInventarioDefectoParameterReturnGeneral parametroinventariodefectoReturnGeneral=new ParametroInventarioDefectoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_empresaParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_empresaParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_sucursalParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_sucursalParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalGrupoBodega="";

				if(((this.grupobodegasForeignKey==null||this.grupobodegasForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_grupo_bodegaParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_grupo_bodegaParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionGrupoBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=GrupoBodegaConstantesFunciones.getArrayColumnasGlobalesGrupoBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalGrupoBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,GrupoBodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalGrupoBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalGrupoBodega, "");
						finalQueryGlobalGrupoBodega+=GrupoBodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosGrupoBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalGrupoBodega=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidGrupoBodegaActual();
					}
				} else {
					finalQueryGlobalGrupoBodega="NONE";
				}


				String finalQueryGlobalCalidadProducto="";

				if(((this.calidadproductosForeignKey==null||this.calidadproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_calidad_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_calidad_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionCalidadProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CalidadProductoConstantesFunciones.getArrayColumnasGlobalesCalidadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCalidadProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CalidadProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalCalidadProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalCalidadProducto, "");
						finalQueryGlobalCalidadProducto+=CalidadProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCalidadProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCalidadProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidCalidadProductoActual();
					}
				} else {
					finalQueryGlobalCalidadProducto="NONE";
				}


				String finalQueryGlobalTipoServicio="";

				if(((this.tiposerviciosForeignKey==null||this.tiposerviciosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_servicioParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_servicioParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoServicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoServicioConstantesFunciones.getArrayColumnasGlobalesTipoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoServicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoServicioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoServicio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoServicio, "");
						finalQueryGlobalTipoServicio+=TipoServicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoServiciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoServicio=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidTipoServicioActual();
					}
				} else {
					finalQueryGlobalTipoServicio="NONE";
				}


				String finalQueryGlobalTipoProductoServicioInven="";

				if(((this.tipoproductoservicioinvensForeignKey==null||this.tipoproductoservicioinvensForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_producto_servicio_invenParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_producto_servicio_invenParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProductoServicioInven()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoProductoServicioInvenConstantesFunciones.getArrayColumnasGlobalesTipoProductoServicioInven(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoProductoServicioInven=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoProductoServicioInvenConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoProductoServicioInven=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoProductoServicioInven, "");
						finalQueryGlobalTipoProductoServicioInven+=TipoProductoServicioInvenConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoProductoServicioInvensForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoProductoServicioInven=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidTipoProductoServicioInvenActual();
					}
				} else {
					finalQueryGlobalTipoProductoServicioInven="NONE";
				}


				String finalQueryGlobalTipoProductoServicio="";

				if(((this.tipoproductoserviciosForeignKey==null||this.tipoproductoserviciosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_producto_servicioParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_producto_servicioParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProductoServicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoProductoServicioConstantesFunciones.getArrayColumnasGlobalesTipoProductoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoProductoServicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoProductoServicioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoProductoServicio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoProductoServicio, "");
						finalQueryGlobalTipoProductoServicio+=TipoProductoServicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoProductoServiciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoProductoServicio=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidTipoProductoServicioActual();
					}
				} else {
					finalQueryGlobalTipoProductoServicio="NONE";
				}


				String finalQueryGlobalTipoCosteo="";

				if(((this.tipocosteosForeignKey==null||this.tipocosteosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_costeoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_costeoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCosteo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCosteoConstantesFunciones.getArrayColumnasGlobalesTipoCosteo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCosteo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCosteoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCosteo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCosteo, "");
						finalQueryGlobalTipoCosteo+=TipoCosteoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCosteosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCosteo=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidTipoCosteoActual();
					}
				} else {
					finalQueryGlobalTipoCosteo="NONE";
				}


				String finalQueryGlobalTipoProducto="";

				if(((this.tipoproductosForeignKey==null||this.tipoproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoProductoConstantesFunciones.getArrayColumnasGlobalesTipoProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoProducto, "");
						finalQueryGlobalTipoProducto+=TipoProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidTipoProductoActual();
					}
				} else {
					finalQueryGlobalTipoProducto="NONE";
				}


				String finalQueryGlobalTipoViaTransporte="";

				if(((this.tipoviatransportesForeignKey==null||this.tipoviatransportesForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_via_transporteParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_via_transporteParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoViaTransporte()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoViaTransporteConstantesFunciones.getArrayColumnasGlobalesTipoViaTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoViaTransporte=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoViaTransporteConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoViaTransporte=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoViaTransporte, "");
						finalQueryGlobalTipoViaTransporte+=TipoViaTransporteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoViaTransportesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoViaTransporte=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidTipoViaTransporteActual();
					}
				} else {
					finalQueryGlobalTipoViaTransporte="NONE";
				}


				String finalQueryGlobalRangoUnidadVenta="";

				if(((this.rangounidadventasForeignKey==null||this.rangounidadventasForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_rango_unidad_ventaParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_rango_unidad_ventaParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionRangoUnidadVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=RangoUnidadVentaConstantesFunciones.getArrayColumnasGlobalesRangoUnidadVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalRangoUnidadVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,RangoUnidadVentaConstantesFunciones.TABLENAME);

						finalQueryGlobalRangoUnidadVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalRangoUnidadVenta, "");
						finalQueryGlobalRangoUnidadVenta+=RangoUnidadVentaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosRangoUnidadVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalRangoUnidadVenta=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidRangoUnidadVentaActual();
					}
				} else {
					finalQueryGlobalRangoUnidadVenta="NONE";
				}


				String finalQueryGlobalPais="";

				if(((this.paissForeignKey==null||this.paissForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_paisParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_paisParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPais=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

						finalQueryGlobalPais=Funciones.GetFinalQueryAppend(finalQueryGlobalPais, "");
						finalQueryGlobalPais+=PaisConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPais=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidPaisActual();
					}
				} else {
					finalQueryGlobalPais="NONE";
				}


				String finalQueryGlobalCiudad="";

				if(((this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_ciudadParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_ciudadParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCiudad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

						finalQueryGlobalCiudad=Funciones.GetFinalQueryAppend(finalQueryGlobalCiudad, "");
						finalQueryGlobalCiudad+=CiudadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCiudad=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidCiudadActual();
					}
				} else {
					finalQueryGlobalCiudad="NONE";
				}


				String finalQueryGlobalColorProducto="";

				if(((this.colorproductosForeignKey==null||this.colorproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_color_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_color_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionColorProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ColorProductoConstantesFunciones.getArrayColumnasGlobalesColorProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalColorProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ColorProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalColorProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalColorProducto, "");
						finalQueryGlobalColorProducto+=ColorProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosColorProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalColorProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidColorProductoActual();
					}
				} else {
					finalQueryGlobalColorProducto="NONE";
				}


				String finalQueryGlobalClaseProducto="";

				if(((this.claseproductosForeignKey==null||this.claseproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_clase_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_clase_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionClaseProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClaseProductoConstantesFunciones.getArrayColumnasGlobalesClaseProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalClaseProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClaseProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalClaseProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalClaseProducto, "");
						finalQueryGlobalClaseProducto+=ClaseProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClaseProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalClaseProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidClaseProductoActual();
					}
				} else {
					finalQueryGlobalClaseProducto="NONE";
				}


				String finalQueryGlobalEfectoProducto="";

				if(((this.efectoproductosForeignKey==null||this.efectoproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_efecto_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_efecto_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionEfectoProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EfectoProductoConstantesFunciones.getArrayColumnasGlobalesEfectoProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEfectoProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EfectoProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalEfectoProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalEfectoProducto, "");
						finalQueryGlobalEfectoProducto+=EfectoProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEfectoProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEfectoProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidEfectoProductoActual();
					}
				} else {
					finalQueryGlobalEfectoProducto="NONE";
				}


				String finalQueryGlobalMarcaProducto="";

				if(((this.marcaproductosForeignKey==null||this.marcaproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_marca_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_marca_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionMarcaProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MarcaProductoConstantesFunciones.getArrayColumnasGlobalesMarcaProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMarcaProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MarcaProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalMarcaProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalMarcaProducto, "");
						finalQueryGlobalMarcaProducto+=MarcaProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMarcaProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMarcaProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidMarcaProductoActual();
					}
				} else {
					finalQueryGlobalMarcaProducto="NONE";
				}


				String finalQueryGlobalModeloProducto="";

				if(((this.modeloproductosForeignKey==null||this.modeloproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_modelo_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_modelo_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionModeloProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModeloProductoConstantesFunciones.getArrayColumnasGlobalesModeloProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalModeloProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModeloProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalModeloProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalModeloProducto, "");
						finalQueryGlobalModeloProducto+=ModeloProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModeloProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModeloProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidModeloProductoActual();
					}
				} else {
					finalQueryGlobalModeloProducto="NONE";
				}


				String finalQueryGlobalMaterialProducto="";

				if(((this.materialproductosForeignKey==null||this.materialproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_material_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_material_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionMaterialProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MaterialProductoConstantesFunciones.getArrayColumnasGlobalesMaterialProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMaterialProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MaterialProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalMaterialProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalMaterialProducto, "");
						finalQueryGlobalMaterialProducto+=MaterialProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMaterialProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMaterialProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidMaterialProductoActual();
					}
				} else {
					finalQueryGlobalMaterialProducto="NONE";
				}


				String finalQueryGlobalSegmentoProducto="";

				if(((this.segmentoproductosForeignKey==null||this.segmentoproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_segmento_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_segmento_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionSegmentoProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SegmentoProductoConstantesFunciones.getArrayColumnasGlobalesSegmentoProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSegmentoProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SegmentoProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalSegmentoProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalSegmentoProducto, "");
						finalQueryGlobalSegmentoProducto+=SegmentoProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSegmentoProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSegmentoProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidSegmentoProductoActual();
					}
				} else {
					finalQueryGlobalSegmentoProducto="NONE";
				}


				String finalQueryGlobalTallaProducto="";

				if(((this.tallaproductosForeignKey==null||this.tallaproductosForeignKey.size()<=0) && this.parametroinventariodefectoConstantesFunciones.cargarid_talla_productoParametroInventarioDefecto)
					 || (this.esRecargarFks && this.parametroinventariodefectoConstantesFunciones.cargarid_talla_productoParametroInventarioDefecto)) {

					if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTallaProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TallaProductoConstantesFunciones.getArrayColumnasGlobalesTallaProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTallaProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TallaProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalTallaProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalTallaProducto, "");
						finalQueryGlobalTallaProducto+=TallaProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTallaProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTallaProducto=" WHERE " + ConstantesSql.ID + "="+parametroinventariodefectoSessionBean.getlidTallaProductoActual();
					}
				} else {
					finalQueryGlobalTallaProducto="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				parametroinventariodefectoReturnGeneral=parametroinventariodefectoLogic.cargarCombosLoteForeignKeyParametroInventarioDefecto(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalGrupoBodega,finalQueryGlobalCalidadProducto,finalQueryGlobalTipoServicio,finalQueryGlobalTipoProductoServicioInven,finalQueryGlobalTipoProductoServicio,finalQueryGlobalTipoCosteo,finalQueryGlobalTipoProducto,finalQueryGlobalTipoViaTransporte,finalQueryGlobalRangoUnidadVenta,finalQueryGlobalPais,finalQueryGlobalCiudad,finalQueryGlobalColorProducto,finalQueryGlobalClaseProducto,finalQueryGlobalEfectoProducto,finalQueryGlobalMarcaProducto,finalQueryGlobalModeloProducto,finalQueryGlobalMaterialProducto,finalQueryGlobalSegmentoProducto,finalQueryGlobalTallaProducto);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=parametroinventariodefectoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=parametroinventariodefectoReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalGrupoBodega.equals("NONE")) {
				this.grupobodegasForeignKey=parametroinventariodefectoReturnGeneral.getgrupobodegasForeignKey();
			}

			if(!finalQueryGlobalCalidadProducto.equals("NONE")) {
				this.calidadproductosForeignKey=parametroinventariodefectoReturnGeneral.getcalidadproductosForeignKey();
			}

			if(!finalQueryGlobalTipoServicio.equals("NONE")) {
				this.tiposerviciosForeignKey=parametroinventariodefectoReturnGeneral.gettiposerviciosForeignKey();
			}

			if(!finalQueryGlobalTipoProductoServicioInven.equals("NONE")) {
				this.tipoproductoservicioinvensForeignKey=parametroinventariodefectoReturnGeneral.gettipoproductoservicioinvensForeignKey();
			}

			if(!finalQueryGlobalTipoProductoServicio.equals("NONE")) {
				this.tipoproductoserviciosForeignKey=parametroinventariodefectoReturnGeneral.gettipoproductoserviciosForeignKey();
			}

			if(!finalQueryGlobalTipoCosteo.equals("NONE")) {
				this.tipocosteosForeignKey=parametroinventariodefectoReturnGeneral.gettipocosteosForeignKey();
			}

			if(!finalQueryGlobalTipoProducto.equals("NONE")) {
				this.tipoproductosForeignKey=parametroinventariodefectoReturnGeneral.gettipoproductosForeignKey();
			}

			if(!finalQueryGlobalTipoViaTransporte.equals("NONE")) {
				this.tipoviatransportesForeignKey=parametroinventariodefectoReturnGeneral.gettipoviatransportesForeignKey();
			}

			if(!finalQueryGlobalRangoUnidadVenta.equals("NONE")) {
				this.rangounidadventasForeignKey=parametroinventariodefectoReturnGeneral.getrangounidadventasForeignKey();
			}

			if(!finalQueryGlobalPais.equals("NONE")) {
				this.paissForeignKey=parametroinventariodefectoReturnGeneral.getpaissForeignKey();
			}

			if(!finalQueryGlobalCiudad.equals("NONE")) {
				this.ciudadsForeignKey=parametroinventariodefectoReturnGeneral.getciudadsForeignKey();
			}

			if(!finalQueryGlobalColorProducto.equals("NONE")) {
				this.colorproductosForeignKey=parametroinventariodefectoReturnGeneral.getcolorproductosForeignKey();
			}

			if(!finalQueryGlobalClaseProducto.equals("NONE")) {
				this.claseproductosForeignKey=parametroinventariodefectoReturnGeneral.getclaseproductosForeignKey();
			}

			if(!finalQueryGlobalEfectoProducto.equals("NONE")) {
				this.efectoproductosForeignKey=parametroinventariodefectoReturnGeneral.getefectoproductosForeignKey();
			}

			if(!finalQueryGlobalMarcaProducto.equals("NONE")) {
				this.marcaproductosForeignKey=parametroinventariodefectoReturnGeneral.getmarcaproductosForeignKey();
			}

			if(!finalQueryGlobalModeloProducto.equals("NONE")) {
				this.modeloproductosForeignKey=parametroinventariodefectoReturnGeneral.getmodeloproductosForeignKey();
			}

			if(!finalQueryGlobalMaterialProducto.equals("NONE")) {
				this.materialproductosForeignKey=parametroinventariodefectoReturnGeneral.getmaterialproductosForeignKey();
			}

			if(!finalQueryGlobalSegmentoProducto.equals("NONE")) {
				this.segmentoproductosForeignKey=parametroinventariodefectoReturnGeneral.getsegmentoproductosForeignKey();
			}

			if(!finalQueryGlobalTallaProducto.equals("NONE")) {
				this.tallaproductosForeignKey=parametroinventariodefectoReturnGeneral.gettallaproductosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyParametroInventarioDefecto()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyGrupoBodega();
			this.addItemDefectoCombosForeignKeyCalidadProducto();
			this.addItemDefectoCombosForeignKeyTipoServicio();
			this.addItemDefectoCombosForeignKeyTipoProductoServicioInven();
			this.addItemDefectoCombosForeignKeyTipoProductoServicio();
			this.addItemDefectoCombosForeignKeyTipoCosteo();
			this.addItemDefectoCombosForeignKeyTipoProducto();
			this.addItemDefectoCombosForeignKeyTipoViaTransporte();
			this.addItemDefectoCombosForeignKeyRangoUnidadVenta();
			this.addItemDefectoCombosForeignKeyPais();
			this.addItemDefectoCombosForeignKeyCiudad();
			this.addItemDefectoCombosForeignKeyColorProducto();
			this.addItemDefectoCombosForeignKeyClaseProducto();
			this.addItemDefectoCombosForeignKeyEfectoProducto();
			this.addItemDefectoCombosForeignKeyMarcaProducto();
			this.addItemDefectoCombosForeignKeyModeloProducto();
			this.addItemDefectoCombosForeignKeyMaterialProducto();
			this.addItemDefectoCombosForeignKeySegmentoProducto();
			this.addItemDefectoCombosForeignKeyTallaProducto();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.parametroinventariodefectoSessionBean==null) {
				this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
			}

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyGrupoBodega()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionGrupoBodega()) {
				GrupoBodega grupobodega=new GrupoBodega();
				GrupoBodegaConstantesFunciones.setGrupoBodegaDescripcion(grupobodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				grupobodega.setId(null);

				if(!GrupoBodegaConstantesFunciones.ExisteEnLista(this.grupobodegasForeignKey,grupobodega,true)) {

					this.grupobodegasForeignKey.add(0,grupobodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCalidadProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionCalidadProducto()) {
				CalidadProducto calidadproducto=new CalidadProducto();
				CalidadProductoConstantesFunciones.setCalidadProductoDescripcion(calidadproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				calidadproducto.setId(null);

				if(!CalidadProductoConstantesFunciones.ExisteEnLista(this.calidadproductosForeignKey,calidadproducto,true)) {

					this.calidadproductosForeignKey.add(0,calidadproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoServicio()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoServicio()) {
				TipoServicio tiposervicio=new TipoServicio();
				TipoServicioConstantesFunciones.setTipoServicioDescripcion(tiposervicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiposervicio.setId(null);

				if(!TipoServicioConstantesFunciones.ExisteEnLista(this.tiposerviciosForeignKey,tiposervicio,true)) {

					this.tiposerviciosForeignKey.add(0,tiposervicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoProductoServicioInven()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProductoServicioInven()) {
				TipoProductoServicioInven tipoproductoservicioinven=new TipoProductoServicioInven();
				TipoProductoServicioInvenConstantesFunciones.setTipoProductoServicioInvenDescripcion(tipoproductoservicioinven,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoproductoservicioinven.setId(null);

				if(!TipoProductoServicioInvenConstantesFunciones.ExisteEnLista(this.tipoproductoservicioinvensForeignKey,tipoproductoservicioinven,true)) {

					this.tipoproductoservicioinvensForeignKey.add(0,tipoproductoservicioinven);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoProductoServicio()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProductoServicio()) {
				TipoProductoServicio tipoproductoservicio=new TipoProductoServicio();
				TipoProductoServicioConstantesFunciones.setTipoProductoServicioDescripcion(tipoproductoservicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoproductoservicio.setId(null);

				if(!TipoProductoServicioConstantesFunciones.ExisteEnLista(this.tipoproductoserviciosForeignKey,tipoproductoservicio,true)) {

					this.tipoproductoserviciosForeignKey.add(0,tipoproductoservicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCosteo()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCosteo()) {
				TipoCosteo tipocosteo=new TipoCosteo();
				TipoCosteoConstantesFunciones.setTipoCosteoDescripcion(tipocosteo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocosteo.setId(null);

				if(!TipoCosteoConstantesFunciones.ExisteEnLista(this.tipocosteosForeignKey,tipocosteo,true)) {

					this.tipocosteosForeignKey.add(0,tipocosteo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoProducto()) {
				TipoProducto tipoproducto=new TipoProducto();
				TipoProductoConstantesFunciones.setTipoProductoDescripcion(tipoproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoproducto.setId(null);

				if(!TipoProductoConstantesFunciones.ExisteEnLista(this.tipoproductosForeignKey,tipoproducto,true)) {

					this.tipoproductosForeignKey.add(0,tipoproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoViaTransporte()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTipoViaTransporte()) {
				TipoViaTransporte tipoviatransporte=new TipoViaTransporte();
				TipoViaTransporteConstantesFunciones.setTipoViaTransporteDescripcion(tipoviatransporte,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoviatransporte.setId(null);

				if(!TipoViaTransporteConstantesFunciones.ExisteEnLista(this.tipoviatransportesForeignKey,tipoviatransporte,true)) {

					this.tipoviatransportesForeignKey.add(0,tipoviatransporte);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyRangoUnidadVenta()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionRangoUnidadVenta()) {
				RangoUnidadVenta rangounidadventa=new RangoUnidadVenta();
				RangoUnidadVentaConstantesFunciones.setRangoUnidadVentaDescripcion(rangounidadventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				rangounidadventa.setId(null);

				if(!RangoUnidadVentaConstantesFunciones.ExisteEnLista(this.rangounidadventasForeignKey,rangounidadventa,true)) {

					this.rangounidadventasForeignKey.add(0,rangounidadventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPais()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				Pais pais=new Pais();
				PaisConstantesFunciones.setPaisDescripcion(pais,Constantes.SMENSAJE_ESCOJA_OPCION);
				pais.setId(null);

				if(!PaisConstantesFunciones.ExisteEnLista(this.paissForeignKey,pais,true)) {

					this.paissForeignKey.add(0,pais);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCiudad()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				Ciudad ciudad=new Ciudad();
				CiudadConstantesFunciones.setCiudadDescripcion(ciudad,Constantes.SMENSAJE_ESCOJA_OPCION);
				ciudad.setId(null);

				if(!CiudadConstantesFunciones.ExisteEnLista(this.ciudadsForeignKey,ciudad,true)) {

					this.ciudadsForeignKey.add(0,ciudad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyColorProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionColorProducto()) {
				ColorProducto colorproducto=new ColorProducto();
				ColorProductoConstantesFunciones.setColorProductoDescripcion(colorproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				colorproducto.setId(null);

				if(!ColorProductoConstantesFunciones.ExisteEnLista(this.colorproductosForeignKey,colorproducto,true)) {

					this.colorproductosForeignKey.add(0,colorproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyClaseProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionClaseProducto()) {
				ClaseProducto claseproducto=new ClaseProducto();
				ClaseProductoConstantesFunciones.setClaseProductoDescripcion(claseproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				claseproducto.setId(null);

				if(!ClaseProductoConstantesFunciones.ExisteEnLista(this.claseproductosForeignKey,claseproducto,true)) {

					this.claseproductosForeignKey.add(0,claseproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEfectoProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionEfectoProducto()) {
				EfectoProducto efectoproducto=new EfectoProducto();
				EfectoProductoConstantesFunciones.setEfectoProductoDescripcion(efectoproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				efectoproducto.setId(null);

				if(!EfectoProductoConstantesFunciones.ExisteEnLista(this.efectoproductosForeignKey,efectoproducto,true)) {

					this.efectoproductosForeignKey.add(0,efectoproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMarcaProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionMarcaProducto()) {
				MarcaProducto marcaproducto=new MarcaProducto();
				MarcaProductoConstantesFunciones.setMarcaProductoDescripcion(marcaproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				marcaproducto.setId(null);

				if(!MarcaProductoConstantesFunciones.ExisteEnLista(this.marcaproductosForeignKey,marcaproducto,true)) {

					this.marcaproductosForeignKey.add(0,marcaproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModeloProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionModeloProducto()) {
				ModeloProducto modeloproducto=new ModeloProducto();
				ModeloProductoConstantesFunciones.setModeloProductoDescripcion(modeloproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				modeloproducto.setId(null);

				if(!ModeloProductoConstantesFunciones.ExisteEnLista(this.modeloproductosForeignKey,modeloproducto,true)) {

					this.modeloproductosForeignKey.add(0,modeloproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMaterialProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionMaterialProducto()) {
				MaterialProducto materialproducto=new MaterialProducto();
				MaterialProductoConstantesFunciones.setMaterialProductoDescripcion(materialproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				materialproducto.setId(null);

				if(!MaterialProductoConstantesFunciones.ExisteEnLista(this.materialproductosForeignKey,materialproducto,true)) {

					this.materialproductosForeignKey.add(0,materialproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySegmentoProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionSegmentoProducto()) {
				SegmentoProducto segmentoproducto=new SegmentoProducto();
				SegmentoProductoConstantesFunciones.setSegmentoProductoDescripcion(segmentoproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				segmentoproducto.setId(null);

				if(!SegmentoProductoConstantesFunciones.ExisteEnLista(this.segmentoproductosForeignKey,segmentoproducto,true)) {

					this.segmentoproductosForeignKey.add(0,segmentoproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTallaProducto()throws Exception {
		try {

			if(!this.parametroinventariodefectoSessionBean.getisBusquedaDesdeForeignKeySesionTallaProducto()) {
				TallaProducto tallaproducto=new TallaProducto();
				TallaProductoConstantesFunciones.setTallaProductoDescripcion(tallaproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				tallaproducto.setId(null);

				if(!TallaProductoConstantesFunciones.ExisteEnLista(this.tallaproductosForeignKey,tallaproducto,true)) {

					this.tallaproductosForeignKey.add(0,tallaproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyParametroInventarioDefecto()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyParametroInventarioDefecto(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyParametroInventarioDefecto()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyParametroInventarioDefecto();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto)throws Exception {	
		try {
			
			this.setActualGrupoBodegaForeignKey(parametroinventariodefecto.getid_grupo_bodega(),false,"Formulario");
			this.setActualCalidadProductoForeignKey(parametroinventariodefecto.getid_calidad_producto(),false,"Formulario");
			this.setActualTipoServicioForeignKey(parametroinventariodefecto.getid_tipo_servicio(),false,"Formulario");
			this.setActualTipoProductoServicioInvenForeignKey(parametroinventariodefecto.getid_tipo_producto_servicio_inven(),false,"Formulario");
			this.setActualTipoProductoServicioForeignKey(parametroinventariodefecto.getid_tipo_producto_servicio(),false,"Formulario");
			this.setActualTipoCosteoForeignKey(parametroinventariodefecto.getid_tipo_costeo(),false,"Formulario");
			this.setActualTipoProductoForeignKey(parametroinventariodefecto.getid_tipo_producto(),false,"Formulario");
			this.setActualTipoViaTransporteForeignKey(parametroinventariodefecto.getid_tipo_via_transporte(),false,"Formulario");
			this.setActualRangoUnidadVentaForeignKey(parametroinventariodefecto.getid_rango_unidad_venta(),false,"Formulario");
			this.setActualPaisForeignKey(parametroinventariodefecto.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(parametroinventariodefecto.getid_ciudad(),false,"Formulario");
			this.setActualColorProductoForeignKey(parametroinventariodefecto.getid_color_producto(),false,"Formulario");
			this.setActualClaseProductoForeignKey(parametroinventariodefecto.getid_clase_producto(),false,"Formulario");
			this.setActualEfectoProductoForeignKey(parametroinventariodefecto.getid_efecto_producto(),false,"Formulario");
			this.setActualMarcaProductoForeignKey(parametroinventariodefecto.getid_marca_producto(),false,"Formulario");
			this.setActualModeloProductoForeignKey(parametroinventariodefecto.getid_modelo_producto(),false,"Formulario");
			this.setActualMaterialProductoForeignKey(parametroinventariodefecto.getid_material_producto(),false,"Formulario");
			this.setActualSegmentoProductoForeignKey(parametroinventariodefecto.getid_segmento_producto(),false,"Formulario");
			this.setActualTallaProductoForeignKey(parametroinventariodefecto.getid_talla_producto(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyParametroInventarioDefecto()throws Exception {	
		try {
			
			this.setActualGrupoBodegaForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_grupo_bodega(),false,"Formulario");
			this.setActualCalidadProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_calidad_producto(),false,"Formulario");
			this.setActualTipoServicioForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_tipo_servicio(),false,"Formulario");
			this.setActualTipoProductoServicioInvenForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_tipo_producto_servicio_inven(),false,"Formulario");
			this.setActualTipoProductoServicioForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_tipo_producto_servicio(),false,"Formulario");
			this.setActualTipoCosteoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_tipo_costeo(),false,"Formulario");
			this.setActualTipoProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_tipo_producto(),false,"Formulario");
			this.setActualTipoViaTransporteForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_tipo_via_transporte(),false,"Formulario");
			this.setActualRangoUnidadVentaForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_rango_unidad_venta(),false,"Formulario");
			this.setActualPaisForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_ciudad(),false,"Formulario");
			this.setActualColorProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_color_producto(),false,"Formulario");
			this.setActualClaseProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_clase_producto(),false,"Formulario");
			this.setActualEfectoProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_efecto_producto(),false,"Formulario");
			this.setActualMarcaProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_marca_producto(),false,"Formulario");
			this.setActualModeloProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_modelo_producto(),false,"Formulario");
			this.setActualMaterialProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_material_producto(),false,"Formulario");
			this.setActualSegmentoProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_segmento_producto(),false,"Formulario");
			this.setActualTallaProductoForeignKey(this.parametroinventariodefectoConstantesFunciones.getid_talla_producto(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyParametroInventarioDefecto()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyParametroInventarioDefecto()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyParametroInventarioDefecto()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroParametroInventarioDefecto()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyParametroInventarioDefecto()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameGrupoBodegasForeignKey("Todos");
			this.cargarCombosFrameCalidadProductosForeignKey("Todos");
			this.cargarCombosFrameTipoServiciosForeignKey("Todos");
			this.cargarCombosFrameTipoProductoServicioInvensForeignKey("Todos");
			this.cargarCombosFrameTipoProductoServiciosForeignKey("Todos");
			this.cargarCombosFrameTipoCosteosForeignKey("Todos");
			this.cargarCombosFrameTipoProductosForeignKey("Todos");
			this.cargarCombosFrameTipoViaTransportesForeignKey("Todos");
			this.cargarCombosFrameRangoUnidadVentasForeignKey("Todos");
			this.cargarCombosFramePaissForeignKey("Todos");
			this.cargarCombosFrameCiudadsForeignKey("Todos");
			this.cargarCombosFrameColorProductosForeignKey("Todos");
			this.cargarCombosFrameClaseProductosForeignKey("Todos");
			this.cargarCombosFrameEfectoProductosForeignKey("Todos");
			this.cargarCombosFrameMarcaProductosForeignKey("Todos");
			this.cargarCombosFrameModeloProductosForeignKey("Todos");
			this.cargarCombosFrameMaterialProductosForeignKey("Todos");
			this.cargarCombosFrameSegmentoProductosForeignKey("Todos");
			this.cargarCombosFrameTallaProductosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyParametroInventarioDefecto(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameGrupoBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCalidadProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoServiciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoProductoServicioInvensForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoProductoServiciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCosteosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoViaTransportesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameRangoUnidadVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameColorProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClaseProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEfectoProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMarcaProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModeloProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMaterialProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSegmentoProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTallaProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyParametroInventarioDefecto()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	










































	
	

	public ParametroInventarioDefectoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ParametroInventarioDefectoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ParametroInventarioDefectoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean(); 
		this.parametroinventariodefectoConstantesFunciones=new ParametroInventarioDefectoConstantesFunciones(); 
		this.parametroinventariodefectoBean=new ParametroInventarioDefecto();//(this.parametroinventariodefectoConstantesFunciones); 		
		this.parametroinventariodefectoReturnGeneral=new ParametroInventarioDefectoParameterReturnGeneral(); 
		
		this.parametroinventariodefectoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.parametroinventariodefectoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ParametroInventarioDefectoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ParametroInventarioDefectoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ParametroInventarioDefectoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessParametroInventarioDefecto(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.parametroinventariodefectoConstantesFunciones=new ParametroInventarioDefectoConstantesFunciones(); 
			this.parametroinventariodefectoBean=new ParametroInventarioDefecto();//this.parametroinventariodefectoConstantesFunciones); 			
			this.parametroinventariodefectoReturnGeneral=new ParametroInventarioDefectoParameterReturnGeneral(); 
		
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Parametro Inventario Defecto Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			
			
			this.parametroinventariodefecto=new ParametroInventarioDefecto();
			this.parametroinventariodefectos = new ArrayList<ParametroInventarioDefecto>();
			this.parametroinventariodefectosAux = new ArrayList<ParametroInventarioDefecto>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic=new ParametroInventarioDefectoLogic();
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}
			
			//this.parametroinventariodefectoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.parametroinventariodefectoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormParametroInventarioDefecto);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoParametroInventarioDefecto);	
					}
					
					if(this.jInternalFrameImportacionParametroInventarioDefecto!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionParametroInventarioDefecto);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByParametroInventarioDefecto!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByParametroInventarioDefecto);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormParametroInventarioDefecto);
				this.jInternalFrameDetalleFormParametroInventarioDefecto.setVisible(false);
				this.jInternalFrameDetalleFormParametroInventarioDefecto.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoParametroInventarioDefecto);
					this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setVisible(false);
					this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionParametroInventarioDefecto!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionParametroInventarioDefecto);
					this.jInternalFrameImportacionParametroInventarioDefecto.setVisible(false);
					this.jInternalFrameImportacionParametroInventarioDefecto.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByParametroInventarioDefecto!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByParametroInventarioDefecto);
					this.jInternalFrameOrderByParametroInventarioDefecto.setVisible(false);
					this.jInternalFrameOrderByParametroInventarioDefecto.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idParametroInventarioDefectoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ParametroInventarioDefectoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.parametroinventariodefectoReturnGeneral=new ParametroInventarioDefectoParameterReturnGeneral();
			
			this.parametroinventariodefectoParameterGeneral=new ParametroInventarioDefectoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.parametroinventariodefectoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ParametroInventarioDefectoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ParametroInventarioDefectoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado(),this.parametroinventariodefectoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ParametroInventarioDefectoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado(),this.parametroinventariodefectoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=false;
			this.isVisibilidadCeldaDuplicarParametroInventarioDefecto=true;
			this.isVisibilidadCeldaCopiarParametroInventarioDefecto=true;
			this.isVisibilidadCeldaVerFormParametroInventarioDefecto=true;
			this.isVisibilidadCeldaOrdenParametroInventarioDefecto=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=false;
			
			
			this.isVisibilidadFK_IdCalidadProducto=true;
			this.isVisibilidadFK_IdCiudad=true;
			this.isVisibilidadFK_IdClaseProducto=true;
			this.isVisibilidadFK_IdColorProducto=true;
			this.isVisibilidadFK_IdEfectoProducto=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdGrupoBodega=true;
			this.isVisibilidadFK_IdMarcaProducto=true;
			this.isVisibilidadFK_IdMaterialProducto=true;
			this.isVisibilidadFK_IdModeloProducto=true;
			this.isVisibilidadFK_IdPais=true;
			this.isVisibilidadFK_IdRangoUnidadVenta=true;
			this.isVisibilidadFK_IdSegmentoProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTallaProducto=true;
			this.isVisibilidadFK_IdTipoCosteo=true;
			this.isVisibilidadFK_IdTipoProducto=true;
			this.isVisibilidadFK_IdTipoProductoServicio=true;
			this.isVisibilidadFK_IdTipoProductoServicioInven=true;
			this.isVisibilidadFK_IdTipoServicio=true;
			this.isVisibilidadFK_IdTipoViaTransporte=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosParametroInventarioDefecto();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioParametroInventarioDefecto(false);
			
			this.setPermisosUsuarioParametroInventarioDefecto();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado() 
				|| (this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado() && this.parametroinventariodefectoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioParametroInventarioDefectoClasesRelacionadas();
			}
			
			if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioParametroInventarioDefectoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosParametroInventarioDefecto();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualParametroInventarioDefecto();
			}
			
			if(!this.isPermisoBusquedaParametroInventarioDefecto) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(false);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(false);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioParametroInventarioDefecto,this.isPermisoPaginacionMedioParametroInventarioDefecto,this.isPermisoPaginacionTodoParametroInventarioDefecto);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ParametroInventarioDefectoConstantesFunciones.getTiposSeleccionarParametroInventarioDefecto());
				
				this.tiposColumnasSelect=ParametroInventarioDefectoConstantesFunciones.getTiposSeleccionarParametroInventarioDefecto(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioParametroInventarioDefecto();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(false,false,true);
				this.setAccionesUsuarioParametroInventarioDefecto(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(false,false,true);							
				this.setAccionesUsuarioParametroInventarioDefecto(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroInventarioDefecto() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.grupobodegaLogic=new GrupoBodegaLogic();
			this.calidadproductoLogic=new CalidadProductoLogic();
			this.tiposervicioLogic=new TipoServicioLogic();
			this.tipoproductoservicioinvenLogic=new TipoProductoServicioInvenLogic();
			this.tipoproductoservicioLogic=new TipoProductoServicioLogic();
			this.tipocosteoLogic=new TipoCosteoLogic();
			this.tipoproductoLogic=new TipoProductoLogic();
			this.tipoviatransporteLogic=new TipoViaTransporteLogic();
			this.rangounidadventaLogic=new RangoUnidadVentaLogic();
			this.paisLogic=new PaisLogic();
			this.ciudadLogic=new CiudadLogic();
			this.colorproductoLogic=new ColorProductoLogic();
			this.claseproductoLogic=new ClaseProductoLogic();
			this.efectoproductoLogic=new EfectoProductoLogic();
			this.marcaproductoLogic=new MarcaProductoLogic();
			this.modeloproductoLogic=new ModeloProductoLogic();
			this.materialproductoLogic=new MaterialProductoLogic();
			this.segmentoproductoLogic=new SegmentoProductoLogic();
			this.tallaproductoLogic=new TallaProductoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				parametroinventariodefectoImplementable= (ParametroInventarioDefectoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ParametroInventarioDefectoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				parametroinventariodefectoImplementableHome= (ParametroInventarioDefectoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ParametroInventarioDefectoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.parametroinventariodefectos= new ArrayList<ParametroInventarioDefecto>();
			this.parametroinventariodefectosEliminados= new ArrayList<ParametroInventarioDefecto>();
						
			this.isEsNuevoParametroInventarioDefecto=false;
			this.esParaAccionDesdeFormularioParametroInventarioDefecto=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.grupobodegasForeignKey=new ArrayList<GrupoBodega>() ;
			this.calidadproductosForeignKey=new ArrayList<CalidadProducto>() ;
			this.tiposerviciosForeignKey=new ArrayList<TipoServicio>() ;
			this.tipoproductoservicioinvensForeignKey=new ArrayList<TipoProductoServicioInven>() ;
			this.tipoproductoserviciosForeignKey=new ArrayList<TipoProductoServicio>() ;
			this.tipocosteosForeignKey=new ArrayList<TipoCosteo>() ;
			this.tipoproductosForeignKey=new ArrayList<TipoProducto>() ;
			this.tipoviatransportesForeignKey=new ArrayList<TipoViaTransporte>() ;
			this.rangounidadventasForeignKey=new ArrayList<RangoUnidadVenta>() ;
			this.paissForeignKey=new ArrayList<Pais>() ;
			this.ciudadsForeignKey=new ArrayList<Ciudad>() ;
			this.colorproductosForeignKey=new ArrayList<ColorProducto>() ;
			this.claseproductosForeignKey=new ArrayList<ClaseProducto>() ;
			this.efectoproductosForeignKey=new ArrayList<EfectoProducto>() ;
			this.marcaproductosForeignKey=new ArrayList<MarcaProducto>() ;
			this.modeloproductosForeignKey=new ArrayList<ModeloProducto>() ;
			this.materialproductosForeignKey=new ArrayList<MaterialProducto>() ;
			this.segmentoproductosForeignKey=new ArrayList<SegmentoProducto>() ;
			this.tallaproductosForeignKey=new ArrayList<TallaProducto>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyParametroInventarioDefecto(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroParametroInventarioDefecto();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ParametroInventarioDefectoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingParametroInventarioDefecto(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioParametroInventarioDefecto();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioParametroInventarioDefecto();
			}
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasParametroInventarioDefecto.getTabCount(); i++) {
					this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessParametroInventarioDefecto(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga ParametroInventarioDefecto: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectParametroInventarioDefecto() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesParametroInventarioDefecto")) {
				iIndex=this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessParametroInventarioDefecto();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyParametroInventarioDefecto(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyParametroInventarioDefecto(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyParametroInventarioDefecto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyParametroInventarioDefectoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyParametroInventarioDefecto();
		
		this.cargarCombosFrameForeignKeyParametroInventarioDefecto();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyParametroInventarioDefecto();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyParametroInventarioDefecto();
		}
	}
	
	

	public void cargarCombosForeignKeyGrupoBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyGrupoBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyGrupoBodega();
				this.cargarCombosFrameGrupoBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaGrupoBodega(this.grupobodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCalidadProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCalidadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCalidadProducto();
				this.cargarCombosFrameCalidadProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCalidadProducto(this.calidadproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoServicio();
				this.cargarCombosFrameTipoServiciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoServicio(this.tiposerviciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoProductoServicioInven(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoProductoServicioInvenListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoProductoServicioInven();
				this.cargarCombosFrameTipoProductoServicioInvensForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoProductoServicioInven(this.tipoproductoservicioinvensForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoProductoServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoProductoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoProductoServicio();
				this.cargarCombosFrameTipoProductoServiciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoProductoServicio(this.tipoproductoserviciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCosteo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCosteoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCosteo();
				this.cargarCombosFrameTipoCosteosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCosteo(this.tipocosteosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoProducto();
				this.cargarCombosFrameTipoProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoProducto(this.tipoproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoViaTransporte(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoViaTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoViaTransporte();
				this.cargarCombosFrameTipoViaTransportesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoViaTransporte(this.tipoviatransportesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyRangoUnidadVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyRangoUnidadVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyRangoUnidadVenta();
				this.cargarCombosFrameRangoUnidadVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaRangoUnidadVenta(this.rangounidadventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPais(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPais(this.paissForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCiudad(this.ciudadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyColorProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyColorProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyColorProducto();
				this.cargarCombosFrameColorProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaColorProducto(this.colorproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClaseProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClaseProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyClaseProducto();
				this.cargarCombosFrameClaseProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaClaseProducto(this.claseproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEfectoProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEfectoProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEfectoProducto();
				this.cargarCombosFrameEfectoProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEfectoProducto(this.efectoproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMarcaProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMarcaProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMarcaProducto();
				this.cargarCombosFrameMarcaProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMarcaProducto(this.marcaproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModeloProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyModeloProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyModeloProducto();
				this.cargarCombosFrameModeloProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaModeloProducto(this.modeloproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMaterialProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMaterialProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMaterialProducto();
				this.cargarCombosFrameMaterialProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMaterialProducto(this.materialproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySegmentoProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeySegmentoProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeySegmentoProducto();
				this.cargarCombosFrameSegmentoProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaSegmentoProducto(this.segmentoproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTallaProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTallaProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTallaProducto();
				this.cargarCombosFrameTallaProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTallaProducto(this.tallaproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoParametroInventarioDefectoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			
			if(jTableDatosParametroInventarioDefecto.getRowCount()>=1) {
				jTableDatosParametroInventarioDefecto.removeRowSelectionInterval(0, jTableDatosParametroInventarioDefecto.getRowCount()-1);						
			}
			
			this.isEsNuevoParametroInventarioDefecto=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoParametroInventarioDefecto(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesParametroInventarioDefecto(true);			
			//this.parametroinventariodefecto=new ParametroInventarioDefecto();
			//this.parametroinventariodefecto.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroInventarioDefecto(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto() ;
			
			if(ParametroInventarioDefectoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroInventarioDefecto(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.parametroinventariodefecto);	
			this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);				
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar ParametroInventarioDefecto: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarParametroInventarioDefectoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosParametroInventarioDefecto.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosParametroInventarioDefecto.getSelectedRows().length;			
			}
			
			parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoParametroInventarioDefecto--;			
				//ParametroInventarioDefecto parametroinventariodefectoAux= new ParametroInventarioDefecto();			
				//parametroinventariodefectoAux.setId(this.iIdNuevoParametroInventarioDefecto);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//ParametroInventarioDefecto parametroinventariodefectoOrigen=new ParametroInventarioDefecto();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(ParametroInventarioDefecto parametroinventariodefectoOrigen : parametroinventariodefectosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							parametroinventariodefectoOrigen =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroinventariodefectoOrigen =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaParametroInventarioDefecto();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.parametroinventariodefecto.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosParametroInventarioDefecto(parametroinventariodefectoOrigen,this.parametroinventariodefecto,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.parametroinventariodefectoLogic.getParametroInventarioDefectos().add(this.parametroinventariodefectoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefectos.add(this.parametroinventariodefectoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
				
				this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(this.getIndiceNuevoParametroInventarioDefecto(), this.getIndiceNuevoParametroInventarioDefecto());
				
				int iLastRow =  this.jTableDatosParametroInventarioDefecto.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosParametroInventarioDefecto.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosParametroInventarioDefecto.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();									
		
			ParametroInventarioDefecto parametroinventariodefectoOrigen=new ParametroInventarioDefecto();
			ParametroInventarioDefecto parametroinventariodefectoDestino=new ParametroInventarioDefecto();
				
			parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosParametroInventarioDefecto.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || parametroinventariodefectosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosParametroInventarioDefecto.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoOrigen =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						parametroinventariodefectoOrigen =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroinventariodefectoDestino =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						parametroinventariodefectoDestino =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				parametroinventariodefectoOrigen =parametroinventariodefectosSeleccionados.get(0);
				parametroinventariodefectoDestino =parametroinventariodefectosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosParametroInventarioDefecto(parametroinventariodefectoOrigen,parametroinventariodefectoDestino,true,false);
				
				parametroinventariodefectoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(parametroinventariodefectoDestino,parametroinventariodefectoLogic.getParametroInventarioDefectos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametroinventariodefectoDestino,parametroinventariodefectos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
				
				//this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(this.getIndiceNuevoParametroInventarioDefecto(), this.getIndiceNuevoParametroInventarioDefecto());
				
				int iLastRow =  this.jTableDatosParametroInventarioDefecto.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosParametroInventarioDefecto.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosParametroInventarioDefecto.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormParametroInventarioDefecto.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesParametroInventarioDefecto.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(!isVisible);
			this.jPanelPaginacionParametroInventarioDefecto.setVisible(!isVisible);
			this.jPanelAccionesParametroInventarioDefecto.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameParametroInventarioDefecto();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoParametroInventarioDefecto();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionParametroInventarioDefecto();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByParametroInventarioDefecto();
			
			this.abrirFrameOrderByParametroInventarioDefecto();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByParametroInventarioDefecto();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleParametroInventarioDefecto(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormParametroInventarioDefecto);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormParametroInventarioDefecto.isMaximum()) {
					this.jInternalFrameDetalleFormParametroInventarioDefecto.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormParametroInventarioDefecto.setSize(this.jInternalFrameDetalleFormParametroInventarioDefecto.iWidthFormulario,this.jInternalFrameDetalleFormParametroInventarioDefecto.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormParametroInventarioDefecto.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormParametroInventarioDefecto.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormParametroInventarioDefecto.isMaximum()) {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jContentPaneDetalleParametroInventarioDefecto.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormParametroInventarioDefecto.jContentPaneDetalleParametroInventarioDefecto.getWidth(),ParametroInventarioDefectoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormParametroInventarioDefecto.jContentPaneDetalleParametroInventarioDefecto.getWidth(),ParametroInventarioDefectoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormParametroInventarioDefecto.jContentPaneDetalleParametroInventarioDefecto.getWidth(),ParametroInventarioDefectoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormParametroInventarioDefecto.setVisible(true);
	        this.jInternalFrameDetalleFormParametroInventarioDefecto.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByParametroInventarioDefecto() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByParametroInventarioDefecto==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByParametroInventarioDefecto=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByParametroInventarioDefecto,false,this);
				} else {
					this.jInternalFrameOrderByParametroInventarioDefecto=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByParametroInventarioDefecto,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByParametroInventarioDefecto);
				this.jInternalFrameOrderByParametroInventarioDefecto.setVisible(false);
				this.jInternalFrameOrderByParametroInventarioDefecto.setSelected(false);
				
				this.jInternalFrameOrderByParametroInventarioDefecto.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByParametroInventarioDefecto"));
				
				this.inicializarActualizarBindingTablaOrderByParametroInventarioDefecto();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionParametroInventarioDefecto() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionParametroInventarioDefecto==null) {
				
				this.jInternalFrameImportacionParametroInventarioDefecto=new ImportacionJInternalFrame(ParametroInventarioDefectoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionParametroInventarioDefecto);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionParametroInventarioDefecto);
				this.jInternalFrameImportacionParametroInventarioDefecto.setVisible(false);
				this.jInternalFrameImportacionParametroInventarioDefecto.setSelected(false);


				this.jInternalFrameImportacionParametroInventarioDefecto.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionParametroInventarioDefecto"));
				this.jInternalFrameImportacionParametroInventarioDefecto.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionParametroInventarioDefecto"));
				this.jInternalFrameImportacionParametroInventarioDefecto.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionParametroInventarioDefecto"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoParametroInventarioDefecto() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto==null) {
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto=new ReporteDinamicoJInternalFrame(ParametroInventarioDefectoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoParametroInventarioDefecto);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoParametroInventarioDefecto);
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setVisible(false);
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroInventarioDefecto"));
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroInventarioDefecto"));
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroInventarioDefecto"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroInventarioDefecto();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleParametroInventarioDefecto() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormParametroInventarioDefecto);
			
	       	this.jInternalFrameDetalleFormParametroInventarioDefecto.setVisible(false);
	        this.jInternalFrameDetalleFormParametroInventarioDefecto.setSelected(false);
			
			//this.jInternalFrameDetalleFormParametroInventarioDefecto.dispose();
			//this.jInternalFrameDetalleFormParametroInventarioDefecto=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoParametroInventarioDefecto() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setVisible(true);
	        this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionParametroInventarioDefecto() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionParametroInventarioDefecto.setVisible(true);
	        this.jInternalFrameImportacionParametroInventarioDefecto.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByParametroInventarioDefecto() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByParametroInventarioDefecto.setVisible(true);
	        this.jInternalFrameOrderByParametroInventarioDefecto.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByParametroInventarioDefecto() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByParametroInventarioDefecto.setVisible(false);
	        this.jInternalFrameOrderByParametroInventarioDefecto.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoParametroInventarioDefecto() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setVisible(false);
	        this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionParametroInventarioDefecto() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionParametroInventarioDefecto.setVisible(false);
	        this.jInternalFrameImportacionParametroInventarioDefecto.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarParametroInventarioDefecto(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarParametroInventarioDefecto(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesParametroInventarioDefecto(true);
			//this.isEsNuevoParametroInventarioDefecto=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroInventarioDefecto(false) ;
			
			if(parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(ParametroInventarioDefectoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroInventarioDefecto(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaParametroInventarioDefectoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarParametroInventarioDefecto(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesParametroInventarioDefecto(true);
			//this.isEsNuevoParametroInventarioDefecto=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.parametroinventariodefecto.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesParametroInventarioDefecto(false) ;
			
			if(ParametroInventarioDefectoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroInventarioDefecto(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaGrupoBodega(List<GrupoBodega> grupobodegasForeignKey)throws Exception{
		TableColumn tableColumnGrupoBodega=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA));
		TableCellEditor tableCellEditorGrupoBodega =tableColumnGrupoBodega.getCellEditor();

		GrupoBodegaTableCell grupobodegaTableCellFk=(GrupoBodegaTableCell)tableCellEditorGrupoBodega;

		if(grupobodegaTableCellFk!=null) {
			grupobodegaTableCellFk.setgrupobodegasForeignKey(grupobodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//grupobodegaTableCellFk.setRowActual(intSelectedRow);
			//grupobodegaTableCellFk.setgrupobodegasForeignKeyActual(grupobodegasForeignKey);
		//}


		if(grupobodegaTableCellFk!=null) {
			grupobodegaTableCellFk.RecargarGrupoBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCalidadProducto(List<CalidadProducto> calidadproductosForeignKey)throws Exception{
		TableColumn tableColumnCalidadProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO));
		TableCellEditor tableCellEditorCalidadProducto =tableColumnCalidadProducto.getCellEditor();

		CalidadProductoTableCell calidadproductoTableCellFk=(CalidadProductoTableCell)tableCellEditorCalidadProducto;

		if(calidadproductoTableCellFk!=null) {
			calidadproductoTableCellFk.setcalidadproductosForeignKey(calidadproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//calidadproductoTableCellFk.setRowActual(intSelectedRow);
			//calidadproductoTableCellFk.setcalidadproductosForeignKeyActual(calidadproductosForeignKey);
		//}


		if(calidadproductoTableCellFk!=null) {
			calidadproductoTableCellFk.RecargarCalidadProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoServicio(List<TipoServicio> tiposerviciosForeignKey)throws Exception{
		TableColumn tableColumnTipoServicio=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO));
		TableCellEditor tableCellEditorTipoServicio =tableColumnTipoServicio.getCellEditor();

		TipoServicioTableCell tiposervicioTableCellFk=(TipoServicioTableCell)tableCellEditorTipoServicio;

		if(tiposervicioTableCellFk!=null) {
			tiposervicioTableCellFk.settiposerviciosForeignKey(tiposerviciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiposervicioTableCellFk.setRowActual(intSelectedRow);
			//tiposervicioTableCellFk.settiposerviciosForeignKeyActual(tiposerviciosForeignKey);
		//}


		if(tiposervicioTableCellFk!=null) {
			tiposervicioTableCellFk.RecargarTipoServiciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoProductoServicioInven(List<TipoProductoServicioInven> tipoproductoservicioinvensForeignKey)throws Exception{
		TableColumn tableColumnTipoProductoServicioInven=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN));
		TableCellEditor tableCellEditorTipoProductoServicioInven =tableColumnTipoProductoServicioInven.getCellEditor();

		TipoProductoServicioInvenTableCell tipoproductoservicioinvenTableCellFk=(TipoProductoServicioInvenTableCell)tableCellEditorTipoProductoServicioInven;

		if(tipoproductoservicioinvenTableCellFk!=null) {
			tipoproductoservicioinvenTableCellFk.settipoproductoservicioinvensForeignKey(tipoproductoservicioinvensForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoproductoservicioinvenTableCellFk.setRowActual(intSelectedRow);
			//tipoproductoservicioinvenTableCellFk.settipoproductoservicioinvensForeignKeyActual(tipoproductoservicioinvensForeignKey);
		//}


		if(tipoproductoservicioinvenTableCellFk!=null) {
			tipoproductoservicioinvenTableCellFk.RecargarTipoProductoServicioInvensForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoProductoServicio(List<TipoProductoServicio> tipoproductoserviciosForeignKey)throws Exception{
		TableColumn tableColumnTipoProductoServicio=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO));
		TableCellEditor tableCellEditorTipoProductoServicio =tableColumnTipoProductoServicio.getCellEditor();

		TipoProductoServicioTableCell tipoproductoservicioTableCellFk=(TipoProductoServicioTableCell)tableCellEditorTipoProductoServicio;

		if(tipoproductoservicioTableCellFk!=null) {
			tipoproductoservicioTableCellFk.settipoproductoserviciosForeignKey(tipoproductoserviciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoproductoservicioTableCellFk.setRowActual(intSelectedRow);
			//tipoproductoservicioTableCellFk.settipoproductoserviciosForeignKeyActual(tipoproductoserviciosForeignKey);
		//}


		if(tipoproductoservicioTableCellFk!=null) {
			tipoproductoservicioTableCellFk.RecargarTipoProductoServiciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCosteo(List<TipoCosteo> tipocosteosForeignKey)throws Exception{
		TableColumn tableColumnTipoCosteo=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO));
		TableCellEditor tableCellEditorTipoCosteo =tableColumnTipoCosteo.getCellEditor();

		TipoCosteoTableCell tipocosteoTableCellFk=(TipoCosteoTableCell)tableCellEditorTipoCosteo;

		if(tipocosteoTableCellFk!=null) {
			tipocosteoTableCellFk.settipocosteosForeignKey(tipocosteosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocosteoTableCellFk.setRowActual(intSelectedRow);
			//tipocosteoTableCellFk.settipocosteosForeignKeyActual(tipocosteosForeignKey);
		//}


		if(tipocosteoTableCellFk!=null) {
			tipocosteoTableCellFk.RecargarTipoCosteosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoProducto(List<TipoProducto> tipoproductosForeignKey)throws Exception{
		TableColumn tableColumnTipoProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO));
		TableCellEditor tableCellEditorTipoProducto =tableColumnTipoProducto.getCellEditor();

		TipoProductoTableCell tipoproductoTableCellFk=(TipoProductoTableCell)tableCellEditorTipoProducto;

		if(tipoproductoTableCellFk!=null) {
			tipoproductoTableCellFk.settipoproductosForeignKey(tipoproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoproductoTableCellFk.setRowActual(intSelectedRow);
			//tipoproductoTableCellFk.settipoproductosForeignKeyActual(tipoproductosForeignKey);
		//}


		if(tipoproductoTableCellFk!=null) {
			tipoproductoTableCellFk.RecargarTipoProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoViaTransporte(List<TipoViaTransporte> tipoviatransportesForeignKey)throws Exception{
		TableColumn tableColumnTipoViaTransporte=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE));
		TableCellEditor tableCellEditorTipoViaTransporte =tableColumnTipoViaTransporte.getCellEditor();

		TipoViaTransporteTableCell tipoviatransporteTableCellFk=(TipoViaTransporteTableCell)tableCellEditorTipoViaTransporte;

		if(tipoviatransporteTableCellFk!=null) {
			tipoviatransporteTableCellFk.settipoviatransportesForeignKey(tipoviatransportesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoviatransporteTableCellFk.setRowActual(intSelectedRow);
			//tipoviatransporteTableCellFk.settipoviatransportesForeignKeyActual(tipoviatransportesForeignKey);
		//}


		if(tipoviatransporteTableCellFk!=null) {
			tipoviatransporteTableCellFk.RecargarTipoViaTransportesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaRangoUnidadVenta(List<RangoUnidadVenta> rangounidadventasForeignKey)throws Exception{
		TableColumn tableColumnRangoUnidadVenta=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA));
		TableCellEditor tableCellEditorRangoUnidadVenta =tableColumnRangoUnidadVenta.getCellEditor();

		RangoUnidadVentaTableCell rangounidadventaTableCellFk=(RangoUnidadVentaTableCell)tableCellEditorRangoUnidadVenta;

		if(rangounidadventaTableCellFk!=null) {
			rangounidadventaTableCellFk.setrangounidadventasForeignKey(rangounidadventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//rangounidadventaTableCellFk.setRowActual(intSelectedRow);
			//rangounidadventaTableCellFk.setrangounidadventasForeignKeyActual(rangounidadventasForeignKey);
		//}


		if(rangounidadventaTableCellFk!=null) {
			rangounidadventaTableCellFk.RecargarRangoUnidadVentasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaPais(List<Pais> paissForeignKey)throws Exception{
		TableColumn tableColumnPais=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS));
		TableCellEditor tableCellEditorPais =tableColumnPais.getCellEditor();

		PaisTableCell paisTableCellFk=(PaisTableCell)tableCellEditorPais;

		if(paisTableCellFk!=null) {
			paisTableCellFk.setpaissForeignKey(paissForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//paisTableCellFk.setRowActual(intSelectedRow);
			//paisTableCellFk.setpaissForeignKeyActual(paissForeignKey);
		//}


		if(paisTableCellFk!=null) {
			paisTableCellFk.RecargarPaissForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCiudad(List<Ciudad> ciudadsForeignKey)throws Exception{
		TableColumn tableColumnCiudad=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD));
		TableCellEditor tableCellEditorCiudad =tableColumnCiudad.getCellEditor();

		CiudadTableCell ciudadTableCellFk=(CiudadTableCell)tableCellEditorCiudad;

		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.setciudadsForeignKey(ciudadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//ciudadTableCellFk.setRowActual(intSelectedRow);
			//ciudadTableCellFk.setciudadsForeignKeyActual(ciudadsForeignKey);
		//}


		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.RecargarCiudadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaColorProducto(List<ColorProducto> colorproductosForeignKey)throws Exception{
		TableColumn tableColumnColorProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO));
		TableCellEditor tableCellEditorColorProducto =tableColumnColorProducto.getCellEditor();

		ColorProductoTableCell colorproductoTableCellFk=(ColorProductoTableCell)tableCellEditorColorProducto;

		if(colorproductoTableCellFk!=null) {
			colorproductoTableCellFk.setcolorproductosForeignKey(colorproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//colorproductoTableCellFk.setRowActual(intSelectedRow);
			//colorproductoTableCellFk.setcolorproductosForeignKeyActual(colorproductosForeignKey);
		//}


		if(colorproductoTableCellFk!=null) {
			colorproductoTableCellFk.RecargarColorProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaClaseProducto(List<ClaseProducto> claseproductosForeignKey)throws Exception{
		TableColumn tableColumnClaseProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO));
		TableCellEditor tableCellEditorClaseProducto =tableColumnClaseProducto.getCellEditor();

		ClaseProductoTableCell claseproductoTableCellFk=(ClaseProductoTableCell)tableCellEditorClaseProducto;

		if(claseproductoTableCellFk!=null) {
			claseproductoTableCellFk.setclaseproductosForeignKey(claseproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//claseproductoTableCellFk.setRowActual(intSelectedRow);
			//claseproductoTableCellFk.setclaseproductosForeignKeyActual(claseproductosForeignKey);
		//}


		if(claseproductoTableCellFk!=null) {
			claseproductoTableCellFk.RecargarClaseProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEfectoProducto(List<EfectoProducto> efectoproductosForeignKey)throws Exception{
		TableColumn tableColumnEfectoProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO));
		TableCellEditor tableCellEditorEfectoProducto =tableColumnEfectoProducto.getCellEditor();

		EfectoProductoTableCell efectoproductoTableCellFk=(EfectoProductoTableCell)tableCellEditorEfectoProducto;

		if(efectoproductoTableCellFk!=null) {
			efectoproductoTableCellFk.setefectoproductosForeignKey(efectoproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//efectoproductoTableCellFk.setRowActual(intSelectedRow);
			//efectoproductoTableCellFk.setefectoproductosForeignKeyActual(efectoproductosForeignKey);
		//}


		if(efectoproductoTableCellFk!=null) {
			efectoproductoTableCellFk.RecargarEfectoProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMarcaProducto(List<MarcaProducto> marcaproductosForeignKey)throws Exception{
		TableColumn tableColumnMarcaProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO));
		TableCellEditor tableCellEditorMarcaProducto =tableColumnMarcaProducto.getCellEditor();

		MarcaProductoTableCell marcaproductoTableCellFk=(MarcaProductoTableCell)tableCellEditorMarcaProducto;

		if(marcaproductoTableCellFk!=null) {
			marcaproductoTableCellFk.setmarcaproductosForeignKey(marcaproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//marcaproductoTableCellFk.setRowActual(intSelectedRow);
			//marcaproductoTableCellFk.setmarcaproductosForeignKeyActual(marcaproductosForeignKey);
		//}


		if(marcaproductoTableCellFk!=null) {
			marcaproductoTableCellFk.RecargarMarcaProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaModeloProducto(List<ModeloProducto> modeloproductosForeignKey)throws Exception{
		TableColumn tableColumnModeloProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO));
		TableCellEditor tableCellEditorModeloProducto =tableColumnModeloProducto.getCellEditor();

		ModeloProductoTableCell modeloproductoTableCellFk=(ModeloProductoTableCell)tableCellEditorModeloProducto;

		if(modeloproductoTableCellFk!=null) {
			modeloproductoTableCellFk.setmodeloproductosForeignKey(modeloproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//modeloproductoTableCellFk.setRowActual(intSelectedRow);
			//modeloproductoTableCellFk.setmodeloproductosForeignKeyActual(modeloproductosForeignKey);
		//}


		if(modeloproductoTableCellFk!=null) {
			modeloproductoTableCellFk.RecargarModeloProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMaterialProducto(List<MaterialProducto> materialproductosForeignKey)throws Exception{
		TableColumn tableColumnMaterialProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO));
		TableCellEditor tableCellEditorMaterialProducto =tableColumnMaterialProducto.getCellEditor();

		MaterialProductoTableCell materialproductoTableCellFk=(MaterialProductoTableCell)tableCellEditorMaterialProducto;

		if(materialproductoTableCellFk!=null) {
			materialproductoTableCellFk.setmaterialproductosForeignKey(materialproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//materialproductoTableCellFk.setRowActual(intSelectedRow);
			//materialproductoTableCellFk.setmaterialproductosForeignKeyActual(materialproductosForeignKey);
		//}


		if(materialproductoTableCellFk!=null) {
			materialproductoTableCellFk.RecargarMaterialProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaSegmentoProducto(List<SegmentoProducto> segmentoproductosForeignKey)throws Exception{
		TableColumn tableColumnSegmentoProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO));
		TableCellEditor tableCellEditorSegmentoProducto =tableColumnSegmentoProducto.getCellEditor();

		SegmentoProductoTableCell segmentoproductoTableCellFk=(SegmentoProductoTableCell)tableCellEditorSegmentoProducto;

		if(segmentoproductoTableCellFk!=null) {
			segmentoproductoTableCellFk.setsegmentoproductosForeignKey(segmentoproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//segmentoproductoTableCellFk.setRowActual(intSelectedRow);
			//segmentoproductoTableCellFk.setsegmentoproductosForeignKeyActual(segmentoproductosForeignKey);
		//}


		if(segmentoproductoTableCellFk!=null) {
			segmentoproductoTableCellFk.RecargarSegmentoProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTallaProducto(List<TallaProducto> tallaproductosForeignKey)throws Exception{
		TableColumn tableColumnTallaProducto=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO));
		TableCellEditor tableCellEditorTallaProducto =tableColumnTallaProducto.getCellEditor();

		TallaProductoTableCell tallaproductoTableCellFk=(TallaProductoTableCell)tableCellEditorTallaProducto;

		if(tallaproductoTableCellFk!=null) {
			tallaproductoTableCellFk.settallaproductosForeignKey(tallaproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tallaproductoTableCellFk.setRowActual(intSelectedRow);
			//tallaproductoTableCellFk.settallaproductosForeignKeyActual(tallaproductosForeignKey);
		//}


		if(tallaproductoTableCellFk!=null) {
			tallaproductoTableCellFk.RecargarTallaProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesParametroInventarioDefecto(false);
			
			//if(!this.isEsNuevoParametroInventarioDefecto) {								
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				
			}
			
			if(this.permiteMantenimiento(this.parametroinventariodefecto)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoParametroInventarioDefecto=true;
					this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
					this.isEsNuevoParametroInventarioDefecto=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoParametroInventarioDefecto=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoParametroInventarioDefecto=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesParametroInventarioDefecto(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto(false);
				
				this.habilitarDeshabilitarControlesParametroInventarioDefecto(false);
			
												
				
				if(ParametroInventarioDefectoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleParametroInventarioDefecto();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoParametroInventarioDefectoActionPerformed(evt,parametroinventariodefectoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualParametroInventarioDefecto(this.parametroinventariodefecto,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,parametroinventariodefectoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.parametroinventariodefecto.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				this.parametroinventariodefecto.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				this.parametroinventariodefecto.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.parametroinventariodefecto)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ParametroInventarioDefectoModel) this.jTableDatosParametroInventarioDefecto.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoParametroInventarioDefecto=true;
				this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
				this.isEsNuevoParametroInventarioDefecto=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesParametroInventarioDefecto(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto(false);
				
				this.habilitarDeshabilitarControlesParametroInventarioDefecto(false);
				
				
				
				if(ParametroInventarioDefectoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleParametroInventarioDefecto();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosParametroInventarioDefecto.getRowCount()>=1) {
				jTableDatosParametroInventarioDefecto.removeRowSelectionInterval(0, jTableDatosParametroInventarioDefecto.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesParametroInventarioDefecto(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroInventarioDefecto(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto(false) ;
			
			this.isEsNuevoParametroInventarioDefecto=false;
			
			if(ParametroInventarioDefectoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleParametroInventarioDefecto();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingParametroInventarioDefecto(false);
				
				//SI ES MANUAL
				if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualParametroInventarioDefecto();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoParametroInventarioDefecto--;			
			//ParametroInventarioDefecto parametroinventariodefectoAux= new ParametroInventarioDefecto();			
			//parametroinventariodefectoAux.setId(this.iIdNuevoParametroInventarioDefecto);
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaParametroInventarioDefecto();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
			
			this.parametroinventariodefecto.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.parametroinventariodefectoLogic.getParametroInventarioDefectos().add(this.parametroinventariodefectoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.parametroinventariodefectos.add(this.parametroinventariodefectoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
			
			this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(this.getIndiceNuevoParametroInventarioDefecto(), this.getIndiceNuevoParametroInventarioDefecto());
			
			int iLastRow =  this.jTableDatosParametroInventarioDefecto.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosParametroInventarioDefecto.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosParametroInventarioDefecto.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroInventarioDefecto(false);
			
			//SI ES MANUAL
			if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroInventarioDefecto();
			}
			
			//this.abrirFrameTreeParametroInventarioDefecto();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Parametro Inventario DefectoS ?", "MANTENIMIENTO DE Parametro Inventario Defecto", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionParametroInventarioDefecto.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralParametroInventarioDefecto();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.parametroinventariodefectoReturnGeneral=parametroinventariodefectoLogic.procesarImportacionParametroInventarioDefectosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.parametroinventariodefectoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarParametroInventarioDefectoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionParametroInventarioDefecto.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionParametroInventarioDefecto.setFileImportacion(this.jInternalFrameImportacionParametroInventarioDefecto.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionParametroInventarioDefecto.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionParametroInventarioDefecto.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionParametroInventarioDefecto.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionParametroInventarioDefecto.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		

		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ParametroInventarioDefectoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ParametroInventarioDefectoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteParametroInventarioDefectos("Todos",parametroinventariodefectosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_GrupoBodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_GrupoBodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_GrupoBodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_GrupoBodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CalidadProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CalidadProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CalidadProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CalidadProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoServicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoServicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoServicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoServicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoProductoServicioInven_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoProductoServicioInven_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoProductoServicioInven_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoProductoServicioInven_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoProductoServicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoProductoServicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoProductoServicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoProductoServicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCosteo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCosteo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCosteo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCosteo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoViaTransporte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoViaTransporte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoViaTransporte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoViaTransporte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_RangoUnidadVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_RangoUnidadVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_RangoUnidadVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_RangoUnidadVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Pais_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Pais_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Pais_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Pais_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ciudad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ciudad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ciudad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ciudad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ColorProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ColorProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ColorProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ColorProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ClaseProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ClaseProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ClaseProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ClaseProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EfectoProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EfectoProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EfectoProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EfectoProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_MarcaProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_MarcaProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_MarcaProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_MarcaProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ModeloProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ModeloProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ModeloProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ModeloProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_MaterialProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_MaterialProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_MaterialProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_MaterialProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_SegmentoProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_SegmentoProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_SegmentoProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_SegmentoProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TallaProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TallaProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TallaProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TallaProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA:
					sNombreCampoCategoria="id_grupo_bodega";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					sNombreCampoCategoria="id_calidad_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO:
					sNombreCampoCategoria="id_tipo_servicio";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN:
					sNombreCampoCategoria="id_tipo_producto_servicio_inven";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO:
					sNombreCampoCategoria="id_tipo_producto_servicio";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO:
					sNombreCampoCategoria="id_tipo_costeo";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO:
					sNombreCampoCategoria="id_tipo_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE:
					sNombreCampoCategoria="id_tipo_via_transporte";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA:
					sNombreCampoCategoria="id_rango_unidad_venta";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoria="id_pais";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoria="id_ciudad";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO:
					sNombreCampoCategoria="id_color_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO:
					sNombreCampoCategoria="id_clase_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO:
					sNombreCampoCategoria="id_efecto_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO:
					sNombreCampoCategoria="id_marca_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO:
					sNombreCampoCategoria="id_modelo_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO:
					sNombreCampoCategoria="id_material_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO:
					sNombreCampoCategoria="id_segmento_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO:
					sNombreCampoCategoria="id_talla_producto";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA:
					sNombreCampoCategoriaValor="id_grupo_bodega";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					sNombreCampoCategoriaValor="id_calidad_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO:
					sNombreCampoCategoriaValor="id_tipo_servicio";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN:
					sNombreCampoCategoriaValor="id_tipo_producto_servicio_inven";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO:
					sNombreCampoCategoriaValor="id_tipo_producto_servicio";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO:
					sNombreCampoCategoriaValor="id_tipo_costeo";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO:
					sNombreCampoCategoriaValor="id_tipo_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE:
					sNombreCampoCategoriaValor="id_tipo_via_transporte";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA:
					sNombreCampoCategoriaValor="id_rango_unidad_venta";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoriaValor="id_pais";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoriaValor="id_ciudad";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO:
					sNombreCampoCategoriaValor="id_color_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO:
					sNombreCampoCategoriaValor="id_clase_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO:
					sNombreCampoCategoriaValor="id_efecto_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO:
					sNombreCampoCategoriaValor="id_marca_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO:
					sNombreCampoCategoriaValor="id_modelo_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO:
					sNombreCampoCategoriaValor="id_material_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO:
					sNombreCampoCategoriaValor="id_segmento_producto";
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO:
					sNombreCampoCategoriaValor="id_talla_producto";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Grupo Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_grupo_bodega");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Calidad Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_calidad_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Servicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_servicio");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Producto Servicio.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_producto_servicio_inven");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Producto Servicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_producto_servicio");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Costeo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_costeo");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Via Transporte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_via_transporte");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Rango Unidad Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_rango_unidad_venta");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pais",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pais");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ciudad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ciudad");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Color Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_color_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Clase Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_clase_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Efecto Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_efecto_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Marca Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_marca_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modelo Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modelo_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Material Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_material_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Segmento Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_segmento_producto");
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Talla Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_talla_producto");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroinventariodefecto";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("ParametroInventarioDefectos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getgrupobodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getcalidadproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.gettiposervicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.gettipoproductoservicioinven_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.gettipoproductoservicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.gettipocosteo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.gettipoproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.gettipoviatransporte_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getrangounidadventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getpais_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getciudad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getcolorproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getclaseproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getefectoproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getmarcaproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getmodeloproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getmaterialproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.getsegmentoproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO);
					iRow++;

					for(ParametroInventarioDefecto parametroinventariodefecto:parametroinventariodefectosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroinventariodefecto.gettallaproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelParametroInventarioDefecto(row);				
			//	iRow++;
			//}				
			
			//for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelParametroInventarioDefecto(parametroinventariodefectoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroInventarioDefecto(false);
			
			//SI ES MANUAL
			if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroInventarioDefecto();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroInventarioDefecto(false);
			
			//SI ES MANUAL
			if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualParametroInventarioDefecto();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroInventarioDefecto(false);
			
			//SI ES MANUAL
			if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualParametroInventarioDefecto();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaParametroInventarioDefecto() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosParametroInventarioDefecto.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosParametroInventarioDefecto.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosParametroInventarioDefecto.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosParametroInventarioDefecto.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosParametroInventarioDefecto.setMinimumSize(dimensionMinimum);
		this.jTableDatosParametroInventarioDefecto.setMaximumSize(dimensionMaximum);
		this.jTableDatosParametroInventarioDefecto.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingParametroInventarioDefecto(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingParametroInventarioDefecto(esInicializar,true);
	}
	
	public void inicializarActualizarBindingParametroInventarioDefecto(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaParametroInventarioDefecto(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesParametroInventarioDefecto(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasParametroInventarioDefecto(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroInventarioDefecto(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesParametroInventarioDefecto(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualParametroInventarioDefecto() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaParametroInventarioDefecto();
		
		this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualParametroInventarioDefecto();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroInventarioDefecto() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualParametroInventarioDefecto(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualParametroInventarioDefecto(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosParametroInventarioDefecto.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosParametroInventarioDefecto.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteParametroInventarioDefecto.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormParametroInventarioDefecto.jCheckBoxPostAccionNuevoParametroInventarioDefecto.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormParametroInventarioDefecto.jCheckBoxPostAccionSinCerrarParametroInventarioDefecto.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormParametroInventarioDefecto.jCheckBoxPostAccionSinMensajeParametroInventarioDefecto.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosParametroInventarioDefecto.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosParametroInventarioDefecto.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteParametroInventarioDefecto.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jCheckBoxPostAccionNuevoParametroInventarioDefecto.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jCheckBoxPostAccionSinCerrarParametroInventarioDefecto.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jCheckBoxPostAccionSinMensajeParametroInventarioDefecto.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionParametroInventarioDefecto.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionParametroInventarioDefecto.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesParametroInventarioDefecto.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesParametroInventarioDefecto.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesParametroInventarioDefecto.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarParametroInventarioDefecto.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesParametroInventarioDefecto.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesParametroInventarioDefecto.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralParametroInventarioDefecto.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesParametroInventarioDefecto(Boolean esInicializar) throws Exception {
		try	{	
			if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualParametroInventarioDefecto(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesParametroInventarioDefecto() throws Exception {
		try	{
			if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualParametroInventarioDefecto();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleParametroInventarioDefecto() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualParametroInventarioDefecto() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesParametroInventarioDefecto.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesParametroInventarioDefecto.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesParametroInventarioDefecto.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesParametroInventarioDefecto.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesParametroInventarioDefecto.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesParametroInventarioDefecto.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionParametroInventarioDefecto.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionParametroInventarioDefecto.addItem(reporte);
			}
			
			
			if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionParametroInventarioDefecto.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionParametroInventarioDefecto.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesParametroInventarioDefecto.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesParametroInventarioDefecto.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesParametroInventarioDefecto.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesParametroInventarioDefecto.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarParametroInventarioDefecto.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarParametroInventarioDefecto.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarParametroInventarioDefecto.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroInventarioDefecto();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroInventarioDefecto() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
				
				if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualParametroInventarioDefecto()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_calidad_productoFK_IdCalidadProducto=((CalidadProducto)this.jComboBoxid_calidad_productoFK_IdCalidadProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.getSelectedItem()!=null){this.id_ciudadFK_IdCiudad=((Ciudad)this.jComboBoxid_ciudadFK_IdCiudadParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_clase_productoFK_IdClaseProducto=((ClaseProducto)this.jComboBoxid_clase_productoFK_IdClaseProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_color_productoFK_IdColorProducto=((ColorProducto)this.jComboBoxid_color_productoFK_IdColorProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_efecto_productoFK_IdEfectoProducto=((EfectoProducto)this.jComboBoxid_efecto_productoFK_IdEfectoProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.getSelectedItem()!=null){this.id_grupo_bodegaFK_IdGrupoBodega=((GrupoBodega)this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_marca_productoFK_IdMarcaProducto=((MarcaProducto)this.jComboBoxid_marca_productoFK_IdMarcaProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_material_productoFK_IdMaterialProducto=((MaterialProducto)this.jComboBoxid_material_productoFK_IdMaterialProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_modelo_productoFK_IdModeloProducto=((ModeloProducto)this.jComboBoxid_modelo_productoFK_IdModeloProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.getSelectedItem()!=null){this.id_paisFK_IdPais=((Pais)this.jComboBoxid_paisFK_IdPaisParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.getSelectedItem()!=null){this.id_rango_unidad_ventaFK_IdRangoUnidadVenta=((RangoUnidadVenta)this.jComboBoxid_rango_unidad_ventaFK_IdRangoUnidadVentaParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_segmento_productoFK_IdSegmentoProducto=((SegmentoProducto)this.jComboBoxid_segmento_productoFK_IdSegmentoProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_talla_productoFK_IdTallaProducto=((TallaProducto)this.jComboBoxid_talla_productoFK_IdTallaProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.getSelectedItem()!=null){this.id_tipo_costeoFK_IdTipoCosteo=((TipoCosteo)this.jComboBoxid_tipo_costeoFK_IdTipoCosteoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.getSelectedItem()!=null){this.id_tipo_productoFK_IdTipoProducto=((TipoProducto)this.jComboBoxid_tipo_productoFK_IdTipoProductoParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.getSelectedItem()!=null){this.id_tipo_producto_servicioFK_IdTipoProductoServicio=((TipoProductoServicio)this.jComboBoxid_tipo_producto_servicioFK_IdTipoProductoServicioParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.getSelectedItem()!=null){this.id_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven=((TipoProductoServicioInven)this.jComboBoxid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInvenParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.getSelectedItem()!=null){this.id_tipo_servicioFK_IdTipoServicio=((TipoServicio)this.jComboBoxid_tipo_servicioFK_IdTipoServicioParametroInventarioDefecto.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.getSelectedItem()!=null){this.id_tipo_via_transporteFK_IdTipoViaTransporte=((TipoViaTransporte)this.jComboBoxid_tipo_via_transporteFK_IdTipoViaTransporteParametroInventarioDefecto.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasParametroInventarioDefecto(Boolean esInicializar) throws Exception {				
		if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualParametroInventarioDefecto();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaParametroInventarioDefecto() throws Exception {
		this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByParametroInventarioDefecto() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosParametroInventarioDefectoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefectoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaParametroInventarioDefecto(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=parametroinventariodefectoLogic.getParametroInventarioDefectos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=parametroinventariodefectos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosParametroInventarioDefecto.setModel(new ParametroInventarioDefectoModel(this.parametroinventariodefectoLogic.getParametroInventarioDefectos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosParametroInventarioDefecto.setModel(new ParametroInventarioDefectoModel(this.parametroinventariodefectos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByParametroInventarioDefecto!=null && this.jInternalFrameOrderByParametroInventarioDefecto.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByParametroInventarioDefecto();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ParametroInventarioDefectoConstantesFunciones.SCLASSWEBTITULO,parametroinventariodefectoConstantesFunciones.resaltarSeleccionarParametroInventarioDefecto,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ParametroInventarioDefectoConstantesFunciones.SCLASSWEBTITULO,parametroinventariodefectoConstantesFunciones.resaltarSeleccionarParametroInventarioDefecto,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_ID));

		if(this.parametroinventariodefectoConstantesFunciones.mostraridParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametroinventariodefectoConstantesFunciones.resaltaridParametroInventarioDefecto,this.parametroinventariodefectoConstantesFunciones.activaridParametroInventarioDefecto,this,true,"idParametroInventarioDefecto","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametroinventariodefectoConstantesFunciones.resaltaridParametroInventarioDefecto,this.parametroinventariodefectoConstantesFunciones.activaridParametroInventarioDefecto,this,true,"idParametroInventarioDefecto","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_empresaParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_empresaParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_empresaParametroInventarioDefecto));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_empresaParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_empresaParametroInventarioDefecto,false,"id_empresaParametroInventarioDefecto","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_sucursalParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_sucursalParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_sucursalParametroInventarioDefecto));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_sucursalParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_sucursalParametroInventarioDefecto,false,"id_sucursalParametroInventarioDefecto","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_grupo_bodegaParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new GrupoBodegaTableCell(this.grupobodegasForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_grupo_bodegaParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_grupo_bodegaParametroInventarioDefecto));
			tableColumn.setCellEditor(new GrupoBodegaTableCell(this.grupobodegasForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_grupo_bodegaParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_grupo_bodegaParametroInventarioDefecto,true,"id_grupo_bodegaParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_calidad_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CalidadProductoTableCell(this.calidadproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_calidad_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_calidad_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new CalidadProductoTableCell(this.calidadproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_calidad_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_calidad_productoParametroInventarioDefecto,true,"id_calidad_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_servicioParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoServicioTableCell(this.tiposerviciosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_servicioParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_servicioParametroInventarioDefecto));
			tableColumn.setCellEditor(new TipoServicioTableCell(this.tiposerviciosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_servicioParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_servicioParametroInventarioDefecto,true,"id_tipo_servicioParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_producto_servicio_invenParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoProductoServicioInvenTableCell(this.tipoproductoservicioinvensForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_producto_servicio_invenParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_producto_servicio_invenParametroInventarioDefecto));
			tableColumn.setCellEditor(new TipoProductoServicioInvenTableCell(this.tipoproductoservicioinvensForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_producto_servicio_invenParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_producto_servicio_invenParametroInventarioDefecto,true,"id_tipo_producto_servicio_invenParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_producto_servicioParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoProductoServicioTableCell(this.tipoproductoserviciosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_producto_servicioParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_producto_servicioParametroInventarioDefecto));
			tableColumn.setCellEditor(new TipoProductoServicioTableCell(this.tipoproductoserviciosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_producto_servicioParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_producto_servicioParametroInventarioDefecto,true,"id_tipo_producto_servicioParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_costeoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoCosteoTableCell(this.tipocosteosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_costeoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_costeoParametroInventarioDefecto));
			tableColumn.setCellEditor(new TipoCosteoTableCell(this.tipocosteosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_costeoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_costeoParametroInventarioDefecto,true,"id_tipo_costeoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoProductoTableCell(this.tipoproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new TipoProductoTableCell(this.tipoproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_productoParametroInventarioDefecto,true,"id_tipo_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_via_transporteParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoViaTransporteTableCell(this.tipoviatransportesForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_via_transporteParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_via_transporteParametroInventarioDefecto));
			tableColumn.setCellEditor(new TipoViaTransporteTableCell(this.tipoviatransportesForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_via_transporteParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_tipo_via_transporteParametroInventarioDefecto,true,"id_tipo_via_transporteParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_rango_unidad_ventaParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new RangoUnidadVentaTableCell(this.rangounidadventasForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_rango_unidad_ventaParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_rango_unidad_ventaParametroInventarioDefecto));
			tableColumn.setCellEditor(new RangoUnidadVentaTableCell(this.rangounidadventasForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_rango_unidad_ventaParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_rango_unidad_ventaParametroInventarioDefecto,true,"id_rango_unidad_ventaParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_paisParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PaisTableCell(this.paissForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_paisParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_paisParametroInventarioDefecto));
			tableColumn.setCellEditor(new PaisTableCell(this.paissForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_paisParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_paisParametroInventarioDefecto,true,"id_paisParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_ciudadParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CiudadTableCell(this.ciudadsForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_ciudadParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_ciudadParametroInventarioDefecto));
			tableColumn.setCellEditor(new CiudadTableCell(this.ciudadsForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_ciudadParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_ciudadParametroInventarioDefecto,true,"id_ciudadParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_color_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ColorProductoTableCell(this.colorproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_color_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_color_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new ColorProductoTableCell(this.colorproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_color_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_color_productoParametroInventarioDefecto,true,"id_color_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_clase_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClaseProductoTableCell(this.claseproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_clase_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_clase_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new ClaseProductoTableCell(this.claseproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_clase_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_clase_productoParametroInventarioDefecto,true,"id_clase_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_efecto_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EfectoProductoTableCell(this.efectoproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_efecto_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_efecto_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new EfectoProductoTableCell(this.efectoproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_efecto_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_efecto_productoParametroInventarioDefecto,true,"id_efecto_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_marca_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MarcaProductoTableCell(this.marcaproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_marca_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_marca_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new MarcaProductoTableCell(this.marcaproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_marca_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_marca_productoParametroInventarioDefecto,true,"id_marca_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_modelo_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModeloProductoTableCell(this.modeloproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_modelo_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_modelo_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new ModeloProductoTableCell(this.modeloproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_modelo_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_modelo_productoParametroInventarioDefecto,true,"id_modelo_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_material_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MaterialProductoTableCell(this.materialproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_material_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_material_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new MaterialProductoTableCell(this.materialproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_material_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_material_productoParametroInventarioDefecto,true,"id_material_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_segmento_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new SegmentoProductoTableCell(this.segmentoproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_segmento_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_segmento_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new SegmentoProductoTableCell(this.segmentoproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_segmento_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_segmento_productoParametroInventarioDefecto,true,"id_segmento_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO));

		if(this.parametroinventariodefectoConstantesFunciones.mostrarid_talla_productoParametroInventarioDefecto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TallaProductoTableCell(this.tallaproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_talla_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_talla_productoParametroInventarioDefecto));
			tableColumn.setCellEditor(new TallaProductoTableCell(this.tallaproductosForeignKey,this.parametroinventariodefectoConstantesFunciones.resaltarid_talla_productoParametroInventarioDefecto,this,this.parametroinventariodefectoConstantesFunciones.activarid_talla_productoParametroInventarioDefecto,true,"id_talla_productoParametroInventarioDefecto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroInventarioDefectoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosParametroInventarioDefecto.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosParametroInventarioDefecto.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosParametroInventarioDefecto.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosParametroInventarioDefecto.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosParametroInventarioDefecto.moveColumn(this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosParametroInventarioDefecto.moveColumn(this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosParametroInventarioDefecto.moveColumn(this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosParametroInventarioDefecto.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosParametroInventarioDefecto.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosParametroInventarioDefecto,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosParametroInventarioDefecto.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosParametroInventarioDefecto.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosParametroInventarioDefecto.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=parametroinventariodefectoLogic.getParametroInventarioDefectos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=parametroinventariodefectos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosParametroInventarioDefecto.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosParametroInventarioDefecto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosParametroInventarioDefecto();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoParametroInventarioDefecto=false;
					
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
				if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosParametroInventarioDefecto.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.parametroinventariodefecto.getsType().equals("DUPLICADO")
				   || this.parametroinventariodefecto.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoParametroInventarioDefecto=true;
				
				} else {
					this.isEsNuevoParametroInventarioDefecto=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
					if(this.parametroinventariodefecto.getId()>=0 && !this.parametroinventariodefecto.getIsNew()) {						
						this.isEsNuevoParametroInventarioDefecto=false;
						
					} else {
						this.isEsNuevoParametroInventarioDefecto=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoParametroInventarioDefecto(esRelaciones);						
				
				this.seleccionarParametroInventarioDefecto(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.parametroinventariodefecto.getId()<0) {
					this.isEsNuevoParametroInventarioDefecto=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarParametroInventarioDefecto(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarParametroInventarioDefecto(evt,rowIndex);
				}	
				
				if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion ParametroInventarioDefecto: " + this.dDif); 
					}
				}								
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarParametroInventarioDefecto(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.parametroinventariodefecto)) {
					if(this.parametroinventariodefecto.getId()>0) {
						this.parametroinventariodefecto.setIsDeleted(true);
						
						this.parametroinventariodefectosEliminados.add(this.parametroinventariodefecto);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.parametroinventariodefectoLogic.getParametroInventarioDefectos().remove(this.parametroinventariodefecto);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefectos.remove(this.parametroinventariodefecto);				
					}
					
					
					((ParametroInventarioDefectoModel) this.jTableDatosParametroInventarioDefecto.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarParametroInventarioDefecto(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoParametroInventarioDefecto) {
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosParametroInventarioDefecto.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosParametroInventarioDefecto.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioParametroInventarioDefecto(this.parametroinventariodefecto);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_empresaParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_empresaParametroInventarioDefecto) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_empresa());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(parametroinventariodefecto.getEmpresa()!=null) {
							this.empresasForeignKey.add(parametroinventariodefecto.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.parametroinventariodefecto.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_sucursalParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_sucursalParametroInventarioDefecto) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_sucursal());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(parametroinventariodefecto.getSucursal()!=null) {
							this.sucursalsForeignKey.add(parametroinventariodefecto.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.parametroinventariodefecto.getid_sucursal(),false,"Formulario");

					//GrupoBodega
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_grupo_bodegaParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_grupo_bodegaParametroInventarioDefecto) {
						//this.cargarCombosGrupoBodegasForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_grupo_bodega());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.grupobodegasForeignKey=new ArrayList<GrupoBodega>();

						if(parametroinventariodefecto.getGrupoBodega()!=null) {
							this.grupobodegasForeignKey.add(parametroinventariodefecto.getGrupoBodega());
						}

						this.addItemDefectoCombosForeignKeyGrupoBodega();
						this.cargarCombosFrameGrupoBodegasForeignKey("Todos");
					}
					this.setActualGrupoBodegaForeignKey(this.parametroinventariodefecto.getid_grupo_bodega(),false,"Formulario");

					//CalidadProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_calidad_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_calidad_productoParametroInventarioDefecto) {
						//this.cargarCombosCalidadProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_calidad_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.calidadproductosForeignKey=new ArrayList<CalidadProducto>();

						if(parametroinventariodefecto.getCalidadProducto()!=null) {
							this.calidadproductosForeignKey.add(parametroinventariodefecto.getCalidadProducto());
						}

						this.addItemDefectoCombosForeignKeyCalidadProducto();
						this.cargarCombosFrameCalidadProductosForeignKey("Todos");
					}
					this.setActualCalidadProductoForeignKey(this.parametroinventariodefecto.getid_calidad_producto(),false,"Formulario");

					//TipoServicio
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_servicioParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_tipo_servicioParametroInventarioDefecto) {
						//this.cargarCombosTipoServiciosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_tipo_servicio());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.tiposerviciosForeignKey=new ArrayList<TipoServicio>();

						if(parametroinventariodefecto.getTipoServicio()!=null) {
							this.tiposerviciosForeignKey.add(parametroinventariodefecto.getTipoServicio());
						}

						this.addItemDefectoCombosForeignKeyTipoServicio();
						this.cargarCombosFrameTipoServiciosForeignKey("Todos");
					}
					this.setActualTipoServicioForeignKey(this.parametroinventariodefecto.getid_tipo_servicio(),false,"Formulario");

					//TipoProductoServicioInven
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_producto_servicio_invenParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_tipo_producto_servicio_invenParametroInventarioDefecto) {
						//this.cargarCombosTipoProductoServicioInvensForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_tipo_producto_servicio_inven());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.tipoproductoservicioinvensForeignKey=new ArrayList<TipoProductoServicioInven>();

						if(parametroinventariodefecto.getTipoProductoServicioInven()!=null) {
							this.tipoproductoservicioinvensForeignKey.add(parametroinventariodefecto.getTipoProductoServicioInven());
						}

						this.addItemDefectoCombosForeignKeyTipoProductoServicioInven();
						this.cargarCombosFrameTipoProductoServicioInvensForeignKey("Todos");
					}
					this.setActualTipoProductoServicioInvenForeignKey(this.parametroinventariodefecto.getid_tipo_producto_servicio_inven(),false,"Formulario");

					//TipoProductoServicio
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_producto_servicioParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_tipo_producto_servicioParametroInventarioDefecto) {
						//this.cargarCombosTipoProductoServiciosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_tipo_producto_servicio());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.tipoproductoserviciosForeignKey=new ArrayList<TipoProductoServicio>();

						if(parametroinventariodefecto.getTipoProductoServicio()!=null) {
							this.tipoproductoserviciosForeignKey.add(parametroinventariodefecto.getTipoProductoServicio());
						}

						this.addItemDefectoCombosForeignKeyTipoProductoServicio();
						this.cargarCombosFrameTipoProductoServiciosForeignKey("Todos");
					}
					this.setActualTipoProductoServicioForeignKey(this.parametroinventariodefecto.getid_tipo_producto_servicio(),false,"Formulario");

					//TipoCosteo
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_costeoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_tipo_costeoParametroInventarioDefecto) {
						//this.cargarCombosTipoCosteosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_tipo_costeo());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.tipocosteosForeignKey=new ArrayList<TipoCosteo>();

						if(parametroinventariodefecto.getTipoCosteo()!=null) {
							this.tipocosteosForeignKey.add(parametroinventariodefecto.getTipoCosteo());
						}

						this.addItemDefectoCombosForeignKeyTipoCosteo();
						this.cargarCombosFrameTipoCosteosForeignKey("Todos");
					}
					this.setActualTipoCosteoForeignKey(this.parametroinventariodefecto.getid_tipo_costeo(),false,"Formulario");

					//TipoProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_tipo_productoParametroInventarioDefecto) {
						//this.cargarCombosTipoProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_tipo_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.tipoproductosForeignKey=new ArrayList<TipoProducto>();

						if(parametroinventariodefecto.getTipoProducto()!=null) {
							this.tipoproductosForeignKey.add(parametroinventariodefecto.getTipoProducto());
						}

						this.addItemDefectoCombosForeignKeyTipoProducto();
						this.cargarCombosFrameTipoProductosForeignKey("Todos");
					}
					this.setActualTipoProductoForeignKey(this.parametroinventariodefecto.getid_tipo_producto(),false,"Formulario");

					//TipoViaTransporte
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_tipo_via_transporteParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_tipo_via_transporteParametroInventarioDefecto) {
						//this.cargarCombosTipoViaTransportesForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_tipo_via_transporte());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.tipoviatransportesForeignKey=new ArrayList<TipoViaTransporte>();

						if(parametroinventariodefecto.getTipoViaTransporte()!=null) {
							this.tipoviatransportesForeignKey.add(parametroinventariodefecto.getTipoViaTransporte());
						}

						this.addItemDefectoCombosForeignKeyTipoViaTransporte();
						this.cargarCombosFrameTipoViaTransportesForeignKey("Todos");
					}
					this.setActualTipoViaTransporteForeignKey(this.parametroinventariodefecto.getid_tipo_via_transporte(),false,"Formulario");

					//RangoUnidadVenta
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_rango_unidad_ventaParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_rango_unidad_ventaParametroInventarioDefecto) {
						//this.cargarCombosRangoUnidadVentasForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_rango_unidad_venta());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.rangounidadventasForeignKey=new ArrayList<RangoUnidadVenta>();

						if(parametroinventariodefecto.getRangoUnidadVenta()!=null) {
							this.rangounidadventasForeignKey.add(parametroinventariodefecto.getRangoUnidadVenta());
						}

						this.addItemDefectoCombosForeignKeyRangoUnidadVenta();
						this.cargarCombosFrameRangoUnidadVentasForeignKey("Todos");
					}
					this.setActualRangoUnidadVentaForeignKey(this.parametroinventariodefecto.getid_rango_unidad_venta(),false,"Formulario");

					//Pais
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_paisParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_paisParametroInventarioDefecto) {
						//this.cargarCombosPaissForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_pais());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.paissForeignKey=new ArrayList<Pais>();

						if(parametroinventariodefecto.getPais()!=null) {
							this.paissForeignKey.add(parametroinventariodefecto.getPais());
						}

						this.addItemDefectoCombosForeignKeyPais();
						this.cargarCombosFramePaissForeignKey("Todos");
					}
					this.setActualPaisForeignKey(this.parametroinventariodefecto.getid_pais(),false,"Formulario");

					//Ciudad
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_ciudadParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_ciudadParametroInventarioDefecto) {
						//this.cargarCombosCiudadsForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_ciudad());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.ciudadsForeignKey=new ArrayList<Ciudad>();

						if(parametroinventariodefecto.getCiudad()!=null) {
							this.ciudadsForeignKey.add(parametroinventariodefecto.getCiudad());
						}

						this.addItemDefectoCombosForeignKeyCiudad();
						this.cargarCombosFrameCiudadsForeignKey("Todos");
					}
					this.setActualCiudadForeignKey(this.parametroinventariodefecto.getid_ciudad(),false,"Formulario");

					//ColorProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_color_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_color_productoParametroInventarioDefecto) {
						//this.cargarCombosColorProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_color_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.colorproductosForeignKey=new ArrayList<ColorProducto>();

						if(parametroinventariodefecto.getColorProducto()!=null) {
							this.colorproductosForeignKey.add(parametroinventariodefecto.getColorProducto());
						}

						this.addItemDefectoCombosForeignKeyColorProducto();
						this.cargarCombosFrameColorProductosForeignKey("Todos");
					}
					this.setActualColorProductoForeignKey(this.parametroinventariodefecto.getid_color_producto(),false,"Formulario");

					//ClaseProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_clase_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_clase_productoParametroInventarioDefecto) {
						//this.cargarCombosClaseProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_clase_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.claseproductosForeignKey=new ArrayList<ClaseProducto>();

						if(parametroinventariodefecto.getClaseProducto()!=null) {
							this.claseproductosForeignKey.add(parametroinventariodefecto.getClaseProducto());
						}

						this.addItemDefectoCombosForeignKeyClaseProducto();
						this.cargarCombosFrameClaseProductosForeignKey("Todos");
					}
					this.setActualClaseProductoForeignKey(this.parametroinventariodefecto.getid_clase_producto(),false,"Formulario");

					//EfectoProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_efecto_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_efecto_productoParametroInventarioDefecto) {
						//this.cargarCombosEfectoProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_efecto_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.efectoproductosForeignKey=new ArrayList<EfectoProducto>();

						if(parametroinventariodefecto.getEfectoProducto()!=null) {
							this.efectoproductosForeignKey.add(parametroinventariodefecto.getEfectoProducto());
						}

						this.addItemDefectoCombosForeignKeyEfectoProducto();
						this.cargarCombosFrameEfectoProductosForeignKey("Todos");
					}
					this.setActualEfectoProductoForeignKey(this.parametroinventariodefecto.getid_efecto_producto(),false,"Formulario");

					//MarcaProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_marca_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_marca_productoParametroInventarioDefecto) {
						//this.cargarCombosMarcaProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_marca_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.marcaproductosForeignKey=new ArrayList<MarcaProducto>();

						if(parametroinventariodefecto.getMarcaProducto()!=null) {
							this.marcaproductosForeignKey.add(parametroinventariodefecto.getMarcaProducto());
						}

						this.addItemDefectoCombosForeignKeyMarcaProducto();
						this.cargarCombosFrameMarcaProductosForeignKey("Todos");
					}
					this.setActualMarcaProductoForeignKey(this.parametroinventariodefecto.getid_marca_producto(),false,"Formulario");

					//ModeloProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_modelo_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_modelo_productoParametroInventarioDefecto) {
						//this.cargarCombosModeloProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_modelo_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.modeloproductosForeignKey=new ArrayList<ModeloProducto>();

						if(parametroinventariodefecto.getModeloProducto()!=null) {
							this.modeloproductosForeignKey.add(parametroinventariodefecto.getModeloProducto());
						}

						this.addItemDefectoCombosForeignKeyModeloProducto();
						this.cargarCombosFrameModeloProductosForeignKey("Todos");
					}
					this.setActualModeloProductoForeignKey(this.parametroinventariodefecto.getid_modelo_producto(),false,"Formulario");

					//MaterialProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_material_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_material_productoParametroInventarioDefecto) {
						//this.cargarCombosMaterialProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_material_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.materialproductosForeignKey=new ArrayList<MaterialProducto>();

						if(parametroinventariodefecto.getMaterialProducto()!=null) {
							this.materialproductosForeignKey.add(parametroinventariodefecto.getMaterialProducto());
						}

						this.addItemDefectoCombosForeignKeyMaterialProducto();
						this.cargarCombosFrameMaterialProductosForeignKey("Todos");
					}
					this.setActualMaterialProductoForeignKey(this.parametroinventariodefecto.getid_material_producto(),false,"Formulario");

					//SegmentoProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_segmento_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_segmento_productoParametroInventarioDefecto) {
						//this.cargarCombosSegmentoProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_segmento_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.segmentoproductosForeignKey=new ArrayList<SegmentoProducto>();

						if(parametroinventariodefecto.getSegmentoProducto()!=null) {
							this.segmentoproductosForeignKey.add(parametroinventariodefecto.getSegmentoProducto());
						}

						this.addItemDefectoCombosForeignKeySegmentoProducto();
						this.cargarCombosFrameSegmentoProductosForeignKey("Todos");
					}
					this.setActualSegmentoProductoForeignKey(this.parametroinventariodefecto.getid_segmento_producto(),false,"Formulario");

					//TallaProducto
					if(!this.parametroinventariodefectoConstantesFunciones.cargarid_talla_productoParametroInventarioDefecto || this.parametroinventariodefectoConstantesFunciones.event_dependid_talla_productoParametroInventarioDefecto) {
						//this.cargarCombosTallaProductosForeignKeyLista(" where id="+this.parametroinventariodefecto.getid_talla_producto());
									//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
						this.tallaproductosForeignKey=new ArrayList<TallaProducto>();

						if(parametroinventariodefecto.getTallaProducto()!=null) {
							this.tallaproductosForeignKey.add(parametroinventariodefecto.getTallaProducto());
						}

						this.addItemDefectoCombosForeignKeyTallaProducto();
						this.cargarCombosFrameTallaProductosForeignKey("Todos");
					}
					this.setActualTallaProductoForeignKey(this.parametroinventariodefecto.getid_talla_producto(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesParametroInventarioDefecto("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesParametroInventarioDefecto(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoParametroInventarioDefecto(parametroinventariodefecto,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioParametroInventarioDefecto(parametroinventariodefecto);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyParametroInventarioDefecto(parametroinventariodefecto,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyParametroInventarioDefecto(parametroinventariodefecto);
	}
	
	public void setVariablesObjetoActualToFormularioParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.setText(parametroinventariodefecto.getId().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,ParametroInventarioDefecto parametroinventariodefectoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,parametroinventariodefectoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,ParametroInventarioDefecto parametroinventariodefectoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				parametroinventariodefectoLocal=this.parametroinventariodefecto;
			} else {
				parametroinventariodefectoLocal=this.parametroinventariodefectoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(parametroinventariodefectoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoParametroInventarioDefecto(parametroinventariodefectoLocal,true);
					
					if(parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(parametroinventariodefectoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(parametroinventariodefectoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(parametroinventariodefecto,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(parametroinventariodefecto);
	}
	
	public void setVariablesFormularioToObjetoActualParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(parametroinventariodefecto,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.getText()==null || this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.getText()=="" || this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.getText()=="Id") {
				this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.setText("0");
			}

			if(conColumnasBase) {parametroinventariodefecto.setId(Long.parseLong(this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroInventarioDefectoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelIdParametroInventarioDefecto,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefectoBean,ParametroInventarioDefecto parametroinventariodefecto,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_grupo_bodega()!=null && !parametroinventariodefectoBean.getid_grupo_bodega().equals(-1L))) {parametroinventariodefecto.setid_grupo_bodega(parametroinventariodefectoBean.getid_grupo_bodega());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_calidad_producto()!=null && !parametroinventariodefectoBean.getid_calidad_producto().equals(-1L))) {parametroinventariodefecto.setid_calidad_producto(parametroinventariodefectoBean.getid_calidad_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_tipo_servicio()!=null && !parametroinventariodefectoBean.getid_tipo_servicio().equals(-1L))) {parametroinventariodefecto.setid_tipo_servicio(parametroinventariodefectoBean.getid_tipo_servicio());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_tipo_producto_servicio_inven()!=null && !parametroinventariodefectoBean.getid_tipo_producto_servicio_inven().equals(-1L))) {parametroinventariodefecto.setid_tipo_producto_servicio_inven(parametroinventariodefectoBean.getid_tipo_producto_servicio_inven());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_tipo_producto_servicio()!=null && !parametroinventariodefectoBean.getid_tipo_producto_servicio().equals(-1L))) {parametroinventariodefecto.setid_tipo_producto_servicio(parametroinventariodefectoBean.getid_tipo_producto_servicio());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_tipo_costeo()!=null && !parametroinventariodefectoBean.getid_tipo_costeo().equals(-1L))) {parametroinventariodefecto.setid_tipo_costeo(parametroinventariodefectoBean.getid_tipo_costeo());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_tipo_producto()!=null && !parametroinventariodefectoBean.getid_tipo_producto().equals(-1L))) {parametroinventariodefecto.setid_tipo_producto(parametroinventariodefectoBean.getid_tipo_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_tipo_via_transporte()!=null && !parametroinventariodefectoBean.getid_tipo_via_transporte().equals(-1L))) {parametroinventariodefecto.setid_tipo_via_transporte(parametroinventariodefectoBean.getid_tipo_via_transporte());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_rango_unidad_venta()!=null && !parametroinventariodefectoBean.getid_rango_unidad_venta().equals(-1L))) {parametroinventariodefecto.setid_rango_unidad_venta(parametroinventariodefectoBean.getid_rango_unidad_venta());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_pais()!=null && !parametroinventariodefectoBean.getid_pais().equals(-1L))) {parametroinventariodefecto.setid_pais(parametroinventariodefectoBean.getid_pais());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_ciudad()!=null && !parametroinventariodefectoBean.getid_ciudad().equals(-1L))) {parametroinventariodefecto.setid_ciudad(parametroinventariodefectoBean.getid_ciudad());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_color_producto()!=null && !parametroinventariodefectoBean.getid_color_producto().equals(-1L))) {parametroinventariodefecto.setid_color_producto(parametroinventariodefectoBean.getid_color_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_clase_producto()!=null && !parametroinventariodefectoBean.getid_clase_producto().equals(-1L))) {parametroinventariodefecto.setid_clase_producto(parametroinventariodefectoBean.getid_clase_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_efecto_producto()!=null && !parametroinventariodefectoBean.getid_efecto_producto().equals(-1L))) {parametroinventariodefecto.setid_efecto_producto(parametroinventariodefectoBean.getid_efecto_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_marca_producto()!=null && !parametroinventariodefectoBean.getid_marca_producto().equals(-1L))) {parametroinventariodefecto.setid_marca_producto(parametroinventariodefectoBean.getid_marca_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_modelo_producto()!=null && !parametroinventariodefectoBean.getid_modelo_producto().equals(-1L))) {parametroinventariodefecto.setid_modelo_producto(parametroinventariodefectoBean.getid_modelo_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_material_producto()!=null && !parametroinventariodefectoBean.getid_material_producto().equals(-1L))) {parametroinventariodefecto.setid_material_producto(parametroinventariodefectoBean.getid_material_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_segmento_producto()!=null && !parametroinventariodefectoBean.getid_segmento_producto().equals(-1L))) {parametroinventariodefecto.setid_segmento_producto(parametroinventariodefectoBean.getid_segmento_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoBean.getid_talla_producto()!=null && !parametroinventariodefectoBean.getid_talla_producto().equals(-1L))) {parametroinventariodefecto.setid_talla_producto(parametroinventariodefectoBean.getid_talla_producto());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefectoOrigen,ParametroInventarioDefecto parametroinventariodefecto,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getId()!=null && !parametroinventariodefectoOrigen.getId().equals(0L))) {parametroinventariodefecto.setId(parametroinventariodefectoOrigen.getId());}}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_grupo_bodega()!=null && !parametroinventariodefectoOrigen.getid_grupo_bodega().equals(-1L))) {parametroinventariodefecto.setid_grupo_bodega(parametroinventariodefectoOrigen.getid_grupo_bodega());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_calidad_producto()!=null && !parametroinventariodefectoOrigen.getid_calidad_producto().equals(-1L))) {parametroinventariodefecto.setid_calidad_producto(parametroinventariodefectoOrigen.getid_calidad_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_tipo_servicio()!=null && !parametroinventariodefectoOrigen.getid_tipo_servicio().equals(-1L))) {parametroinventariodefecto.setid_tipo_servicio(parametroinventariodefectoOrigen.getid_tipo_servicio());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_tipo_producto_servicio_inven()!=null && !parametroinventariodefectoOrigen.getid_tipo_producto_servicio_inven().equals(-1L))) {parametroinventariodefecto.setid_tipo_producto_servicio_inven(parametroinventariodefectoOrigen.getid_tipo_producto_servicio_inven());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_tipo_producto_servicio()!=null && !parametroinventariodefectoOrigen.getid_tipo_producto_servicio().equals(-1L))) {parametroinventariodefecto.setid_tipo_producto_servicio(parametroinventariodefectoOrigen.getid_tipo_producto_servicio());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_tipo_costeo()!=null && !parametroinventariodefectoOrigen.getid_tipo_costeo().equals(-1L))) {parametroinventariodefecto.setid_tipo_costeo(parametroinventariodefectoOrigen.getid_tipo_costeo());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_tipo_producto()!=null && !parametroinventariodefectoOrigen.getid_tipo_producto().equals(-1L))) {parametroinventariodefecto.setid_tipo_producto(parametroinventariodefectoOrigen.getid_tipo_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_tipo_via_transporte()!=null && !parametroinventariodefectoOrigen.getid_tipo_via_transporte().equals(-1L))) {parametroinventariodefecto.setid_tipo_via_transporte(parametroinventariodefectoOrigen.getid_tipo_via_transporte());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_rango_unidad_venta()!=null && !parametroinventariodefectoOrigen.getid_rango_unidad_venta().equals(-1L))) {parametroinventariodefecto.setid_rango_unidad_venta(parametroinventariodefectoOrigen.getid_rango_unidad_venta());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_pais()!=null && !parametroinventariodefectoOrigen.getid_pais().equals(-1L))) {parametroinventariodefecto.setid_pais(parametroinventariodefectoOrigen.getid_pais());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_ciudad()!=null && !parametroinventariodefectoOrigen.getid_ciudad().equals(-1L))) {parametroinventariodefecto.setid_ciudad(parametroinventariodefectoOrigen.getid_ciudad());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_color_producto()!=null && !parametroinventariodefectoOrigen.getid_color_producto().equals(-1L))) {parametroinventariodefecto.setid_color_producto(parametroinventariodefectoOrigen.getid_color_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_clase_producto()!=null && !parametroinventariodefectoOrigen.getid_clase_producto().equals(-1L))) {parametroinventariodefecto.setid_clase_producto(parametroinventariodefectoOrigen.getid_clase_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_efecto_producto()!=null && !parametroinventariodefectoOrigen.getid_efecto_producto().equals(-1L))) {parametroinventariodefecto.setid_efecto_producto(parametroinventariodefectoOrigen.getid_efecto_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_marca_producto()!=null && !parametroinventariodefectoOrigen.getid_marca_producto().equals(-1L))) {parametroinventariodefecto.setid_marca_producto(parametroinventariodefectoOrigen.getid_marca_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_modelo_producto()!=null && !parametroinventariodefectoOrigen.getid_modelo_producto().equals(-1L))) {parametroinventariodefecto.setid_modelo_producto(parametroinventariodefectoOrigen.getid_modelo_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_material_producto()!=null && !parametroinventariodefectoOrigen.getid_material_producto().equals(-1L))) {parametroinventariodefecto.setid_material_producto(parametroinventariodefectoOrigen.getid_material_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_segmento_producto()!=null && !parametroinventariodefectoOrigen.getid_segmento_producto().equals(-1L))) {parametroinventariodefecto.setid_segmento_producto(parametroinventariodefectoOrigen.getid_segmento_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoOrigen.getid_talla_producto()!=null && !parametroinventariodefectoOrigen.getid_talla_producto().equals(-1L))) {parametroinventariodefecto.setid_talla_producto(parametroinventariodefectoOrigen.getid_talla_producto());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.setText(parametroinventariodefecto.getId().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioParametroInventarioDefecto(ParametroInventarioDefectoBean parametroinventariodefectoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.setText(parametroinventariodefectoBean.getId().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanParametroInventarioDefecto(ParametroInventarioDefectoParameterReturnGeneral parametroinventariodefectoReturnGeneral,ParametroInventarioDefectoBean parametroinventariodefectoBean,Boolean conDefault) throws Exception { 
		try {
			ParametroInventarioDefecto parametroinventariodefectoLocal=new ParametroInventarioDefecto();
			
			parametroinventariodefectoLocal=parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && parametroinventariodefectoLocal.getId()!=null && !parametroinventariodefectoLocal.getId().equals(0L))) {parametroinventariodefectoBean.setId(parametroinventariodefectoLocal.getId());}}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_grupo_bodega()!=null && !parametroinventariodefectoLocal.getid_grupo_bodega().equals(-1L))) {parametroinventariodefectoBean.setid_grupo_bodega(parametroinventariodefectoLocal.getid_grupo_bodega());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_calidad_producto()!=null && !parametroinventariodefectoLocal.getid_calidad_producto().equals(-1L))) {parametroinventariodefectoBean.setid_calidad_producto(parametroinventariodefectoLocal.getid_calidad_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_tipo_servicio()!=null && !parametroinventariodefectoLocal.getid_tipo_servicio().equals(-1L))) {parametroinventariodefectoBean.setid_tipo_servicio(parametroinventariodefectoLocal.getid_tipo_servicio());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_tipo_producto_servicio_inven()!=null && !parametroinventariodefectoLocal.getid_tipo_producto_servicio_inven().equals(-1L))) {parametroinventariodefectoBean.setid_tipo_producto_servicio_inven(parametroinventariodefectoLocal.getid_tipo_producto_servicio_inven());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_tipo_producto_servicio()!=null && !parametroinventariodefectoLocal.getid_tipo_producto_servicio().equals(-1L))) {parametroinventariodefectoBean.setid_tipo_producto_servicio(parametroinventariodefectoLocal.getid_tipo_producto_servicio());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_tipo_costeo()!=null && !parametroinventariodefectoLocal.getid_tipo_costeo().equals(-1L))) {parametroinventariodefectoBean.setid_tipo_costeo(parametroinventariodefectoLocal.getid_tipo_costeo());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_tipo_producto()!=null && !parametroinventariodefectoLocal.getid_tipo_producto().equals(-1L))) {parametroinventariodefectoBean.setid_tipo_producto(parametroinventariodefectoLocal.getid_tipo_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_tipo_via_transporte()!=null && !parametroinventariodefectoLocal.getid_tipo_via_transporte().equals(-1L))) {parametroinventariodefectoBean.setid_tipo_via_transporte(parametroinventariodefectoLocal.getid_tipo_via_transporte());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_rango_unidad_venta()!=null && !parametroinventariodefectoLocal.getid_rango_unidad_venta().equals(-1L))) {parametroinventariodefectoBean.setid_rango_unidad_venta(parametroinventariodefectoLocal.getid_rango_unidad_venta());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_pais()!=null && !parametroinventariodefectoLocal.getid_pais().equals(-1L))) {parametroinventariodefectoBean.setid_pais(parametroinventariodefectoLocal.getid_pais());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_ciudad()!=null && !parametroinventariodefectoLocal.getid_ciudad().equals(-1L))) {parametroinventariodefectoBean.setid_ciudad(parametroinventariodefectoLocal.getid_ciudad());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_color_producto()!=null && !parametroinventariodefectoLocal.getid_color_producto().equals(-1L))) {parametroinventariodefectoBean.setid_color_producto(parametroinventariodefectoLocal.getid_color_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_clase_producto()!=null && !parametroinventariodefectoLocal.getid_clase_producto().equals(-1L))) {parametroinventariodefectoBean.setid_clase_producto(parametroinventariodefectoLocal.getid_clase_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_efecto_producto()!=null && !parametroinventariodefectoLocal.getid_efecto_producto().equals(-1L))) {parametroinventariodefectoBean.setid_efecto_producto(parametroinventariodefectoLocal.getid_efecto_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_marca_producto()!=null && !parametroinventariodefectoLocal.getid_marca_producto().equals(-1L))) {parametroinventariodefectoBean.setid_marca_producto(parametroinventariodefectoLocal.getid_marca_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_modelo_producto()!=null && !parametroinventariodefectoLocal.getid_modelo_producto().equals(-1L))) {parametroinventariodefectoBean.setid_modelo_producto(parametroinventariodefectoLocal.getid_modelo_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_material_producto()!=null && !parametroinventariodefectoLocal.getid_material_producto().equals(-1L))) {parametroinventariodefectoBean.setid_material_producto(parametroinventariodefectoLocal.getid_material_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_segmento_producto()!=null && !parametroinventariodefectoLocal.getid_segmento_producto().equals(-1L))) {parametroinventariodefectoBean.setid_segmento_producto(parametroinventariodefectoLocal.getid_segmento_producto());}
			if(conDefault || (!conDefault && parametroinventariodefectoLocal.getid_talla_producto()!=null && !parametroinventariodefectoLocal.getid_talla_producto().equals(-1L))) {parametroinventariodefectoBean.setid_talla_producto(parametroinventariodefectoLocal.getid_talla_producto());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxParametroInventarioDefectoGenerico(Long idParametroInventarioDefectoSeleccionado,JComboBox jComboBoxParametroInventarioDefecto,List<ParametroInventarioDefecto> parametroinventariodefectosLocal)throws Exception {
		try {
			ParametroInventarioDefecto  parametroinventariodefectoTemp=null;

			for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectosLocal) {
				if(parametroinventariodefectoAux.getId()!=null && parametroinventariodefectoAux.getId().equals(idParametroInventarioDefectoSeleccionado)) {
					parametroinventariodefectoTemp=parametroinventariodefectoAux;
					break;
				}
			}

			jComboBoxParametroInventarioDefecto.setSelectedItem(parametroinventariodefectoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxParametroInventarioDefectoGenerico(JComboBox jComboBoxParametroInventarioDefecto,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxParametroInventarioDefecto.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxParametroInventarioDefecto.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxParametroInventarioDefecto.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxParametroInventarioDefecto.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxParametroInventarioDefecto.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxParametroInventarioDefecto.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxParametroInventarioDefecto.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxParametroInventarioDefecto.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxParametroInventarioDefecto.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxParametroInventarioDefecto.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametroinventariodefecto=(ParametroInventarioDefecto) parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			parametroinventariodefecto =(ParametroInventarioDefecto) parametroinventariodefectos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("GrupoBodega")) {
			//sDescripcion=this.getActualGrupoBodegaForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getgrupobodega_descripcion();
			} else {
				//sDescripcion=this.getActualGrupoBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getgrupobodega_descripcion();
			}
		}

		if(sTipo.equals("CalidadProducto")) {
			//sDescripcion=this.getActualCalidadProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getcalidadproducto_descripcion();
			} else {
				//sDescripcion=this.getActualCalidadProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getcalidadproducto_descripcion();
			}
		}

		if(sTipo.equals("TipoServicio")) {
			//sDescripcion=this.getActualTipoServicioForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.gettiposervicio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoServicioForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.gettiposervicio_descripcion();
			}
		}

		if(sTipo.equals("TipoProductoServicioInven")) {
			//sDescripcion=this.getActualTipoProductoServicioInvenForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.gettipoproductoservicioinven_descripcion();
			} else {
				//sDescripcion=this.getActualTipoProductoServicioInvenForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.gettipoproductoservicioinven_descripcion();
			}
		}

		if(sTipo.equals("TipoProductoServicio")) {
			//sDescripcion=this.getActualTipoProductoServicioForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.gettipoproductoservicio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoProductoServicioForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.gettipoproductoservicio_descripcion();
			}
		}

		if(sTipo.equals("TipoCosteo")) {
			//sDescripcion=this.getActualTipoCosteoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.gettipocosteo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCosteoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.gettipocosteo_descripcion();
			}
		}

		if(sTipo.equals("TipoProducto")) {
			//sDescripcion=this.getActualTipoProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.gettipoproducto_descripcion();
			} else {
				//sDescripcion=this.getActualTipoProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.gettipoproducto_descripcion();
			}
		}

		if(sTipo.equals("TipoViaTransporte")) {
			//sDescripcion=this.getActualTipoViaTransporteForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.gettipoviatransporte_descripcion();
			} else {
				//sDescripcion=this.getActualTipoViaTransporteForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.gettipoviatransporte_descripcion();
			}
		}

		if(sTipo.equals("RangoUnidadVenta")) {
			//sDescripcion=this.getActualRangoUnidadVentaForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getrangounidadventa_descripcion();
			} else {
				//sDescripcion=this.getActualRangoUnidadVentaForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getrangounidadventa_descripcion();
			}
		}

		if(sTipo.equals("Pais")) {
			//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getpais_descripcion();
			} else {
				//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getpais_descripcion();
			}
		}

		if(sTipo.equals("Ciudad")) {
			//sDescripcion=this.getActualCiudadForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getciudad_descripcion();
			} else {
				//sDescripcion=this.getActualCiudadForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getciudad_descripcion();
			}
		}

		if(sTipo.equals("ColorProducto")) {
			//sDescripcion=this.getActualColorProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getcolorproducto_descripcion();
			} else {
				//sDescripcion=this.getActualColorProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getcolorproducto_descripcion();
			}
		}

		if(sTipo.equals("ClaseProducto")) {
			//sDescripcion=this.getActualClaseProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getclaseproducto_descripcion();
			} else {
				//sDescripcion=this.getActualClaseProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getclaseproducto_descripcion();
			}
		}

		if(sTipo.equals("EfectoProducto")) {
			//sDescripcion=this.getActualEfectoProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getefectoproducto_descripcion();
			} else {
				//sDescripcion=this.getActualEfectoProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getefectoproducto_descripcion();
			}
		}

		if(sTipo.equals("MarcaProducto")) {
			//sDescripcion=this.getActualMarcaProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getmarcaproducto_descripcion();
			} else {
				//sDescripcion=this.getActualMarcaProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getmarcaproducto_descripcion();
			}
		}

		if(sTipo.equals("ModeloProducto")) {
			//sDescripcion=this.getActualModeloProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getmodeloproducto_descripcion();
			} else {
				//sDescripcion=this.getActualModeloProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getmodeloproducto_descripcion();
			}
		}

		if(sTipo.equals("MaterialProducto")) {
			//sDescripcion=this.getActualMaterialProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getmaterialproducto_descripcion();
			} else {
				//sDescripcion=this.getActualMaterialProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getmaterialproducto_descripcion();
			}
		}

		if(sTipo.equals("SegmentoProducto")) {
			//sDescripcion=this.getActualSegmentoProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.getsegmentoproducto_descripcion();
			} else {
				//sDescripcion=this.getActualSegmentoProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.getsegmentoproducto_descripcion();
			}
		}

		if(sTipo.equals("TallaProducto")) {
			//sDescripcion=this.getActualTallaProductoForeignKeyDescripcion((Long)value);
			if(!parametroinventariodefecto.getIsNew() && !parametroinventariodefecto.getIsChanged() && !parametroinventariodefecto.getIsDeleted()) {
				sDescripcion=parametroinventariodefecto.gettallaproducto_descripcion();
			} else {
				//sDescripcion=this.getActualTallaProductoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroinventariodefecto.gettallaproducto_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		ParametroInventarioDefecto parametroinventariodefectoRow=new ParametroInventarioDefecto();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametroinventariodefectoRow=(ParametroInventarioDefecto) parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			parametroinventariodefectoRow=(ParametroInventarioDefecto) parametroinventariodefectos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualParametroInventarioDefecto(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto));			
			this.jButtonDuplicarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaDuplicarParametroInventarioDefecto && this.isPermisoDuplicarParametroInventarioDefecto));			
			this.jButtonCopiarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaCopiarParametroInventarioDefecto && this.isPermisoCopiarParametroInventarioDefecto));
			this.jButtonVerFormParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaVerFormParametroInventarioDefecto && this.isPermisoVerFormParametroInventarioDefecto));
			
			this.jButtonAbrirOrderByParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaOrdenParametroInventarioDefecto && this.isPermisoOrdenParametroInventarioDefecto));			
			
			this.jButtonNuevoRelacionesParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto));			
			this.jButtonNuevoGuardarCambiosParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaModificarParametroInventarioDefecto && this.isPermisoActualizarParametroInventarioDefecto));	
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaActualizarParametroInventarioDefecto && this.isPermisoActualizarParametroInventarioDefecto));	
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaEliminarParametroInventarioDefecto && this.isPermisoEliminarParametroInventarioDefecto));
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarParametroInventarioDefecto.setVisible(this.isVisibilidadCeldaCancelarParametroInventarioDefecto);							
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaGuardarParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));			
			
			}
						
			this.jButtonGuardarCambiosTablaParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto));						
			this.jButtonDuplicarToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaDuplicarParametroInventarioDefecto && this.isPermisoDuplicarParametroInventarioDefecto));						
			this.jButtonCopiarToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaCopiarParametroInventarioDefecto && this.isPermisoCopiarParametroInventarioDefecto));			
			this.jButtonVerFormToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaVerFormParametroInventarioDefecto && this.isPermisoVerFormParametroInventarioDefecto));			
			this.jButtonAbrirOrderByToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaOrdenParametroInventarioDefecto && this.isPermisoOrdenParametroInventarioDefecto));
			this.jButtonNuevoRelacionesToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto));			
			this.jButtonNuevoGuardarCambiosToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));			
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaModificarParametroInventarioDefecto && this.isPermisoActualizarParametroInventarioDefecto));	
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaActualizarParametroInventarioDefecto  && this.isPermisoActualizarParametroInventarioDefecto));	
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaEliminarParametroInventarioDefecto && this.isPermisoEliminarParametroInventarioDefecto));
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarToolBarParametroInventarioDefecto.setVisible(this.isVisibilidadCeldaCancelarParametroInventarioDefecto);				
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaGuardarParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto));			
			this.jMenuItemDuplicarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaDuplicarParametroInventarioDefecto && this.isPermisoDuplicarParametroInventarioDefecto));			
			this.jMenuItemCopiarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaCopiarParametroInventarioDefecto && this.isPermisoCopiarParametroInventarioDefecto));			
			this.jMenuItemVerFormParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaVerFormParametroInventarioDefecto && this.isPermisoVerFormParametroInventarioDefecto));			
			this.jMenuItemAbrirOrderByParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaOrdenParametroInventarioDefecto && this.isPermisoOrdenParametroInventarioDefecto));			
			//this.jMenuItemMostrarOcultarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaOrdenParametroInventarioDefecto && this.isPermisoOrdenParametroInventarioDefecto));
			this.jMenuItemDetalleAbrirOrderByParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaOrdenParametroInventarioDefecto && this.isPermisoOrdenParametroInventarioDefecto));			
			//this.jMenuItemDetalleMostrarOcultarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaOrdenParametroInventarioDefecto && this.isPermisoOrdenParametroInventarioDefecto));			
			this.jMenuItemNuevoRelacionesParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto));			
			this.jMenuItemNuevoGuardarCambiosParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaNuevoParametroInventarioDefecto && this.isPermisoNuevoParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));									
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemModificarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaModificarParametroInventarioDefecto && this.isPermisoActualizarParametroInventarioDefecto));	
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemActualizarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaActualizarParametroInventarioDefecto && this.isPermisoActualizarParametroInventarioDefecto));	
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemEliminarParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaEliminarParametroInventarioDefecto && this.isPermisoEliminarParametroInventarioDefecto));
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemCancelarParametroInventarioDefecto.setVisible(this.isVisibilidadCeldaCancelarParametroInventarioDefecto);				
			}
			
			this.jMenuItemGuardarCambiosParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaGuardarParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));						
			this.jMenuItemGuardarCambiosTablaParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=this.jButtonNuevoParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaDuplicarParametroInventarioDefecto=this.jButtonDuplicarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaCopiarParametroInventarioDefecto=this.jButtonCopiarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaVerFormParametroInventarioDefecto=this.jButtonVerFormParametroInventarioDefecto.isVisible();
			
			this.isVisibilidadCeldaOrdenParametroInventarioDefecto=this.jButtonAbrirOrderByParametroInventarioDefecto.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=this.jButtonNuevoRelacionesParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=this.jButtonModificarParametroInventarioDefecto.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaGuardarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosParametroInventarioDefecto.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=this.jButtonGuardarCambiosTablaParametroInventarioDefecto.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=this.jButtonNuevoToolBarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=this.jButtonNuevoRelacionesToolBarParametroInventarioDefecto.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarToolBarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarToolBarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarToolBarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarToolBarParametroInventarioDefecto.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarParametroInventarioDefecto=this.jButtonGuardarCambiosToolBarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=this.jButtonGuardarCambiosTablaToolBarParametroInventarioDefecto.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=this.jMenuItemNuevoParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=this.jMenuItemNuevoRelacionesParametroInventarioDefecto.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemModificarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemActualizarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemEliminarParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemCancelarParametroInventarioDefecto.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarParametroInventarioDefecto=this.jMenuItemGuardarCambiosParametroInventarioDefecto.isVisible();
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=this.jMenuItemGuardarCambiosTablaParametroInventarioDefecto.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesParametroInventarioDefecto(Boolean esInicializar) {
		if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
				//if(this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesParametroInventarioDefecto();
			}
			
			this.inicializarActualizarBindingBotonesManualParametroInventarioDefecto(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualParametroInventarioDefecto() {
		this.jButtonNuevoParametroInventarioDefecto.setVisible(this.isPermisoNuevoParametroInventarioDefecto);			
		this.jButtonDuplicarParametroInventarioDefecto.setVisible(this.isPermisoDuplicarParametroInventarioDefecto);			
		this.jButtonCopiarParametroInventarioDefecto.setVisible(this.isPermisoCopiarParametroInventarioDefecto);			
		this.jButtonVerFormParametroInventarioDefecto.setVisible(this.isPermisoVerFormParametroInventarioDefecto);			
		
		this.jButtonAbrirOrderByParametroInventarioDefecto.setVisible(this.isPermisoOrdenParametroInventarioDefecto);					
		
		this.jButtonNuevoRelacionesParametroInventarioDefecto.setVisible(this.isPermisoNuevoParametroInventarioDefecto);			
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarParametroInventarioDefecto.setVisible(this.isPermisoActualizarParametroInventarioDefecto);	
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarParametroInventarioDefecto.setVisible(this.isPermisoActualizarParametroInventarioDefecto);	
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarParametroInventarioDefecto.setVisible(this.isPermisoEliminarParametroInventarioDefecto);
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarParametroInventarioDefecto.setVisible(this.isVisibilidadCeldaCancelarParametroInventarioDefecto);						
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosParametroInventarioDefecto.setVisible(this.isPermisoGuardarCambiosParametroInventarioDefecto);							
		}
		
		this.jButtonGuardarCambiosTablaParametroInventarioDefecto.setVisible(this.isPermisoActualizarParametroInventarioDefecto);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleParametroInventarioDefecto() {
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarParametroInventarioDefecto.setVisible(this.isPermisoActualizarParametroInventarioDefecto);	
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarParametroInventarioDefecto.setVisible(this.isPermisoActualizarParametroInventarioDefecto);	
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarParametroInventarioDefecto.setVisible(this.isPermisoEliminarParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarParametroInventarioDefecto.setVisible(this.isVisibilidadCeldaCancelarParametroInventarioDefecto);							
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosParametroInventarioDefecto.setVisible((this.isVisibilidadCeldaGuardarParametroInventarioDefecto && this.isPermisoGuardarCambiosParametroInventarioDefecto));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosParametroInventarioDefecto() {
		if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualParametroInventarioDefecto();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesParametroInventarioDefecto() {
	}
	
	public void jTableDatosParametroInventarioDefectoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarParametroInventarioDefecto(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.parametroinventariodefecto.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.parametroinventariodefecto.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.parametroinventariodefecto.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_grupo_bodegaParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisogrupobodega=true;

			idTienePermisogrupobodega=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(GrupoBodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisogrupobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.grupobodegaBeanSwingJInternalFrame=new GrupoBodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.grupobodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.grupobodegaBeanSwingJInternalFrame.getGrupoBodegaLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_grupo_bodega()!=null) {
					this.grupobodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.grupobodegaBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_grupo_bodega());
					this.grupobodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.grupobodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.grupobodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaGrupoBodega();
				}

				JInternalFrameBase jinternalFrame =this.grupobodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordergrupobodega=(TitledBorder)this.grupobodegaBeanSwingJInternalFrame.jScrollPanelDatosGrupoBodega.getBorder();

				titledBordergrupobodega.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Grupo Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_grupo_bodegaParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_grupo_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_grupo_bodega = "+this.parametroinventariodefecto.getid_grupo_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_calidad_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocalidadproducto=true;

			idTienePermisocalidadproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(CalidadProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisocalidadproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.calidadproductoBeanSwingJInternalFrame=new CalidadProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.calidadproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.calidadproductoBeanSwingJInternalFrame.getCalidadProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_calidad_producto()!=null) {
					this.calidadproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.calidadproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_calidad_producto());
					this.calidadproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.calidadproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.calidadproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCalidadProducto();
				}

				JInternalFrameBase jinternalFrame =this.calidadproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordercalidadproducto=(TitledBorder)this.calidadproductoBeanSwingJInternalFrame.jScrollPanelDatosCalidadProducto.getBorder();

				titledBordercalidadproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Calidad Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_calidad_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_calidad_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_calidad_producto = "+this.parametroinventariodefecto.getid_calidad_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_servicioParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiposervicio=true;

			idTienePermisotiposervicio=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(TipoServicioConstantesFunciones.CLASSNAME);

			if(idTienePermisotiposervicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.tiposervicioBeanSwingJInternalFrame=new TipoServicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiposervicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiposervicioBeanSwingJInternalFrame.getTipoServicioLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_tipo_servicio()!=null) {
					this.tiposervicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiposervicioBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_tipo_servicio());
					this.tiposervicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiposervicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiposervicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoServicio();
				}

				JInternalFrameBase jinternalFrame =this.tiposervicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordertiposervicio=(TitledBorder)this.tiposervicioBeanSwingJInternalFrame.jScrollPanelDatosTipoServicio.getBorder();

				titledBordertiposervicio.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Tipo Servicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_servicioParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_tipo_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_servicio = "+this.parametroinventariodefecto.getid_tipo_servicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoproductoservicioinven=true;

			idTienePermisotipoproductoservicioinven=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(TipoProductoServicioInvenConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoproductoservicioinven) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.tipoproductoservicioinvenBeanSwingJInternalFrame=new TipoProductoServicioInvenBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoproductoservicioinvenBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoproductoservicioinvenBeanSwingJInternalFrame.getTipoProductoServicioInvenLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_tipo_producto_servicio_inven()!=null) {
					this.tipoproductoservicioinvenBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoproductoservicioinvenBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_tipo_producto_servicio_inven());
					this.tipoproductoservicioinvenBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoproductoservicioinvenBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoproductoservicioinvenBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoProductoServicioInven();
				}

				JInternalFrameBase jinternalFrame =this.tipoproductoservicioinvenBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordertipoproductoservicioinven=(TitledBorder)this.tipoproductoservicioinvenBeanSwingJInternalFrame.jScrollPanelDatosTipoProductoServicioInven.getBorder();

				titledBordertipoproductoservicioinven.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Tipo Producto Servicio Inventario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_tipo_producto_servicio_inven()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_producto_servicio_inven = "+this.parametroinventariodefecto.getid_tipo_producto_servicio_inven().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_producto_servicioParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoproductoservicio=true;

			idTienePermisotipoproductoservicio=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(TipoProductoServicioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoproductoservicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.tipoproductoservicioBeanSwingJInternalFrame=new TipoProductoServicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoproductoservicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoproductoservicioBeanSwingJInternalFrame.getTipoProductoServicioLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_tipo_producto_servicio()!=null) {
					this.tipoproductoservicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoproductoservicioBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_tipo_producto_servicio());
					this.tipoproductoservicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoproductoservicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoproductoservicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoProductoServicio();
				}

				JInternalFrameBase jinternalFrame =this.tipoproductoservicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordertipoproductoservicio=(TitledBorder)this.tipoproductoservicioBeanSwingJInternalFrame.jScrollPanelDatosTipoProductoServicio.getBorder();

				titledBordertipoproductoservicio.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Tipo Producto Servicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_producto_servicioParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_tipo_producto_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_producto_servicio = "+this.parametroinventariodefecto.getid_tipo_producto_servicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_costeoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocosteo=true;

			idTienePermisotipocosteo=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(TipoCosteoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocosteo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.tipocosteoBeanSwingJInternalFrame=new TipoCosteoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocosteoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocosteoBeanSwingJInternalFrame.getTipoCosteoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_tipo_costeo()!=null) {
					this.tipocosteoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocosteoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_tipo_costeo());
					this.tipocosteoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocosteoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocosteoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCosteo();
				}

				JInternalFrameBase jinternalFrame =this.tipocosteoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordertipocosteo=(TitledBorder)this.tipocosteoBeanSwingJInternalFrame.jScrollPanelDatosTipoCosteo.getBorder();

				titledBordertipocosteo.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Tipo Costeo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_costeoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_tipo_costeo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_costeo = "+this.parametroinventariodefecto.getid_tipo_costeo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoproducto=true;

			idTienePermisotipoproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(TipoProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.tipoproductoBeanSwingJInternalFrame=new TipoProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoproductoBeanSwingJInternalFrame.getTipoProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_tipo_producto()!=null) {
					this.tipoproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_tipo_producto());
					this.tipoproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoProducto();
				}

				JInternalFrameBase jinternalFrame =this.tipoproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordertipoproducto=(TitledBorder)this.tipoproductoBeanSwingJInternalFrame.jScrollPanelDatosTipoProducto.getBorder();

				titledBordertipoproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Tipo Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_tipo_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_producto = "+this.parametroinventariodefecto.getid_tipo_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_via_transporteParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoviatransporte=true;

			idTienePermisotipoviatransporte=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(TipoViaTransporteConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoviatransporte) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.tipoviatransporteBeanSwingJInternalFrame=new TipoViaTransporteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoviatransporteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoviatransporteBeanSwingJInternalFrame.getTipoViaTransporteLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_tipo_via_transporte()!=null) {
					this.tipoviatransporteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoviatransporteBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_tipo_via_transporte());
					this.tipoviatransporteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoviatransporteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoviatransporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoViaTransporte();
				}

				JInternalFrameBase jinternalFrame =this.tipoviatransporteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordertipoviatransporte=(TitledBorder)this.tipoviatransporteBeanSwingJInternalFrame.jScrollPanelDatosTipoViaTransporte.getBorder();

				titledBordertipoviatransporte.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Tipo Via Transporte");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_via_transporteParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_tipo_via_transporte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_via_transporte = "+this.parametroinventariodefecto.getid_tipo_via_transporte().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_rango_unidad_ventaParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisorangounidadventa=true;

			idTienePermisorangounidadventa=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(RangoUnidadVentaConstantesFunciones.CLASSNAME);

			if(idTienePermisorangounidadventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.rangounidadventaBeanSwingJInternalFrame=new RangoUnidadVentaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.rangounidadventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.rangounidadventaBeanSwingJInternalFrame.getRangoUnidadVentaLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_rango_unidad_venta()!=null) {
					this.rangounidadventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.rangounidadventaBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_rango_unidad_venta());
					this.rangounidadventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.rangounidadventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.rangounidadventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaRangoUnidadVenta();
				}

				JInternalFrameBase jinternalFrame =this.rangounidadventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBorderrangounidadventa=(TitledBorder)this.rangounidadventaBeanSwingJInternalFrame.jScrollPanelDatosRangoUnidadVenta.getBorder();

				titledBorderrangounidadventa.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Rango Unidad Venta");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_rango_unidad_ventaParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_rango_unidad_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_rango_unidad_venta = "+this.parametroinventariodefecto.getid_rango_unidad_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_paisParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopais=true;

			idTienePermisopais=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(PaisConstantesFunciones.CLASSNAME);

			if(idTienePermisopais) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.paisBeanSwingJInternalFrame=new PaisBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.paisBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.paisBeanSwingJInternalFrame.getPaisLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_pais()!=null) {
					this.paisBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.paisBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_pais());
					this.paisBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.inicializarActualizarBindingTablaPais();
				}

				JInternalFrameBase jinternalFrame =this.paisBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBorderpais=(TitledBorder)this.paisBeanSwingJInternalFrame.jScrollPanelDatosPais.getBorder();

				titledBorderpais.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Pais");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_paisParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_pais()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pais = "+this.parametroinventariodefecto.getid_pais().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ciudadParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisociudad=true;

			idTienePermisociudad=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(CiudadConstantesFunciones.CLASSNAME);

			if(idTienePermisociudad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.ciudadBeanSwingJInternalFrame=new CiudadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ciudadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ciudadBeanSwingJInternalFrame.getCiudadLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_ciudad()!=null) {
					this.ciudadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ciudadBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_ciudad());
					this.ciudadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.inicializarActualizarBindingTablaCiudad();
				}

				JInternalFrameBase jinternalFrame =this.ciudadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBorderciudad=(TitledBorder)this.ciudadBeanSwingJInternalFrame.jScrollPanelDatosCiudad.getBorder();

				titledBorderciudad.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Ciudad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ciudadParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_ciudad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ciudad = "+this.parametroinventariodefecto.getid_ciudad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_color_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocolorproducto=true;

			idTienePermisocolorproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(ColorProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisocolorproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.colorproductoBeanSwingJInternalFrame=new ColorProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.colorproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.colorproductoBeanSwingJInternalFrame.getColorProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_color_producto()!=null) {
					this.colorproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.colorproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_color_producto());
					this.colorproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.colorproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.colorproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaColorProducto();
				}

				JInternalFrameBase jinternalFrame =this.colorproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordercolorproducto=(TitledBorder)this.colorproductoBeanSwingJInternalFrame.jScrollPanelDatosColorProducto.getBorder();

				titledBordercolorproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Color Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_color_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_color_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_color_producto = "+this.parametroinventariodefecto.getid_color_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clase_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoclaseproducto=true;

			idTienePermisoclaseproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(ClaseProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoclaseproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.claseproductoBeanSwingJInternalFrame=new ClaseProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.claseproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.claseproductoBeanSwingJInternalFrame.getClaseProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_clase_producto()!=null) {
					this.claseproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.claseproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_clase_producto());
					this.claseproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.claseproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.claseproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaClaseProducto();
				}

				JInternalFrameBase jinternalFrame =this.claseproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBorderclaseproducto=(TitledBorder)this.claseproductoBeanSwingJInternalFrame.jScrollPanelDatosClaseProducto.getBorder();

				titledBorderclaseproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Clase Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clase_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_clase_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_clase_producto = "+this.parametroinventariodefecto.getid_clase_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_efecto_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoefectoproducto=true;

			idTienePermisoefectoproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(EfectoProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoefectoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.efectoproductoBeanSwingJInternalFrame=new EfectoProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.efectoproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.efectoproductoBeanSwingJInternalFrame.getEfectoProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_efecto_producto()!=null) {
					this.efectoproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.efectoproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_efecto_producto());
					this.efectoproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.efectoproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.efectoproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEfectoProducto();
				}

				JInternalFrameBase jinternalFrame =this.efectoproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBorderefectoproducto=(TitledBorder)this.efectoproductoBeanSwingJInternalFrame.jScrollPanelDatosEfectoProducto.getBorder();

				titledBorderefectoproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Efecto Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_efecto_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_efecto_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_efecto_producto = "+this.parametroinventariodefecto.getid_efecto_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_marca_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomarcaproducto=true;

			idTienePermisomarcaproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(MarcaProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisomarcaproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.marcaproductoBeanSwingJInternalFrame=new MarcaProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.marcaproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.marcaproductoBeanSwingJInternalFrame.getMarcaProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_marca_producto()!=null) {
					this.marcaproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.marcaproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_marca_producto());
					this.marcaproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.marcaproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.marcaproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaMarcaProducto();
				}

				JInternalFrameBase jinternalFrame =this.marcaproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordermarcaproducto=(TitledBorder)this.marcaproductoBeanSwingJInternalFrame.jScrollPanelDatosMarcaProducto.getBorder();

				titledBordermarcaproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Marca Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_marca_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_marca_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_marca_producto = "+this.parametroinventariodefecto.getid_marca_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_modelo_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodeloproducto=true;

			idTienePermisomodeloproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(ModeloProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisomodeloproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.modeloproductoBeanSwingJInternalFrame=new ModeloProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.modeloproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.modeloproductoBeanSwingJInternalFrame.getModeloProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_modelo_producto()!=null) {
					this.modeloproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.modeloproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_modelo_producto());
					this.modeloproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.modeloproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.modeloproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaModeloProducto();
				}

				JInternalFrameBase jinternalFrame =this.modeloproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordermodeloproducto=(TitledBorder)this.modeloproductoBeanSwingJInternalFrame.jScrollPanelDatosModeloProducto.getBorder();

				titledBordermodeloproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Modelo Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_modelo_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_modelo_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modelo_producto = "+this.parametroinventariodefecto.getid_modelo_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_material_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomaterialproducto=true;

			idTienePermisomaterialproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(MaterialProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisomaterialproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.materialproductoBeanSwingJInternalFrame=new MaterialProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.materialproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.materialproductoBeanSwingJInternalFrame.getMaterialProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_material_producto()!=null) {
					this.materialproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.materialproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_material_producto());
					this.materialproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.materialproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.materialproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaMaterialProducto();
				}

				JInternalFrameBase jinternalFrame =this.materialproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordermaterialproducto=(TitledBorder)this.materialproductoBeanSwingJInternalFrame.jScrollPanelDatosMaterialProducto.getBorder();

				titledBordermaterialproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Material Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_material_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_material_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_material_producto = "+this.parametroinventariodefecto.getid_material_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_segmento_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosegmentoproducto=true;

			idTienePermisosegmentoproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(SegmentoProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisosegmentoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.segmentoproductoBeanSwingJInternalFrame=new SegmentoProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.segmentoproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.segmentoproductoBeanSwingJInternalFrame.getSegmentoProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_segmento_producto()!=null) {
					this.segmentoproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.segmentoproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_segmento_producto());
					this.segmentoproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.segmentoproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.segmentoproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaSegmentoProducto();
				}

				JInternalFrameBase jinternalFrame =this.segmentoproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordersegmentoproducto=(TitledBorder)this.segmentoproductoBeanSwingJInternalFrame.jScrollPanelDatosSegmentoProducto.getBorder();

				titledBordersegmentoproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Segmento Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_segmento_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_segmento_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_segmento_producto = "+this.parametroinventariodefecto.getid_segmento_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_talla_productoParametroInventarioDefectoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotallaproducto=true;

			idTienePermisotallaproducto=this.tienePermisosUsuarioEnPaginaWebParametroInventarioDefecto(TallaProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisotallaproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroInventarioDefecto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroInventarioDefecto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);

				this.tallaproductoBeanSwingJInternalFrame=new TallaProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tallaproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tallaproductoBeanSwingJInternalFrame.getTallaProductoLogic().setConnexion(this.parametroinventariodefectoLogic.getConnexion());

				if(this.parametroinventariodefecto.getid_talla_producto()!=null) {
					this.tallaproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tallaproductoBeanSwingJInternalFrame.setIdActual(this.parametroinventariodefecto.getid_talla_producto());
					this.tallaproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tallaproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tallaproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTallaProducto();
				}

				JInternalFrameBase jinternalFrame =this.tallaproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroInventarioDefecto=(TitledBorder)this.jScrollPanelDatosParametroInventarioDefecto.getBorder();
				TitledBorder titledBordertallaproducto=(TitledBorder)this.tallaproductoBeanSwingJInternalFrame.jScrollPanelDatosTallaProducto.getBorder();

				titledBordertallaproducto.setTitle(titledBorderParametroInventarioDefecto.getTitle() + " -> Talla Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_talla_productoParametroInventarioDefectoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.getparametroinventariodefecto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroinventariodefecto==null) {
						this.parametroinventariodefecto = new ParametroInventarioDefecto();
					}

					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);
				}

				if(this.parametroinventariodefecto.getid_talla_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_talla_producto = "+this.parametroinventariodefecto.getid_talla_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroInventarioDefecto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdCalidadProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdCalidadProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCiudadParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdCiudad();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClaseProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdClaseProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdColorProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdColorProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEfectoProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdEfectoProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdEmpresa();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdGrupoBodegaParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdGrupoBodega();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMarcaProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdMarcaProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMaterialProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdMaterialProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModeloProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdModeloProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPaisParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdPais();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdRangoUnidadVentaParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdRangoUnidadVenta();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSegmentoProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdSegmentoProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdSucursal();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTallaProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdTallaProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCosteoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdTipoCosteo();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoProductoParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdTipoProducto();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoProductoServicioParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdTipoProductoServicio();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoProductoServicioInvenParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdTipoProductoServicioInven();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoServicioParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdTipoServicio();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoViaTransporteParametroInventarioDefectoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);

			this.getParametroInventarioDefectosFK_IdTipoViaTransporte();

			this.inicializarActualizarBindingParametroInventarioDefecto(false);

			//if(ParametroInventarioDefectoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroinventariodefectoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameParametroInventarioDefecto() {
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.setVisible(false);	    			
			this.jInternalFrameDetalleFormParametroInventarioDefecto.dispose();
			this.jInternalFrameDetalleFormParametroInventarioDefecto=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
			this.jInternalFrameReporteDinamicoParametroInventarioDefecto.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoParametroInventarioDefecto.dispose();
			this.jInternalFrameReporteDinamicoParametroInventarioDefecto=null;
		}
		
		if(this.jInternalFrameImportacionParametroInventarioDefecto!=null) {
			this.jInternalFrameImportacionParametroInventarioDefecto.setVisible(false);	    			
			this.jInternalFrameImportacionParametroInventarioDefecto.dispose();
			this.jInternalFrameImportacionParametroInventarioDefecto=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessParametroInventarioDefecto();
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			
			if(sTipo.equals("NuevoParametroInventarioDefecto")) {
				jButtonNuevoParametroInventarioDefectoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarParametroInventarioDefecto")) {
				jButtonDuplicarParametroInventarioDefectoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarParametroInventarioDefecto")) {
				jButtonCopiarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("VerFormParametroInventarioDefecto")) {
				jButtonVerFormParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarParametroInventarioDefecto")) {
				jButtonNuevoParametroInventarioDefectoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarParametroInventarioDefecto")) {
				jButtonDuplicarParametroInventarioDefectoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoParametroInventarioDefecto")) {
				jButtonNuevoParametroInventarioDefectoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarParametroInventarioDefecto")) {
				jButtonDuplicarParametroInventarioDefectoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesParametroInventarioDefecto")) {
				jButtonNuevoParametroInventarioDefectoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarParametroInventarioDefecto")) {
				jButtonNuevoParametroInventarioDefectoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesParametroInventarioDefecto")) {
				jButtonNuevoParametroInventarioDefectoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarParametroInventarioDefecto")) {
				jButtonModificarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarParametroInventarioDefecto")) {
				jButtonModificarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarParametroInventarioDefecto")) {
				jButtonModificarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarParametroInventarioDefecto")) {
				jButtonActualizarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarParametroInventarioDefecto")) {
				jButtonActualizarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarParametroInventarioDefecto")) {
				jButtonActualizarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("EliminarParametroInventarioDefecto")) {
				jButtonEliminarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarParametroInventarioDefecto")) {
				jButtonEliminarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarParametroInventarioDefecto")) {
				jButtonEliminarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("CancelarParametroInventarioDefecto")) {
				jButtonCancelarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarParametroInventarioDefecto")) {
				jButtonCancelarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarParametroInventarioDefecto")) {
				jButtonCancelarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("CerrarParametroInventarioDefecto")) {
				jButtonCerrarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarParametroInventarioDefecto")) {
				jButtonCerrarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarParametroInventarioDefecto")) {
				jButtonCerrarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarParametroInventarioDefecto")) {
				jButtonMostrarOcultarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarParametroInventarioDefecto")) {
				jButtonCancelarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosParametroInventarioDefecto")) {
				jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarParametroInventarioDefecto")) {
				jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarParametroInventarioDefecto")) {
				jButtonCopiarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarParametroInventarioDefecto")) {
				jButtonVerFormParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosParametroInventarioDefecto")) {
				jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarParametroInventarioDefecto")) {
				jButtonCopiarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormParametroInventarioDefecto")) {
				jButtonVerFormParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaParametroInventarioDefecto")) {
				jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarParametroInventarioDefecto")) {
				jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaParametroInventarioDefecto")) {
				jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionParametroInventarioDefecto")) {
				jButtonRecargarInformacionParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarParametroInventarioDefecto")) {
				jButtonRecargarInformacionParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionParametroInventarioDefecto")) {
				jButtonRecargarInformacionParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresParametroInventarioDefecto")) {
				jButtonAnterioresParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarParametroInventarioDefecto")) {
				jButtonAnterioresParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreParametroInventarioDefecto")) {
				jButtonAnterioresParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesParametroInventarioDefecto")) {
				jButtonSiguientesParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarParametroInventarioDefecto")) {
				jButtonSiguientesParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesParametroInventarioDefecto")) {
				jButtonSiguientesParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByParametroInventarioDefecto") || sTipo.equals("MenuItemDetalleAbrirOrderByParametroInventarioDefecto")) {
				jButtonAbrirOrderByParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarParametroInventarioDefecto") || sTipo.equals("MenuItemDetalleMostrarOcultarParametroInventarioDefecto")) {
				jButtonMostrarOcultarParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosParametroInventarioDefecto")) {
				jButtonNuevoGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarParametroInventarioDefecto")) {
				jButtonNuevoGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosParametroInventarioDefecto")) {
				jButtonNuevoGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoParametroInventarioDefecto")) {
				jButtonCerrarReporteDinamicoParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoParametroInventarioDefecto")) {
				jButtonGenerarReporteDinamicoParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoParametroInventarioDefecto")) {
				
				jButtonGenerarExcelReporteDinamicoParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionParametroInventarioDefecto")) {
				jButtonCerrarImportacionParametroInventarioDefectoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionParametroInventarioDefecto")) {
				
				jButtonGenerarImportacionParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionParametroInventarioDefecto")) {
				
				jButtonAbrirImportacionParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesParametroInventarioDefecto")) {
				jComboBoxTiposAccionesParametroInventarioDefectoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesParametroInventarioDefecto")) {
				jComboBoxTiposRelacionesParametroInventarioDefectoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioParametroInventarioDefecto")) {
				jComboBoxTiposAccionesParametroInventarioDefectoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarParametroInventarioDefecto")) {
				
				jComboBoxTiposSeleccionarParametroInventarioDefectoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralParametroInventarioDefecto")) {
				jTextFieldValorCampoGeneralParametroInventarioDefectoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByParametroInventarioDefecto")) {
				jButtonAbrirOrderByParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarParametroInventarioDefecto")) {
				jButtonAbrirOrderByParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByParametroInventarioDefecto")) {
				jButtonCerrarOrderByParametroInventarioDefectoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idParametroInventarioDefectoBusqueda")) {
				this.jButtonidParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaParametroInventarioDefectoUpdate")) {
				this.jButtonid_empresaParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaParametroInventarioDefectoBusqueda")) {
				this.jButtonid_empresaParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalParametroInventarioDefectoUpdate")) {
				this.jButtonid_sucursalParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalParametroInventarioDefectoBusqueda")) {
				this.jButtonid_sucursalParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_grupo_bodegaParametroInventarioDefectoUpdate")) {
				this.jButtonid_grupo_bodegaParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_grupo_bodegaParametroInventarioDefectoBusqueda")) {
				this.jButtonid_grupo_bodegaParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_calidad_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_calidad_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_calidad_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_calidad_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_servicioParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_servicioParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_servicioParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_servicioParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_producto_servicio_invenParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_producto_servicio_invenParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_producto_servicioParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_producto_servicioParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_producto_servicioParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_producto_servicioParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_costeoParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_costeoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_costeoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_costeoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_via_transporteParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_via_transporteParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_via_transporteParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_via_transporteParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_rango_unidad_ventaParametroInventarioDefectoUpdate")) {
				this.jButtonid_rango_unidad_ventaParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_rango_unidad_ventaParametroInventarioDefectoBusqueda")) {
				this.jButtonid_rango_unidad_ventaParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisParametroInventarioDefectoUpdate")) {
				this.jButtonid_paisParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisParametroInventarioDefectoBusqueda")) {
				this.jButtonid_paisParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadParametroInventarioDefectoUpdate")) {
				this.jButtonid_ciudadParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadParametroInventarioDefectoBusqueda")) {
				this.jButtonid_ciudadParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_color_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_color_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_color_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_color_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clase_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_clase_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clase_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_clase_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_efecto_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_efecto_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_efecto_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_efecto_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_marca_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_marca_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_marca_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_marca_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_modelo_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_modelo_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_modelo_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_modelo_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_material_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_material_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_material_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_material_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_segmento_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_segmento_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_segmento_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_segmento_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_talla_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_talla_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_talla_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_talla_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("FK_IdCalidadProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdCalidadProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCiudadParametroInventarioDefecto")) {
				this.jButtonFK_IdCiudadParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClaseProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdClaseProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdColorProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdColorProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEfectoProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdEfectoProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdGrupoBodegaParametroInventarioDefecto")) {
				this.jButtonFK_IdGrupoBodegaParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdMarcaProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdMarcaProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdMaterialProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdMaterialProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdModeloProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdModeloProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPaisParametroInventarioDefecto")) {
				this.jButtonFK_IdPaisParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdRangoUnidadVentaParametroInventarioDefecto")) {
				this.jButtonFK_IdRangoUnidadVentaParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdSegmentoProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdSegmentoProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTallaProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdTallaProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoCosteoParametroInventarioDefecto")) {
				this.jButtonFK_IdTipoCosteoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoProductoParametroInventarioDefecto")) {
				this.jButtonFK_IdTipoProductoParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoProductoServicioParametroInventarioDefecto")) {
				this.jButtonFK_IdTipoProductoServicioParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoProductoServicioInvenParametroInventarioDefecto")) {
				this.jButtonFK_IdTipoProductoServicioInvenParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoServicioParametroInventarioDefecto")) {
				this.jButtonFK_IdTipoServicioParametroInventarioDefectoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoViaTransporteParametroInventarioDefecto")) {
				this.jButtonFK_IdTipoViaTransporteParametroInventarioDefectoActionPerformed(evt);
			}
			
			;
			
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessParametroInventarioDefecto();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				


				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			ParametroInventarioDefecto parametroinventariodefectoLocal=null;
			
			if(!this.getEsControlTabla()) {
				parametroinventariodefectoLocal=this.parametroinventariodefecto;
			} else {
				parametroinventariodefectoLocal=this.parametroinventariodefectoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
							
				
				


				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroInventarioDefectoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
								
						
				


				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
								
				
				


				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
							
				
				


				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
								
				
				


				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroInventarioDefectoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosParametroInventarioDefecto")) {
					jCheckBoxSeleccionarTodosParametroInventarioDefectoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosParametroInventarioDefecto")) {
					jCheckBoxSeleccionadosParametroInventarioDefectoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarParametroInventarioDefecto")) {
					
				}
				
				


				
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
												
				
				


				
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroInventarioDefectoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroinventariodefecto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroinventariodefecto);
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroInventarioDefecto.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroInventarioDefecto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroInventarioDefectoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroinventariodefectoAnterior =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarParametroInventarioDefecto")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosParametroInventarioDefectoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosParametroInventarioDefecto.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.parametroinventariodefecto =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.parametroinventariodefecto);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarParametroInventarioDefecto")) {
				
				}
				
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarParametroInventarioDefecto")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosParametroInventarioDefecto.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarParametroInventarioDefecto")) {
			
			}
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessParametroInventarioDefecto();
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			if(sTipo.equals("NuevoParametroInventarioDefecto")) {
				jButtonNuevoParametroInventarioDefectoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarParametroInventarioDefecto")) {
				jButtonDuplicarParametroInventarioDefectoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarParametroInventarioDefecto")) {
				jButtonCopiarParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormParametroInventarioDefecto")) {
				jButtonVerFormParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesParametroInventarioDefecto")) {
				jButtonNuevoParametroInventarioDefectoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarParametroInventarioDefecto")) {
				jButtonModificarParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarParametroInventarioDefecto")) {
				jButtonActualizarParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarParametroInventarioDefecto")) {
				jButtonEliminarParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaParametroInventarioDefecto")) {
				jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarParametroInventarioDefecto")) {
				jButtonCancelarParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarParametroInventarioDefecto")) {
				jButtonCerrarParametroInventarioDefectoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosParametroInventarioDefecto")) {
				jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosParametroInventarioDefecto")) {
				jButtonNuevoGuardarCambiosParametroInventarioDefectoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByParametroInventarioDefecto")) {
				jButtonAbrirOrderByParametroInventarioDefectoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionParametroInventarioDefecto")) {
				jButtonRecargarInformacionParametroInventarioDefectoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresParametroInventarioDefecto")) {
				jButtonAnterioresParametroInventarioDefectoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesParametroInventarioDefecto")) {
				jButtonSiguientesParametroInventarioDefectoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idParametroInventarioDefectoBusqueda")) {
				this.jButtonidParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaParametroInventarioDefectoUpdate")) {
				this.jButtonid_empresaParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaParametroInventarioDefectoBusqueda")) {
				this.jButtonid_empresaParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalParametroInventarioDefectoUpdate")) {
				this.jButtonid_sucursalParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalParametroInventarioDefectoBusqueda")) {
				this.jButtonid_sucursalParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_grupo_bodegaParametroInventarioDefectoUpdate")) {
				this.jButtonid_grupo_bodegaParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_grupo_bodegaParametroInventarioDefectoBusqueda")) {
				this.jButtonid_grupo_bodegaParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_calidad_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_calidad_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_calidad_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_calidad_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_servicioParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_servicioParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_servicioParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_servicioParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_producto_servicio_invenParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_producto_servicio_invenParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_producto_servicioParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_producto_servicioParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_producto_servicioParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_producto_servicioParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_costeoParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_costeoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_costeoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_costeoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_via_transporteParametroInventarioDefectoUpdate")) {
				this.jButtonid_tipo_via_transporteParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_via_transporteParametroInventarioDefectoBusqueda")) {
				this.jButtonid_tipo_via_transporteParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_rango_unidad_ventaParametroInventarioDefectoUpdate")) {
				this.jButtonid_rango_unidad_ventaParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_rango_unidad_ventaParametroInventarioDefectoBusqueda")) {
				this.jButtonid_rango_unidad_ventaParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisParametroInventarioDefectoUpdate")) {
				this.jButtonid_paisParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisParametroInventarioDefectoBusqueda")) {
				this.jButtonid_paisParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadParametroInventarioDefectoUpdate")) {
				this.jButtonid_ciudadParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadParametroInventarioDefectoBusqueda")) {
				this.jButtonid_ciudadParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_color_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_color_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_color_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_color_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clase_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_clase_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clase_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_clase_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_efecto_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_efecto_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_efecto_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_efecto_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_marca_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_marca_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_marca_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_marca_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_modelo_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_modelo_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_modelo_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_modelo_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_material_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_material_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_material_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_material_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_segmento_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_segmento_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_segmento_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_segmento_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_talla_productoParametroInventarioDefectoUpdate")) {
				this.jButtonid_talla_productoParametroInventarioDefectoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_talla_productoParametroInventarioDefectoBusqueda")) {
				this.jButtonid_talla_productoParametroInventarioDefectoBusquedaActionPerformed(evt);
			}
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessParametroInventarioDefecto();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameParametroInventarioDefecto")) {
				closingInternalFrameParametroInventarioDefecto();
				
			} else if(sTipo.equals("jButtonCancelarParametroInventarioDefecto")) {
				JInternalFrameBase jInternalFrameDetalleFormParametroInventarioDefecto = (JInternalFrameBase)evt.getSource();
	            	
	            ParametroInventarioDefectoBeanSwingJInternalFrame jInternalFrameParent=(ParametroInventarioDefectoBeanSwingJInternalFrame)jInternalFrameDetalleFormParametroInventarioDefecto.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarParametroInventarioDefectoActionPerformed(null);
			}
			
			ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.parametroinventariodefecto,new Object(),this.parametroinventariodefectoParameterGeneral,this.parametroinventariodefectoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormParametroInventarioDefecto(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormParametroInventarioDefecto(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormParametroInventarioDefecto(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.parametroinventariodefecto)) {
			if(!esControlTabla) {
				if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);			
				}
				
				if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.parametroinventariodefectoReturnGeneral=parametroinventariodefectoLogic.procesarEventosParametroInventarioDefectosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametroinventariodefectoLogic.getParametroInventarioDefectos(),this.parametroinventariodefecto,this.parametroinventariodefectoParameterGeneral,this.isEsNuevoParametroInventarioDefecto,classes);//this.parametroinventariodefectoLogic.getParametroInventarioDefecto()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral,this.parametroinventariodefectoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanParametroInventarioDefecto(classes,this.parametroinventariodefectoReturnGeneral,this.parametroinventariodefectoBean,false);
					}
						
					if(this.parametroinventariodefectoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto());	
					}
						
					if(this.parametroinventariodefectoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto(),classes);//this.parametroinventariodefectoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioParametroInventarioDefecto(this.parametroinventariodefecto,classes);//this.parametroinventariodefectoBean);									
				}
			
				if(ParametroInventarioDefectoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualParametroInventarioDefecto(this.parametroinventariodefecto,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroInventarioDefecto(this.parametroinventariodefecto);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.parametroinventariodefectoAnterior!=null) {
						this.parametroinventariodefecto=this.parametroinventariodefectoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.parametroinventariodefectoReturnGeneral=parametroinventariodefectoLogic.procesarEventosParametroInventarioDefectosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametroinventariodefectoLogic.getParametroInventarioDefectos(),this.parametroinventariodefecto,this.parametroinventariodefectoParameterGeneral,this.isEsNuevoParametroInventarioDefecto,classes);//this.parametroinventariodefectoLogic.getParametroInventarioDefecto()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.parametroinventariodefectoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto(),parametroinventariodefectoLogic.getParametroInventarioDefectos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto(),this.parametroinventariodefectos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosParametroInventarioDefecto.repaint();
				
				//((AbstractTableModel) this.jTableDatosParametroInventarioDefecto.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosParametroInventarioDefecto();
			}
		}
	}
	
	public void actualizarVisualTableDatosParametroInventarioDefecto() throws Exception {
		
		ParametroInventarioDefectoModel parametroinventariodefectoModel=(ParametroInventarioDefectoModel)this.jTableDatosParametroInventarioDefecto.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametroinventariodefectoModel.parametroinventariodefectos=this.parametroinventariodefectoLogic.getParametroInventarioDefectos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			parametroinventariodefectoModel.parametroinventariodefectos=this.parametroinventariodefectos;
		}
		
		
		((ParametroInventarioDefectoModel) this.jTableDatosParametroInventarioDefecto.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaParametroInventarioDefecto() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getparametroinventariodefectoAnterior(),this.parametroinventariodefectoLogic.getParametroInventarioDefectos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getparametroinventariodefectoAnterior(),this.parametroinventariodefectos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosParametroInventarioDefecto();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametroinventariodefecto,new Object(),generalEntityParameterGeneral,this.parametroinventariodefectoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ParametroInventarioDefectoConstantesFunciones.getClassesRelationshipsOfParametroInventarioDefecto(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ParametroInventarioDefectoConstantesFunciones.getClassesRelationshipsFromStringsOfParametroInventarioDefecto(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormParametroInventarioDefecto(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametroinventariodefecto,new Object(),generalEntityParameterGeneral,this.parametroinventariodefectoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioParametroInventarioDefecto(ParametroInventarioDefectoBean parametroinventariodefectoBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanParametroInventarioDefecto(ArrayList<Classe> classes,ParametroInventarioDefectoReturnGeneral parametroinventariodefectoReturnGeneral,ParametroInventarioDefectoBean parametroinventariodefectoBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.parametroinventariodefecto)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto = new ParametroInventarioDefectoDetalleFormJInternalFrame(jDesktopPane,this.parametroinventariodefectoSessionBean.getConGuardarRelaciones(),this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.setVisible(false);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.setSelected(false);						
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.parametroinventariodefectoLogic=this.parametroinventariodefectoLogic;
		
		this.cargarCombosFrameForeignKeyParametroInventarioDefecto("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleParametroInventarioDefecto();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleParametroInventarioDefecto();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyParametroInventarioDefecto("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyParametroInventarioDefecto();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarParametroInventarioDefecto"));
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"ModificarParametroInventarioDefecto"));

		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarToolBarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"ModificarToolBarParametroInventarioDefecto"));
					
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemModificarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"MenuItemModificarParametroInventarioDefecto"));		
		
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"ActualizarParametroInventarioDefecto"));
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarToolBarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"ActualizarToolBarParametroInventarioDefecto"));
						
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemActualizarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemActualizarParametroInventarioDefecto"));		
		
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"EliminarParametroInventarioDefecto"));
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"EliminarToolBarParametroInventarioDefecto"));
								
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemEliminarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemEliminarParametroInventarioDefecto"));		
		
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"CancelarParametroInventarioDefecto"));
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"CancelarToolBarParametroInventarioDefecto"));
					
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemCancelarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemCancelarParametroInventarioDefecto"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemDetalleCerrarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarParametroInventarioDefecto"));		
		
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroInventarioDefecto"));
		
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroInventarioDefecto"));
		
		
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioParametroInventarioDefecto"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonidParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"idParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_empresaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_empresaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_sucursalParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_sucursalParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_grupo_bodegaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_grupo_bodegaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_calidad_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_calidad_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_calidad_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_calidad_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_servicioParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_servicioParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_servicioParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_servicioParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicio_invenParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicio_invenParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicioParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicioParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_costeoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costeoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_costeoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costeoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_via_transporteParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_via_transporteParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_via_transporteParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_via_transporteParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_rango_unidad_ventaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_rango_unidad_ventaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_rango_unidad_ventaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_rango_unidad_ventaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_paisParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_paisParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_paisParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_ciudadParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_ciudadParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_color_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_color_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_color_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_color_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_clase_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_clase_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_clase_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_clase_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_efecto_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_efecto_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_efecto_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_efecto_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_marca_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_marca_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_marca_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_marca_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_modelo_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_modelo_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_modelo_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_modelo_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_material_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_material_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_material_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_material_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_segmento_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_segmento_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_segmento_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_segmento_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_talla_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_talla_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_talla_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_talla_productoParametroInventarioDefectoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesParametroInventarioDefecto"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameParametroInventarioDefecto"));
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarParametroInventarioDefecto"));
		}
		
		this.jTableDatosParametroInventarioDefecto.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarParametroInventarioDefecto"));
		
		this.jTableDatosParametroInventarioDefecto.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarParametroInventarioDefecto"));
		
		this.jButtonNuevoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"NuevoParametroInventarioDefecto"));
		
		this.jButtonDuplicarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"DuplicarParametroInventarioDefecto"));
		
		this.jButtonCopiarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"CopiarParametroInventarioDefecto"));
		
		this.jButtonVerFormParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"VerFormParametroInventarioDefecto"));
		
		
		this.jButtonNuevoToolBarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"NuevoToolBarParametroInventarioDefecto"));
			
		this.jButtonDuplicarToolBarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"DuplicarToolBarParametroInventarioDefecto"));
			
		this.jMenuItemNuevoParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemNuevoParametroInventarioDefecto"));
			
		this.jMenuItemDuplicarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarParametroInventarioDefecto"));		
		
		
		this.jButtonNuevoRelacionesParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"NuevoRelacionesParametroInventarioDefecto"));
		
		
		this.jButtonNuevoRelacionesToolBarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarParametroInventarioDefecto"));
			
		this.jMenuItemNuevoRelacionesParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesParametroInventarioDefecto"));		
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"ModificarParametroInventarioDefecto"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonModificarToolBarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"ModificarToolBarParametroInventarioDefecto"));
			
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemModificarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"MenuItemModificarParametroInventarioDefecto"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"ActualizarParametroInventarioDefecto"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonActualizarToolBarParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"ActualizarToolBarParametroInventarioDefecto"));
				
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemActualizarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemActualizarParametroInventarioDefecto"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"EliminarParametroInventarioDefecto"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonEliminarToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"EliminarToolBarParametroInventarioDefecto"));
						
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemEliminarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemEliminarParametroInventarioDefecto"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"CancelarParametroInventarioDefecto"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonCancelarToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"CancelarToolBarParametroInventarioDefecto"));
			
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemCancelarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemCancelarParametroInventarioDefecto"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarParametroInventarioDefecto"));		
		
		
		this.jButtonCerrarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"CerrarParametroInventarioDefecto"));
		
		
		this.jButtonCerrarToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"CerrarToolBarParametroInventarioDefecto"));
			
		this.jMenuItemCerrarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemCerrarParametroInventarioDefecto"));
			
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jMenuItemDetalleCerrarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarParametroInventarioDefecto"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GuardarCambiosParametroInventarioDefecto"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroInventarioDefecto"));
		}
		
		this.jButtonCopiarToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"CopiarToolBarParametroInventarioDefecto"));
			
		this.jButtonVerFormToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"VerFormToolBarParametroInventarioDefecto"));
		
		this.jMenuItemGuardarCambiosParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosParametroInventarioDefecto"));
			
		this.jMenuItemCopiarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemCopiarParametroInventarioDefecto"));		
		
		this.jMenuItemVerFormParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemVerFormParametroInventarioDefecto"));		
		
		
		this.jButtonGuardarCambiosTablaParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaParametroInventarioDefecto"));
		
		
		this.jButtonGuardarCambiosTablaToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarParametroInventarioDefecto"));
			
		this.jMenuItemGuardarCambiosTablaParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaParametroInventarioDefecto"));		
		
		
		
		this.jButtonRecargarInformacionParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"RecargarInformacionParametroInventarioDefecto"));
					
		this.jButtonRecargarInformacionToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarParametroInventarioDefecto"));
		
		this.jMenuItemRecargarInformacionParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionParametroInventarioDefecto"));		
		
		
		
		this.jButtonAnterioresParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"AnterioresParametroInventarioDefecto"));
		
		
		this.jButtonAnterioresToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"AnterioresToolBarParametroInventarioDefecto"));
		
		this.jMenuItemAnterioresParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresParametroInventarioDefecto"));		
		
		
		this.jButtonSiguientesParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"SiguientesParametroInventarioDefecto"));
		
		
		this.jButtonSiguientesToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"SiguientesToolBarParametroInventarioDefecto"));
			
		this.jMenuItemSiguientesParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesParametroInventarioDefecto"));
			
		this.jMenuItemAbrirOrderByParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByParametroInventarioDefecto"));
			
		this.jMenuItemMostrarOcultarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarParametroInventarioDefecto"));
			
		this.jMenuItemDetalleAbrirOrderByParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByParametroInventarioDefecto"));
			
		this.jMenuItemDetalleMostarOcultarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarParametroInventarioDefecto"));		
		
		
		this.jButtonNuevoGuardarCambiosParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosParametroInventarioDefecto"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarParametroInventarioDefecto"));
			
		this.jMenuItemNuevoGuardarCambiosParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosParametroInventarioDefecto"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosParametroInventarioDefecto.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosParametroInventarioDefecto"));

		this.jCheckBoxSeleccionadosParametroInventarioDefecto.addItemListener(new CheckBoxItemListener(this,"SeleccionadosParametroInventarioDefecto"));
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioParametroInventarioDefecto"));
		}
		
		
		this.jComboBoxTiposRelacionesParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"TiposRelacionesParametroInventarioDefecto"));
			
		this.jComboBoxTiposAccionesParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"TiposAccionesParametroInventarioDefecto"));
					
		this.jComboBoxTiposSeleccionarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"TiposSeleccionarParametroInventarioDefecto"));
			
		this.jTextFieldValorCampoGeneralParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralParametroInventarioDefecto"));		
		
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonidParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"idParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_empresaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_empresaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_sucursalParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_sucursalParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_grupo_bodegaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_grupo_bodegaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_calidad_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_calidad_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_calidad_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_calidad_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_servicioParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_servicioParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_servicioParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_servicioParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicio_invenParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicio_invenParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicioParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicioParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_costeoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costeoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_costeoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costeoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_via_transporteParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_via_transporteParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_via_transporteParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_via_transporteParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_rango_unidad_ventaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_rango_unidad_ventaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_rango_unidad_ventaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_rango_unidad_ventaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_paisParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_paisParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_paisParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_ciudadParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_ciudadParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_color_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_color_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_color_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_color_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_clase_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_clase_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_clase_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_clase_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_efecto_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_efecto_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_efecto_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_efecto_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_marca_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_marca_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_marca_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_marca_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_modelo_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_modelo_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_modelo_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_modelo_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_material_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_material_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_material_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_material_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_segmento_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_segmento_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_segmento_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_segmento_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_talla_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_talla_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_talla_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_talla_productoParametroInventarioDefectoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdCalidadProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdCalidadProductoParametroInventarioDefecto"));

			this.jButtonFK_IdCiudadParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdCiudadParametroInventarioDefecto"));

			this.jButtonFK_IdClaseProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdClaseProductoParametroInventarioDefecto"));

			this.jButtonFK_IdColorProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdColorProductoParametroInventarioDefecto"));

			this.jButtonFK_IdEfectoProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdEfectoProductoParametroInventarioDefecto"));

			this.jButtonFK_IdGrupoBodegaParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdGrupoBodegaParametroInventarioDefecto"));

			this.jButtonFK_IdMarcaProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdMarcaProductoParametroInventarioDefecto"));

			this.jButtonFK_IdMaterialProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdMaterialProductoParametroInventarioDefecto"));

			this.jButtonFK_IdModeloProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdModeloProductoParametroInventarioDefecto"));

			this.jButtonFK_IdPaisParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdPaisParametroInventarioDefecto"));

			this.jButtonFK_IdRangoUnidadVentaParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdRangoUnidadVentaParametroInventarioDefecto"));

			this.jButtonFK_IdSegmentoProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdSegmentoProductoParametroInventarioDefecto"));

			this.jButtonFK_IdTallaProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTallaProductoParametroInventarioDefecto"));

			this.jButtonFK_IdTipoCosteoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoCosteoParametroInventarioDefecto"));

			this.jButtonFK_IdTipoProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoProductoParametroInventarioDefecto"));

			this.jButtonFK_IdTipoProductoServicioParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoProductoServicioParametroInventarioDefecto"));

			this.jButtonFK_IdTipoProductoServicioInvenParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoProductoServicioInvenParametroInventarioDefecto"));

			this.jButtonFK_IdTipoServicioParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoServicioParametroInventarioDefecto"));

			this.jButtonFK_IdTipoViaTransporteParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoViaTransporteParametroInventarioDefecto"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoParametroInventarioDefecto!=null) {
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroInventarioDefecto"));
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroInventarioDefecto"));
				this.jInternalFrameReporteDinamicoParametroInventarioDefecto.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroInventarioDefecto"));
			}
			
			//this.jButtonCerrarReporteDinamicoParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroInventarioDefecto"));				
			//this.jButtonGenerarReporteDinamicoParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroInventarioDefecto"));
			//this.jButtonGenerarExcelReporteDinamicoParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroInventarioDefecto"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionParametroInventarioDefecto!=null) {
				this.jInternalFrameImportacionParametroInventarioDefecto.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionParametroInventarioDefecto"));
				this.jInternalFrameImportacionParametroInventarioDefecto.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionParametroInventarioDefecto"));
				this.jInternalFrameImportacionParametroInventarioDefecto.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionParametroInventarioDefecto"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"AbrirOrderByParametroInventarioDefecto"));
			
			this.jButtonAbrirOrderByToolBarParametroInventarioDefecto.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarParametroInventarioDefecto"));			
			
			if(this.jInternalFrameOrderByParametroInventarioDefecto!=null) {
				this.jInternalFrameOrderByParametroInventarioDefecto.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByParametroInventarioDefecto"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroInventarioDefecto.jTabbedPaneRelacionesParametroInventarioDefecto.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesParametroInventarioDefecto"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameParametroInventarioDefecto();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormParametroInventarioDefecto = (JInternalFrameBase)event.getSource();
	            	
	            ParametroInventarioDefectoBeanSwingJInternalFrame jInternalFrameParent=(ParametroInventarioDefectoBeanSwingJInternalFrame)jInternalFrameDetalleFormParametroInventarioDefecto.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarParametroInventarioDefectoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosParametroInventarioDefecto.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosParametroInventarioDefectoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosParametroInventarioDefecto.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosParametroInventarioDefecto.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroInventarioDefectoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroInventarioDefectoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroInventarioDefectoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoParametroInventarioDefecto";
		inputMap = this.jButtonNuevoParametroInventarioDefecto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoParametroInventarioDefecto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoParametroInventarioDefectoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroInventarioDefectoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroInventarioDefectoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroInventarioDefectoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesParametroInventarioDefecto";
		inputMap = this.jButtonNuevoRelacionesParametroInventarioDefecto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesParametroInventarioDefecto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoParametroInventarioDefectoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarParametroInventarioDefecto";
		inputMap = this.jButtonModificarParametroInventarioDefecto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarParametroInventarioDefecto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarParametroInventarioDefectoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarParametroInventarioDefecto";
		inputMap = this.jButtonActualizarParametroInventarioDefecto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarParametroInventarioDefecto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarParametroInventarioDefectoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarParametroInventarioDefecto";
		inputMap = this.jButtonEliminarParametroInventarioDefecto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarParametroInventarioDefecto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarParametroInventarioDefectoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarParametroInventarioDefecto";
		inputMap = this.jButtonCancelarParametroInventarioDefecto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarParametroInventarioDefecto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarParametroInventarioDefectoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarParametroInventarioDefecto";
		inputMap = this.jButtonCerrarParametroInventarioDefecto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarParametroInventarioDefecto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarParametroInventarioDefectoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosParametroInventarioDefecto";
		inputMap = this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosParametroInventarioDefecto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonGuardarCambiosParametroInventarioDefecto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosParametroInventarioDefectoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosParametroInventarioDefecto.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosParametroInventarioDefectoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesParametroInventarioDefecto.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesParametroInventarioDefectoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarParametroInventarioDefecto.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarParametroInventarioDefectoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralParametroInventarioDefecto.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralParametroInventarioDefectoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonidParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"idParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_empresaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_empresaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_sucursalParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_sucursalParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_grupo_bodegaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_grupo_bodegaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_calidad_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_calidad_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_calidad_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_calidad_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_servicioParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_servicioParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_servicioParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_servicioParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicio_invenParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicio_invenParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicio_invenParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicioParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_producto_servicioParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_producto_servicioParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_costeoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costeoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_costeoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costeoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_via_transporteParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_via_transporteParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_tipo_via_transporteParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_via_transporteParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_rango_unidad_ventaParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_rango_unidad_ventaParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_rango_unidad_ventaParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_rango_unidad_ventaParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_paisParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_paisParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_paisParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_ciudadParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_ciudadParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_color_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_color_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_color_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_color_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_clase_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_clase_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_clase_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_clase_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_efecto_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_efecto_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_efecto_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_efecto_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_marca_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_marca_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_marca_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_marca_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_modelo_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_modelo_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_modelo_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_modelo_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_material_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_material_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_material_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_material_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_segmento_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_segmento_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_segmento_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_segmento_productoParametroInventarioDefectoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_talla_productoParametroInventarioDefectoUpdate.addActionListener(new ButtonActionListener(this,"id_talla_productoParametroInventarioDefectoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jButtonid_talla_productoParametroInventarioDefectoBusqueda.addActionListener(new ButtonActionListener(this,"id_talla_productoParametroInventarioDefectoBusqueda"));
		
		
		this.jButtonFK_IdCalidadProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdCalidadProductoParametroInventarioDefecto"));

		this.jButtonFK_IdCiudadParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdCiudadParametroInventarioDefecto"));

		this.jButtonFK_IdClaseProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdClaseProductoParametroInventarioDefecto"));

		this.jButtonFK_IdColorProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdColorProductoParametroInventarioDefecto"));

		this.jButtonFK_IdEfectoProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdEfectoProductoParametroInventarioDefecto"));

		this.jButtonFK_IdGrupoBodegaParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdGrupoBodegaParametroInventarioDefecto"));

		this.jButtonFK_IdMarcaProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdMarcaProductoParametroInventarioDefecto"));

		this.jButtonFK_IdMaterialProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdMaterialProductoParametroInventarioDefecto"));

		this.jButtonFK_IdModeloProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdModeloProductoParametroInventarioDefecto"));

		this.jButtonFK_IdPaisParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdPaisParametroInventarioDefecto"));

		this.jButtonFK_IdRangoUnidadVentaParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdRangoUnidadVentaParametroInventarioDefecto"));

		this.jButtonFK_IdSegmentoProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdSegmentoProductoParametroInventarioDefecto"));

		this.jButtonFK_IdTallaProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTallaProductoParametroInventarioDefecto"));

		this.jButtonFK_IdTipoCosteoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoCosteoParametroInventarioDefecto"));

		this.jButtonFK_IdTipoProductoParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoProductoParametroInventarioDefecto"));

		this.jButtonFK_IdTipoProductoServicioParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoProductoServicioParametroInventarioDefecto"));

		this.jButtonFK_IdTipoProductoServicioInvenParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoProductoServicioInvenParametroInventarioDefecto"));

		this.jButtonFK_IdTipoServicioParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoServicioParametroInventarioDefecto"));

		this.jButtonFK_IdTipoViaTransporteParametroInventarioDefecto.addActionListener(new ButtonActionListener(this,"FK_IdTipoViaTransporteParametroInventarioDefecto"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionParametroInventarioDefecto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionParametroInventarioDefectoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarParametroInventarioDefectoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarParametroInventarioDefecto.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosParametroInventarioDefecto(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
					parametroinventariodefectoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectos) {
					parametroinventariodefectoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosParametroInventarioDefectoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
						parametroinventariodefectoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectos) {
						parametroinventariodefectoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectos) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosParametroInventarioDefecto.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosParametroInventarioDefecto.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosParametroInventarioDefectoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosParametroInventarioDefecto.getSelectedRows();
			
			ParametroInventarioDefecto parametroinventariodefectoLocal=new ParametroInventarioDefecto();
			
			//this.seleccionarTodosParametroInventarioDefecto(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroinventariodefectoLocal =(ParametroInventarioDefecto) this.parametroinventariodefectoLogic.getParametroInventarioDefectos().toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					parametroinventariodefectoLocal =(ParametroInventarioDefecto) this.parametroinventariodefectos.toArray()[this.jTableDatosParametroInventarioDefecto.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				parametroinventariodefectoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
						parametroinventariodefectoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectos) {
						parametroinventariodefectoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosParametroInventarioDefecto.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosParametroInventarioDefecto.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosParametroInventarioDefecto,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualParametroInventarioDefectoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarParametroInventarioDefectoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralParametroInventarioDefectoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralParametroInventarioDefecto.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
				
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectos) {
					
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesParametroInventarioDefectoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioParametroInventarioDefecto=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesParametroInventarioDefecto.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteParametroInventarioDefecto) {				
					conSplash=true;//false;										
					
					//this.startProcessParametroInventarioDefecto(conSplash);
				
					this.generarReporteParametroInventarioDefectosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoParametroInventarioDefectosSeleccionados();
				//this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoParametroInventarioDefectosSeleccionados(false);
				//this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoParametroInventarioDefectosSeleccionados(true);
				//this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessParametroInventarioDefecto();
				
				this.exportarParametroInventarioDefectosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionParametroInventarioDefectos();
				//this.importarParametroInventarioDefectos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessParametroInventarioDefecto();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelParametroInventarioDefectosSeleccionados();
				//this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Parametro Inventario Defecto", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessParametroInventarioDefecto();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoParametroInventarioDefecto)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyParametroInventarioDefecto(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.setSelectedIndex(0);					
				}	
			} 			
			else if(ParametroInventarioDefectoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteParametroInventarioDefecto) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessParametroInventarioDefecto(conSplash);
					
						//this.actualizarParametrosGeneralParametroInventarioDefecto();
						
						this.generarReporteProcesoAccionParametroInventarioDefectosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Parametro Inventario DefectoS SELECCIONADOS?", "MANTENIMIENTO DE Parametro Inventario Defecto", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessParametroInventarioDefecto();
				
						this.actualizarParametrosGeneralParametroInventarioDefecto();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.parametroinventariodefectoReturnGeneral=parametroinventariodefectoLogic.procesarAccionParametroInventarioDefectosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.parametroinventariodefectoLogic.getParametroInventarioDefectos(),this.parametroinventariodefectoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarParametroInventarioDefectoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralParametroInventarioDefecto();
					
					ParametroInventarioDefectoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarParametroInventarioDefectoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesParametroInventarioDefecto.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxTiposAccionesFormularioParametroInventarioDefecto.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessParametroInventarioDefecto(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesParametroInventarioDefectoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessParametroInventarioDefecto();
			
			if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		
			ParametroInventarioDefecto parametroinventariodefecto=new ParametroInventarioDefecto();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingParametroInventarioDefecto(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesParametroInventarioDefecto.getSelectedItem();
			
			
			
			
			parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
			//this.sTipoAccion;
			
			if(parametroinventariodefectosSeleccionados.size()==1) {
				for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectosSeleccionados) {
					parametroinventariodefecto=parametroinventariodefectoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessParametroInventarioDefecto();
			
      		//this.finishProcessParametroInventarioDefecto(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarParametroInventarioDefectoReturnGeneral() throws Exception {
		if(this.parametroinventariodefectoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.parametroinventariodefectoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.parametroinventariodefectoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.parametroinventariodefectoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.parametroinventariodefectoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.parametroinventariodefectoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingParametroInventarioDefecto(false);
		}
		
		if(this.parametroinventariodefectoReturnGeneral.getConRetornoLista() || this.parametroinventariodefectoReturnGeneral.getConRetornoObjeto()) {
			if(this.parametroinventariodefectoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.parametroinventariodefectoLogic.setParametroInventarioDefectos(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefectos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.parametroinventariodefectoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.parametroinventariodefectoLogic.setParametroInventarioDefecto(this.parametroinventariodefectoReturnGeneral.getParametroInventarioDefecto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingParametroInventarioDefecto(false);
		}
	}
	
	public void actualizarParametrosGeneralParametroInventarioDefecto() throws Exception {
		
		
	}
	
	public ArrayList<ParametroInventarioDefecto> getParametroInventarioDefectosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioParametroInventarioDefecto) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectoLogic.getParametroInventarioDefectos()) {
					if(parametroinventariodefectoAux.getIsSelected()) {
						parametroinventariodefectosSeleccionados.add(parametroinventariodefectoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroInventarioDefecto parametroinventariodefectoAux:this.parametroinventariodefectos) {
					if(parametroinventariodefectoAux.getIsSelected()) {
						parametroinventariodefectosSeleccionados.add(parametroinventariodefectoAux);				
					}
				}
			}
			
			if(parametroinventariodefectosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						parametroinventariodefectosSeleccionados.addAll(this.parametroinventariodefectoLogic.getParametroInventarioDefectos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						parametroinventariodefectosSeleccionados.addAll(this.parametroinventariodefectos);				
					}
				}
			}
		} else {
			parametroinventariodefectosSeleccionados.add(this.parametroinventariodefecto);
		}
		
		return parametroinventariodefectosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteParametroInventarioDefectosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalParametroInventarioDefectosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoParametroInventarioDefectosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoParametroInventarioDefectosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoParametroInventarioDefectosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Parametro Inventario Defecto",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesParametroInventarioDefectosSeleccionados() throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteParametroInventarioDefectos("Todos",parametroinventariodefectosSeleccionados);
		
	}	
	
	public void generarReporteNormalParametroInventarioDefectosSeleccionados() throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteParametroInventarioDefectos("Todos",parametroinventariodefectosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionParametroInventarioDefectosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteParametroInventarioDefectos("Todos",parametroinventariodefectosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoParametroInventarioDefectosSeleccionados() throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		
		
		
		this.abrirInicializarFrameReporteDinamicoParametroInventarioDefecto();
		
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoParametroInventarioDefecto();
		
		
		//this.generarReporteParametroInventarioDefectos("Todos",parametroinventariodefectosSeleccionados ,parametroinventariodefectoImplementable,parametroinventariodefectoImplementableHome);
	}
	
	public void mostrarImportacionParametroInventarioDefectos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionParametroInventarioDefecto();
		
		this.abrirFrameImportacionParametroInventarioDefecto();		
		
			
		//this.generarReporteParametroInventarioDefectos("Todos",parametroinventariodefectosSeleccionados ,parametroinventariodefectoImplementable,parametroinventariodefectoImplementableHome);
	}
	
	public void importarParametroInventarioDefectos() throws Exception {		
	
	}
	
	public void exportarParametroInventarioDefectosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelParametroInventarioDefectosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoParametroInventarioDefectosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlParametroInventarioDefectosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Parametro Inventario Defecto",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoParametroInventarioDefectosSeleccionados() throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroinventariodefecto."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarParametroInventarioDefecto(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarParametroInventarioDefecto(parametroinventariodefectoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//parametroinventariodefectoAux.setsDetalleGeneralEntityReporte(parametroinventariodefectoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarParametroInventarioDefecto(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=parametroinventariodefecto.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getgrupobodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getcalidadproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.gettiposervicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.gettipoproductoservicioinven_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.gettipoproductoservicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.gettipocosteo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.gettipoproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.gettipoviatransporte_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getrangounidadventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getpais_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getciudad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getcolorproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getclaseproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getefectoproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getmarcaproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getmodeloproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getmaterialproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.getsegmentoproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroinventariodefecto.gettallaproducto_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelParametroInventarioDefectosSeleccionados() throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroinventariodefecto.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("ParametroInventarioDefectos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelParametroInventarioDefecto(row);				
				iRow++;
			}				
			
			for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelParametroInventarioDefecto(parametroinventariodefectoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlParametroInventarioDefectosSeleccionados() throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();		
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroinventariodefecto.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("parametroinventariodefectos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("parametroinventariodefecto");
			//elementRoot.appendChild(element);
		
			for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectosSeleccionados) {
				element = document.createElement("parametroinventariodefecto");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlParametroInventarioDefecto(parametroinventariodefectoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Inventario Defecto",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelParametroInventarioDefecto(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getgrupobodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getcalidadproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.gettiposervicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.gettipoproductoservicioinven_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.gettipoproductoservicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.gettipocosteo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.gettipoproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.gettipoviatransporte_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getrangounidadventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getpais_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getciudad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getcolorproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getclaseproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getefectoproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getmarcaproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getmodeloproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getmaterialproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.getsegmentoproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroinventariodefecto.gettallaproducto_descripcion());				
	}
	
	public void setFilaDatosExportarXmlParametroInventarioDefecto(ParametroInventarioDefecto parametroinventariodefecto,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ParametroInventarioDefectoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(parametroinventariodefecto.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ParametroInventarioDefectoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(parametroinventariodefecto.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementgrupobodega_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDGRUPOBODEGA);
		elementgrupobodega_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getgrupobodega_descripcion()));
		element.appendChild(elementgrupobodega_descripcion);

		Element elementcalidadproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDCALIDADPRODUCTO);
		elementcalidadproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getcalidadproducto_descripcion()));
		element.appendChild(elementcalidadproducto_descripcion);

		Element elementtiposervicio_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDTIPOSERVICIO);
		elementtiposervicio_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.gettiposervicio_descripcion()));
		element.appendChild(elementtiposervicio_descripcion);

		Element elementtipoproductoservicioinven_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDTIPOPRODUCTOSERVICIOINVEN);
		elementtipoproductoservicioinven_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.gettipoproductoservicioinven_descripcion()));
		element.appendChild(elementtipoproductoservicioinven_descripcion);

		Element elementtipoproductoservicio_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDTIPOPRODUCTOSERVICIO);
		elementtipoproductoservicio_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.gettipoproductoservicio_descripcion()));
		element.appendChild(elementtipoproductoservicio_descripcion);

		Element elementtipocosteo_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDTIPOCOSTEO);
		elementtipocosteo_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.gettipocosteo_descripcion()));
		element.appendChild(elementtipocosteo_descripcion);

		Element elementtipoproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDTIPOPRODUCTO);
		elementtipoproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.gettipoproducto_descripcion()));
		element.appendChild(elementtipoproducto_descripcion);

		Element elementtipoviatransporte_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDTIPOVIATRANSPORTE);
		elementtipoviatransporte_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.gettipoviatransporte_descripcion()));
		element.appendChild(elementtipoviatransporte_descripcion);

		Element elementrangounidadventa_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDRANGOUNIDADVENTA);
		elementrangounidadventa_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getrangounidadventa_descripcion()));
		element.appendChild(elementrangounidadventa_descripcion);

		Element elementpais_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDPAIS);
		elementpais_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getpais_descripcion()));
		element.appendChild(elementpais_descripcion);

		Element elementciudad_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDCIUDAD);
		elementciudad_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getciudad_descripcion()));
		element.appendChild(elementciudad_descripcion);

		Element elementcolorproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDCOLORPRODUCTO);
		elementcolorproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getcolorproducto_descripcion()));
		element.appendChild(elementcolorproducto_descripcion);

		Element elementclaseproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDCLASEPRODUCTO);
		elementclaseproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getclaseproducto_descripcion()));
		element.appendChild(elementclaseproducto_descripcion);

		Element elementefectoproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDEFECTOPRODUCTO);
		elementefectoproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getefectoproducto_descripcion()));
		element.appendChild(elementefectoproducto_descripcion);

		Element elementmarcaproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDMARCAPRODUCTO);
		elementmarcaproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getmarcaproducto_descripcion()));
		element.appendChild(elementmarcaproducto_descripcion);

		Element elementmodeloproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDMODELOPRODUCTO);
		elementmodeloproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getmodeloproducto_descripcion()));
		element.appendChild(elementmodeloproducto_descripcion);

		Element elementmaterialproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDMATERIALPRODUCTO);
		elementmaterialproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getmaterialproducto_descripcion()));
		element.appendChild(elementmaterialproducto_descripcion);

		Element elementsegmentoproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDSEGMENTOPRODUCTO);
		elementsegmentoproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.getsegmentoproducto_descripcion()));
		element.appendChild(elementsegmentoproducto_descripcion);

		Element elementtallaproducto_descripcion = document.createElement(ParametroInventarioDefectoConstantesFunciones.IDTALLAPRODUCTO);
		elementtallaproducto_descripcion.appendChild(document.createTextNode(parametroinventariodefecto.gettallaproducto_descripcion()));
		element.appendChild(elementtallaproducto_descripcion);
	}
	
	public void generarReporteGroupGenericoParametroInventarioDefectosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados=new ArrayList<ParametroInventarioDefecto>();
		
		parametroinventariodefectosSeleccionados=this.getParametroInventarioDefectosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoParametroInventarioDefecto(parametroinventariodefectosSeleccionados);
		
		this.generarReporteParametroInventarioDefectos("Todos",parametroinventariodefectosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoParametroInventarioDefecto(ArrayList<ParametroInventarioDefecto> parametroinventariodefectosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(ParametroInventarioDefecto parametroinventariodefectoAux:parametroinventariodefectosSeleccionados) {
				parametroinventariodefectoAux.setsDetalleGeneralEntityReporte(parametroinventariodefectoAux.toString());
			
				if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDGRUPOBODEGA)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getgrupobodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCALIDADPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getcalidadproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOSERVICIO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.gettiposervicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIOINVEN)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.gettipoproductoservicioinven_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTOSERVICIO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.gettipoproductoservicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOCOSTEO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.gettipocosteo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.gettipoproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTIPOVIATRANSPORTE)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.gettipoviatransporte_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDRANGOUNIDADVENTA)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getrangounidadventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDPAIS)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getpais_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCIUDAD)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getciudad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCOLORPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getcolorproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDCLASEPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getclaseproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDEFECTOPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getefectoproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMARCAPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getmarcaproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMODELOPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getmodeloproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDMATERIALPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getmaterialproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDSEGMENTOPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.getsegmentoproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroInventarioDefectoConstantesFunciones.LABEL_IDTALLAPRODUCTO)) {
					existe=true;
					parametroinventariodefectoAux.setsDescripcionGeneralEntityReporte1(parametroinventariodefectoAux.gettallaproducto_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroInventarioDefectoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesParametroInventarioDefecto(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoParametroInventarioDefecto=true;
				this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=true;
				this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=true;
			}
			
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=false;
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=true;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=false;
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=true;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=true;
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=false;
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=true;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=true;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=true;
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=false;
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=false;
			this.isVisibilidadCeldaModificarParametroInventarioDefecto=true;
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaCancelarParametroInventarioDefecto=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroInventarioDefecto=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ParametroInventarioDefectoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=true;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=true;
		} else {
			this.actualizarEstadoPanelsParametroInventarioDefecto(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarParametroInventarioDefecto=false;
			//this.isVisibilidadCeldaVerFormParametroInventarioDefecto=false;
			this.isVisibilidadCeldaDuplicarParametroInventarioDefecto=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
		} else {
			this.isVisibilidadCeldaNuevoParametroInventarioDefecto=false;
			this.isVisibilidadCeldaGuardarCambiosParametroInventarioDefecto=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
			if(!parametroinventariodefectoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;												
			}
			
			this.jButtonCerrarParametroInventarioDefecto.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesParametroInventarioDefecto=false;
		}
		
		if(!this.permiteMantenimiento(this.parametroinventariodefecto)) {
			this.isVisibilidadCeldaActualizarParametroInventarioDefecto=false;
			this.isVisibilidadCeldaEliminarParametroInventarioDefecto=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesParametroInventarioDefecto() {
	}
	
	public void actualizarEstadoPanelsParametroInventarioDefecto(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosEdicionParametroInventarioDefecto.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosParametroInventarioDefecto.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroInventarioDefecto!=null) {
				this.jPanelPaginacionParametroInventarioDefecto.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosEdicionParametroInventarioDefecto.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosParametroInventarioDefecto.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroInventarioDefecto!=null) {
				this.jPanelPaginacionParametroInventarioDefecto.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosEdicionParametroInventarioDefecto.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosParametroInventarioDefecto.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroInventarioDefecto!=null) {
				this.jPanelPaginacionParametroInventarioDefecto.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosEdicionParametroInventarioDefecto.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosParametroInventarioDefecto.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroInventarioDefecto!=null) {
				this.jPanelPaginacionParametroInventarioDefecto.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosEdicionParametroInventarioDefecto.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosParametroInventarioDefecto.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroInventarioDefecto!=null) {
				this.jPanelPaginacionParametroInventarioDefecto.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosEdicionParametroInventarioDefecto.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosParametroInventarioDefecto.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroInventarioDefecto!=null) {
				this.jPanelPaginacionParametroInventarioDefecto.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosEdicionParametroInventarioDefecto.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroInventarioDefecto!=null) {
				this.jScrollPanelDatosParametroInventarioDefecto.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroInventarioDefecto!=null) {
				this.jPanelPaginacionParametroInventarioDefecto.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
					this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.parametroinventariodefectoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroInventarioDefecto!=null) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesParametroInventarioDefecto!=null) {
				this.jPanelParametrosReportesParametroInventarioDefecto.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCalidadProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCalidadProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaGrupoBodega(Boolean isParaGrupoBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaGrupoBodegaNegation=!isParaGrupoBodega;

			this.isVisibilidadFK_IdCalidadProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaGrupoBodega;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCalidadProducto(Boolean isParaCalidadProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCalidadProductoNegation=!isParaCalidadProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaCalidadProducto;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoServicio(Boolean isParaTipoServicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoServicioNegation=!isParaTipoServicio;

			this.isVisibilidadFK_IdCalidadProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaTipoServicio;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoProductoServicioInven(Boolean isParaTipoProductoServicioInven){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoProductoServicioInvenNegation=!isParaTipoProductoServicioInven;

			this.isVisibilidadFK_IdCalidadProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaTipoProductoServicioInven;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaTipoProductoServicioInvenNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoProductoServicio(Boolean isParaTipoProductoServicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoProductoServicioNegation=!isParaTipoProductoServicio;

			this.isVisibilidadFK_IdCalidadProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaTipoProductoServicio;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaTipoProductoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCosteo(Boolean isParaTipoCosteo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCosteoNegation=!isParaTipoCosteo;

			this.isVisibilidadFK_IdCalidadProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaTipoCosteo;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaTipoCosteoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoProducto(Boolean isParaTipoProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoProductoNegation=!isParaTipoProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaTipoProducto;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaTipoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoViaTransporte(Boolean isParaTipoViaTransporte){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoViaTransporteNegation=!isParaTipoViaTransporte;

			this.isVisibilidadFK_IdCalidadProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaTipoViaTransporteNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaTipoViaTransporte;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaRangoUnidadVenta(Boolean isParaRangoUnidadVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaRangoUnidadVentaNegation=!isParaRangoUnidadVenta;

			this.isVisibilidadFK_IdCalidadProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaRangoUnidadVenta;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaRangoUnidadVentaNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaPais(Boolean isParaPais){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPaisNegation=!isParaPais;

			this.isVisibilidadFK_IdCalidadProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaPais;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCiudad(Boolean isParaCiudad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCiudadNegation=!isParaCiudad;

			this.isVisibilidadFK_IdCalidadProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaCiudad;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaColorProducto(Boolean isParaColorProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaColorProductoNegation=!isParaColorProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaColorProducto;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaColorProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaClaseProducto(Boolean isParaClaseProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClaseProductoNegation=!isParaClaseProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaClaseProducto;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaClaseProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaEfectoProducto(Boolean isParaEfectoProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEfectoProductoNegation=!isParaEfectoProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaEfectoProducto;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaEfectoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaMarcaProducto(Boolean isParaMarcaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMarcaProductoNegation=!isParaMarcaProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaMarcaProducto;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaMarcaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaModeloProducto(Boolean isParaModeloProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModeloProductoNegation=!isParaModeloProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaModeloProducto;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaModeloProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaMaterialProducto(Boolean isParaMaterialProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMaterialProductoNegation=!isParaMaterialProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaMaterialProducto;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaMaterialProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaSegmentoProducto(Boolean isParaSegmentoProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSegmentoProductoNegation=!isParaSegmentoProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaSegmentoProducto;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaSegmentoProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}

	public void setVisibilidadBusquedasParaTallaProducto(Boolean isParaTallaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTallaProductoNegation=!isParaTallaProducto;

			this.isVisibilidadFK_IdCalidadProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCalidadProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdCiudad=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdCiudadParametroInventarioDefecto);}

			this.isVisibilidadFK_IdClaseProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdClaseProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdClaseProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdColorProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdColorProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdColorProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdEfectoProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdEfectoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdEfectoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdGrupoBodega=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdGrupoBodegaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMarcaProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdMarcaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMarcaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdMaterialProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdMaterialProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdMaterialProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdModeloProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdModeloProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdModeloProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdPais=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdPaisParametroInventarioDefecto);}

			this.isVisibilidadFK_IdRangoUnidadVenta=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdRangoUnidadVenta) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);}

			this.isVisibilidadFK_IdSegmentoProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdSegmentoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdSegmentoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTallaProducto=isParaTallaProducto;
			if(!this.isVisibilidadFK_IdTallaProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTallaProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoCosteo=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteo) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoCosteoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProducto=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProducto) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicio=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoProductoServicioInven=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoProductoServicioInven) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoServicio=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoServicioParametroInventarioDefecto);}

			this.isVisibilidadFK_IdTipoViaTransporte=isParaTallaProductoNegation;
			if(!this.isVisibilidadFK_IdTipoViaTransporte) {this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);}
		}
		
	}
	
	
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//ParametroInventarioDefectoSessionBean parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
		
		if(this.parametroinventariodefectoSessionBean==null) {
			this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
		}
		
		this.parametroinventariodefectoSessionBean.setsUltimaBusquedaParametroInventarioDefecto(this.getsAccionBusqueda());
		this.parametroinventariodefectoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.parametroinventariodefectoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCalidadProducto")) {
			parametroinventariodefectoSessionBean.setid_calidad_producto(this.getid_calidad_productoFK_IdCalidadProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCiudad")) {
			parametroinventariodefectoSessionBean.setid_ciudad(this.getid_ciudadFK_IdCiudad());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdClaseProducto")) {
			parametroinventariodefectoSessionBean.setid_clase_producto(this.getid_clase_productoFK_IdClaseProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdColorProducto")) {
			parametroinventariodefectoSessionBean.setid_color_producto(this.getid_color_productoFK_IdColorProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEfectoProducto")) {
			parametroinventariodefectoSessionBean.setid_efecto_producto(this.getid_efecto_productoFK_IdEfectoProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			parametroinventariodefectoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdGrupoBodega")) {
			parametroinventariodefectoSessionBean.setid_grupo_bodega(this.getid_grupo_bodegaFK_IdGrupoBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMarcaProducto")) {
			parametroinventariodefectoSessionBean.setid_marca_producto(this.getid_marca_productoFK_IdMarcaProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMaterialProducto")) {
			parametroinventariodefectoSessionBean.setid_material_producto(this.getid_material_productoFK_IdMaterialProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModeloProducto")) {
			parametroinventariodefectoSessionBean.setid_modelo_producto(this.getid_modelo_productoFK_IdModeloProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
			parametroinventariodefectoSessionBean.setid_pais(this.getid_paisFK_IdPais());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdRangoUnidadVenta")) {
			parametroinventariodefectoSessionBean.setid_rango_unidad_venta(this.getid_rango_unidad_ventaFK_IdRangoUnidadVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSegmentoProducto")) {
			parametroinventariodefectoSessionBean.setid_segmento_producto(this.getid_segmento_productoFK_IdSegmentoProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			parametroinventariodefectoSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTallaProducto")) {
			parametroinventariodefectoSessionBean.setid_talla_producto(this.getid_talla_productoFK_IdTallaProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoCosteo")) {
			parametroinventariodefectoSessionBean.setid_tipo_costeo(this.getid_tipo_costeoFK_IdTipoCosteo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoProducto")) {
			parametroinventariodefectoSessionBean.setid_tipo_producto(this.getid_tipo_productoFK_IdTipoProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoProductoServicio")) {
			parametroinventariodefectoSessionBean.setid_tipo_producto_servicio(this.getid_tipo_producto_servicioFK_IdTipoProductoServicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoProductoServicioInven")) {
			parametroinventariodefectoSessionBean.setid_tipo_producto_servicio_inven(this.getid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoServicio")) {
			parametroinventariodefectoSessionBean.setid_tipo_servicio(this.getid_tipo_servicioFK_IdTipoServicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoViaTransporte")) {
			parametroinventariodefectoSessionBean.setid_tipo_via_transporte(this.getid_tipo_via_transporteFK_IdTipoViaTransporte());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//ParametroInventarioDefectoSessionBean parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
		
		if(this.parametroinventariodefectoSessionBean==null) {
			this.parametroinventariodefectoSessionBean=new ParametroInventarioDefectoSessionBean();
		}
		
		if(this.parametroinventariodefectoSessionBean.getsUltimaBusquedaParametroInventarioDefecto()!=null&&!this.parametroinventariodefectoSessionBean.getsUltimaBusquedaParametroInventarioDefecto().equals("")) {
			this.setsAccionBusqueda(parametroinventariodefectoSessionBean.getsUltimaBusquedaParametroInventarioDefecto());
			this.setiNumeroPaginacion(parametroinventariodefectoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(parametroinventariodefectoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCalidadProducto")) {
				this.setid_calidad_productoFK_IdCalidadProducto(parametroinventariodefectoSessionBean.getid_calidad_producto());
				parametroinventariodefectoSessionBean.setid_calidad_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCiudad")) {
				this.setid_ciudadFK_IdCiudad(parametroinventariodefectoSessionBean.getid_ciudad());
				parametroinventariodefectoSessionBean.setid_ciudad(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdClaseProducto")) {
				this.setid_clase_productoFK_IdClaseProducto(parametroinventariodefectoSessionBean.getid_clase_producto());
				parametroinventariodefectoSessionBean.setid_clase_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdColorProducto")) {
				this.setid_color_productoFK_IdColorProducto(parametroinventariodefectoSessionBean.getid_color_producto());
				parametroinventariodefectoSessionBean.setid_color_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEfectoProducto")) {
				this.setid_efecto_productoFK_IdEfectoProducto(parametroinventariodefectoSessionBean.getid_efecto_producto());
				parametroinventariodefectoSessionBean.setid_efecto_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(parametroinventariodefectoSessionBean.getid_empresa());
				parametroinventariodefectoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdGrupoBodega")) {
				this.setid_grupo_bodegaFK_IdGrupoBodega(parametroinventariodefectoSessionBean.getid_grupo_bodega());
				parametroinventariodefectoSessionBean.setid_grupo_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMarcaProducto")) {
				this.setid_marca_productoFK_IdMarcaProducto(parametroinventariodefectoSessionBean.getid_marca_producto());
				parametroinventariodefectoSessionBean.setid_marca_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMaterialProducto")) {
				this.setid_material_productoFK_IdMaterialProducto(parametroinventariodefectoSessionBean.getid_material_producto());
				parametroinventariodefectoSessionBean.setid_material_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModeloProducto")) {
				this.setid_modelo_productoFK_IdModeloProducto(parametroinventariodefectoSessionBean.getid_modelo_producto());
				parametroinventariodefectoSessionBean.setid_modelo_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
				this.setid_paisFK_IdPais(parametroinventariodefectoSessionBean.getid_pais());
				parametroinventariodefectoSessionBean.setid_pais(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdRangoUnidadVenta")) {
				this.setid_rango_unidad_ventaFK_IdRangoUnidadVenta(parametroinventariodefectoSessionBean.getid_rango_unidad_venta());
				parametroinventariodefectoSessionBean.setid_rango_unidad_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSegmentoProducto")) {
				this.setid_segmento_productoFK_IdSegmentoProducto(parametroinventariodefectoSessionBean.getid_segmento_producto());
				parametroinventariodefectoSessionBean.setid_segmento_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(parametroinventariodefectoSessionBean.getid_sucursal());
				parametroinventariodefectoSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTallaProducto")) {
				this.setid_talla_productoFK_IdTallaProducto(parametroinventariodefectoSessionBean.getid_talla_producto());
				parametroinventariodefectoSessionBean.setid_talla_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoCosteo")) {
				this.setid_tipo_costeoFK_IdTipoCosteo(parametroinventariodefectoSessionBean.getid_tipo_costeo());
				parametroinventariodefectoSessionBean.setid_tipo_costeo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoProducto")) {
				this.setid_tipo_productoFK_IdTipoProducto(parametroinventariodefectoSessionBean.getid_tipo_producto());
				parametroinventariodefectoSessionBean.setid_tipo_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoProductoServicio")) {
				this.setid_tipo_producto_servicioFK_IdTipoProductoServicio(parametroinventariodefectoSessionBean.getid_tipo_producto_servicio());
				parametroinventariodefectoSessionBean.setid_tipo_producto_servicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoProductoServicioInven")) {
				this.setid_tipo_producto_servicio_invenFK_IdTipoProductoServicioInven(parametroinventariodefectoSessionBean.getid_tipo_producto_servicio_inven());
				parametroinventariodefectoSessionBean.setid_tipo_producto_servicio_inven(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoServicio")) {
				this.setid_tipo_servicioFK_IdTipoServicio(parametroinventariodefectoSessionBean.getid_tipo_servicio());
				parametroinventariodefectoSessionBean.setid_tipo_servicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoViaTransporte")) {
				this.setid_tipo_via_transporteFK_IdTipoViaTransporte(parametroinventariodefectoSessionBean.getid_tipo_via_transporte());
				parametroinventariodefectoSessionBean.setid_tipo_via_transporte(-1L);
			}
		}
		
		this.parametroinventariodefectoSessionBean.setsUltimaBusquedaParametroInventarioDefecto("");
		this.parametroinventariodefectoSessionBean.setiNumeroPaginacion(ParametroInventarioDefectoConstantesFunciones.INUMEROPAGINACION);
		this.parametroinventariodefectoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaParametroInventarioDefecto(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioParametroInventarioDefecto() {
		this.updateBorderResaltarBusquedasFormularioParametroInventarioDefecto();
		this.updateVisibilidadBusquedasFormularioParametroInventarioDefecto();
		this.updateHabilitarBusquedasFormularioParametroInventarioDefecto();
	}
	
	public void updateBorderResaltarBusquedasFormularioParametroInventarioDefecto() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponents().length>0) {
	

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdCalidadProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdCalidadProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdCalidadProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdCiudadParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdCiudadParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdCiudadParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdClaseProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdClaseProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdClaseProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdColorProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdColorProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdColorProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdEfectoProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdEfectoProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdEfectoProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdGrupoBodegaParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdGrupoBodegaParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdGrupoBodegaParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdMarcaProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdMarcaProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdMarcaProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdMaterialProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdMaterialProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdMaterialProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdModeloProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdModeloProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdModeloProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdPaisParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdPaisParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdPaisParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdRangoUnidadVentaParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdRangoUnidadVentaParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdSegmentoProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdSegmentoProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdSegmentoProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTallaProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTallaProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTallaProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoCosteoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoCosteoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoCosteoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoServicioParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoServicioParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoServicioInvenParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoServicioInvenParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoServicioParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoServicioParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoServicioParametroInventarioDefecto);
			}
		}

		if(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoViaTransporteParametroInventarioDefecto!=null) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoViaTransporteParametroInventarioDefecto);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioParametroInventarioDefecto() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdCalidadProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdCalidadProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdCalidadProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdCiudadParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdCiudadParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdCiudadParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdClaseProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdClaseProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdClaseProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdColorProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdColorProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdColorProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdEfectoProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdEfectoProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdEfectoProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdGrupoBodegaParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdGrupoBodegaParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdGrupoBodegaParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdMarcaProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdMarcaProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdMarcaProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdMaterialProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdMaterialProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdMaterialProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdModeloProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdModeloProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdModeloProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdPaisParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdPaisParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdPaisParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdRangoUnidadVentaParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdRangoUnidadVentaParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdSegmentoProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdSegmentoProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdSegmentoProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTallaProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTallaProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTallaProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoCosteoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoCosteoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoCosteoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoProductoParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoProductoParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoProductoServicioParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoProductoServicioParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoProductoServicioInvenParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoProductoServicioInvenParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoServicioParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoServicioParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoServicioParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoViaTransporteParametroInventarioDefecto);
			if(!this.parametroinventariodefectoConstantesFunciones.mostrarFK_IdTipoViaTransporteParametroInventarioDefecto && index>-1) {
				this.jTabbedPaneBusquedasParametroInventarioDefecto.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioParametroInventarioDefecto() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdCalidadProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdCalidadProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdCalidadProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdCiudadParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdCiudadParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdCiudadParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdClaseProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdClaseProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdClaseProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdColorProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdColorProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdColorProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdEfectoProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdEfectoProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdEfectoProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdGrupoBodegaParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdGrupoBodegaParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdGrupoBodegaParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdMarcaProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdMarcaProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdMarcaProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdMaterialProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdMaterialProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdMaterialProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdModeloProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdModeloProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdModeloProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdPaisParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdPaisParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdPaisParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdRangoUnidadVentaParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdRangoUnidadVentaParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdSegmentoProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdSegmentoProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdSegmentoProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTallaProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdTallaProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdTallaProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoCosteoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoCosteoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoCosteoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoProductoParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoProductoParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoProductoServicioParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoProductoServicioParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoProductoServicioInvenParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoProductoServicioInvenParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoServicioParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoServicioParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoServicioParametroInventarioDefecto);
			}

			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoViaTransporteParametroInventarioDefecto);
				this.jTabbedPaneBusquedasParametroInventarioDefecto.setEnabledAt(index,this.parametroinventariodefectoConstantesFunciones.activarFK_IdTipoViaTransporteParametroInventarioDefecto);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaParametroInventarioDefecto(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCalidadProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdCalidadProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdCalidadProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdCalidadProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCiudad")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdCiudadParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdCiudadParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdCiudadParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdClaseProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdClaseProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdClaseProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdClaseProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdColorProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdColorProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdColorProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdColorProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEfectoProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdEfectoProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdEfectoProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdEfectoProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdGrupoBodega")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdGrupoBodegaParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdGrupoBodegaParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdGrupoBodegaParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdMarcaProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdMarcaProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdMarcaProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdMarcaProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdMaterialProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdMaterialProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdMaterialProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdMaterialProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdModeloProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdModeloProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdModeloProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdModeloProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPais")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdPaisParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdPaisParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdPaisParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdRangoUnidadVenta")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdRangoUnidadVentaParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdRangoUnidadVentaParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdRangoUnidadVentaParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdSegmentoProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdSegmentoProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdSegmentoProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdSegmentoProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTallaProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTallaProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdTallaProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTallaProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoCosteo")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoCosteoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdTipoCosteoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoCosteoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoProducto")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdTipoProductoParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoProductoServicio")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoServicioParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdTipoProductoServicioParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoServicioParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoProductoServicioInven")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoProductoServicioInvenParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdTipoProductoServicioInvenParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoProductoServicioInvenParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoServicio")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoServicioParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdTipoServicioParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoServicioParametroInventarioDefecto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoViaTransporte")) {
			index= this.jTabbedPaneBusquedasParametroInventarioDefecto.indexOfComponent(this.jPanelFK_IdTipoViaTransporteParametroInventarioDefecto);

			this.jTabbedPaneBusquedasParametroInventarioDefecto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroInventarioDefecto.getComponent(index);

			this.parametroinventariodefectoConstantesFunciones.setResaltarFK_IdTipoViaTransporteParametroInventarioDefecto(resaltar);

			jPanel.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarFK_IdTipoViaTransporteParametroInventarioDefecto);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarParametroInventarioDefecto.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioParametroInventarioDefecto() throws Exception {

		if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioParametroInventarioDefecto();
		this.updateVisibilidadResaltarControlesFormularioParametroInventarioDefecto();
		this.updateHabilitarResaltarControlesFormularioParametroInventarioDefecto();
		
	}
	
	public void updateBorderResaltarControlesFormularioParametroInventarioDefecto() throws Exception {
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.parametroinventariodefectoConstantesFunciones.resaltaridParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltaridParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_empresaParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_empresaParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_sucursalParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_sucursalParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_grupo_bodegaParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_grupo_bodegaParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_calidad_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_calidad_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_servicioParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_servicioParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_producto_servicio_invenParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_producto_servicio_invenParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_producto_servicioParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_producto_servicioParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_costeoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_costeoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_via_transporteParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_tipo_via_transporteParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_rango_unidad_ventaParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_rango_unidad_ventaParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_paisParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_paisParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_ciudadParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_ciudadParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_color_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_color_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_clase_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_clase_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_efecto_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_efecto_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_marca_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_marca_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_modelo_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_modelo_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_material_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_material_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_segmento_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_segmento_productoParametroInventarioDefecto);}
		if(this.parametroinventariodefectoConstantesFunciones.resaltarid_talla_productoParametroInventarioDefecto!=null && this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setBorder(this.parametroinventariodefectoConstantesFunciones.resaltarid_talla_productoParametroInventarioDefecto);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioParametroInventarioDefecto() throws Exception {		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
	
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostraridParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelidParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostraridParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_empresaParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_empresaParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_empresaParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_sucursalParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_sucursalParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_sucursalParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_grupo_bodegaParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_grupo_bodegaParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_grupo_bodegaParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_calidad_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_calidad_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_calidad_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_servicioParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_tipo_servicioParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_servicioParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_producto_servicio_invenParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_tipo_producto_servicio_invenParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_producto_servicio_invenParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_producto_servicioParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_tipo_producto_servicioParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_producto_servicioParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_costeoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_tipo_costeoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_costeoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_tipo_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_via_transporteParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_tipo_via_transporteParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_tipo_via_transporteParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_rango_unidad_ventaParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_rango_unidad_ventaParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_rango_unidad_ventaParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_paisParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_paisParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_paisParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_ciudadParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_ciudadParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_ciudadParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_color_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_color_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_color_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_clase_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_clase_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_clase_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_efecto_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_efecto_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_efecto_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_marca_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_marca_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_marca_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_modelo_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_modelo_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_modelo_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_material_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_material_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_material_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_segmento_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_segmento_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_segmento_productoParametroInventarioDefecto);
		//this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_talla_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jPanelid_talla_productoParametroInventarioDefecto.setVisible(this.parametroinventariodefectoConstantesFunciones.mostrarid_talla_productoParametroInventarioDefecto);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioParametroInventarioDefecto() throws Exception {
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormParametroInventarioDefecto!=null) {
	
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jLabelidParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activaridParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_empresaParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_empresaParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_sucursalParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_sucursalParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_grupo_bodegaParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_grupo_bodegaParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_calidad_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_calidad_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_servicioParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_tipo_servicioParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicio_invenParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_tipo_producto_servicio_invenParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_producto_servicioParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_tipo_producto_servicioParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_costeoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_tipo_costeoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_tipo_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_tipo_via_transporteParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_tipo_via_transporteParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_rango_unidad_ventaParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_rango_unidad_ventaParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_paisParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_paisParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_ciudadParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_ciudadParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_color_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_color_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_clase_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_clase_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_efecto_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_efecto_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_marca_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_marca_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_modelo_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_modelo_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_material_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_material_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_segmento_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_segmento_productoParametroInventarioDefecto);
		this.jInternalFrameDetalleFormParametroInventarioDefecto.jComboBoxid_talla_productoParametroInventarioDefecto.setEnabled(this.parametroinventariodefectoConstantesFunciones.activarid_talla_productoParametroInventarioDefecto);
		}
	}
	
		
}