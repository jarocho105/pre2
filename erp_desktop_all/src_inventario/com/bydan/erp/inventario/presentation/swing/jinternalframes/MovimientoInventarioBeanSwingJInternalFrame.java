/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.MovimientoInventarioConstantesFunciones;
import com.bydan.erp.inventario.util.MovimientoInventarioParameterReturnGeneral;
//import com.bydan.erp.inventario.util.MovimientoInventarioParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.MovimientoInventarioBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class MovimientoInventarioBeanSwingJInternalFrame extends MovimientoInventarioJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(MovimientoInventarioBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<MovimientoInventario> movimientoinventarioValidator = new ClassValidator<MovimientoInventario>(MovimientoInventario.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public MovimientoInventario movimientoinventario;	
	public MovimientoInventario movimientoinventarioAux;
	public MovimientoInventario movimientoinventarioAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public MovimientoInventario movimientoinventarioTotales;
	public Long idMovimientoInventarioActual;
	public Long iIdNuevoMovimientoInventario=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboTransaccion="";

	public List<Transaccion> transaccionsForeignKey;

	public List<Transaccion> gettransaccionsForeignKey() {
		return transaccionsForeignKey;
	}

	public void settransaccionsForeignKey(List<Transaccion> transaccionsForeignKey) {
		this.transaccionsForeignKey = transaccionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transaccion transaccionForeignKey;

	public Transaccion gettransaccionForeignKey() {
		return transaccionForeignKey;
	}

	public void settransaccionForeignKey(Transaccion transaccionForeignKey) {
		this.transaccionForeignKey = transaccionForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboTipoCambio="";

	public List<TipoCambio> tipocambiosForeignKey;

	public List<TipoCambio> gettipocambiosForeignKey() {
		return tipocambiosForeignKey;
	}

	public void settipocambiosForeignKey(List<TipoCambio> tipocambiosForeignKey) {
		this.tipocambiosForeignKey = tipocambiosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCambio tipocambioForeignKey;

	public TipoCambio gettipocambioForeignKey() {
		return tipocambioForeignKey;
	}

	public void settipocambioForeignKey(TipoCambio tipocambioForeignKey) {
		this.tipocambioForeignKey = tipocambioForeignKey;
	}

	public String sFinalQueryComboEstadoMovimientoInventario="";

	public List<EstadoMovimientoInventario> estadomovimientoinventariosForeignKey;

	public List<EstadoMovimientoInventario> getestadomovimientoinventariosForeignKey() {
		return estadomovimientoinventariosForeignKey;
	}

	public void setestadomovimientoinventariosForeignKey(List<EstadoMovimientoInventario> estadomovimientoinventariosForeignKey) {
		this.estadomovimientoinventariosForeignKey = estadomovimientoinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoMovimientoInventario estadomovimientoinventarioForeignKey;

	public EstadoMovimientoInventario getestadomovimientoinventarioForeignKey() {
		return estadomovimientoinventarioForeignKey;
	}

	public void setestadomovimientoinventarioForeignKey(EstadoMovimientoInventario estadomovimientoinventarioForeignKey) {
		this.estadomovimientoinventarioForeignKey = estadomovimientoinventarioForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboGuiaRemision="";

	public List<GuiaRemision> guiaremisionsForeignKey;

	public List<GuiaRemision> getguiaremisionsForeignKey() {
		return guiaremisionsForeignKey;
	}

	public void setguiaremisionsForeignKey(List<GuiaRemision> guiaremisionsForeignKey) {
		this.guiaremisionsForeignKey = guiaremisionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public GuiaRemision guiaremisionForeignKey;

	public GuiaRemision getguiaremisionForeignKey() {
		return guiaremisionForeignKey;
	}

	public void setguiaremisionForeignKey(GuiaRemision guiaremisionForeignKey) {
		this.guiaremisionForeignKey = guiaremisionForeignKey;
	}

	public String sFinalQueryComboTransportista="";

	public List<Transportista> transportistasForeignKey;

	public List<Transportista> gettransportistasForeignKey() {
		return transportistasForeignKey;
	}

	public void settransportistasForeignKey(List<Transportista> transportistasForeignKey) {
		this.transportistasForeignKey = transportistasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transportista transportistaForeignKey;

	public Transportista gettransportistaForeignKey() {
		return transportistaForeignKey;
	}

	public void settransportistaForeignKey(Transportista transportistaForeignKey) {
		this.transportistaForeignKey = transportistaForeignKey;
	}

	public String sFinalQueryComboTipoTransaccionModulo="";

	public List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey;

	public List<TipoTransaccionModulo> gettipotransaccionmodulosForeignKey() {
		return tipotransaccionmodulosForeignKey;
	}

	public void settipotransaccionmodulosForeignKey(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey) {
		this.tipotransaccionmodulosForeignKey = tipotransaccionmodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTransaccionModulo tipotransaccionmoduloForeignKey;

	public TipoTransaccionModulo gettipotransaccionmoduloForeignKey() {
		return tipotransaccionmoduloForeignKey;
	}

	public void settipotransaccionmoduloForeignKey(TipoTransaccionModulo tipotransaccionmoduloForeignKey) {
		this.tipotransaccionmoduloForeignKey = tipotransaccionmoduloForeignKey;
	}

	public String sFinalQueryComboCompra="";

	public List<Compra> comprasForeignKey;

	public List<Compra> getcomprasForeignKey() {
		return comprasForeignKey;
	}

	public void setcomprasForeignKey(List<Compra> comprasForeignKey) {
		this.comprasForeignKey = comprasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Compra compraForeignKey;

	public Compra getcompraForeignKey() {
		return compraForeignKey;
	}

	public void setcompraForeignKey(Compra compraForeignKey) {
		this.compraForeignKey = compraForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idTipoCambioActual=0L;

	public Long getidTipoCambioActual() {
		return idTipoCambioActual;
	}

	public void setidTipoCambioActual(Long idTipoCambioActual) {
		this.idTipoCambioActual= idTipoCambioActual;
	}
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	
	

	public Boolean isTienePermisosDetalleMovimientoInventario=false;

	public Boolean getIsTienePermisosDetalleMovimientoInventario() {
		return isTienePermisosDetalleMovimientoInventario;
	}

	public void setIsTienePermisosDetalleMovimientoInventario(Boolean isTienePermisosDetalleMovimientoInventario) {
		this.isTienePermisosDetalleMovimientoInventario= isTienePermisosDetalleMovimientoInventario;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoMovimientoInventario;
	public Boolean isPermisoNuevoMovimientoInventario;
	public Boolean isPermisoActualizarMovimientoInventario;
	public Boolean isPermisoActualizarOriginalMovimientoInventario;
	public Boolean isPermisoEliminarMovimientoInventario;
	public Boolean isPermisoGuardarCambiosMovimientoInventario;
	public Boolean isPermisoConsultaMovimientoInventario;
	public Boolean isPermisoBusquedaMovimientoInventario;
	public Boolean isPermisoReporteMovimientoInventario;
	public Boolean isPermisoPaginacionMedioMovimientoInventario;
	public Boolean isPermisoPaginacionAltoMovimientoInventario;
	public Boolean isPermisoPaginacionTodoMovimientoInventario;
	public Boolean isPermisoCopiarMovimientoInventario;
	public Boolean isPermisoVerFormMovimientoInventario;
	public Boolean isPermisoDuplicarMovimientoInventario;
	public Boolean isPermisoOrdenMovimientoInventario;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public MovimientoInventarioParameterReturnGeneral movimientoinventarioReturnGeneral;
	public MovimientoInventarioParameterReturnGeneral movimientoinventarioParameterGeneral;
	
	

	public DetalleMovimientoInventarioLogic detallemovimientoinventarioLogic=null;

	public DetalleMovimientoInventarioLogic getDetalleMovimientoInventarioLogic() {
		return detallemovimientoinventarioLogic;
	}

	public void setDetalleMovimientoInventarioLogic(DetalleMovimientoInventarioLogic detallemovimientoinventarioLogic) {
		this.detallemovimientoinventarioLogic = detallemovimientoinventarioLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoMovimientoInventario=false;
	public Boolean esParaAccionDesdeFormularioMovimientoInventario=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected MovimientoInventarioSessionBeanAdditional movimientoinventarioSessionBeanAdditional=null;
	
	public MovimientoInventarioSessionBeanAdditional getMovimientoInventarioSessionBeanAdditional() {
		return this.movimientoinventarioSessionBeanAdditional;
	}
	
	public void setMovimientoInventarioSessionBeanAdditional(MovimientoInventarioSessionBeanAdditional movimientoinventarioSessionBeanAdditional) {
		try {
			this.movimientoinventarioSessionBeanAdditional=movimientoinventarioSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected MovimientoInventarioBeanSwingJInternalFrameAdditional movimientoinventarioBeanSwingJInternalFrameAdditional=null;
	//public class MovimientoInventarioBeanSwingJInternalFrame
	
	public MovimientoInventarioBeanSwingJInternalFrameAdditional getMovimientoInventarioBeanSwingJInternalFrameAdditional() {
		return this.movimientoinventarioBeanSwingJInternalFrameAdditional;
	}
	
	public void setMovimientoInventarioBeanSwingJInternalFrameAdditional(MovimientoInventarioBeanSwingJInternalFrameAdditional movimientoinventarioBeanSwingJInternalFrameAdditional) {
		try {
			this.movimientoinventarioBeanSwingJInternalFrameAdditional=movimientoinventarioBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public MovimientoInventarioLogic movimientoinventarioLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public MovimientoInventario movimientoinventarioBean;
	public MovimientoInventarioConstantesFunciones movimientoinventarioConstantesFunciones;
	//public MovimientoInventarioParameterReturnGeneral movimientoinventarioReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public ModuloLogic moduloLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public UsuarioLogic usuarioLogic;
	public TransaccionLogic transaccionLogic;
	public MonedaLogic monedaLogic;
	public TipoCambioLogic tipocambioLogic;
	public EstadoMovimientoInventarioLogic estadomovimientoinventarioLogic;
	public EmpleadoLogic empleadoLogic;
	public FormatoLogic formatoLogic;
	public FacturaLogic facturaLogic;
	public GuiaRemisionLogic guiaremisionLogic;
	public TransportistaLogic transportistaLogic;
	public TipoTransaccionModuloLogic tipotransaccionmoduloLogic;
	public CompraLogic compraLogic;
	public AsientoContableLogic asientocontableLogic;
	
	//PARAMETROS
	
	
	//public List<MovimientoInventario> movimientoinventarios;	
	//public List<MovimientoInventario> movimientoinventariosEliminados;
	//public List<MovimientoInventario> movimientoinventariosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoMovimientoInventario=false;
	public Boolean isVisibilidadCeldaDuplicarMovimientoInventario=true;
	public Boolean isVisibilidadCeldaCopiarMovimientoInventario=true;
	public Boolean isVisibilidadCeldaVerFormMovimientoInventario=true;
	public Boolean isVisibilidadCeldaOrdenMovimientoInventario=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
	public Boolean isVisibilidadCeldaModificarMovimientoInventario=false;
	public Boolean isVisibilidadCeldaActualizarMovimientoInventario=false;
	public Boolean isVisibilidadCeldaEliminarMovimientoInventario=false;
	public Boolean isVisibilidadCeldaCancelarMovimientoInventario=false;
	public Boolean isVisibilidadCeldaGuardarMovimientoInventario=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCompra=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoMovimientoInventario=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdGuiaRemision=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoCambio=false;
	public Boolean isVisibilidadFK_IdTipoTransaccionModulo=false;
	public Boolean isVisibilidadFK_IdTransaccion=false;
	public Boolean isVisibilidadFK_IdTransportista=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	
	public Long getiIdNuevoMovimientoInventario() {
		return this.iIdNuevoMovimientoInventario;
	}

	public void setiIdNuevoMovimientoInventario(Long iIdNuevoMovimientoInventario) {
		this.iIdNuevoMovimientoInventario = iIdNuevoMovimientoInventario;
	}
	
	public Long getidMovimientoInventarioActual() {
		return this.idMovimientoInventarioActual;
	}

	public void setidMovimientoInventarioActual(Long idMovimientoInventarioActual) {
		this.idMovimientoInventarioActual = idMovimientoInventarioActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public MovimientoInventario getmovimientoinventario() {
		return this.movimientoinventario;
	}

	public void setmovimientoinventario(MovimientoInventario movimientoinventario) {
		this.movimientoinventario = movimientoinventario;
	}
	
	public MovimientoInventario getmovimientoinventarioAux() {
		return this.movimientoinventarioAux;
	}

	public void setmovimientoinventarioAux(MovimientoInventario movimientoinventarioAux) {
		this.movimientoinventarioAux = movimientoinventarioAux;
	}				
	
	public MovimientoInventario getmovimientoinventarioAnterior() {
		return this.movimientoinventarioAnterior;
	}

	public void setmovimientoinventarioAnterior(MovimientoInventario movimientoinventarioAnterior) {
		this.movimientoinventarioAnterior = movimientoinventarioAnterior;
	}	
	
	public MovimientoInventario getmovimientoinventarioTotales() {
		return this.movimientoinventarioTotales;
	}

	public void setmovimientoinventarioTotales(MovimientoInventario movimientoinventarioTotales) {
		this.movimientoinventarioTotales = movimientoinventarioTotales;
	}	
	
	public MovimientoInventario getmovimientoinventarioBean() {
		return this.movimientoinventarioBean;
	}

	public void setmovimientoinventarioBean(MovimientoInventario movimientoinventarioBean) {
		this.movimientoinventarioBean = movimientoinventarioBean;
	}	
	
	public MovimientoInventarioParameterReturnGeneral getmovimientoinventarioReturnGeneral() {
		return this.movimientoinventarioReturnGeneral;
	}

	public void setmovimientoinventarioReturnGeneral(MovimientoInventarioParameterReturnGeneral movimientoinventarioReturnGeneral) {
		this.movimientoinventarioReturnGeneral = movimientoinventarioReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_asiento_contableFK_IdAsientoContable=null;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_compraFK_IdCompra=null;

	public Long getid_compraFK_IdCompra() {
		return this.id_compraFK_IdCompra;
	}

	public void setid_compraFK_IdCompra(Long id_compraFK_IdCompra) {
		this.id_compraFK_IdCompra = id_compraFK_IdCompra;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario=-1L;

	public Long getid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario() {
		return this.id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario;
	}

	public void setid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario(Long id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario) {
		this.id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario = id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario;
	}

	public Long id_facturaFK_IdFactura=null;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_formatoFK_IdFormato=-1L;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_guia_remisionFK_IdGuiaRemision=null;

	public Long getid_guia_remisionFK_IdGuiaRemision() {
		return this.id_guia_remisionFK_IdGuiaRemision;
	}

	public void setid_guia_remisionFK_IdGuiaRemision(Long id_guia_remisionFK_IdGuiaRemision) {
		this.id_guia_remisionFK_IdGuiaRemision = id_guia_remisionFK_IdGuiaRemision;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_cambioFK_IdTipoCambio=null;

	public Long getid_tipo_cambioFK_IdTipoCambio() {
		return this.id_tipo_cambioFK_IdTipoCambio;
	}

	public void setid_tipo_cambioFK_IdTipoCambio(Long id_tipo_cambioFK_IdTipoCambio) {
		this.id_tipo_cambioFK_IdTipoCambio = id_tipo_cambioFK_IdTipoCambio;
	}

	public Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=null;

	public Long getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo() {
		return this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public void setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo) {
		this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo = id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public Long id_transaccionFK_IdTransaccion=-1L;

	public Long getid_transaccionFK_IdTransaccion() {
		return this.id_transaccionFK_IdTransaccion;
	}

	public void setid_transaccionFK_IdTransaccion(Long id_transaccionFK_IdTransaccion) {
		this.id_transaccionFK_IdTransaccion = id_transaccionFK_IdTransaccion;
	}

	public Long id_transportistaFK_IdTransportista=null;

	public Long getid_transportistaFK_IdTransportista() {
		return this.id_transportistaFK_IdTransportista;
	}

	public void setid_transportistaFK_IdTransportista(Long id_transportistaFK_IdTransportista) {
		this.id_transportistaFK_IdTransportista = id_transportistaFK_IdTransportista;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public MovimientoInventarioLogic getMovimientoInventarioLogic()	{		
		return movimientoinventarioLogic;
	}

	public void setMovimientoInventarioLogic(MovimientoInventarioLogic movimientoinventarioLogic) {
		this.movimientoinventarioLogic = movimientoinventarioLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoMovimientoInventario() {
		return isEsNuevoMovimientoInventario;
	}

	public void setIsEsNuevoMovimientoInventario(Boolean isEsNuevoMovimientoInventario) {
		this.isEsNuevoMovimientoInventario = isEsNuevoMovimientoInventario;
	}

	public Boolean getEsParaAccionDesdeFormularioMovimientoInventario() {
		return esParaAccionDesdeFormularioMovimientoInventario;
	}
	
	public void setEsParaAccionDesdeFormularioMovimientoInventario(Boolean esParaAccionDesdeFormularioMovimientoInventario) {
		this.esParaAccionDesdeFormularioMovimientoInventario = esParaAccionDesdeFormularioMovimientoInventario;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccionsForeignKey=new ArrayList<Transaccion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionLogic transaccionLogic=new TransaccionLogic();

			//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

					transaccionLogic.getTodosTransaccionsWithConnection(sFinalQuery,new Pagination());

					this.transaccionsForeignKey=transaccionLogic.getTransaccions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccionLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidTransaccionActual());
					this.transaccionsForeignKey.add(transaccionLogic.getTransaccion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCambiosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCambio tipocambioNulo = new TipoCambio();

			TipoCambioLogic tipocambioLogic=new TipoCambioLogic();

			//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

					tipocambioLogic.getTodosTipoCambiosWithConnection(sFinalQuery,new Pagination());

					this.tipocambiosForeignKey=tipocambioLogic.getTipoCambios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tipocambiosForeignKey.add(0, tipocambioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCambio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidTipoCambioActual());
					this.tipocambiosForeignKey.add(tipocambioLogic.getTipoCambio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoMovimientoInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadomovimientoinventariosForeignKey=new ArrayList<EstadoMovimientoInventario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoMovimientoInventarioLogic estadomovimientoinventarioLogic=new EstadoMovimientoInventarioLogic();

			//estadomovimientoinventarioLogic.getEstadoMovimientoInventarioDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoMovimientoInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadomovimientoinventarioLogic.getEstadoMovimientoInventarioDataAccess().setIsForForeingKeyData(true);

					estadomovimientoinventarioLogic.getTodosEstadoMovimientoInventariosWithConnection(sFinalQuery,new Pagination());

					this.estadomovimientoinventariosForeignKey=estadomovimientoinventarioLogic.getEstadoMovimientoInventarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoMovimientoInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadomovimientoinventarioLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidEstadoMovimientoInventarioActual());
					this.estadomovimientoinventariosForeignKey.add(estadomovimientoinventarioLogic.getEstadoMovimientoInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Factura facturaNulo = new Factura();

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.facturasForeignKey.add(0, facturaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosGuiaRemisionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.guiaremisionsForeignKey=new ArrayList<GuiaRemision>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			GuiaRemision guiaremisionNulo = new GuiaRemision();

			GuiaRemisionLogic guiaremisionLogic=new GuiaRemisionLogic();

			//guiaremisionLogic.getGuiaRemisionDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionGuiaRemision()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//guiaremisionLogic.getGuiaRemisionDataAccess().setIsForForeingKeyData(true);

					guiaremisionLogic.getTodosGuiaRemisionsWithConnection(sFinalQuery,new Pagination());

					this.guiaremisionsForeignKey=guiaremisionLogic.getGuiaRemisions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.guiaremisionsForeignKey.add(0, guiaremisionNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaGuiaRemision(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					guiaremisionLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidGuiaRemisionActual());
					this.guiaremisionsForeignKey.add(guiaremisionLogic.getGuiaRemision());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportistasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportistasForeignKey=new ArrayList<Transportista>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Transportista transportistaNulo = new Transportista();

			TransportistaLogic transportistaLogic=new TransportistaLogic();

			//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

					transportistaLogic.getTodosTransportistasWithConnection(sFinalQuery,new Pagination());

					this.transportistasForeignKey=transportistaLogic.getTransportistas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.transportistasForeignKey.add(0, transportistaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransportista(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transportistaLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidTransportistaActual());
					this.transportistasForeignKey.add(transportistaLogic.getTransportista());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTransaccionModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTransaccionModuloLogic tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();

			//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

					tipotransaccionmoduloLogic.getTodosTipoTransaccionModulosWithConnection(sFinalQuery,new Pagination());

					this.tipotransaccionmodulosForeignKey=tipotransaccionmoduloLogic.getTipoTransaccionModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTransaccionModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotransaccionmoduloLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidTipoTransaccionModuloActual());
					this.tipotransaccionmodulosForeignKey.add(tipotransaccionmoduloLogic.getTipoTransaccionModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosComprasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.comprasForeignKey=new ArrayList<Compra>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Compra compraNulo = new Compra();

			CompraLogic compraLogic=new CompraLogic();

			//compraLogic.getCompraDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCompra()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//compraLogic.getCompraDataAccess().setIsForForeingKeyData(true);

					compraLogic.getTodosComprasWithConnection(sFinalQuery,new Pagination());

					this.comprasForeignKey=compraLogic.getCompras();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.comprasForeignKey.add(0, compraNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCompra(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					compraLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidCompraActual());
					this.comprasForeignKey.add(compraLogic.getCompra());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(movimientoinventarioSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaMovimientoInventario.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaMovimientoInventarioGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaMovimientoInventarioGenerico!=null && jComboBoxid_empresaMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_empresaMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalMovimientoInventario.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalMovimientoInventarioGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalMovimientoInventarioGenerico!=null && jComboBoxid_sucursalMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_sucursalMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloMovimientoInventario.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloMovimientoInventarioGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloMovimientoInventarioGenerico!=null && jComboBoxid_moduloMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_moduloMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioMovimientoInventario.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioMovimientoInventarioGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioMovimientoInventarioGenerico!=null && jComboBoxid_ejercicioMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoMovimientoInventario.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoMovimientoInventarioGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoMovimientoInventarioGenerico!=null && jComboBoxid_periodoMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_periodoMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioMovimientoInventario.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioMovimientoInventarioGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioMovimientoInventarioGenerico!=null && jComboBoxid_anioMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_anioMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesMovimientoInventario.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesMovimientoInventarioGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesMovimientoInventarioGenerico!=null && jComboBoxid_mesMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_mesMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioMovimientoInventario.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioMovimientoInventarioGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioMovimientoInventarioGenerico!=null && jComboBoxid_usuarioMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_usuarioMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionForeignKey(Long idTransaccionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccionTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setTransaccion(transaccionTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setSelectedItem(transaccionTemp);
					}
				} else {
					//jComboBoxid_transaccionMovimientoInventario.setSelectedItem(transaccionTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccionTemp!=null && jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario!=null) {
						jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.setSelectedItem(transaccionTemp);
					} else {
						if(jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario!=null) {
							//jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.setSelectedItem(transaccionTemp);
							if(jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.getItemCount()>0) {
								jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionForeignKeyDescripcion(Long idTransaccionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}


			sDescripcion=TransaccionConstantesFunciones.getTransaccionDescripcion(transaccionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionForeignKeyGenerico(Long idTransaccionSeleccionado,JComboBox jComboBoxid_transaccionMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(transaccionTemp!=null) {
				jComboBoxid_transaccionMovimientoInventarioGenerico.setSelectedItem(transaccionTemp);
			} else {
				if(jComboBoxid_transaccionMovimientoInventarioGenerico!=null && jComboBoxid_transaccionMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_transaccionMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaMovimientoInventario.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaMovimientoInventarioGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaMovimientoInventarioGenerico!=null && jComboBoxid_monedaMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_monedaMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCambioForeignKey(Long idTipoCambioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocambioTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setTipoCambio(tipocambioTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setSelectedItem(tipocambioTemp);
					}
				} else {
					//jComboBoxid_tipo_cambioMovimientoInventario.setSelectedItem(tipocambioTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCambioForeignKeyDescripcion(Long idTipoCambioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}


			sDescripcion=TipoCambioConstantesFunciones.getTipoCambioDescripcion(tipocambioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCambioForeignKeyGenerico(Long idTipoCambioSeleccionado,JComboBox jComboBoxid_tipo_cambioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(tipocambioTemp!=null) {
				jComboBoxid_tipo_cambioMovimientoInventarioGenerico.setSelectedItem(tipocambioTemp);
			} else {
				if(jComboBoxid_tipo_cambioMovimientoInventarioGenerico!=null && jComboBoxid_tipo_cambioMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cambioMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoMovimientoInventarioForeignKey(Long idEstadoMovimientoInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoMovimientoInventario  estadomovimientoinventarioTemp=null;

			for(EstadoMovimientoInventario estadomovimientoinventarioAux:estadomovimientoinventariosForeignKey) {
				if(estadomovimientoinventarioAux.getId()!=null && estadomovimientoinventarioAux.getId().equals(idEstadoMovimientoInventarioSeleccionado)) {
					estadomovimientoinventarioTemp=estadomovimientoinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadomovimientoinventarioTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setEstadoMovimientoInventario(estadomovimientoinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setSelectedItem(estadomovimientoinventarioTemp);
					}
				} else {
					//jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setSelectedItem(estadomovimientoinventarioTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoMovimientoInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadomovimientoinventarioTemp!=null && jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario!=null) {
						jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.setSelectedItem(estadomovimientoinventarioTemp);
					} else {
						if(jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario!=null) {
							//jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.setSelectedItem(estadomovimientoinventarioTemp);
							if(jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.getItemCount()>0) {
								jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoMovimientoInventarioForeignKeyDescripcion(Long idEstadoMovimientoInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoMovimientoInventario  estadomovimientoinventarioTemp=null;

			for(EstadoMovimientoInventario estadomovimientoinventarioAux:estadomovimientoinventariosForeignKey) {
				if(estadomovimientoinventarioAux.getId()!=null && estadomovimientoinventarioAux.getId().equals(idEstadoMovimientoInventarioSeleccionado)) {
					estadomovimientoinventarioTemp=estadomovimientoinventarioAux;
					break;
				}
			}


			sDescripcion=EstadoMovimientoInventarioConstantesFunciones.getEstadoMovimientoInventarioDescripcion(estadomovimientoinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoMovimientoInventarioForeignKeyGenerico(Long idEstadoMovimientoInventarioSeleccionado,JComboBox jComboBoxid_estado_movimiento_inventarioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			EstadoMovimientoInventario  estadomovimientoinventarioTemp=null;

			for(EstadoMovimientoInventario estadomovimientoinventarioAux:estadomovimientoinventariosForeignKey) {
				if(estadomovimientoinventarioAux.getId()!=null && estadomovimientoinventarioAux.getId().equals(idEstadoMovimientoInventarioSeleccionado)) {
					estadomovimientoinventarioTemp=estadomovimientoinventarioAux;
					break;
				}
			}

			if(estadomovimientoinventarioTemp!=null) {
				jComboBoxid_estado_movimiento_inventarioMovimientoInventarioGenerico.setSelectedItem(estadomovimientoinventarioTemp);
			} else {
				if(jComboBoxid_estado_movimiento_inventarioMovimientoInventarioGenerico!=null && jComboBoxid_estado_movimiento_inventarioMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_estado_movimiento_inventarioMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoMovimientoInventario.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(empleadoTemp!=null && jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario!=null) {
						jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.setSelectedItem(empleadoTemp);
					} else {
						if(jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario!=null) {
							//jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.setSelectedItem(empleadoTemp);
							if(jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.getItemCount()>0) {
								jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoMovimientoInventarioGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoMovimientoInventarioGenerico!=null && jComboBoxid_empleadoMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_empleadoMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoMovimientoInventario.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoMovimientoInventarioGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoMovimientoInventarioGenerico!=null && jComboBoxid_formatoMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_formatoMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaMovimientoInventario.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(facturaTemp!=null && jComboBoxid_facturaFK_IdFacturaMovimientoInventario!=null) {
						jComboBoxid_facturaFK_IdFacturaMovimientoInventario.setSelectedItem(facturaTemp);
					} else {
						if(jComboBoxid_facturaFK_IdFacturaMovimientoInventario!=null) {
							//jComboBoxid_facturaFK_IdFacturaMovimientoInventario.setSelectedItem(facturaTemp);
							if(jComboBoxid_facturaFK_IdFacturaMovimientoInventario.getItemCount()>0) {
								jComboBoxid_facturaFK_IdFacturaMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaMovimientoInventarioGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaMovimientoInventarioGenerico!=null && jComboBoxid_facturaMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_facturaMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualGuiaRemisionForeignKey(Long idGuiaRemisionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			GuiaRemision  guiaremisionTemp=null;

			for(GuiaRemision guiaremisionAux:guiaremisionsForeignKey) {
				if(guiaremisionAux.getId()!=null && guiaremisionAux.getId().equals(idGuiaRemisionSeleccionado)) {
					guiaremisionTemp=guiaremisionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(guiaremisionTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setGuiaRemision(guiaremisionTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setSelectedItem(guiaremisionTemp);
					}
				} else {
					//jComboBoxid_guia_remisionMovimientoInventario.setSelectedItem(guiaremisionTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdGuiaRemision") || sFormularioTipoBusqueda.equals("Todos")){
					if(guiaremisionTemp!=null && jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario!=null) {
						jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.setSelectedItem(guiaremisionTemp);
					} else {
						if(jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario!=null) {
							//jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.setSelectedItem(guiaremisionTemp);
							if(jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.getItemCount()>0) {
								jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualGuiaRemisionForeignKeyDescripcion(Long idGuiaRemisionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			GuiaRemision  guiaremisionTemp=null;

			for(GuiaRemision guiaremisionAux:guiaremisionsForeignKey) {
				if(guiaremisionAux.getId()!=null && guiaremisionAux.getId().equals(idGuiaRemisionSeleccionado)) {
					guiaremisionTemp=guiaremisionAux;
					break;
				}
			}


			sDescripcion=GuiaRemisionConstantesFunciones.getGuiaRemisionDescripcion(guiaremisionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualGuiaRemisionForeignKeyGenerico(Long idGuiaRemisionSeleccionado,JComboBox jComboBoxid_guia_remisionMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			GuiaRemision  guiaremisionTemp=null;

			for(GuiaRemision guiaremisionAux:guiaremisionsForeignKey) {
				if(guiaremisionAux.getId()!=null && guiaremisionAux.getId().equals(idGuiaRemisionSeleccionado)) {
					guiaremisionTemp=guiaremisionAux;
					break;
				}
			}

			if(guiaremisionTemp!=null) {
				jComboBoxid_guia_remisionMovimientoInventarioGenerico.setSelectedItem(guiaremisionTemp);
			} else {
				if(jComboBoxid_guia_remisionMovimientoInventarioGenerico!=null && jComboBoxid_guia_remisionMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_guia_remisionMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransportistaForeignKey(Long idTransportistaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transportistaTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setTransportista(transportistaTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setSelectedItem(transportistaTemp);
					}
				} else {
					//jComboBoxid_transportistaMovimientoInventario.setSelectedItem(transportistaTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransportistaForeignKeyDescripcion(Long idTransportistaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}


			sDescripcion=TransportistaConstantesFunciones.getTransportistaDescripcion(transportistaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransportistaForeignKeyGenerico(Long idTransportistaSeleccionado,JComboBox jComboBoxid_transportistaMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(transportistaTemp!=null) {
				jComboBoxid_transportistaMovimientoInventarioGenerico.setSelectedItem(transportistaTemp);
			} else {
				if(jComboBoxid_transportistaMovimientoInventarioGenerico!=null && jComboBoxid_transportistaMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_transportistaMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTransaccionModuloForeignKey(Long idTipoTransaccionModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotransaccionmoduloTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setTipoTransaccionModulo(tipotransaccionmoduloTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setSelectedItem(tipotransaccionmoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setSelectedItem(tipotransaccionmoduloTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotransaccionmoduloTemp!=null && jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario!=null) {
						jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.setSelectedItem(tipotransaccionmoduloTemp);
					} else {
						if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario!=null) {
							//jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.setSelectedItem(tipotransaccionmoduloTemp);
							if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.getItemCount()>0) {
								jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTransaccionModuloForeignKeyDescripcion(Long idTipoTransaccionModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}


			sDescripcion=TipoTransaccionModuloConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTransaccionModuloForeignKeyGenerico(Long idTipoTransaccionModuloSeleccionado,JComboBox jComboBoxid_tipo_transaccion_moduloMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(tipotransaccionmoduloTemp!=null) {
				jComboBoxid_tipo_transaccion_moduloMovimientoInventarioGenerico.setSelectedItem(tipotransaccionmoduloTemp);
			} else {
				if(jComboBoxid_tipo_transaccion_moduloMovimientoInventarioGenerico!=null && jComboBoxid_tipo_transaccion_moduloMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_transaccion_moduloMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCompraForeignKey(Long idCompraSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Compra  compraTemp=null;

			for(Compra compraAux:comprasForeignKey) {
				if(compraAux.getId()!=null && compraAux.getId().equals(idCompraSeleccionado)) {
					compraTemp=compraAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(compraTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setCompra(compraTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setSelectedItem(compraTemp);
					}
				} else {
					//jComboBoxid_compraMovimientoInventario.setSelectedItem(compraTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCompra") || sFormularioTipoBusqueda.equals("Todos")){
					if(compraTemp!=null && jComboBoxid_compraFK_IdCompraMovimientoInventario!=null) {
						jComboBoxid_compraFK_IdCompraMovimientoInventario.setSelectedItem(compraTemp);
					} else {
						if(jComboBoxid_compraFK_IdCompraMovimientoInventario!=null) {
							//jComboBoxid_compraFK_IdCompraMovimientoInventario.setSelectedItem(compraTemp);
							if(jComboBoxid_compraFK_IdCompraMovimientoInventario.getItemCount()>0) {
								jComboBoxid_compraFK_IdCompraMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCompraForeignKeyDescripcion(Long idCompraSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Compra  compraTemp=null;

			for(Compra compraAux:comprasForeignKey) {
				if(compraAux.getId()!=null && compraAux.getId().equals(idCompraSeleccionado)) {
					compraTemp=compraAux;
					break;
				}
			}


			sDescripcion=CompraConstantesFunciones.getCompraDescripcion(compraTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCompraForeignKeyGenerico(Long idCompraSeleccionado,JComboBox jComboBoxid_compraMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Compra  compraTemp=null;

			for(Compra compraAux:comprasForeignKey) {
				if(compraAux.getId()!=null && compraAux.getId().equals(idCompraSeleccionado)) {
					compraTemp=compraAux;
					break;
				}
			}

			if(compraTemp!=null) {
				jComboBoxid_compraMovimientoInventarioGenerico.setSelectedItem(compraTemp);
			} else {
				if(jComboBoxid_compraMovimientoInventarioGenerico!=null && jComboBoxid_compraMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_compraMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.movimientoinventario!=null) {
						this.movimientoinventario.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableMovimientoInventario.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableMovimientoInventarioGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableMovimientoInventarioGenerico!=null && jComboBoxid_asiento_contableMovimientoInventarioGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableMovimientoInventarioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_empresaMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaMovimientoInventarioGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaMovimientoInventarioGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				movimientoinventario.setid_empresa(empresaAux.getId());
				movimientoinventario.setempresa_descripcion(MovimientoInventarioConstantesFunciones.getEmpresaDescripcion(empresaAux));
				movimientoinventario.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_sucursalMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalMovimientoInventarioGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalMovimientoInventarioGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				movimientoinventario.setid_sucursal(sucursalAux.getId());
				movimientoinventario.setsucursal_descripcion(MovimientoInventarioConstantesFunciones.getSucursalDescripcion(sucursalAux));
				movimientoinventario.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_moduloMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloMovimientoInventarioGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloMovimientoInventarioGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				movimientoinventario.setid_modulo(moduloAux.getId());
				movimientoinventario.setmodulo_descripcion(MovimientoInventarioConstantesFunciones.getModuloDescripcion(moduloAux));
				movimientoinventario.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_ejercicioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioMovimientoInventarioGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioMovimientoInventarioGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				movimientoinventario.setid_ejercicio(ejercicioAux.getId());
				movimientoinventario.setejercicio_descripcion(MovimientoInventarioConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				movimientoinventario.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_periodoMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoMovimientoInventarioGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoMovimientoInventarioGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				movimientoinventario.setid_periodo(periodoAux.getId());
				movimientoinventario.setperiodo_descripcion(MovimientoInventarioConstantesFunciones.getPeriodoDescripcion(periodoAux));
				movimientoinventario.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_anioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioMovimientoInventarioGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioMovimientoInventarioGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				movimientoinventario.setid_anio(anioAux.getId());
				movimientoinventario.setanio_descripcion(MovimientoInventarioConstantesFunciones.getAnioDescripcion(anioAux));
				movimientoinventario.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_mesMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesMovimientoInventarioGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesMovimientoInventarioGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				movimientoinventario.setid_mes(mesAux.getId());
				movimientoinventario.setmes_descripcion(MovimientoInventarioConstantesFunciones.getMesDescripcion(mesAux));
				movimientoinventario.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_usuarioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioMovimientoInventarioGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioMovimientoInventarioGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				movimientoinventario.setid_usuario(usuarioAux.getId());
				movimientoinventario.setusuario_descripcion(MovimientoInventarioConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				movimientoinventario.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_transaccionMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionAux=new Transaccion();

			if(jComboBoxid_transaccionMovimientoInventarioGenerico==null) {
				transaccionAux=(Transaccion)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.getSelectedItem();
			} else {
				transaccionAux=(Transaccion)jComboBoxid_transaccionMovimientoInventarioGenerico.getSelectedItem();
			}

			if(transaccionAux!=null && transaccionAux.getId()!=null) {
				movimientoinventario.setid_transaccion(transaccionAux.getId());
				movimientoinventario.settransaccion_descripcion(MovimientoInventarioConstantesFunciones.getTransaccionDescripcion(transaccionAux));
				movimientoinventario.setTransaccion(transaccionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_monedaMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaMovimientoInventarioGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaMovimientoInventarioGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				movimientoinventario.setid_moneda(monedaAux.getId());
				movimientoinventario.setmoneda_descripcion(MovimientoInventarioConstantesFunciones.getMonedaDescripcion(monedaAux));
				movimientoinventario.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCambioForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_tipo_cambioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioAux=new TipoCambio();

			if(jComboBoxid_tipo_cambioMovimientoInventarioGenerico==null) {
				tipocambioAux=(TipoCambio)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.getSelectedItem();
			} else {
				tipocambioAux=(TipoCambio)jComboBoxid_tipo_cambioMovimientoInventarioGenerico.getSelectedItem();
			}

			if(tipocambioAux!=null) {
				movimientoinventario.setid_tipo_cambio(tipocambioAux.getId());
				movimientoinventario.settipocambio_descripcion(MovimientoInventarioConstantesFunciones.getTipoCambioDescripcion(tipocambioAux));
				movimientoinventario.setTipoCambio(tipocambioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoMovimientoInventarioForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_estado_movimiento_inventarioMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			EstadoMovimientoInventario  estadomovimientoinventarioAux=new EstadoMovimientoInventario();

			if(jComboBoxid_estado_movimiento_inventarioMovimientoInventarioGenerico==null) {
				estadomovimientoinventarioAux=(EstadoMovimientoInventario)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.getSelectedItem();
			} else {
				estadomovimientoinventarioAux=(EstadoMovimientoInventario)jComboBoxid_estado_movimiento_inventarioMovimientoInventarioGenerico.getSelectedItem();
			}

			if(estadomovimientoinventarioAux!=null && estadomovimientoinventarioAux.getId()!=null) {
				movimientoinventario.setid_estado_movimiento_inventario(estadomovimientoinventarioAux.getId());
				movimientoinventario.setestadomovimientoinventario_descripcion(MovimientoInventarioConstantesFunciones.getEstadoMovimientoInventarioDescripcion(estadomovimientoinventarioAux));
				movimientoinventario.setEstadoMovimientoInventario(estadomovimientoinventarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_empleadoMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoMovimientoInventarioGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoMovimientoInventarioGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				movimientoinventario.setid_empleado(empleadoAux.getId());
				movimientoinventario.setempleado_descripcion(MovimientoInventarioConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				movimientoinventario.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_formatoMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoMovimientoInventarioGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoMovimientoInventarioGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				movimientoinventario.setid_formato(formatoAux.getId());
				movimientoinventario.setformato_descripcion(MovimientoInventarioConstantesFunciones.getFormatoDescripcion(formatoAux));
				movimientoinventario.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_facturaMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaMovimientoInventarioGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaMovimientoInventarioGenerico.getSelectedItem();
			}

			if(facturaAux!=null) {
				movimientoinventario.setid_factura(facturaAux.getId());
				movimientoinventario.setfactura_descripcion(MovimientoInventarioConstantesFunciones.getFacturaDescripcion(facturaAux));
				movimientoinventario.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarGuiaRemisionForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_guia_remisionMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			GuiaRemision  guiaremisionAux=new GuiaRemision();

			if(jComboBoxid_guia_remisionMovimientoInventarioGenerico==null) {
				guiaremisionAux=(GuiaRemision)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.getSelectedItem();
			} else {
				guiaremisionAux=(GuiaRemision)jComboBoxid_guia_remisionMovimientoInventarioGenerico.getSelectedItem();
			}

			if(guiaremisionAux!=null) {
				movimientoinventario.setid_guia_remision(guiaremisionAux.getId());
				movimientoinventario.setguiaremision_descripcion(MovimientoInventarioConstantesFunciones.getGuiaRemisionDescripcion(guiaremisionAux));
				movimientoinventario.setGuiaRemision(guiaremisionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransportistaForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_transportistaMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaAux=new Transportista();

			if(jComboBoxid_transportistaMovimientoInventarioGenerico==null) {
				transportistaAux=(Transportista)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.getSelectedItem();
			} else {
				transportistaAux=(Transportista)jComboBoxid_transportistaMovimientoInventarioGenerico.getSelectedItem();
			}

			if(transportistaAux!=null) {
				movimientoinventario.setid_transportista(transportistaAux.getId());
				movimientoinventario.settransportista_descripcion(MovimientoInventarioConstantesFunciones.getTransportistaDescripcion(transportistaAux));
				movimientoinventario.setTransportista(transportistaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTransaccionModuloForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_tipo_transaccion_moduloMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloAux=new TipoTransaccionModulo();

			if(jComboBoxid_tipo_transaccion_moduloMovimientoInventarioGenerico==null) {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.getSelectedItem();
			} else {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)jComboBoxid_tipo_transaccion_moduloMovimientoInventarioGenerico.getSelectedItem();
			}

			if(tipotransaccionmoduloAux!=null) {
				movimientoinventario.setid_tipo_transaccion_modulo(tipotransaccionmoduloAux.getId());
				movimientoinventario.settipotransaccionmodulo_descripcion(MovimientoInventarioConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloAux));
				movimientoinventario.setTipoTransaccionModulo(tipotransaccionmoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCompraForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_compraMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			Compra  compraAux=new Compra();

			if(jComboBoxid_compraMovimientoInventarioGenerico==null) {
				compraAux=(Compra)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.getSelectedItem();
			} else {
				compraAux=(Compra)jComboBoxid_compraMovimientoInventarioGenerico.getSelectedItem();
			}

			if(compraAux!=null) {
				movimientoinventario.setid_compra(compraAux.getId());
				movimientoinventario.setcompra_descripcion(MovimientoInventarioConstantesFunciones.getCompraDescripcion(compraAux));
				movimientoinventario.setCompra(compraAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(MovimientoInventario movimientoinventario,JComboBox jComboBoxid_asiento_contableMovimientoInventarioGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableMovimientoInventarioGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableMovimientoInventarioGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null) {
				movimientoinventario.setid_asiento_contable(asientocontableAux.getId());
				movimientoinventario.setasientocontable_descripcion(MovimientoInventarioConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				movimientoinventario.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.addItem(transaccion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.addItem(transaccion);
							}
						}

						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCambiosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCambio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.removeAllItems();

							for(TipoCambio tipocambio:this.tipocambiosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.addItem(tipocambio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoMovimientoInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoMovimientoInventario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.removeAllItems();

							for(EstadoMovimientoInventario estadomovimientoinventario:this.estadomovimientoinventariosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.addItem(estadomovimientoinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoMovimientoInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.removeAllItems();

							for(EstadoMovimientoInventario estadomovimientoinventario:this.estadomovimientoinventariosForeignKey) {
								this.jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.addItem(estadomovimientoinventario);
							}
						}

						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.addItem(empleado);
							}
						}

						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_facturaFK_IdFacturaMovimientoInventario.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jComboBoxid_facturaFK_IdFacturaMovimientoInventario.addItem(factura);
							}
						}

						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameGuiaRemisionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingGuiaRemision=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.removeAllItems();

							for(GuiaRemision guiaremision:this.guiaremisionsForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.addItem(guiaremision);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdGuiaRemision") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.removeAllItems();

							for(GuiaRemision guiaremision:this.guiaremisionsForeignKey) {
								this.jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.addItem(guiaremision);
							}
						}

						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportistasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransportista=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.addItem(transportista);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTransaccionModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTransaccionModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.addItem(tipotransaccionmodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.addItem(tipotransaccionmodulo);
							}
						}

						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameComprasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCompra=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.removeAllItems();

							for(Compra compra:this.comprasForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.addItem(compra);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCompra") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_compraFK_IdCompraMovimientoInventario.removeAllItems();

							for(Compra compra:this.comprasForeignKey) {
								this.jComboBoxid_compraFK_IdCompraMovimientoInventario.addItem(compra);
							}
						}

						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { 
					}

					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.addItem(asientocontable);
							}
						}

						if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionForeignKey(Transaccion transaccion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setSelectedItem(transaccion);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.setSelectedItem(transaccion);
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCambioForeignKey(TipoCambio tipocambio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setSelectedItem(tipocambio);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoMovimientoInventarioForeignKey(EstadoMovimientoInventario estadomovimientoinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setSelectedItem(estadomovimientoinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.setSelectedItem(estadomovimientoinventario);
						} else {
							this.jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.setSelectedItem(empleado);
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_facturaFK_IdFacturaMovimientoInventario.setSelectedItem(factura);
						} else {
							this.jComboBoxid_facturaFK_IdFacturaMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameGuiaRemisionForeignKey(GuiaRemision guiaremision,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setSelectedItem(guiaremision);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.setSelectedItem(guiaremision);
						} else {
							this.jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransportistaForeignKey(Transportista transportista,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setSelectedItem(transportista);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTransaccionModuloForeignKey(TipoTransaccionModulo tipotransaccionmodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setSelectedItem(tipotransaccionmodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.setSelectedItem(tipotransaccionmodulo);
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCompraForeignKey(Compra compra,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setSelectedItem(compra);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_compraFK_IdCompraMovimientoInventario.setSelectedItem(compra);
						} else {
							this.jComboBoxid_compraFK_IdCompraMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesMovimientoInventario() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			MovimientoInventarioConstantesFunciones.refrescarForeignKeysDescripcionesMovimientoInventario(this.movimientoinventarioLogic.getMovimientoInventarios());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			MovimientoInventarioConstantesFunciones.refrescarForeignKeysDescripcionesMovimientoInventario(this.movimientoinventarios);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(Transaccion.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(TipoCambio.class));
		classes.add(new Classe(EstadoMovimientoInventario.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(GuiaRemision.class));
		classes.add(new Classe(Transportista.class));
		classes.add(new Classe(TipoTransaccionModulo.class));
		classes.add(new Classe(Compra.class));
		classes.add(new Classe(AsientoContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//movimientoinventarioLogic.setMovimientoInventarios(this.movimientoinventarios);
			movimientoinventarioLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public MovimientoInventarioParameterReturnGeneral getMovimientoInventarioParameterGeneral() {
		return this.movimientoinventarioParameterGeneral;
	}
	
	public void setMovimientoInventarioParameterGeneral(MovimientoInventarioParameterReturnGeneral movimientoinventarioParameterGeneral) {
		this.movimientoinventarioParameterGeneral = movimientoinventarioParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoMovimientoInventario() {
		return isPermisoTodoMovimientoInventario;
	}

	public void setIsPermisoTodoMovimientoInventario(Boolean isPermisoTodoMovimientoInventario) {
		this.isPermisoTodoMovimientoInventario = isPermisoTodoMovimientoInventario;
	}

	public Boolean getIsPermisoNuevoMovimientoInventario() {
		return isPermisoNuevoMovimientoInventario;
	}

	public void setIsPermisoNuevoMovimientoInventario(Boolean isPermisoNuevoMovimientoInventario) {
		this.isPermisoNuevoMovimientoInventario = isPermisoNuevoMovimientoInventario;
	}

	public Boolean getIsPermisoActualizarMovimientoInventario() {
		return isPermisoActualizarMovimientoInventario;
	}

	public void setIsPermisoActualizarMovimientoInventario(Boolean isPermisoActualizarMovimientoInventario) {
		this.isPermisoActualizarMovimientoInventario = isPermisoActualizarMovimientoInventario;
	}

	public Boolean getIsPermisoEliminarMovimientoInventario() {
		return isPermisoEliminarMovimientoInventario;
	}

	public void setIsPermisoEliminarMovimientoInventario(Boolean isPermisoEliminarMovimientoInventario) {
		this.isPermisoEliminarMovimientoInventario = isPermisoEliminarMovimientoInventario;
	}

	public Boolean getIsPermisoGuardarCambiosMovimientoInventario() {
		return isPermisoGuardarCambiosMovimientoInventario;
	}

	public void setIsPermisoGuardarCambiosMovimientoInventario(Boolean isPermisoGuardarCambiosMovimientoInventario) {
		this.isPermisoGuardarCambiosMovimientoInventario = isPermisoGuardarCambiosMovimientoInventario;
	}
	
	public Boolean getIsPermisoConsultaMovimientoInventario() {
		return isPermisoConsultaMovimientoInventario;
	}

	public void setIsPermisoConsultaMovimientoInventario(Boolean isPermisoConsultaMovimientoInventario) {
		this.isPermisoConsultaMovimientoInventario = isPermisoConsultaMovimientoInventario;
	}

	public Boolean getIsPermisoBusquedaMovimientoInventario() {
		return isPermisoBusquedaMovimientoInventario;
	}

	public void setIsPermisoBusquedaMovimientoInventario(Boolean isPermisoBusquedaMovimientoInventario) {
		this.isPermisoBusquedaMovimientoInventario = isPermisoBusquedaMovimientoInventario;
	}

	public Boolean getIsPermisoReporteMovimientoInventario() {
		return isPermisoReporteMovimientoInventario;
	}

	public void setIsPermisoReporteMovimientoInventario(Boolean isPermisoReporteMovimientoInventario) {
		this.isPermisoReporteMovimientoInventario = isPermisoReporteMovimientoInventario;
	}
	
	public Boolean getIsPermisoPaginacionMedioMovimientoInventario() {
		return isPermisoPaginacionMedioMovimientoInventario;
	}

	public void setIsPermisoPaginacionMedioMovimientoInventario(Boolean isPermisoPaginacionMedioMovimientoInventario) {
		this.isPermisoPaginacionMedioMovimientoInventario = isPermisoPaginacionMedioMovimientoInventario;
	}
	
	public Boolean getIsPermisoPaginacionTodoMovimientoInventario() {
		return isPermisoPaginacionTodoMovimientoInventario;
	}

	public void setIsPermisoPaginacionTodoMovimientoInventario(Boolean isPermisoPaginacionTodoMovimientoInventario) {
		this.isPermisoPaginacionTodoMovimientoInventario = isPermisoPaginacionTodoMovimientoInventario;
	}
	
	public Boolean getIsPermisoPaginacionAltoMovimientoInventario() {
		return isPermisoPaginacionAltoMovimientoInventario;
	}

	public void setIsPermisoPaginacionAltoMovimientoInventario(Boolean isPermisoPaginacionAltoMovimientoInventario) {
		this.isPermisoPaginacionAltoMovimientoInventario = isPermisoPaginacionAltoMovimientoInventario;
	}
	
	public Boolean getIsPermisoCopiarMovimientoInventario() {
		return isPermisoCopiarMovimientoInventario;
	}

	public void setIsPermisoCopiarMovimientoInventario(Boolean isPermisoCopiarMovimientoInventario) {
		this.isPermisoCopiarMovimientoInventario = isPermisoCopiarMovimientoInventario;
	}
	
	public Boolean getIsPermisoVerFormMovimientoInventario() {
		return isPermisoVerFormMovimientoInventario;
	}

	public void setIsPermisoVerFormMovimientoInventario(Boolean isPermisoVerFormMovimientoInventario) {
		this.isPermisoVerFormMovimientoInventario = isPermisoVerFormMovimientoInventario;
	}
	
	public Boolean getIsPermisoDuplicarMovimientoInventario() {
		return isPermisoDuplicarMovimientoInventario;
	}

	public void setIsPermisoDuplicarMovimientoInventario(Boolean isPermisoDuplicarMovimientoInventario) {
		this.isPermisoDuplicarMovimientoInventario = isPermisoDuplicarMovimientoInventario;
	}
	
	public Boolean getIsPermisoOrdenMovimientoInventario() {
		return isPermisoOrdenMovimientoInventario;
	}

	public void setIsPermisoOrdenMovimientoInventario(Boolean isPermisoOrdenMovimientoInventario) {
		this.isPermisoOrdenMovimientoInventario = isPermisoOrdenMovimientoInventario;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoMovimientoInventario() {
		return isVisibilidadCeldaNuevoMovimientoInventario;
	}

	public void setIsVisibilidadCeldaNuevoMovimientoInventario(Boolean isVisibilidadCeldaNuevoMovimientoInventario) {
		this.isVisibilidadCeldaNuevoMovimientoInventario = isVisibilidadCeldaNuevoMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarMovimientoInventario() {
		return isVisibilidadCeldaDuplicarMovimientoInventario;
	}

	public void setIsVisibilidadCeldaDuplicarMovimientoInventario(Boolean isVisibilidadCeldaDuplicarMovimientoInventario) {
		this.isVisibilidadCeldaDuplicarMovimientoInventario = isVisibilidadCeldaDuplicarMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarMovimientoInventario() {
		return isVisibilidadCeldaCopiarMovimientoInventario;
	}

	public void setIsVisibilidadCeldaCopiarMovimientoInventario(Boolean isVisibilidadCeldaCopiarMovimientoInventario) {
		this.isVisibilidadCeldaCopiarMovimientoInventario = isVisibilidadCeldaCopiarMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormMovimientoInventario() {
		return isVisibilidadCeldaVerFormMovimientoInventario;
	}

	public void setIsVisibilidadCeldaVerFormMovimientoInventario(Boolean isVisibilidadCeldaVerFormMovimientoInventario) {
		this.isVisibilidadCeldaVerFormMovimientoInventario = isVisibilidadCeldaVerFormMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenMovimientoInventario() {
		return isVisibilidadCeldaOrdenMovimientoInventario;
	}

	public void setIsVisibilidadCeldaOrdenMovimientoInventario(Boolean isVisibilidadCeldaOrdenMovimientoInventario) {
		this.isVisibilidadCeldaOrdenMovimientoInventario = isVisibilidadCeldaOrdenMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesMovimientoInventario() {
		return isVisibilidadCeldaNuevoRelacionesMovimientoInventario;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesMovimientoInventario(Boolean isVisibilidadCeldaNuevoRelacionesMovimientoInventario) {
		this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario = isVisibilidadCeldaNuevoRelacionesMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaModificarMovimientoInventario() {
		return isVisibilidadCeldaModificarMovimientoInventario;
	}

	public void setIsVisibilidadCeldaModificarMovimientoInventario(Boolean isVisibilidadCeldaModificarMovimientoInventario) {
		this.isVisibilidadCeldaModificarMovimientoInventario = isVisibilidadCeldaModificarMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarMovimientoInventario() {
		return isVisibilidadCeldaActualizarMovimientoInventario;
	}

	public void setIsVisibilidadCeldaActualizarMovimientoInventario(Boolean isVisibilidadCeldaActualizarMovimientoInventario) {
		this.isVisibilidadCeldaActualizarMovimientoInventario = isVisibilidadCeldaActualizarMovimientoInventario;
	}

	public Boolean getIsVisibilidadCeldaEliminarMovimientoInventario() {
		return isVisibilidadCeldaEliminarMovimientoInventario;
	}

	public void setIsVisibilidadCeldaEliminarMovimientoInventario(Boolean isVisibilidadCeldaEliminarMovimientoInventario) {
		this.isVisibilidadCeldaEliminarMovimientoInventario = isVisibilidadCeldaEliminarMovimientoInventario;
	}

	public Boolean getIsVisibilidadCeldaCancelarMovimientoInventario() {
		return isVisibilidadCeldaCancelarMovimientoInventario;
	}

	public void setIsVisibilidadCeldaCancelarMovimientoInventario(Boolean isVisibilidadCeldaCancelarMovimientoInventario) {
		this.isVisibilidadCeldaCancelarMovimientoInventario = isVisibilidadCeldaCancelarMovimientoInventario;
	}

	public Boolean getIsVisibilidadCeldaGuardarMovimientoInventario() {
		return isVisibilidadCeldaGuardarMovimientoInventario;
	}

	public void setIsVisibilidadCeldaGuardarMovimientoInventario(Boolean isVisibilidadCeldaGuardarMovimientoInventario) {
		this.isVisibilidadCeldaGuardarMovimientoInventario = isVisibilidadCeldaGuardarMovimientoInventario;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosMovimientoInventario() {
		return isVisibilidadCeldaGuardarCambiosMovimientoInventario;
	}

	public void setIsVisibilidadCeldaGuardarCambiosMovimientoInventario(Boolean isVisibilidadCeldaGuardarCambiosMovimientoInventario) {
		this.isVisibilidadCeldaGuardarCambiosMovimientoInventario = isVisibilidadCeldaGuardarCambiosMovimientoInventario;
	}
		
	public MovimientoInventarioSessionBean getmovimientoinventarioSessionBean() {
		return this.movimientoinventarioSessionBean;
	}
	
	public void setmovimientoinventarioSessionBean(MovimientoInventarioSessionBean movimientoinventarioSessionBean) {
		this.movimientoinventarioSessionBean=movimientoinventarioSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCompra() {
		return this.isVisibilidadFK_IdCompra;
	}

	public void setisVisibilidadFK_IdCompra(Boolean isVisibilidadFK_IdCompra) {
		this.isVisibilidadFK_IdCompra=isVisibilidadFK_IdCompra;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoMovimientoInventario() {
		return this.isVisibilidadFK_IdEstadoMovimientoInventario;
	}

	public void setisVisibilidadFK_IdEstadoMovimientoInventario(Boolean isVisibilidadFK_IdEstadoMovimientoInventario) {
		this.isVisibilidadFK_IdEstadoMovimientoInventario=isVisibilidadFK_IdEstadoMovimientoInventario;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdGuiaRemision() {
		return this.isVisibilidadFK_IdGuiaRemision;
	}

	public void setisVisibilidadFK_IdGuiaRemision(Boolean isVisibilidadFK_IdGuiaRemision) {
		this.isVisibilidadFK_IdGuiaRemision=isVisibilidadFK_IdGuiaRemision;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoCambio() {
		return this.isVisibilidadFK_IdTipoCambio;
	}

	public void setisVisibilidadFK_IdTipoCambio(Boolean isVisibilidadFK_IdTipoCambio) {
		this.isVisibilidadFK_IdTipoCambio=isVisibilidadFK_IdTipoCambio;
	}

	public Boolean getisVisibilidadFK_IdTipoTransaccionModulo() {
		return this.isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public void setisVisibilidadFK_IdTipoTransaccionModulo(Boolean isVisibilidadFK_IdTipoTransaccionModulo) {
		this.isVisibilidadFK_IdTipoTransaccionModulo=isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public Boolean getisVisibilidadFK_IdTransaccion() {
		return this.isVisibilidadFK_IdTransaccion;
	}

	public void setisVisibilidadFK_IdTransaccion(Boolean isVisibilidadFK_IdTransaccion) {
		this.isVisibilidadFK_IdTransaccion=isVisibilidadFK_IdTransaccion;
	}

	public Boolean getisVisibilidadFK_IdTransportista() {
		return this.isVisibilidadFK_IdTransportista;
	}

	public void setisVisibilidadFK_IdTransportista(Boolean isVisibilidadFK_IdTransportista) {
		this.isVisibilidadFK_IdTransportista=isVisibilidadFK_IdTransportista;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(MovimientoInventario movimientoinventario)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(movimientoinventario,null);
				this.setActualParaGuardarSucursalForeignKey(movimientoinventario,null);
				this.setActualParaGuardarModuloForeignKey(movimientoinventario,null);
				this.setActualParaGuardarEjercicioForeignKey(movimientoinventario,null);
				this.setActualParaGuardarPeriodoForeignKey(movimientoinventario,null);
				this.setActualParaGuardarAnioForeignKey(movimientoinventario,null);
				this.setActualParaGuardarMesForeignKey(movimientoinventario,null);
				this.setActualParaGuardarUsuarioForeignKey(movimientoinventario,null);
				this.setActualParaGuardarTransaccionForeignKey(movimientoinventario,null);
				this.setActualParaGuardarMonedaForeignKey(movimientoinventario,null);
				this.setActualParaGuardarTipoCambioForeignKey(movimientoinventario,null);
				this.setActualParaGuardarEstadoMovimientoInventarioForeignKey(movimientoinventario,null);
				this.setActualParaGuardarEmpleadoForeignKey(movimientoinventario,null);
				this.setActualParaGuardarFormatoForeignKey(movimientoinventario,null);
				this.setActualParaGuardarFacturaForeignKey(movimientoinventario,null);
				this.setActualParaGuardarGuiaRemisionForeignKey(movimientoinventario,null);
				this.setActualParaGuardarTransportistaForeignKey(movimientoinventario,null);
				this.setActualParaGuardarTipoTransaccionModuloForeignKey(movimientoinventario,null);
				this.setActualParaGuardarCompraForeignKey(movimientoinventario,null);
				this.setActualParaGuardarAsientoContableForeignKey(movimientoinventario,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(MovimientoInventario movimientoinventario,MovimientoInventario movimientoinventarioAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalMovimientoInventario(movimientoinventario);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		movimientoinventarioAux.setId(movimientoinventario.getId());
		movimientoinventarioAux.setVersionRow(movimientoinventario.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessMovimientoInventario();
		
			int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = movimientoinventarioValidator.getInvalidValues(this.movimientoinventario);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			movimientoinventarioLogic.setDatosCliente(datosCliente);
			movimientoinventarioLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				movimientoinventarioAux=new  MovimientoInventario();
				
				movimientoinventarioAux.setIsNew(true);
				movimientoinventarioAux.setIsChanged(true);
				
				movimientoinventarioAux.setMovimientoInventarioOriginal(this.movimientoinventario);
				
				movimientoinventarioAux.setId(this.movimientoinventario.getId());	
				movimientoinventarioAux.setVersionRow(this.movimientoinventario.getVersionRow());	
				movimientoinventarioAux.setid_empresa(this.movimientoinventario.getid_empresa());	
				movimientoinventarioAux.setid_sucursal(this.movimientoinventario.getid_sucursal());	
				movimientoinventarioAux.setid_modulo(this.movimientoinventario.getid_modulo());	
				movimientoinventarioAux.setid_ejercicio(this.movimientoinventario.getid_ejercicio());	
				movimientoinventarioAux.setid_periodo(this.movimientoinventario.getid_periodo());	
				movimientoinventarioAux.setid_anio(this.movimientoinventario.getid_anio());	
				movimientoinventarioAux.setid_mes(this.movimientoinventario.getid_mes());	
				movimientoinventarioAux.setid_usuario(this.movimientoinventario.getid_usuario());	
				movimientoinventarioAux.setid_transaccion(this.movimientoinventario.getid_transaccion());	
				movimientoinventarioAux.setfecha_emision(this.movimientoinventario.getfecha_emision());	
				movimientoinventarioAux.setfecha_entrega(this.movimientoinventario.getfecha_entrega());	
				movimientoinventarioAux.setnumero_secuencial(this.movimientoinventario.getnumero_secuencial());	
				movimientoinventarioAux.setid_moneda(this.movimientoinventario.getid_moneda());	
				
				if(this.movimientoinventario.getid_tipo_cambio()!=null && this.movimientoinventario.getid_tipo_cambio()>0L) {
					movimientoinventarioAux.setid_tipo_cambio(this.movimientoinventario.getid_tipo_cambio());
				} else {
					movimientoinventarioAux.setid_tipo_cambio(null);
				}	
				movimientoinventarioAux.setid_estado_movimiento_inventario(this.movimientoinventario.getid_estado_movimiento_inventario());	
				movimientoinventarioAux.setid_empleado(this.movimientoinventario.getid_empleado());	
				movimientoinventarioAux.setid_formato(this.movimientoinventario.getid_formato());	
				
				if(this.movimientoinventario.getid_factura()!=null && this.movimientoinventario.getid_factura()>0L) {
					movimientoinventarioAux.setid_factura(this.movimientoinventario.getid_factura());
				} else {
					movimientoinventarioAux.setid_factura(null);
				}	
				movimientoinventarioAux.setnumero_factura(this.movimientoinventario.getnumero_factura());	
				
				if(this.movimientoinventario.getid_guia_remision()!=null && this.movimientoinventario.getid_guia_remision()>0L) {
					movimientoinventarioAux.setid_guia_remision(this.movimientoinventario.getid_guia_remision());
				} else {
					movimientoinventarioAux.setid_guia_remision(null);
				}	
				
				if(this.movimientoinventario.getid_transportista()!=null && this.movimientoinventario.getid_transportista()>0L) {
					movimientoinventarioAux.setid_transportista(this.movimientoinventario.getid_transportista());
				} else {
					movimientoinventarioAux.setid_transportista(null);
				}	
				movimientoinventarioAux.setdescripcion(this.movimientoinventario.getdescripcion());	
				movimientoinventarioAux.setporcentaje_descuento(this.movimientoinventario.getporcentaje_descuento());	
				movimientoinventarioAux.setsuman(this.movimientoinventario.getsuman());	
				movimientoinventarioAux.setice(this.movimientoinventario.getice());	
				movimientoinventarioAux.setvalor_descuento(this.movimientoinventario.getvalor_descuento());	
				movimientoinventarioAux.settotal_descuento(this.movimientoinventario.gettotal_descuento());	
				movimientoinventarioAux.setiva(this.movimientoinventario.getiva());	
				movimientoinventarioAux.setstock(this.movimientoinventario.getstock());	
				movimientoinventarioAux.setsub_total(this.movimientoinventario.getsub_total());	
				movimientoinventarioAux.settotal_otro(this.movimientoinventario.gettotal_otro());	
				movimientoinventarioAux.setultimo_costo(this.movimientoinventario.getultimo_costo());	
				movimientoinventarioAux.setnumero_items(this.movimientoinventario.getnumero_items());	
				movimientoinventarioAux.setretencion(this.movimientoinventario.getretencion());	
				movimientoinventarioAux.settotal(this.movimientoinventario.gettotal());	
				movimientoinventarioAux.setflete(this.movimientoinventario.getflete());	
				movimientoinventarioAux.setimpuesto(this.movimientoinventario.getimpuesto());	
				movimientoinventarioAux.setid_tipo_transaccion_modulo(this.movimientoinventario.getid_tipo_transaccion_modulo());	
				
				if(this.movimientoinventario.getid_compra()!=null && this.movimientoinventario.getid_compra()>0L) {
					movimientoinventarioAux.setid_compra(this.movimientoinventario.getid_compra());
				} else {
					movimientoinventarioAux.setid_compra(null);
				}	
				movimientoinventarioAux.setid_asiento_contable(this.movimientoinventario.getid_asiento_contable());	
				movimientoinventarioAux.setgenerico_id(this.movimientoinventario.getgenerico_id());	
				movimientoinventarioAux.settipo_id(this.movimientoinventario.gettipo_id());	
				movimientoinventarioAux.setnumero_comprobante(this.movimientoinventario.getnumero_comprobante());	
				movimientoinventarioAux.setfecha(this.movimientoinventario.getfecha());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.movimientoinventarioSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(movimientoinventarioAux,movimientoinventarioLogic.getMovimientoInventarios());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(movimientoinventarioAux,movimientoinventarios);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.movimientoinventarioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.saveMovimientoInventarios();//WithConnection
						//movimientoinventarioLogic.getSetVersionRowMovimientoInventarios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.movimientoinventario,movimientoinventarioAux);
					
					this.refrescarForeignKeysDescripcionesMovimientoInventario();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventariosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarios.addAll(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventariosEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								movimientoinventarioLogic.saveMovimientoInventarioRelaciones(movimientoinventarioAux,this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());//WithConnection
								//movimientoinventarioLogic.getSetVersionRowMovimientoInventarios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.movimientoinventario,movimientoinventarioAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarios= new ArrayList<DetalleMovimientoInventario>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();}
							movimientoinventarioAux.setDetalleMovimientoInventarios(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
									|| this.movimientoinventarioSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(movimientoinventarioAux,movimientoinventarioLogic.getMovimientoInventarios());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(movimientoinventarioAux,movimientoinventarios);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.movimientoinventario,movimientoinventarioAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				movimientoinventarioAux=new  MovimientoInventario();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado() 
					|| (this.movimientoinventarioSessionBean.getEsGuardarRelacionado() && this.movimientoinventario.getId()>=0)) {
						
					movimientoinventarioAux.setIsNew(false);
				}
				
				movimientoinventarioAux.setIsDeleted(false);
			
				movimientoinventarioAux.setId(this.movimientoinventario.getId());	
				movimientoinventarioAux.setVersionRow(this.movimientoinventario.getVersionRow());	
				movimientoinventarioAux.setid_empresa(this.movimientoinventario.getid_empresa());	
				movimientoinventarioAux.setid_sucursal(this.movimientoinventario.getid_sucursal());	
				movimientoinventarioAux.setid_modulo(this.movimientoinventario.getid_modulo());	
				movimientoinventarioAux.setid_ejercicio(this.movimientoinventario.getid_ejercicio());	
				movimientoinventarioAux.setid_periodo(this.movimientoinventario.getid_periodo());	
				movimientoinventarioAux.setid_anio(this.movimientoinventario.getid_anio());	
				movimientoinventarioAux.setid_mes(this.movimientoinventario.getid_mes());	
				movimientoinventarioAux.setid_usuario(this.movimientoinventario.getid_usuario());	
				movimientoinventarioAux.setid_transaccion(this.movimientoinventario.getid_transaccion());	
				movimientoinventarioAux.setfecha_emision(this.movimientoinventario.getfecha_emision());	
				movimientoinventarioAux.setfecha_entrega(this.movimientoinventario.getfecha_entrega());	
				movimientoinventarioAux.setnumero_secuencial(this.movimientoinventario.getnumero_secuencial());	
				movimientoinventarioAux.setid_moneda(this.movimientoinventario.getid_moneda());	
				
				if(this.movimientoinventario.getid_tipo_cambio()!=null && this.movimientoinventario.getid_tipo_cambio()>0L) {
					movimientoinventarioAux.setid_tipo_cambio(this.movimientoinventario.getid_tipo_cambio());
				} else {
					movimientoinventarioAux.setid_tipo_cambio(null);
				}	
				movimientoinventarioAux.setid_estado_movimiento_inventario(this.movimientoinventario.getid_estado_movimiento_inventario());	
				movimientoinventarioAux.setid_empleado(this.movimientoinventario.getid_empleado());	
				movimientoinventarioAux.setid_formato(this.movimientoinventario.getid_formato());	
				
				if(this.movimientoinventario.getid_factura()!=null && this.movimientoinventario.getid_factura()>0L) {
					movimientoinventarioAux.setid_factura(this.movimientoinventario.getid_factura());
				} else {
					movimientoinventarioAux.setid_factura(null);
				}	
				movimientoinventarioAux.setnumero_factura(this.movimientoinventario.getnumero_factura());	
				
				if(this.movimientoinventario.getid_guia_remision()!=null && this.movimientoinventario.getid_guia_remision()>0L) {
					movimientoinventarioAux.setid_guia_remision(this.movimientoinventario.getid_guia_remision());
				} else {
					movimientoinventarioAux.setid_guia_remision(null);
				}	
				
				if(this.movimientoinventario.getid_transportista()!=null && this.movimientoinventario.getid_transportista()>0L) {
					movimientoinventarioAux.setid_transportista(this.movimientoinventario.getid_transportista());
				} else {
					movimientoinventarioAux.setid_transportista(null);
				}	
				movimientoinventarioAux.setdescripcion(this.movimientoinventario.getdescripcion());	
				movimientoinventarioAux.setporcentaje_descuento(this.movimientoinventario.getporcentaje_descuento());	
				movimientoinventarioAux.setsuman(this.movimientoinventario.getsuman());	
				movimientoinventarioAux.setice(this.movimientoinventario.getice());	
				movimientoinventarioAux.setvalor_descuento(this.movimientoinventario.getvalor_descuento());	
				movimientoinventarioAux.settotal_descuento(this.movimientoinventario.gettotal_descuento());	
				movimientoinventarioAux.setiva(this.movimientoinventario.getiva());	
				movimientoinventarioAux.setstock(this.movimientoinventario.getstock());	
				movimientoinventarioAux.setsub_total(this.movimientoinventario.getsub_total());	
				movimientoinventarioAux.settotal_otro(this.movimientoinventario.gettotal_otro());	
				movimientoinventarioAux.setultimo_costo(this.movimientoinventario.getultimo_costo());	
				movimientoinventarioAux.setnumero_items(this.movimientoinventario.getnumero_items());	
				movimientoinventarioAux.setretencion(this.movimientoinventario.getretencion());	
				movimientoinventarioAux.settotal(this.movimientoinventario.gettotal());	
				movimientoinventarioAux.setflete(this.movimientoinventario.getflete());	
				movimientoinventarioAux.setimpuesto(this.movimientoinventario.getimpuesto());	
				movimientoinventarioAux.setid_tipo_transaccion_modulo(this.movimientoinventario.getid_tipo_transaccion_modulo());	
				
				if(this.movimientoinventario.getid_compra()!=null && this.movimientoinventario.getid_compra()>0L) {
					movimientoinventarioAux.setid_compra(this.movimientoinventario.getid_compra());
				} else {
					movimientoinventarioAux.setid_compra(null);
				}	
				movimientoinventarioAux.setid_asiento_contable(this.movimientoinventario.getid_asiento_contable());	
				movimientoinventarioAux.setgenerico_id(this.movimientoinventario.getgenerico_id());	
				movimientoinventarioAux.settipo_id(this.movimientoinventario.gettipo_id());	
				movimientoinventarioAux.setnumero_comprobante(this.movimientoinventario.getnumero_comprobante());	
				movimientoinventarioAux.setfecha(this.movimientoinventario.getfecha());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(movimientoinventarioAux,movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(movimientoinventarioAux,movimientoinventarios);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.movimientoinventarioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.saveMovimientoInventarios();//WithConnection
						//movimientoinventarioLogic.getSetVersionRowMovimientoInventarios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.movimientoinventario,movimientoinventarioAux);
					
					this.refrescarForeignKeysDescripcionesMovimientoInventario();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventariosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarios.addAll(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventariosEliminados);
						}
						//ARCHITECTURE
						
						if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								movimientoinventarioLogic.saveMovimientoInventarioRelaciones(movimientoinventarioAux,this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());//WithConnection
								//movimientoinventarioLogic.getSetVersionRowMovimientoInventarios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.movimientoinventario,movimientoinventarioAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarios= new ArrayList<DetalleMovimientoInventario>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();}
							movimientoinventarioAux.setDetalleMovimientoInventarios(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
									|| this.movimientoinventarioSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(movimientoinventarioAux,movimientoinventarioLogic.getMovimientoInventarios());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(movimientoinventarioAux,movimientoinventarios);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.movimientoinventario,movimientoinventarioAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				movimientoinventarioAux=new  MovimientoInventario();
				
				movimientoinventarioAux.setIsNew(false);
				movimientoinventarioAux.setIsChanged(false);
				
				movimientoinventarioAux.setIsDeleted(true);
				
				movimientoinventarioAux.setId(this.movimientoinventario.getId());	
				movimientoinventarioAux.setVersionRow(this.movimientoinventario.getVersionRow());	
				movimientoinventarioAux.setid_empresa(this.movimientoinventario.getid_empresa());	
				movimientoinventarioAux.setid_sucursal(this.movimientoinventario.getid_sucursal());	
				movimientoinventarioAux.setid_modulo(this.movimientoinventario.getid_modulo());	
				movimientoinventarioAux.setid_ejercicio(this.movimientoinventario.getid_ejercicio());	
				movimientoinventarioAux.setid_periodo(this.movimientoinventario.getid_periodo());	
				movimientoinventarioAux.setid_anio(this.movimientoinventario.getid_anio());	
				movimientoinventarioAux.setid_mes(this.movimientoinventario.getid_mes());	
				movimientoinventarioAux.setid_usuario(this.movimientoinventario.getid_usuario());	
				movimientoinventarioAux.setid_transaccion(this.movimientoinventario.getid_transaccion());	
				movimientoinventarioAux.setfecha_emision(this.movimientoinventario.getfecha_emision());	
				movimientoinventarioAux.setfecha_entrega(this.movimientoinventario.getfecha_entrega());	
				movimientoinventarioAux.setnumero_secuencial(this.movimientoinventario.getnumero_secuencial());	
				movimientoinventarioAux.setid_moneda(this.movimientoinventario.getid_moneda());	
				
				if(this.movimientoinventario.getid_tipo_cambio()!=null && this.movimientoinventario.getid_tipo_cambio()>0L) {
					movimientoinventarioAux.setid_tipo_cambio(this.movimientoinventario.getid_tipo_cambio());
				} else {
					movimientoinventarioAux.setid_tipo_cambio(null);
				}	
				movimientoinventarioAux.setid_estado_movimiento_inventario(this.movimientoinventario.getid_estado_movimiento_inventario());	
				movimientoinventarioAux.setid_empleado(this.movimientoinventario.getid_empleado());	
				movimientoinventarioAux.setid_formato(this.movimientoinventario.getid_formato());	
				
				if(this.movimientoinventario.getid_factura()!=null && this.movimientoinventario.getid_factura()>0L) {
					movimientoinventarioAux.setid_factura(this.movimientoinventario.getid_factura());
				} else {
					movimientoinventarioAux.setid_factura(null);
				}	
				movimientoinventarioAux.setnumero_factura(this.movimientoinventario.getnumero_factura());	
				
				if(this.movimientoinventario.getid_guia_remision()!=null && this.movimientoinventario.getid_guia_remision()>0L) {
					movimientoinventarioAux.setid_guia_remision(this.movimientoinventario.getid_guia_remision());
				} else {
					movimientoinventarioAux.setid_guia_remision(null);
				}	
				
				if(this.movimientoinventario.getid_transportista()!=null && this.movimientoinventario.getid_transportista()>0L) {
					movimientoinventarioAux.setid_transportista(this.movimientoinventario.getid_transportista());
				} else {
					movimientoinventarioAux.setid_transportista(null);
				}	
				movimientoinventarioAux.setdescripcion(this.movimientoinventario.getdescripcion());	
				movimientoinventarioAux.setporcentaje_descuento(this.movimientoinventario.getporcentaje_descuento());	
				movimientoinventarioAux.setsuman(this.movimientoinventario.getsuman());	
				movimientoinventarioAux.setice(this.movimientoinventario.getice());	
				movimientoinventarioAux.setvalor_descuento(this.movimientoinventario.getvalor_descuento());	
				movimientoinventarioAux.settotal_descuento(this.movimientoinventario.gettotal_descuento());	
				movimientoinventarioAux.setiva(this.movimientoinventario.getiva());	
				movimientoinventarioAux.setstock(this.movimientoinventario.getstock());	
				movimientoinventarioAux.setsub_total(this.movimientoinventario.getsub_total());	
				movimientoinventarioAux.settotal_otro(this.movimientoinventario.gettotal_otro());	
				movimientoinventarioAux.setultimo_costo(this.movimientoinventario.getultimo_costo());	
				movimientoinventarioAux.setnumero_items(this.movimientoinventario.getnumero_items());	
				movimientoinventarioAux.setretencion(this.movimientoinventario.getretencion());	
				movimientoinventarioAux.settotal(this.movimientoinventario.gettotal());	
				movimientoinventarioAux.setflete(this.movimientoinventario.getflete());	
				movimientoinventarioAux.setimpuesto(this.movimientoinventario.getimpuesto());	
				movimientoinventarioAux.setid_tipo_transaccion_modulo(this.movimientoinventario.getid_tipo_transaccion_modulo());	
				
				if(this.movimientoinventario.getid_compra()!=null && this.movimientoinventario.getid_compra()>0L) {
					movimientoinventarioAux.setid_compra(this.movimientoinventario.getid_compra());
				} else {
					movimientoinventarioAux.setid_compra(null);
				}	
				movimientoinventarioAux.setid_asiento_contable(this.movimientoinventario.getid_asiento_contable());	
				movimientoinventarioAux.setgenerico_id(this.movimientoinventario.getgenerico_id());	
				movimientoinventarioAux.settipo_id(this.movimientoinventario.gettipo_id());	
				movimientoinventarioAux.setnumero_comprobante(this.movimientoinventario.getnumero_comprobante());	
				movimientoinventarioAux.setfecha(this.movimientoinventario.getfecha());	
				
				if(this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.movimientoinventarioAux.getId()>=0) {	
						this.movimientoinventariosEliminados.add(movimientoinventarioAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(movimientoinventarioAux,movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(movimientoinventarioAux,movimientoinventarios);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.movimientoinventarioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.saveMovimientoInventarios();//WithConnection
						//movimientoinventarioLogic.getSetVersionRowMovimientoInventarios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios().addAll(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventariosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarios.addAll(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventariosEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jInternalFrameDetalleFormDetalleMovimientoInventario.novedadseguimientoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								movimientoinventarioLogic.saveMovimientoInventarioRelaciones(movimientoinventarioAux,this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());//WithConnection
								//movimientoinventarioLogic.getSetVersionRowMovimientoInventarios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(new ArrayList<DetalleMovimientoInventario>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarios= new ArrayList<DetalleMovimientoInventario>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.quitarFilaTotales();}
							movimientoinventarioAux.setDetalleMovimientoInventarios(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
								|| this.movimientoinventarioSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(movimientoinventarioAux,movimientoinventarioLogic.getMovimientoInventarios());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(movimientoinventarioAux,movimientoinventarios);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getMovimientoInventarios().addAll(this.movimientoinventariosEliminados);
					
					movimientoinventarioLogic.saveMovimientoInventarios();//WithConnection
					//movimientoinventarioLogic.getSetVersionRowMovimientoInventarios();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesMovimientoInventario();
				
				this.movimientoinventariosEliminados= new ArrayList<MovimientoInventario>();		
			}
			
			if(this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Movimiento Inventario GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.movimientoinventario=movimientoinventarioAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessMovimientoInventario();
      	}
		
	}	
	
	public void actualizarRelaciones(MovimientoInventario movimientoinventarioLocal) throws Exception {
		
		if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				movimientoinventarioLocal.setDetalleMovimientoInventarios(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
			
			} else {
			
				movimientoinventarioLocal.setDetalleMovimientoInventarios(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarios);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(MovimientoInventario movimientoinventarioLocal) throws Exception {	
		if(this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				movimientoinventarioLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				movimientoinventarioLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				movimientoinventarioLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				movimientoinventarioLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				movimientoinventarioLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				movimientoinventarioLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				movimientoinventarioLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				movimientoinventarioLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionDetalleFormJInternalFrame.class)) {
				TransaccionBeanSwingJInternalFrame transaccionBeanSwingJInternalFrameLocal=(TransaccionBeanSwingJInternalFrame) ((TransaccionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccion(transaccionBeanSwingJInternalFrameLocal.gettransaccion(),true);
				transaccionBeanSwingJInternalFrameLocal.actualizarLista(transaccionBeanSwingJInternalFrameLocal.transaccion,this.transaccionsForeignKey);

				transaccionBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccionBeanSwingJInternalFrameLocal.transaccion);

				movimientoinventarioLocal.setTransaccion(transaccionBeanSwingJInternalFrameLocal.transaccion);

				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey("Formulario");
				this.setActualTransaccionForeignKey(transaccionBeanSwingJInternalFrameLocal.transaccion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				movimientoinventarioLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCambioDetalleFormJInternalFrame.class)) {
				TipoCambioBeanSwingJInternalFrame tipocambioBeanSwingJInternalFrameLocal=(TipoCambioBeanSwingJInternalFrame) ((TipoCambioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocambioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCambio(tipocambioBeanSwingJInternalFrameLocal.gettipocambio(),true);
				tipocambioBeanSwingJInternalFrameLocal.actualizarLista(tipocambioBeanSwingJInternalFrameLocal.tipocambio,this.tipocambiosForeignKey);

				tipocambioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				movimientoinventarioLocal.setTipoCambio(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey("Formulario");
				this.setActualTipoCambioForeignKey(tipocambioBeanSwingJInternalFrameLocal.tipocambio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoMovimientoInventarioDetalleFormJInternalFrame.class)) {
				EstadoMovimientoInventarioBeanSwingJInternalFrame estadomovimientoinventarioBeanSwingJInternalFrameLocal=(EstadoMovimientoInventarioBeanSwingJInternalFrame) ((EstadoMovimientoInventarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadomovimientoinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoMovimientoInventario(estadomovimientoinventarioBeanSwingJInternalFrameLocal.getestadomovimientoinventario(),true);
				estadomovimientoinventarioBeanSwingJInternalFrameLocal.actualizarLista(estadomovimientoinventarioBeanSwingJInternalFrameLocal.estadomovimientoinventario,this.estadomovimientoinventariosForeignKey);

				estadomovimientoinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(estadomovimientoinventarioBeanSwingJInternalFrameLocal.estadomovimientoinventario);

				movimientoinventarioLocal.setEstadoMovimientoInventario(estadomovimientoinventarioBeanSwingJInternalFrameLocal.estadomovimientoinventario);

				this.addItemDefectoCombosForeignKeyEstadoMovimientoInventario();
				this.cargarCombosFrameEstadoMovimientoInventariosForeignKey("Formulario");
				this.setActualEstadoMovimientoInventarioForeignKey(estadomovimientoinventarioBeanSwingJInternalFrameLocal.estadomovimientoinventario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				movimientoinventarioLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				movimientoinventarioLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				movimientoinventarioLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(GuiaRemisionDetalleFormJInternalFrame.class)) {
				GuiaRemisionBeanSwingJInternalFrame guiaremisionBeanSwingJInternalFrameLocal=(GuiaRemisionBeanSwingJInternalFrame) ((GuiaRemisionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				guiaremisionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoGuiaRemision(guiaremisionBeanSwingJInternalFrameLocal.getguiaremision(),true);
				guiaremisionBeanSwingJInternalFrameLocal.actualizarLista(guiaremisionBeanSwingJInternalFrameLocal.guiaremision,this.guiaremisionsForeignKey);

				guiaremisionBeanSwingJInternalFrameLocal.actualizarRelaciones(guiaremisionBeanSwingJInternalFrameLocal.guiaremision);

				movimientoinventarioLocal.setGuiaRemision(guiaremisionBeanSwingJInternalFrameLocal.guiaremision);

				this.addItemDefectoCombosForeignKeyGuiaRemision();
				this.cargarCombosFrameGuiaRemisionsForeignKey("Formulario");
				this.setActualGuiaRemisionForeignKey(guiaremisionBeanSwingJInternalFrameLocal.guiaremision.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransportistaDetalleFormJInternalFrame.class)) {
				TransportistaBeanSwingJInternalFrame transportistaBeanSwingJInternalFrameLocal=(TransportistaBeanSwingJInternalFrame) ((TransportistaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transportistaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransportista(transportistaBeanSwingJInternalFrameLocal.gettransportista(),true);
				transportistaBeanSwingJInternalFrameLocal.actualizarLista(transportistaBeanSwingJInternalFrameLocal.transportista,this.transportistasForeignKey);

				transportistaBeanSwingJInternalFrameLocal.actualizarRelaciones(transportistaBeanSwingJInternalFrameLocal.transportista);

				movimientoinventarioLocal.setTransportista(transportistaBeanSwingJInternalFrameLocal.transportista);

				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey("Formulario");
				this.setActualTransportistaForeignKey(transportistaBeanSwingJInternalFrameLocal.transportista.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTransaccionModuloDetalleFormJInternalFrame.class)) {
				TipoTransaccionModuloBeanSwingJInternalFrame tipotransaccionmoduloBeanSwingJInternalFrameLocal=(TipoTransaccionModuloBeanSwingJInternalFrame) ((TipoTransaccionModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.gettipotransaccionmodulo(),true);
				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarLista(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo,this.tipotransaccionmodulosForeignKey);

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				movimientoinventarioLocal.setTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey("Formulario");
				this.setActualTipoTransaccionModuloForeignKey(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CompraDetalleFormJInternalFrame.class)) {
				CompraBeanSwingJInternalFrame compraBeanSwingJInternalFrameLocal=(CompraBeanSwingJInternalFrame) ((CompraDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				compraBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCompra(compraBeanSwingJInternalFrameLocal.getcompra(),true);
				compraBeanSwingJInternalFrameLocal.actualizarLista(compraBeanSwingJInternalFrameLocal.compra,this.comprasForeignKey);

				compraBeanSwingJInternalFrameLocal.actualizarRelaciones(compraBeanSwingJInternalFrameLocal.compra);

				movimientoinventarioLocal.setCompra(compraBeanSwingJInternalFrameLocal.compra);

				this.addItemDefectoCombosForeignKeyCompra();
				this.cargarCombosFrameComprasForeignKey("Formulario");
				this.setActualCompraForeignKey(compraBeanSwingJInternalFrameLocal.compra.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				movimientoinventarioLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarMovimientoInventarioActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = movimientoinventarioValidator.getInvalidValues(this.movimientoinventario);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(MovimientoInventario movimientoinventario,List<MovimientoInventario> movimientoinventarios) throws Exception {
		try	{		
			MovimientoInventarioConstantesFunciones.actualizarLista(movimientoinventario,movimientoinventarios,this.movimientoinventarioSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(MovimientoInventario movimientoinventario,List<MovimientoInventario> movimientoinventarios) throws Exception {
		try	{			
			MovimientoInventarioConstantesFunciones.actualizarSelectedLista(movimientoinventario,movimientoinventarios);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<MovimientoInventario> movimientoinventariosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				movimientoinventariosLocal=this.movimientoinventarioLogic.getMovimientoInventarios();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				movimientoinventariosLocal=this.movimientoinventarios;
			}
			//ARCHITECTURE
		
			for(MovimientoInventario movimientoinventarioLocal:movimientoinventariosLocal) {
				if(this.permiteMantenimiento(movimientoinventarioLocal) && movimientoinventarioLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+MovimientoInventarioConstantesFunciones.getMovimientoInventarioLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_empresaMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_sucursalMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_moduloMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_ejercicioMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_periodoMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_anioMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_mesMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_usuarioMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDTRANSACCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_transaccionMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfecha_emisionMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.FECHAENTREGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfecha_entregaMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.NUMEROSECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_secuencialMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_monedaMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDTIPOCAMBIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_tipo_cambioMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDESTADOMOVIMIENTOINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_estado_movimiento_inventarioMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_empleadoMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_formatoMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_facturaMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.NUMEROFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_facturaMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDGUIAREMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_guia_remisionMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDTRANSPORTISTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_transportistaMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeldescripcionMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.PORCENTAJEDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelporcentaje_descuentoMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.SUMAN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelsumanMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeliceMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.VALORDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelvalor_descuentoMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.TOTALDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotal_descuentoMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelivaMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.STOCK)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelstockMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelsub_totalMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.TOTALOTRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotal_otroMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.ULTIMOCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelultimo_costoMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.NUMEROITEMS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_itemsMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.RETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelretencionMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotalMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.FLETE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfleteMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IMPUESTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelimpuestoMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDTIPOTRANSACCIONMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_tipo_transaccion_moduloMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDCOMPRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_compraMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_asiento_contableMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.GENERICOID)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelgenerico_idMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.TIPOID)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltipo_idMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.NUMEROCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_comprobanteMovimientoInventario,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoInventarioConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfechaMovimientoInventario,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_empresaMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_sucursalMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_moduloMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_ejercicioMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_periodoMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_anioMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_mesMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_usuarioMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_transaccionMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfecha_emisionMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfecha_entregaMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_secuencialMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_monedaMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_tipo_cambioMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_estado_movimiento_inventarioMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_empleadoMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_formatoMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_facturaMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_facturaMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_guia_remisionMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_transportistaMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabeldescripcionMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelporcentaje_descuentoMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelsumanMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabeliceMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelvalor_descuentoMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotal_descuentoMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelivaMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelstockMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelsub_totalMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotal_otroMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelultimo_costoMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_itemsMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelretencionMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotalMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfleteMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelimpuestoMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_tipo_transaccion_moduloMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_compraMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelid_asiento_contableMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelgenerico_idMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltipo_idMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_comprobanteMovimientoInventario,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfechaMovimientoInventario,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetalleMovimientoInventario")) {
			if(this.movimientoinventario==null) {
				this.movimientoinventario= new MovimientoInventario();
			}

			if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoMovimientoInventario
				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.getdetallemovimientoinventario().setMovimientoInventario(this.movimientoinventario);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoMovimientoInventario--;	
		
		
		this.movimientoinventarioAux=new MovimientoInventario();
		
		this.movimientoinventarioAux.setId(this.iIdNuevoMovimientoInventario);
		this.movimientoinventarioAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.movimientoinventarioLogic.getMovimientoInventarios().add(this.movimientoinventarioAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.movimientoinventarios.add(this.movimientoinventarioAux);
		}
		//ARCHITECTURE
		
		this.movimientoinventario=this.movimientoinventarioAux;
		
		if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioMovimientoInventario(this.movimientoinventario);
			this.setVariablesObjetoActualToFormularioForeignKeyMovimientoInventario(this.movimientoinventario);
		}
				
		//this.setDefaultControlesMovimientoInventario();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyMovimientoInventario();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyMovimientoInventario();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyMovimientoInventario();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualMovimientoInventario(this.movimientoinventarioBean,this.movimientoinventario,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(MovimientoInventarioConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
			classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.movimientoinventarioReturnGeneral=movimientoinventarioLogic.procesarEventosMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.movimientoinventarioLogic.getMovimientoInventarios(),this.movimientoinventario,this.movimientoinventarioParameterGeneral,this.isEsNuevoMovimientoInventario,classes);//this.movimientoinventarioLogic.getMovimientoInventario()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanMovimientoInventario(this.movimientoinventarioReturnGeneral,this.movimientoinventarioBean,false);
		
		if(this.movimientoinventarioReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyMovimientoInventario(this.movimientoinventarioReturnGeneral.getMovimientoInventario());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioMovimientoInventario(this.movimientoinventarioReturnGeneral.getMovimientoInventario());
		}
		
		if(this.movimientoinventarioReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioMovimientoInventario(this.movimientoinventarioReturnGeneral.getMovimientoInventario(),classes);//this.movimientoinventarioBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyMovimientoInventario();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyMovimientoInventario();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.RecargarFormMovimientoInventario(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingMovimientoInventario(false);
						
			if(movimientoinventarioSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado() && DetalleMovimientoInventarioJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleMovimientoInventarioActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualMovimientoInventario();
			}
			
			this.actualizarVisualTableDatosMovimientoInventario();
			
			this.jTableDatosMovimientoInventario.setRowSelectionInterval(this.getIndiceNuevoMovimientoInventario(), this.getIndiceNuevoMovimientoInventario());
			
			this.seleccionarFilaTablaMovimientoInventarioActual();
						
			this.actualizarEstadoCeldasBotonesMovimientoInventario("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesMovimientoInventario(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_emisionMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarfecha_emisionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_entregaMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarfecha_entregaMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_secuencialMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarnumero_secuencialMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_facturaMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarnumero_facturaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextAreadescripcionMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activardescripcionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarporcentaje_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsumanMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarsumanMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldiceMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activariceMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarvalor_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_descuentoMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activartotal_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldivaMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarivaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldstockMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarstockMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsub_totalMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarsub_totalMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_otroMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activartotal_otroMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldultimo_costoMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarultimo_costoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_itemsMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarnumero_itemsMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldretencionMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarretencionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotalMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activartotalMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldfleteMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarfleteMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldimpuestoMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarimpuestoMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldgenerico_idMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activargenerico_idMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtipo_idMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activartipo_idMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_comprobanteMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarnumero_comprobanteMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfechaMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarfechaMovimientoInventario);	
		//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_empresaMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_sucursalMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_moduloMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_ejercicioMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_periodoMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_anioMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_mesMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_usuarioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_transaccionMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_monedaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_tipo_cambioMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_estado_movimiento_inventarioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_empleadoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_formatoMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_facturaMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_guia_remisionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_transportistaMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_tipo_transaccion_moduloMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_compraMovimientoInventario);//
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setEnabled(isHabilitar && this.movimientoinventarioConstantesFunciones.activarid_asiento_contableMovimientoInventario);
	};
	
	public void setDefaultControlesMovimientoInventario() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoMovimientoInventario(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.movimientoinventarioSessionBean.setConGuardarRelaciones(true);			
			this.movimientoinventarioSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.movimientoinventarioSessionBean.setConGuardarRelaciones(false);			
			this.movimientoinventarioSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoMovimientoInventario() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
				if(movimientoinventarioAux.getId().equals(this.iIdNuevoMovimientoInventario)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarios) {
				if(movimientoinventarioAux.getId().equals(this.iIdNuevoMovimientoInventario)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualMovimientoInventario(MovimientoInventario movimientoinventario,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
				if(movimientoinventarioAux.getId().equals(movimientoinventario.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarios) {
				if(movimientoinventarioAux.getId().equals(movimientoinventario.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalMovimientoInventario(MovimientoInventario movimientoinventarioOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
				if(movimientoinventarioAux.getMovimientoInventarioOriginal().getId().equals(movimientoinventarioOriginal.getId())) {
					existe=true;
					movimientoinventarioOriginal.setId(movimientoinventarioAux.getId());
					movimientoinventarioOriginal.setVersionRow(movimientoinventarioAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarios) {
				if(movimientoinventarioAux.getMovimientoInventarioOriginal().getId().equals(movimientoinventarioOriginal.getId())) {
					existe=true;
					movimientoinventarioOriginal.setId(movimientoinventarioAux.getId());
					movimientoinventarioOriginal.setVersionRow(movimientoinventarioAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosMovimientoInventario(Boolean esParaCancelar) throws Exception {
		movimientoinventariosAux=new ArrayList<MovimientoInventario>();
		movimientoinventarioAux=new MovimientoInventario();
		
		if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
					if(movimientoinventarioAux.getId()<0) {
						movimientoinventariosAux.add(movimientoinventarioAux);
					}		
				}
				this.iIdNuevoMovimientoInventario=0L;
				this.movimientoinventarioLogic.getMovimientoInventarios().removeAll(movimientoinventariosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarios) {
					if(movimientoinventarioAux.getId()<0) {
						movimientoinventariosAux.add(movimientoinventarioAux);
					}		
				}
				this.iIdNuevoMovimientoInventario=0L;
				this.movimientoinventarios.removeAll(movimientoinventariosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoMovimientoInventario 
					&& this.movimientoinventarioLogic.getMovimientoInventarios().size()>0
					) {
					movimientoinventarioAux=this.movimientoinventarioLogic.getMovimientoInventarios().get(this.movimientoinventarioLogic.getMovimientoInventarios().size() - 1);
				
					if(movimientoinventarioAux.getId()<0) {
						this.movimientoinventarioLogic.getMovimientoInventarios().remove(movimientoinventarioAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoMovimientoInventario && this.movimientoinventarios.size()>0) {
					movimientoinventarioAux=this.movimientoinventarios.get(this.movimientoinventarios.size() - 1);
				
					if(movimientoinventarioAux.getId()<0) {
						this.movimientoinventarios.remove(movimientoinventarioAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoMovimientoInventario(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(movimientoinventario.getId()<0) {
				this.movimientoinventarioLogic.getMovimientoInventarios().remove(this.movimientoinventario);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(movimientoinventario.getId()<0) {
				this.movimientoinventarios.remove(this.movimientoinventario);
			}
		}			
	}
	
	public void setEstadosInicialesMovimientoInventario(List<MovimientoInventario> movimientoinventariosAux) throws Exception {
		MovimientoInventarioConstantesFunciones.setEstadosInicialesMovimientoInventario(movimientoinventariosAux);
	}
	
	public void setEstadosInicialesMovimientoInventario(MovimientoInventario movimientoinventarioAux) throws Exception {
		MovimientoInventarioConstantesFunciones.setEstadosInicialesMovimientoInventario(movimientoinventarioAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarMovimientoInventarioActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarMovimientoInventarioActual()) {
				if(!this.isEsNuevoMovimientoInventario) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoMovimientoInventario=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarMovimientoInventarioActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Movimiento Inventario ?", "MANTENIMIENTO DE Movimiento Inventario", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(MovimientoInventario movimientoinventario) throws Exception {
		MovimientoInventarioConstantesFunciones.seleccionarAsignar(this.movimientoinventario,movimientoinventario);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarMovimientoInventario=this.isPermisoActualizarOriginalMovimientoInventario;
			
			
			this.seleccionarAsignar(movimientoinventario);
			
			

			idTipoCambioActual=movimientoinventario.getid_tipo_cambio();
			this.seleccionarTipoCambioActual();

			idEmpleadoActual=movimientoinventario.getid_empleado();
			this.seleccionarEmpleadoActual();

			idFacturaActual=movimientoinventario.getid_factura();
			this.seleccionarFacturaActual();

			idAsientoContableActual=movimientoinventario.getid_asiento_contable();
			this.seleccionarAsientoContableActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			MovimientoInventarioConstantesFunciones.quitarEspaciosMovimientoInventario(this.movimientoinventario,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesMovimientoInventario("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.movimientoinventarioSessionBean.setsFuncionBusquedaRapida(this.movimientoinventarioSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarTipoCambioActual() throws Exception {
		try	{
			TipoCambio tipocambioAux=new TipoCambio();

			if(this.idTipoCambioActual != null && this.idTipoCambioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(this.idTipoCambioActual);
					tipocambioAux= tipocambioLogic.getTipoCambio();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				tipocambiosForeignKey=new ArrayList<TipoCambio>();
				tipocambiosForeignKey.add(tipocambioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoMovimientoInventario) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosMovimientoInventario(esParaCancelar);				
				this.cancelarNuevoMovimientoInventario(esParaCancelar);								
			}
			
			this.movimientoinventario=new MovimientoInventario();
			
			this.inicializarMovimientoInventario();
			
			this.actualizarEstadoCeldasBotonesMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarMovimientoInventario() throws Exception {
		try {
			MovimientoInventarioConstantesFunciones.inicializarMovimientoInventario(this.movimientoinventario);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.movimientoinventarioLogic.getMovimientoInventarios().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteMovimientoInventarios(String sAccionBusqueda,List<MovimientoInventario> movimientoinventariosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="MovimientoInventario"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="MovimientoInventarioMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("MovimientoInventarioMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="MovimientoInventario"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Movimiento Inventarios");		
		parameters.put("busquedapor", MovimientoInventarioConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetalleMovimientoInventario.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					MovimientoInventarioLogic movimientoinventarioLogicAuxiliar=new MovimientoInventarioLogic();
					movimientoinventarioLogicAuxiliar.setDatosCliente(movimientoinventarioLogic.getDatosCliente());				
					movimientoinventarioLogicAuxiliar.setMovimientoInventarios(movimientoinventariosParaReportes);
					
					movimientoinventarioLogicAuxiliar.cargarRelacionesLoteForeignKeyMovimientoInventarioWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					movimientoinventariosParaReportes=movimientoinventarioLogicAuxiliar.getMovimientoInventarios();
					
					//movimientoinventarioLogic.getNewConnexionToDeep();
					
					//for (MovimientoInventario movimientoinventario:movimientoinventariosParaReportes) {
					//	movimientoinventarioLogic.deepLoad(movimientoinventario, false, DeepLoadType.INCLUDE, classes);
					//}						
					//movimientoinventarioLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//movimientoinventarioLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetalleMovimientoInventario = AuxiliarReportes.class.getResourceAsStream("DetalleMovimientoInventarioDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detallemovimientoinventario", reportFileDetalleMovimientoInventario);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceMovimientoInventario=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			MovimientoInventarioConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			MovimientoInventarioConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceMovimientoInventario=new JRBeanArrayDataSource(MovimientoInventarioJInternalFrame.TraerMovimientoInventarioBeans(movimientoinventariosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceMovimientoInventario);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+MovimientoInventarioConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+MovimientoInventarioConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(MovimientoInventarioBean.TraerMovimientoInventarioBeans(movimientoinventariosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,movimientoinventariosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,movimientoinventariosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoMovimientoInventarioActionPerformed(null);
					//this.generarExcelReporteMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,movimientoinventariosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,movimientoinventariosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,movimientoinventariosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesMovimientoInventarios(sAccionBusqueda,sTipoArchivoReporte,movimientoinventariosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteMovimientoInventarios(String sAccionBusqueda,String sTipoArchivoReporte,List<MovimientoInventario> movimientoinventariosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoinventario";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("MovimientoInventarios");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderMovimientoInventario("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(MovimientoInventario movimientoinventario : movimientoinventariosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			MovimientoInventarioConstantesFunciones.generarExcelReporteDataMovimientoInventario("NORMAL",row,workbook,movimientoinventario,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderMovimientoInventario(String sTipo,Row row,Workbook workbook) {
		
		MovimientoInventarioConstantesFunciones.generarExcelReporteHeaderMovimientoInventario(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalMovimientoInventarios(String sAccionBusqueda,String sTipoArchivoReporte,List<MovimientoInventario> movimientoinventariosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoinventario_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("MovimientoInventarios");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(MovimientoInventario movimientoinventario : movimientoinventariosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(MovimientoInventarioConstantesFunciones.getMovimientoInventarioDescripcion(movimientoinventario));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.gettransaccion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getfecha_entrega());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getnumero_secuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.gettipocambio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getestadomovimientoinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getnumero_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getguiaremision_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.gettransportista_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getporcentaje_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_SUMAN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_SUMAN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getsuman());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getvalor_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.gettotal_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_STOCK))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_STOCK);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getstock());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.gettotal_otro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getultimo_costo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getnumero_items());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_RETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_RETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getretencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_FLETE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FLETE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getflete());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getimpuesto());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.gettipotransaccionmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getcompra_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_GENERICOID))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_GENERICOID);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getgenerico_id());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_TIPOID))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TIPOID);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.gettipo_id());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getnumero_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoInventarioConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoinventario.getfecha());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesMovimientoInventarios(String sAccionBusqueda,String sTipoArchivoReporte,List<MovimientoInventario> movimientoinventariosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<MovimientoInventario> movimientoinventariosRespaldo=null;
		
		classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.movimientoinventarioLogic.setDatosCliente(this.datosCliente);
		this.movimientoinventarioLogic.setDatosDeep(this.datosDeep);
		this.movimientoinventarioLogic.setIsConDeep(true);
		
		movimientoinventariosRespaldo=this.movimientoinventarioLogic.getMovimientoInventarios();
		
		this.movimientoinventarioLogic.setMovimientoInventarios(movimientoinventariosParaReportes);	
		this.movimientoinventarioLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		movimientoinventariosParaReportes=this.movimientoinventarioLogic.getMovimientoInventarios();
		this.movimientoinventarioLogic.setMovimientoInventarios(movimientoinventariosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoinventario_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("MovimientoInventarios");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderMovimientoInventario("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(MovimientoInventario movimientoinventario : movimientoinventariosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderMovimientoInventario("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			MovimientoInventarioConstantesFunciones.generarExcelReporteDataMovimientoInventario("NORMAL",row,workbook,movimientoinventario,cellStyleDataAux);
		
			
			


				//DetalleMovimientoInventario
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO))) {

				if(movimientoinventario.getDetalleMovimientoInventarios()!=null && movimientoinventario.getDetalleMovimientoInventarios().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleMovimientoInventarioConstantesFunciones.generarExcelReporteHeaderDetalleMovimientoInventario("RELACIONADO",row,workbook);
				}

				if(movimientoinventario.getDetalleMovimientoInventarios()!=null) {
					i2=0;
					for(DetalleMovimientoInventario detallemovimientoinventario : movimientoinventario.getDetalleMovimientoInventarios()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleMovimientoInventarioConstantesFunciones.generarExcelReporteDataDetalleMovimientoInventario("RELACIONADO",row,workbook,detallemovimientoinventario,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(MovimientoInventarioConstantesFunciones.getMovimientoInventarioDescripcion(movimientoinventario));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoMovimientoInventario.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessMovimientoInventario() throws Exception {		
		this.startProcessMovimientoInventario(true);
	}
	
	public void startProcessMovimientoInventario(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasMovimientoInventario ,this.jPanelParametrosReportesMovimientoInventario, this.jScrollPanelDatosMovimientoInventario,this.jPanelPaginacionMovimientoInventario, this.jScrollPanelDatosEdicionMovimientoInventario, this.jPanelAccionesMovimientoInventario,this.jPanelAccionesFormularioMovimientoInventario,this.jmenuBarMovimientoInventario,this.jmenuBarDetalleMovimientoInventario,this.jTtoolBarMovimientoInventario,this.jTtoolBarDetalleMovimientoInventario);		
		
		final JTabbedPane jTabbedPaneBusquedasMovimientoInventario=this.jTabbedPaneBusquedasMovimientoInventario; 
		
		final JPanel jPanelParametrosReportesMovimientoInventario=this.jPanelParametrosReportesMovimientoInventario;
		//final JScrollPane jScrollPanelDatosMovimientoInventario=this.jScrollPanelDatosMovimientoInventario;
		final JTable jTableDatosMovimientoInventario=this.jTableDatosMovimientoInventario;		
		final JPanel jPanelPaginacionMovimientoInventario=this.jPanelPaginacionMovimientoInventario;
		//final JScrollPane jScrollPanelDatosEdicionMovimientoInventario=this.jScrollPanelDatosEdicionMovimientoInventario;
		final JPanel jPanelAccionesMovimientoInventario=this.jPanelAccionesMovimientoInventario;
		
		JPanel jPanelCamposAuxiliarMovimientoInventario=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarMovimientoInventario=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			jPanelCamposAuxiliarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jPanelCamposMovimientoInventario;
			jPanelAccionesFormularioAuxiliarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jPanelAccionesFormularioMovimientoInventario;
		}
		
		final JPanel jPanelCamposMovimientoInventario=jPanelCamposAuxiliarMovimientoInventario;
		final JPanel jPanelAccionesFormularioMovimientoInventario=jPanelAccionesFormularioAuxiliarMovimientoInventario;
		
		
		final JMenuBar jmenuBarMovimientoInventario=this.jmenuBarMovimientoInventario;
		final JToolBar jTtoolBarMovimientoInventario=this.jTtoolBarMovimientoInventario;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarMovimientoInventario=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarMovimientoInventario=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			jmenuBarDetalleAuxiliarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jmenuBarDetalleMovimientoInventario;
			jTtoolBarDetalleAuxiliarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jTtoolBarDetalleMovimientoInventario;
		}
		
		final JMenuBar jmenuBarDetalleMovimientoInventario=jmenuBarDetalleAuxiliarMovimientoInventario;
		final JToolBar jTtoolBarDetalleMovimientoInventario=jTtoolBarDetalleAuxiliarMovimientoInventario;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasMovimientoInventario;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesMovimientoInventario;
			processRunnable.jTableDatos=jTableDatosMovimientoInventario;
			processRunnable.jPanelCampos=jPanelCamposMovimientoInventario;
			processRunnable.jPanelPaginacion=jPanelPaginacionMovimientoInventario;
			processRunnable.jPanelAcciones=jPanelAccionesMovimientoInventario;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioMovimientoInventario;
			
			
			processRunnable.jmenuBar=jmenuBarMovimientoInventario;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleMovimientoInventario;
			processRunnable.jTtoolBar=jTtoolBarMovimientoInventario;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleMovimientoInventario;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasMovimientoInventario ,jPanelParametrosReportesMovimientoInventario,jTableDatosMovimientoInventario, /*jScrollPanelDatosMovimientoInventario,*/jPanelCamposMovimientoInventario,jPanelPaginacionMovimientoInventario, /*jScrollPanelDatosEdicionMovimientoInventario,*/ jPanelAccionesMovimientoInventario,jPanelAccionesFormularioMovimientoInventario,jmenuBarMovimientoInventario,jmenuBarDetalleMovimientoInventario,jTtoolBarMovimientoInventario,jTtoolBarDetalleMovimientoInventario);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasMovimientoInventario ,jPanelParametrosReportesMovimientoInventario, jScrollPanelDatosMovimientoInventario,jPanelPaginacionMovimientoInventario, jScrollPanelDatosEdicionMovimientoInventario, jPanelAccionesMovimientoInventario,jPanelAccionesFormularioMovimientoInventario,jmenuBarMovimientoInventario,jmenuBarDetalleMovimientoInventario,jTtoolBarMovimientoInventario,jTtoolBarDetalleMovimientoInventario);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessMovimientoInventario() {// throws Exception 
		this.finishProcessMovimientoInventario(true);
	}
	
	public void finishProcessMovimientoInventario(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasMovimientoInventario ,this.jPanelParametrosReportesMovimientoInventario, this.jScrollPanelDatosMovimientoInventario,this.jPanelPaginacionMovimientoInventario, this.jScrollPanelDatosEdicionMovimientoInventario, this.jPanelAccionesMovimientoInventario,this.jPanelAccionesFormularioMovimientoInventario,this.jmenuBarMovimientoInventario,this.jmenuBarDetalleMovimientoInventario,this.jTtoolBarMovimientoInventario,this.jTtoolBarDetalleMovimientoInventario);		
		
		final JTabbedPane jTabbedPaneBusquedasMovimientoInventario=this.jTabbedPaneBusquedasMovimientoInventario; 
		
		final JPanel jPanelParametrosReportesMovimientoInventario=this.jPanelParametrosReportesMovimientoInventario;
		//final JScrollPane jScrollPanelDatosMovimientoInventario=this.jScrollPanelDatosMovimientoInventario;
		final JTable jTableDatosMovimientoInventario=this.jTableDatosMovimientoInventario;		
		final JPanel jPanelPaginacionMovimientoInventario=this.jPanelPaginacionMovimientoInventario;
		//final JScrollPane jScrollPanelDatosEdicionMovimientoInventario=this.jScrollPanelDatosEdicionMovimientoInventario;
		final JPanel jPanelAccionesMovimientoInventario=this.jPanelAccionesMovimientoInventario;
		
		JPanel jPanelCamposAuxiliarMovimientoInventario=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarMovimientoInventario=new JPanel();
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			jPanelCamposAuxiliarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jPanelCamposMovimientoInventario;
			jPanelAccionesFormularioAuxiliarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jPanelAccionesFormularioMovimientoInventario;
		}
		
		final JPanel jPanelCamposMovimientoInventario=jPanelCamposAuxiliarMovimientoInventario;
		final JPanel jPanelAccionesFormularioMovimientoInventario=jPanelAccionesFormularioAuxiliarMovimientoInventario;
		
		
		final JMenuBar jmenuBarMovimientoInventario=this.jmenuBarMovimientoInventario;		
		final JToolBar jTtoolBarMovimientoInventario=this.jTtoolBarMovimientoInventario;
				
		JMenuBar jmenuBarDetalleAuxiliarMovimientoInventario=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarMovimientoInventario=new JToolBar();
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			jmenuBarDetalleAuxiliarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jmenuBarDetalleMovimientoInventario;
			jTtoolBarDetalleAuxiliarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jTtoolBarDetalleMovimientoInventario;		
		}
		
		final JMenuBar jmenuBarDetalleMovimientoInventario=jmenuBarDetalleAuxiliarMovimientoInventario;
		final JToolBar jTtoolBarDetalleMovimientoInventario=jTtoolBarDetalleAuxiliarMovimientoInventario;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasMovimientoInventario;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesMovimientoInventario;
			processRunnable.jTableDatos=jTableDatosMovimientoInventario;
			processRunnable.jPanelCampos=jPanelCamposMovimientoInventario;
			processRunnable.jPanelPaginacion=jPanelPaginacionMovimientoInventario;
			processRunnable.jPanelAcciones=jPanelAccionesMovimientoInventario;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioMovimientoInventario;
			
			
			processRunnable.jmenuBar=jmenuBarMovimientoInventario;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleMovimientoInventario;
			processRunnable.jTtoolBar=jTtoolBarMovimientoInventario;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleMovimientoInventario;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasMovimientoInventario ,jPanelParametrosReportesMovimientoInventario, jTableDatosMovimientoInventario,/*jScrollPanelDatosMovimientoInventario,*/jPanelCamposMovimientoInventario,jPanelPaginacionMovimientoInventario, /*jScrollPanelDatosEdicionMovimientoInventario,*/ jPanelAccionesMovimientoInventario,jPanelAccionesFormularioMovimientoInventario,jmenuBarMovimientoInventario,jmenuBarDetalleMovimientoInventario,jTtoolBarMovimientoInventario,jTtoolBarDetalleMovimientoInventario));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesMovimientoInventario(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarMovimientoInventario(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuMovimientoInventario(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarMovimientoInventario(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarMovimientoInventario,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleMovimientoInventario,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuMovimientoInventario(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarMovimientoInventario,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleMovimientoInventario,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.movimientoinventarioConstantesFunciones.getsFinalQueryMovimientoInventario();
		String  finalQueryPaginacionTodos=this.movimientoinventarioConstantesFunciones.getsFinalQueryMovimientoInventario();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=MovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesNoMovimientoInventario(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=MovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesMovimientoInventario(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,MovimientoInventarioConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.movimientoinventariosEliminados= new ArrayList<MovimientoInventario>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessMovimientoInventario();
		
				///*MovimientoInventarioSessionBean*/this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			
			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=MovimientoInventarioConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=MovimientoInventarioConstantesFunciones.getClassesForeignKeysOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/movimientoinventario."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			movimientoinventariosAux= new ArrayList<MovimientoInventario>();
			
				
			movimientoinventarioLogic.setDatosCliente(this.datosCliente);
			movimientoinventarioLogic.setDatosDeep(this.datosDeep);
			movimientoinventarioLogic.setIsConDeep(true);
			
			
			movimientoinventarioLogic.getMovimientoInventarioDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					movimientoinventarioLogic.getTodosMovimientoInventarios(finalQueryGlobal,pagination);
					
					//movimientoinventarioLogic.getTodosMovimientoInventariosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(movimientoinventarioLogic.getMovimientoInventarios()==null|| movimientoinventarioLogic.getMovimientoInventarios().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							movimientoinventariosAux= new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux= new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							movimientoinventarioLogic.getTodosMovimientoInventarios(finalQueryGlobal+"",this.pagination);												
							
							//movimientoinventarioLogic.getTodosMovimientoInventariosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteMovimientoInventarios("Todos",movimientoinventarioLogic.getMovimientoInventarios() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());					
							movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idMovimientoInventario=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idMovimientoInventario=this.idActual;
				
				} else if(this.idMovimientoInventarioActual!=null && this.idMovimientoInventarioActual!=0L) {
					idMovimientoInventario=idMovimientoInventarioActual;
				}
				
					
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndicePorId(idMovimientoInventario);
				
				this.movimientoinventarios=new ArrayList<MovimientoInventario>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					movimientoinventarioLogic.getEntity(idMovimientoInventario);
					
					//movimientoinventarioLogic.getEntityWithConnection(idMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
					movimientoinventarioLogic.getMovimientoInventarios().add(movimientoinventarioLogic.getMovimientoInventario());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventarios=new ArrayList<MovimientoInventario>();
					this.movimientoinventarios.add(movimientoinventario);
				}
				
				if(movimientoinventarioLogic.getMovimientoInventario()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdAsientoContable",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdAsientoContable",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCompra")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdCompra(finalQueryGlobal,pagination,id_compraFK_IdCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdCompra(finalQueryGlobal,pagination,id_compraFK_IdCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdCompra",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdCompra",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdEjercicio",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdEjercicio",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpleado")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdEmpleado",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdEmpleado",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdEmpresa",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdEmpresa",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoMovimientoInventario")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoMovimientoInventario(id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdEstadoMovimientoInventario(finalQueryGlobal,pagination,id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoMovimientoInventario(id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoMovimientoInventario(id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdEstadoMovimientoInventario(finalQueryGlobal,pagination,id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoMovimientoInventario(id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdEstadoMovimientoInventario(id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdEstadoMovimientoInventario",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdEstadoMovimientoInventario",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFactura")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdFactura",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdFactura",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdGuiaRemision")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdGuiaRemision(id_guia_remisionFK_IdGuiaRemision);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdGuiaRemision(finalQueryGlobal,pagination,id_guia_remisionFK_IdGuiaRemision);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdGuiaRemision(id_guia_remisionFK_IdGuiaRemision);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdGuiaRemision(id_guia_remisionFK_IdGuiaRemision);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdGuiaRemision(finalQueryGlobal,pagination,id_guia_remisionFK_IdGuiaRemision);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdGuiaRemision(id_guia_remisionFK_IdGuiaRemision);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdGuiaRemision(id_guia_remisionFK_IdGuiaRemision);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdGuiaRemision",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdGuiaRemision",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdModulo",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdModulo",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdPeriodo",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdPeriodo",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdSucursal",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdSucursal",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTransaccionModulo")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdTipoTransaccionModulo",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdTipoTransaccionModulo",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccion")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdTransaccion",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdTransaccion",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoinventarioLogic.getMovimientoInventariosFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoinventarioLogic.getMovimientoInventarios()==null||movimientoinventarioLogic.getMovimientoInventarios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoinventarios==null|| movimientoinventarios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventariosAux=new ArrayList<MovimientoInventario>();
						movimientoinventariosAux.addAll(movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventariosAux=new ArrayList<MovimientoInventario>();
							movimientoinventariosAux.addAll(movimientoinventarios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoinventarioLogic.getMovimientoInventariosFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoInventarioConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoInventarios("FK_IdUsuario",movimientoinventarioLogic.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoInventarios("FK_IdUsuario",movimientoinventarios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioLogic.setMovimientoInventarios(new ArrayList<MovimientoInventario>());
						movimientoinventarioLogic.getMovimientoInventarios().addAll(movimientoinventariosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarios=new ArrayList<MovimientoInventario>();
							movimientoinventarios.addAll(movimientoinventariosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesMovimientoInventario();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessMovimientoInventario();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=movimientoinventarioLogic.getMovimientoInventarios().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=movimientoinventarios.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=movimientoinventarioLogic.getMovimientoInventarios().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=movimientoinventarios.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(MovimientoInventario movimientoinventario) {
		Boolean permite=true;
		
		if(this.movimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=MovimientoInventarioConstantesFunciones.getOrderByListaMovimientoInventario();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=MovimientoInventarioConstantesFunciones.getOrderByListaMovimientoInventario();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoInventario movimientoinventario:movimientoinventarioLogic.getMovimientoInventarios()) {
				if(movimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
					movimientoinventarioTotales=movimientoinventario;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoInventario movimientoinventario:this.movimientoinventarios) {
				if(movimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
					movimientoinventarioTotales=movimientoinventario;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.movimientoinventarioAux=new MovimientoInventario();
			this.movimientoinventarioAux.setsType(Constantes2.S_TOTALES);
			this.movimientoinventarioAux.setIsNew(false);
			this.movimientoinventarioAux.setIsChanged(false);
			this.movimientoinventarioAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				MovimientoInventarioConstantesFunciones.TotalizarValoresFilaMovimientoInventario(this.movimientoinventarioLogic.getMovimientoInventarios(),this.movimientoinventarioAux);
				
				this.movimientoinventarioLogic.getMovimientoInventarios().add(this.movimientoinventarioAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				MovimientoInventarioConstantesFunciones.TotalizarValoresFilaMovimientoInventario(this.movimientoinventarios,this.movimientoinventarioAux);
				
				this.movimientoinventarios.add(this.movimientoinventarioAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		movimientoinventarioTotales=new MovimientoInventario();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.movimientoinventarioLogic.getMovimientoInventarios().remove(movimientoinventarioTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.movimientoinventarios.remove(movimientoinventarioTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		movimientoinventarioTotales=new MovimientoInventario();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoInventario movimientoinventario:movimientoinventarioLogic.getMovimientoInventarios()) {
				if(movimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
					movimientoinventarioTotales=movimientoinventario;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				MovimientoInventarioConstantesFunciones.TotalizarValoresFilaMovimientoInventario(this.movimientoinventarioLogic.getMovimientoInventarios(),movimientoinventarioTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoInventario movimientoinventario:this.movimientoinventarios) {
				if(movimientoinventario.getsType().equals(Constantes2.S_TOTALES)) {
					movimientoinventarioTotales=movimientoinventario;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				MovimientoInventarioConstantesFunciones.TotalizarValoresFilaMovimientoInventario(this.movimientoinventarios,movimientoinventarioTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getMovimientoInventariosFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdCompra()throws Exception {
		try {
			sAccionBusqueda="FK_IdCompra";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdEstadoMovimientoInventario()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoMovimientoInventario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdGuiaRemision()throws Exception {
		try {
			sAccionBusqueda="FK_IdGuiaRemision";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdTipoCambio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCambio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdTipoTransaccionModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTransaccionModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdTransaccion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransaccion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdTransportista()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransportista";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoInventariosFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getMovimientoInventariosFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdAsientoContable(String sFinalQuery,Long id_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdAsientoContable(sFinalQuery,this.pagination,id_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdCompra(String sFinalQuery,Long id_compra)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdCompra(sFinalQuery,this.pagination,id_compra);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdEstadoMovimientoInventario(String sFinalQuery,Long id_estado_movimiento_inventario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdEstadoMovimientoInventario(sFinalQuery,this.pagination,id_estado_movimiento_inventario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdFactura(String sFinalQuery,Long id_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdFactura(sFinalQuery,this.pagination,id_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdGuiaRemision(String sFinalQuery,Long id_guia_remision)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdGuiaRemision(sFinalQuery,this.pagination,id_guia_remision);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdModulo(String sFinalQuery,Long id_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdModulo(sFinalQuery,this.pagination,id_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdTipoCambio(String sFinalQuery,Long id_tipo_cambio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdTipoCambio(sFinalQuery,this.pagination,id_tipo_cambio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdTipoTransaccionModulo(String sFinalQuery,Long id_tipo_transaccion_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdTipoTransaccionModulo(sFinalQuery,this.pagination,id_tipo_transaccion_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdTransaccion(String sFinalQuery,Long id_transaccion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdTransaccion(sFinalQuery,this.pagination,id_transaccion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdTransportista(String sFinalQuery,Long id_transportista)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdTransportista(sFinalQuery,this.pagination,id_transportista);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoInventariosFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLogic.getMovimientoInventariosFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosMovimientoInventario() {
		this.isPermisoTodoMovimientoInventario=false;
		this.isPermisoNuevoMovimientoInventario=false;
		this.isPermisoActualizarMovimientoInventario=false;
		this.isPermisoActualizarOriginalMovimientoInventario=false;
		this.isPermisoEliminarMovimientoInventario=false;
		this.isPermisoGuardarCambiosMovimientoInventario=false;
		this.isPermisoConsultaMovimientoInventario=false;
		this.isPermisoBusquedaMovimientoInventario=false;
		this.isPermisoReporteMovimientoInventario=false;		
		this.isPermisoOrdenMovimientoInventario=false;		
		this.isPermisoPaginacionMedioMovimientoInventario=false;		
		this.isPermisoPaginacionAltoMovimientoInventario=false;
		this.isPermisoPaginacionTodoMovimientoInventario=false;
		this.isPermisoCopiarMovimientoInventario=false;		
		this.isPermisoVerFormMovimientoInventario=false;		
		this.isPermisoDuplicarMovimientoInventario=false;		
		this.isPermisoOrdenMovimientoInventario=false;		
	}
	
	public void setPermisosUsuarioMovimientoInventario(Boolean isPermiso) {
		this.isPermisoTodoMovimientoInventario=isPermiso;
		this.isPermisoNuevoMovimientoInventario=isPermiso;
		this.isPermisoActualizarMovimientoInventario=isPermiso;
		this.isPermisoActualizarOriginalMovimientoInventario=isPermiso;
		this.isPermisoEliminarMovimientoInventario=isPermiso;
		this.isPermisoGuardarCambiosMovimientoInventario=isPermiso;
		this.isPermisoConsultaMovimientoInventario=isPermiso;
		this.isPermisoBusquedaMovimientoInventario=isPermiso;
		this.isPermisoReporteMovimientoInventario=isPermiso;
		this.isPermisoOrdenMovimientoInventario=isPermiso;		
		this.isPermisoPaginacionMedioMovimientoInventario=isPermiso;		
		this.isPermisoPaginacionAltoMovimientoInventario=isPermiso;		
		this.isPermisoPaginacionTodoMovimientoInventario=isPermiso;		
		this.isPermisoCopiarMovimientoInventario=isPermiso;		
		this.isPermisoVerFormMovimientoInventario=isPermiso;		
		this.isPermisoDuplicarMovimientoInventario=isPermiso;
		this.isPermisoOrdenMovimientoInventario=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioMovimientoInventario(Boolean isPermiso) {
		//this.isPermisoTodoMovimientoInventario=isPermiso;
		this.isPermisoNuevoMovimientoInventario=isPermiso;
		this.isPermisoActualizarMovimientoInventario=isPermiso;
		this.isPermisoActualizarOriginalMovimientoInventario=isPermiso;
		this.isPermisoEliminarMovimientoInventario=isPermiso;
		this.isPermisoGuardarCambiosMovimientoInventario=isPermiso;
		//this.isPermisoConsultaMovimientoInventario=isPermiso;
		//this.isPermisoBusquedaMovimientoInventario=isPermiso;
		//this.isPermisoReporteMovimientoInventario=isPermiso;
		//this.isPermisoOrdenMovimientoInventario=isPermiso;		
		//this.isPermisoPaginacionMedioMovimientoInventario=isPermiso;		
		//this.isPermisoPaginacionAltoMovimientoInventario=isPermiso;		
		//this.isPermisoPaginacionTodoMovimientoInventario=isPermiso;		
		//this.isPermisoCopiarMovimientoInventario=isPermiso;		
		//this.isPermisoDuplicarMovimientoInventario=isPermiso;
		//this.isPermisoOrdenMovimientoInventario=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioMovimientoInventarioClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION);
		
		if(MovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetalleMovimientoInventario=false;
		this.isTienePermisosDetalleMovimientoInventario=this.verificarGetPermisosUsuarioOpcionMovimientoInventarioClaseRelacionada(this.opcionsRelacionadas,DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebMovimientoInventario(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioMovimientoInventarioClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetalleMovimientoInventario=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioMovimientoInventarioClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionMovimientoInventarioClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioMovimientoInventarioClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetalleMovimientoInventario && this.jInternalFrameDetalleFormMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.remove(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioMovimientoInventario() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(MovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, MovimientoInventarioConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoMovimientoInventario=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarMovimientoInventario=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalMovimientoInventario=this.isPermisoActualizarMovimientoInventario;
			this.isPermisoEliminarMovimientoInventario=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosMovimientoInventario=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaMovimientoInventario=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaMovimientoInventario=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoMovimientoInventario=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteMovimientoInventario=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenMovimientoInventario=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioMovimientoInventario=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoMovimientoInventario=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoMovimientoInventario=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarMovimientoInventario=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormMovimientoInventario=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarMovimientoInventario=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenMovimientoInventario=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosMovimientoInventario.setToolTipText(this.jTableDatosMovimientoInventario.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioMovimientoInventario(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioMovimientoInventario(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(MovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(MovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioMovimientoInventario() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetalleMovimientoInventario && this.movimientoinventarioConstantesFunciones.mostrarDetalleMovimientoInventarioMovimientoInventario && !MovimientoInventarioConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Movimiento Inventario");
			reporte.setsDescripcion("Detalle Movimiento Inventario");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyMovimientoInventarioListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.modulosForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.transaccionsForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.tipocambiosForeignKey=new ArrayList();
				this.estadomovimientoinventariosForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.guiaremisionsForeignKey=new ArrayList();
				this.transportistasForeignKey=new ArrayList();
				this.tipotransaccionmodulosForeignKey=new ArrayList();
				this.comprasForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyMovimientoInventarioListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(MovimientoInventarioJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyMovimientoInventarioListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoMovimientoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyGuiaRemisionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCambioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoMovimientoInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadomovimientoinventariosForeignKey==null||this.estadomovimientoinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoMovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoMovimientoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoMovimientoInventarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoMovimientoInventarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoMovimientoInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyGuiaRemisionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.guiaremisionsForeignKey==null||this.guiaremisionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=GuiaRemisionConstantesFunciones.getArrayColumnasGlobalesGuiaRemision(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,GuiaRemisionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=GuiaRemisionConstantesFunciones.SFINALQUERY;

				this.cargarCombosGuiaRemisionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportistaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransportistaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCompraListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.comprasForeignKey==null||this.comprasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CompraConstantesFunciones.getArrayColumnasGlobalesCompra(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CompraConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CompraConstantesFunciones.SFINALQUERY;

				this.cargarCombosComprasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyMovimientoInventarioListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			MovimientoInventarioParameterReturnGeneral movimientoinventarioReturnGeneral=new MovimientoInventarioParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_empresaMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_empresaMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_sucursalMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_sucursalMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_moduloMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_moduloMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_ejercicioMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_ejercicioMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_periodoMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_periodoMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_anioMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_anioMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_mesMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_mesMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_usuarioMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_usuarioMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalTransaccion="";

				if(((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_transaccionMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_transaccionMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

						finalQueryGlobalTransaccion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccion=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccion, "");
						finalQueryGlobalTransaccion+=TransaccionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccion=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidTransaccionActual();
					}
				} else {
					finalQueryGlobalTransaccion="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_monedaMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_monedaMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalTipoCambio="";

				if(((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_tipo_cambioMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_tipo_cambioMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCambio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCambio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCambio, "");
						finalQueryGlobalTipoCambio+=TipoCambioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCambio=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidTipoCambioActual();
					}
				} else {
					finalQueryGlobalTipoCambio="NONE";
				}


				String finalQueryGlobalEstadoMovimientoInventario="";

				if(((this.estadomovimientoinventariosForeignKey==null||this.estadomovimientoinventariosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_estado_movimiento_inventarioMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_estado_movimiento_inventarioMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoMovimientoInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoMovimientoInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoMovimientoInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoMovimientoInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoMovimientoInventarioConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoMovimientoInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoMovimientoInventario, "");
						finalQueryGlobalEstadoMovimientoInventario+=EstadoMovimientoInventarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoMovimientoInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoMovimientoInventario=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidEstadoMovimientoInventarioActual();
					}
				} else {
					finalQueryGlobalEstadoMovimientoInventario="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_empleadoMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_empleadoMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_formatoMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_formatoMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_facturaMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_facturaMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalGuiaRemision="";

				if(((this.guiaremisionsForeignKey==null||this.guiaremisionsForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_guia_remisionMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_guia_remisionMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionGuiaRemision()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=GuiaRemisionConstantesFunciones.getArrayColumnasGlobalesGuiaRemision(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalGuiaRemision=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,GuiaRemisionConstantesFunciones.TABLENAME);

						finalQueryGlobalGuiaRemision=Funciones.GetFinalQueryAppend(finalQueryGlobalGuiaRemision, "");
						finalQueryGlobalGuiaRemision+=GuiaRemisionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosGuiaRemisionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalGuiaRemision=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidGuiaRemisionActual();
					}
				} else {
					finalQueryGlobalGuiaRemision="NONE";
				}


				String finalQueryGlobalTransportista="";

				if(((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_transportistaMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_transportistaMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransportista=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

						finalQueryGlobalTransportista=Funciones.GetFinalQueryAppend(finalQueryGlobalTransportista, "");
						finalQueryGlobalTransportista+=TransportistaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransportista=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidTransportistaActual();
					}
				} else {
					finalQueryGlobalTransportista="NONE";
				}


				String finalQueryGlobalTipoTransaccionModulo="";

				if(((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_tipo_transaccion_moduloMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_tipo_transaccion_moduloMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTransaccionModulo, "");
						finalQueryGlobalTipoTransaccionModulo+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTransaccionModulo=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidTipoTransaccionModuloActual();
					}
				} else {
					finalQueryGlobalTipoTransaccionModulo="NONE";
				}


				String finalQueryGlobalCompra="";

				if(((this.comprasForeignKey==null||this.comprasForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_compraMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_compraMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCompra()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CompraConstantesFunciones.getArrayColumnasGlobalesCompra(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCompra=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CompraConstantesFunciones.TABLENAME);

						finalQueryGlobalCompra=Funciones.GetFinalQueryAppend(finalQueryGlobalCompra, "");
						finalQueryGlobalCompra+=CompraConstantesFunciones.SFINALQUERY;

						//this.cargarCombosComprasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCompra=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidCompraActual();
					}
				} else {
					finalQueryGlobalCompra="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.movimientoinventarioConstantesFunciones.cargarid_asiento_contableMovimientoInventario)
					 || (this.esRecargarFks && this.movimientoinventarioConstantesFunciones.cargarid_asiento_contableMovimientoInventario)) {

					if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+movimientoinventarioSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				movimientoinventarioReturnGeneral=movimientoinventarioLogic.cargarCombosLoteForeignKeyMovimientoInventario(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalModulo,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalUsuario,finalQueryGlobalTransaccion,finalQueryGlobalMoneda,finalQueryGlobalTipoCambio,finalQueryGlobalEstadoMovimientoInventario,finalQueryGlobalEmpleado,finalQueryGlobalFormato,finalQueryGlobalFactura,finalQueryGlobalGuiaRemision,finalQueryGlobalTransportista,finalQueryGlobalTipoTransaccionModulo,finalQueryGlobalCompra,finalQueryGlobalAsientoContable);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=movimientoinventarioReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=movimientoinventarioReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=movimientoinventarioReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=movimientoinventarioReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=movimientoinventarioReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=movimientoinventarioReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=movimientoinventarioReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=movimientoinventarioReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalTransaccion.equals("NONE")) {
				this.transaccionsForeignKey=movimientoinventarioReturnGeneral.gettransaccionsForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=movimientoinventarioReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalTipoCambio.equals("NONE")) {
				this.tipocambiosForeignKey=movimientoinventarioReturnGeneral.gettipocambiosForeignKey();
			}

			if(!finalQueryGlobalEstadoMovimientoInventario.equals("NONE")) {
				this.estadomovimientoinventariosForeignKey=movimientoinventarioReturnGeneral.getestadomovimientoinventariosForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=movimientoinventarioReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=movimientoinventarioReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=movimientoinventarioReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalGuiaRemision.equals("NONE")) {
				this.guiaremisionsForeignKey=movimientoinventarioReturnGeneral.getguiaremisionsForeignKey();
			}

			if(!finalQueryGlobalTransportista.equals("NONE")) {
				this.transportistasForeignKey=movimientoinventarioReturnGeneral.gettransportistasForeignKey();
			}

			if(!finalQueryGlobalTipoTransaccionModulo.equals("NONE")) {
				this.tipotransaccionmodulosForeignKey=movimientoinventarioReturnGeneral.gettipotransaccionmodulosForeignKey();
			}

			if(!finalQueryGlobalCompra.equals("NONE")) {
				this.comprasForeignKey=movimientoinventarioReturnGeneral.getcomprasForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=movimientoinventarioReturnGeneral.getasientocontablesForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyMovimientoInventario()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyTransaccion();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyTipoCambio();
			this.addItemDefectoCombosForeignKeyEstadoMovimientoInventario();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyGuiaRemision();
			this.addItemDefectoCombosForeignKeyTransportista();
			this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
			this.addItemDefectoCombosForeignKeyCompra();
			this.addItemDefectoCombosForeignKeyAsientoContable();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccion()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				Transaccion transaccion=new Transaccion();
				TransaccionConstantesFunciones.setTransaccionDescripcion(transaccion,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccion.setId(null);

				if(!TransaccionConstantesFunciones.ExisteEnLista(this.transaccionsForeignKey,transaccion,true)) {

					this.transaccionsForeignKey.add(0,transaccion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCambio()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				TipoCambio tipocambio=new TipoCambio();
				TipoCambioConstantesFunciones.setTipoCambioDescripcion(tipocambio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocambio.setId(null);

				if(!TipoCambioConstantesFunciones.ExisteEnLista(this.tipocambiosForeignKey,tipocambio,true)) {

					this.tipocambiosForeignKey.add(0,tipocambio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoMovimientoInventario()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoMovimientoInventario()) {
				EstadoMovimientoInventario estadomovimientoinventario=new EstadoMovimientoInventario();
				EstadoMovimientoInventarioConstantesFunciones.setEstadoMovimientoInventarioDescripcion(estadomovimientoinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadomovimientoinventario.setId(null);

				if(!EstadoMovimientoInventarioConstantesFunciones.ExisteEnLista(this.estadomovimientoinventariosForeignKey,estadomovimientoinventario,true)) {

					this.estadomovimientoinventariosForeignKey.add(0,estadomovimientoinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyGuiaRemision()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionGuiaRemision()) {
				GuiaRemision guiaremision=new GuiaRemision();
				GuiaRemisionConstantesFunciones.setGuiaRemisionDescripcion(guiaremision,Constantes.SMENSAJE_ESCOJA_OPCION);
				guiaremision.setId(null);

				if(!GuiaRemisionConstantesFunciones.ExisteEnLista(this.guiaremisionsForeignKey,guiaremision,true)) {

					this.guiaremisionsForeignKey.add(0,guiaremision);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransportista()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				Transportista transportista=new Transportista();
				TransportistaConstantesFunciones.setTransportistaDescripcion(transportista,Constantes.SMENSAJE_ESCOJA_OPCION);
				transportista.setId(null);

				if(!TransportistaConstantesFunciones.ExisteEnLista(this.transportistasForeignKey,transportista,true)) {

					this.transportistasForeignKey.add(0,transportista);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTransaccionModulo()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				TipoTransaccionModulo tipotransaccionmodulo=new TipoTransaccionModulo();
				TipoTransaccionModuloConstantesFunciones.setTipoTransaccionModuloDescripcion(tipotransaccionmodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotransaccionmodulo.setId(null);

				if(!TipoTransaccionModuloConstantesFunciones.ExisteEnLista(this.tipotransaccionmodulosForeignKey,tipotransaccionmodulo,true)) {

					this.tipotransaccionmodulosForeignKey.add(0,tipotransaccionmodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCompra()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionCompra()) {
				Compra compra=new Compra();
				CompraConstantesFunciones.setCompraDescripcion(compra,Constantes.SMENSAJE_ESCOJA_OPCION);
				compra.setId(null);

				if(!CompraConstantesFunciones.ExisteEnLista(this.comprasForeignKey,compra,true)) {

					this.comprasForeignKey.add(0,compra);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.movimientoinventarioSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyMovimientoInventario()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyTransaccion("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyMovimientoInventario(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyTransaccion(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyTransaccion(JComboBox jComboBoxTransaccionGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Transaccion transaccionLocal=(Transaccion)jComboBoxTransaccionGenerico.getSelectedItem();

			if(transaccionLocal!=null  && transaccionLocal.getId()!=null  && transaccionLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_transaccion="+transaccionLocal.getId();
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyTransaccion(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.addItemListener(new ComboBoxItemListener(this,"id_transaccionMovimientoInventario"));
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"id_transaccionMovimientoInventario"));
					}
				} else {
					if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.addActionListener(new ComboBoxActionListener(this,"id_transaccionMovimientoInventario"));
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"id_transaccionMovimientoInventario"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario"));

						this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario"));

					} else {
						this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario"));

						this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyMovimientoInventario()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualModuloForeignKey(this.moduloActual.getId(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.movimientoinventario.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.movimientoinventario.setfecha_entrega(this.parametroGeneralUsuario.getfecha_sistema());
				this.movimientoinventario.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyMovimientoInventario();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyMovimientoInventario(MovimientoInventario movimientoinventario)throws Exception {	
		try {
			
			this.setActualTransaccionForeignKey(movimientoinventario.getid_transaccion(),false,"Formulario");
			this.setActualTipoCambioForeignKey(movimientoinventario.getid_tipo_cambio(),false,"Formulario");
			this.setActualEstadoMovimientoInventarioForeignKey(movimientoinventario.getid_estado_movimiento_inventario(),false,"Formulario");
			this.setActualEmpleadoForeignKey(movimientoinventario.getid_empleado(),false,"Formulario");
			this.setActualFormatoForeignKey(movimientoinventario.getid_formato(),false,"Formulario");
			this.setActualFacturaForeignKey(movimientoinventario.getid_factura(),false,"Formulario");
			this.setActualGuiaRemisionForeignKey(movimientoinventario.getid_guia_remision(),false,"Formulario");
			this.setActualTransportistaForeignKey(movimientoinventario.getid_transportista(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(movimientoinventario.getid_tipo_transaccion_modulo(),false,"Formulario");
			this.setActualCompraForeignKey(movimientoinventario.getid_compra(),false,"Formulario");
			this.setActualAsientoContableForeignKey(movimientoinventario.getid_asiento_contable(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyMovimientoInventario(MovimientoInventario movimientoinventario,String sTipoEvento)throws Exception {	
		try {
			
			

				if(movimientoinventario.getTipoCambio()!=null && !sTipoEvento.equals("id_tipo_cambioMovimientoInventario")) { //sTipoEvento Evita Bucle Infinito

					this.tipocambiosForeignKey=new ArrayList<TipoCambio>();
					this.tipocambiosForeignKey.add(movimientoinventario.getTipoCambio());

					this.addItemDefectoCombosForeignKeyTipoCambio();
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				if(movimientoinventario.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoMovimientoInventario")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(movimientoinventario.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				if(movimientoinventario.getFactura()!=null && !sTipoEvento.equals("id_facturaMovimientoInventario")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(movimientoinventario.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				if(movimientoinventario.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableMovimientoInventario")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(movimientoinventario.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyMovimientoInventario()throws Exception {	
		try {
			
			this.setActualTransaccionForeignKey(this.movimientoinventarioConstantesFunciones.getid_transaccion(),false,"Formulario");
			this.setActualTipoCambioForeignKey(this.movimientoinventarioConstantesFunciones.getid_tipo_cambio(),false,"Formulario");
			this.setActualEstadoMovimientoInventarioForeignKey(this.movimientoinventarioConstantesFunciones.getid_estado_movimiento_inventario(),false,"Formulario");
			this.setActualEmpleadoForeignKey(this.movimientoinventarioConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualFormatoForeignKey(this.movimientoinventarioConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualFacturaForeignKey(this.movimientoinventarioConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualGuiaRemisionForeignKey(this.movimientoinventarioConstantesFunciones.getid_guia_remision(),false,"Formulario");
			this.setActualTransportistaForeignKey(this.movimientoinventarioConstantesFunciones.getid_transportista(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(this.movimientoinventarioConstantesFunciones.getid_tipo_transaccion_modulo(),false,"Formulario");
			this.setActualCompraForeignKey(this.movimientoinventarioConstantesFunciones.getid_compra(),false,"Formulario");
			this.setActualAsientoContableForeignKey(this.movimientoinventarioConstantesFunciones.getid_asiento_contable(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyMovimientoInventario()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyMovimientoInventario()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyMovimientoInventario()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroMovimientoInventario()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyMovimientoInventario()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameTransaccionsForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameTipoCambiosForeignKey("Todos");
			this.cargarCombosFrameEstadoMovimientoInventariosForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameGuiaRemisionsForeignKey("Todos");
			this.cargarCombosFrameTransportistasForeignKey("Todos");
			this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
			this.cargarCombosFrameComprasForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyMovimientoInventario(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoMovimientoInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameGuiaRemisionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameComprasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyMovimientoInventario()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

















	public void recargarFormMovimientoInventarioTransaccion(JComboBox<?> jComboBoxGenericoTransaccion,String sFormularioTipoBusqueda) throws Exception {

	}






















	
	

	public MovimientoInventarioBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public MovimientoInventarioBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public MovimientoInventarioBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean(); 
		this.movimientoinventarioConstantesFunciones=new MovimientoInventarioConstantesFunciones(); 
		this.movimientoinventarioBean=new MovimientoInventario();//(this.movimientoinventarioConstantesFunciones); 		
		this.movimientoinventarioReturnGeneral=new MovimientoInventarioParameterReturnGeneral(); 
		
		this.movimientoinventarioSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.movimientoinventarioSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public MovimientoInventarioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public MovimientoInventarioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public MovimientoInventarioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessMovimientoInventario(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.movimientoinventarioConstantesFunciones=new MovimientoInventarioConstantesFunciones(); 
			this.movimientoinventarioBean=new MovimientoInventario();//this.movimientoinventarioConstantesFunciones); 			
			this.movimientoinventarioReturnGeneral=new MovimientoInventarioParameterReturnGeneral(); 
		
			MovimientoInventarioBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Movimiento Inventario Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.movimientoinventario=new MovimientoInventario();
			this.movimientoinventarios = new ArrayList<MovimientoInventario>();
			this.movimientoinventariosAux = new ArrayList<MovimientoInventario>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic=new MovimientoInventarioLogic();
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			//this.movimientoinventarioSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.movimientoinventarioSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormMovimientoInventario);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoMovimientoInventario);	
					}
					
					if(this.jInternalFrameImportacionMovimientoInventario!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionMovimientoInventario);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByMovimientoInventario!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByMovimientoInventario);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormMovimientoInventario);
				this.jInternalFrameDetalleFormMovimientoInventario.setVisible(false);
				this.jInternalFrameDetalleFormMovimientoInventario.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoMovimientoInventario);
					this.jInternalFrameReporteDinamicoMovimientoInventario.setVisible(false);
					this.jInternalFrameReporteDinamicoMovimientoInventario.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionMovimientoInventario!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionMovimientoInventario);
					this.jInternalFrameImportacionMovimientoInventario.setVisible(false);
					this.jInternalFrameImportacionMovimientoInventario.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByMovimientoInventario!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByMovimientoInventario);
					this.jInternalFrameOrderByMovimientoInventario.setVisible(false);
					this.jInternalFrameOrderByMovimientoInventario.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idMovimientoInventarioActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=MovimientoInventarioConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.movimientoinventarioReturnGeneral=new MovimientoInventarioParameterReturnGeneral();
			
			this.movimientoinventarioParameterGeneral=new MovimientoInventarioParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.movimientoinventarioLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(MovimientoInventarioJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetalleMovimientoInventarioConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,MovimientoInventarioConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),this.movimientoinventarioSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,MovimientoInventarioConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),this.movimientoinventarioSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoMovimientoInventario=false;
			this.isVisibilidadCeldaDuplicarMovimientoInventario=true;
			this.isVisibilidadCeldaCopiarMovimientoInventario=true;
			this.isVisibilidadCeldaVerFormMovimientoInventario=true;
			this.isVisibilidadCeldaOrdenMovimientoInventario=true;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
			this.isVisibilidadCeldaModificarMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCompra=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoMovimientoInventario=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdGuiaRemision=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoCambio=true;
			this.isVisibilidadFK_IdTipoTransaccionModulo=true;
			this.isVisibilidadFK_IdTransaccion=true;
			this.isVisibilidadFK_IdTransportista=true;
			this.isVisibilidadFK_IdUsuario=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosMovimientoInventario();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioMovimientoInventario(false);
			
			this.setPermisosUsuarioMovimientoInventario();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado() 
				|| (this.movimientoinventarioSessionBean.getEsGuardarRelacionado() && this.movimientoinventarioSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioMovimientoInventarioClasesRelacionadas();
			}
			
			if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioMovimientoInventarioClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosMovimientoInventario();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualMovimientoInventario();
			}
			
			if(!this.isPermisoBusquedaMovimientoInventario) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioMovimientoInventario,this.isPermisoPaginacionMedioMovimientoInventario,this.isPermisoPaginacionTodoMovimientoInventario);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(MovimientoInventarioConstantesFunciones.getTiposSeleccionarMovimientoInventario());
				
				this.tiposColumnasSelect=MovimientoInventarioConstantesFunciones.getTiposSeleccionarMovimientoInventario(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectMovimientoInventario();				
				//this.tiposRelacionesSelect=MovimientoInventarioConstantesFunciones.getTiposRelacionesMovimientoInventario(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioMovimientoInventario();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioMovimientoInventario(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioMovimientoInventario(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesMovimientoInventario() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detallemovimientoinventarioLogic=new DetalleMovimientoInventarioLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.moduloLogic=new ModuloLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.transaccionLogic=new TransaccionLogic();
			this.monedaLogic=new MonedaLogic();
			this.tipocambioLogic=new TipoCambioLogic();
			this.estadomovimientoinventarioLogic=new EstadoMovimientoInventarioLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.formatoLogic=new FormatoLogic();
			this.facturaLogic=new FacturaLogic();
			this.guiaremisionLogic=new GuiaRemisionLogic();
			this.transportistaLogic=new TransportistaLogic();
			this.tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();
			this.compraLogic=new CompraLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				movimientoinventarioImplementable= (MovimientoInventarioImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+MovimientoInventarioConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				movimientoinventarioImplementableHome= (MovimientoInventarioImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+MovimientoInventarioConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.movimientoinventarios= new ArrayList<MovimientoInventario>();
			this.movimientoinventariosEliminados= new ArrayList<MovimientoInventario>();
						
			this.isEsNuevoMovimientoInventario=false;
			this.esParaAccionDesdeFormularioMovimientoInventario=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idTipoCambioActual=0L;
			this.idEmpleadoActual=0L;
			this.idFacturaActual=0L;
			this.idAsientoContableActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.transaccionsForeignKey=new ArrayList<Transaccion>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>() ;
			this.estadomovimientoinventariosForeignKey=new ArrayList<EstadoMovimientoInventario>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.guiaremisionsForeignKey=new ArrayList<GuiaRemision>() ;
			this.transportistasForeignKey=new ArrayList<Transportista>() ;
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>() ;
			this.comprasForeignKey=new ArrayList<Compra>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyMovimientoInventario(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroMovimientoInventario();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			MovimientoInventarioBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=MovimientoInventarioConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesMovimientoInventario("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingMovimientoInventario(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioMovimientoInventario();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioMovimientoInventario();
			}
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasMovimientoInventario.getTabCount(); i++) {
					this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessMovimientoInventario(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga MovimientoInventario: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectMovimientoInventario() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesMovimientoInventario")) {
				iIndex=this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Movimiento Inventarios")) {
					if(!DetalleMovimientoInventarioJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessMovimientoInventario();

						this.cargarParteTabPanelRelacionadaDetalleMovimientoInventario(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessMovimientoInventario();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetalleMovimientoInventario(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormMovimientoInventario.cargarSessionConBeanSwingJInternalFrameDetalleMovimientoInventario(false,true,iIndex);
		this.jButtonDetalleMovimientoInventarioActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleMovimientoInventario();

		//this.jTabbedPaneRelacionesMovimientoInventario.updateUI();
		//this.jTabbedPaneRelacionesMovimientoInventario.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesMovimientoInventario.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetalleMovimientoInventario")) {
				int row=this.jTableDatosMovimientoInventario.getSelectedRow();
				jButtonDetalleMovimientoInventarioActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Detalle Movimiento Inventario")) {

					if(this.isTienePermisosDetalleMovimientoInventario && this.movimientoinventarioConstantesFunciones.mostrarDetalleMovimientoInventarioMovimientoInventario && !MovimientoInventarioConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Movimiento Inventarios"+"("+DetalleMovimientoInventarioConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Movimiento Inventarios");

						if(movimientoinventarioConstantesFunciones.resaltarDetalleMovimientoInventarioMovimientoInventario!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(movimientoinventarioConstantesFunciones.resaltarDetalleMovimientoInventarioMovimientoInventario);
						}

						jmenuItem.setEnabled(this.movimientoinventarioConstantesFunciones.activarDetalleMovimientoInventarioMovimientoInventario);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleMovimientoInventario"));

						

						this.jInternalFrameDetalleFormMovimientoInventario.jmenuDetalleMovimientoInventario.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyMovimientoInventario(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyMovimientoInventario(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyMovimientoInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyMovimientoInventarioListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyMovimientoInventario();
		
		this.cargarCombosFrameForeignKeyMovimientoInventario();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyMovimientoInventario();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyMovimientoInventario();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaTransaccion(this.transaccionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoMovimientoInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoMovimientoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoMovimientoInventario();
				this.cargarCombosFrameEstadoMovimientoInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaEstadoMovimientoInventario(this.estadomovimientoinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyGuiaRemision(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyGuiaRemisionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyGuiaRemision();
				this.cargarCombosFrameGuiaRemisionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaGuiaRemision(this.guiaremisionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportista(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaTransportista(this.transportistasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaTipoTransaccionModulo(this.tipotransaccionmodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCompra(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCompra();
				this.cargarCombosFrameComprasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaCompra(this.comprasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTransaccion("Todos");
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoMovimientoInventarioActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			
			if(jTableDatosMovimientoInventario.getRowCount()>=1) {
				jTableDatosMovimientoInventario.removeRowSelectionInterval(0, jTableDatosMovimientoInventario.getRowCount()-1);						
			}
			
			this.isEsNuevoMovimientoInventario=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoMovimientoInventario(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesMovimientoInventario(true);			
			//this.movimientoinventario=new MovimientoInventario();
			//this.movimientoinventario.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesMovimientoInventario(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualMovimientoInventario() ;
			
			if(MovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleMovimientoInventario(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.movimientoinventario);	
			this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);				
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar MovimientoInventario: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarMovimientoInventarioActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosMovimientoInventario.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosMovimientoInventario.getSelectedRows().length;			
			}
			
			movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoMovimientoInventario--;			
				//MovimientoInventario movimientoinventarioAux= new MovimientoInventario();			
				//movimientoinventarioAux.setId(this.iIdNuevoMovimientoInventario);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//MovimientoInventario movimientoinventarioOrigen=new MovimientoInventario();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(MovimientoInventario movimientoinventarioOrigen : movimientoinventariosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							movimientoinventarioOrigen =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoinventarioOrigen =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaMovimientoInventario();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.movimientoinventario.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosMovimientoInventario(movimientoinventarioOrigen,this.movimientoinventario,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.movimientoinventarioLogic.getMovimientoInventarios().add(this.movimientoinventarioAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.movimientoinventarios.add(this.movimientoinventarioAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaMovimientoInventario(false);
				
				this.jTableDatosMovimientoInventario.setRowSelectionInterval(this.getIndiceNuevoMovimientoInventario(), this.getIndiceNuevoMovimientoInventario());
				
				int iLastRow =  this.jTableDatosMovimientoInventario.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosMovimientoInventario.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosMovimientoInventario.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaMovimientoInventario(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();									
		
			MovimientoInventario movimientoinventarioOrigen=new MovimientoInventario();
			MovimientoInventario movimientoinventarioDestino=new MovimientoInventario();
				
			movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosMovimientoInventario.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || movimientoinventariosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosMovimientoInventario.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioOrigen =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						movimientoinventarioOrigen =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoinventarioDestino =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						movimientoinventarioDestino =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				movimientoinventarioOrigen =movimientoinventariosSeleccionados.get(0);
				movimientoinventarioDestino =movimientoinventariosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosMovimientoInventario(movimientoinventarioOrigen,movimientoinventarioDestino,true,false);
				
				movimientoinventarioDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(movimientoinventarioDestino,movimientoinventarioLogic.getMovimientoInventarios());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(movimientoinventarioDestino,movimientoinventarios);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaMovimientoInventario(false);
				
				//this.jTableDatosMovimientoInventario.setRowSelectionInterval(this.getIndiceNuevoMovimientoInventario(), this.getIndiceNuevoMovimientoInventario());
				
				int iLastRow =  this.jTableDatosMovimientoInventario.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosMovimientoInventario.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosMovimientoInventario.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaMovimientoInventario(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormMovimientoInventario.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesMovimientoInventario.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasMovimientoInventario.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesMovimientoInventario.setVisible(!isVisible);
			this.jPanelPaginacionMovimientoInventario.setVisible(!isVisible);
			this.jPanelAccionesMovimientoInventario.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameMovimientoInventario();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoMovimientoInventario();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionMovimientoInventario();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByMovimientoInventario();
			
			this.abrirFrameOrderByMovimientoInventario();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByMovimientoInventario();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleMovimientoInventario(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormMovimientoInventario);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormMovimientoInventario.isMaximum()) {
					this.jInternalFrameDetalleFormMovimientoInventario.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormMovimientoInventario.setSize(this.jInternalFrameDetalleFormMovimientoInventario.iWidthFormulario,this.jInternalFrameDetalleFormMovimientoInventario.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormMovimientoInventario.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormMovimientoInventario.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormMovimientoInventario.isMaximum()) {
						this.jInternalFrameDetalleFormMovimientoInventario.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormMovimientoInventario.jContentPaneDetalleMovimientoInventario.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormMovimientoInventario.jContentPaneDetalleMovimientoInventario.getWidth(),MovimientoInventarioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormMovimientoInventario.jContentPaneDetalleMovimientoInventario.getWidth(),MovimientoInventarioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormMovimientoInventario.jContentPaneDetalleMovimientoInventario.getWidth(),MovimientoInventarioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetalleMovimientoInventarioJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleMovimientoInventario();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormMovimientoInventario.setVisible(true);
	        this.jInternalFrameDetalleFormMovimientoInventario.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByMovimientoInventario() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByMovimientoInventario==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByMovimientoInventario=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByMovimientoInventario,false,this);
				} else {
					this.jInternalFrameOrderByMovimientoInventario=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByMovimientoInventario,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByMovimientoInventario);
				this.jInternalFrameOrderByMovimientoInventario.setVisible(false);
				this.jInternalFrameOrderByMovimientoInventario.setSelected(false);
				
				this.jInternalFrameOrderByMovimientoInventario.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByMovimientoInventario"));
				
				this.inicializarActualizarBindingTablaOrderByMovimientoInventario();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionMovimientoInventario() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionMovimientoInventario==null) {
				
				this.jInternalFrameImportacionMovimientoInventario=new ImportacionJInternalFrame(MovimientoInventarioConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionMovimientoInventario);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionMovimientoInventario);
				this.jInternalFrameImportacionMovimientoInventario.setVisible(false);
				this.jInternalFrameImportacionMovimientoInventario.setSelected(false);


				this.jInternalFrameImportacionMovimientoInventario.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionMovimientoInventario"));
				this.jInternalFrameImportacionMovimientoInventario.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionMovimientoInventario"));
				this.jInternalFrameImportacionMovimientoInventario.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionMovimientoInventario"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoMovimientoInventario() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoMovimientoInventario==null) {
				this.jInternalFrameReporteDinamicoMovimientoInventario=new ReporteDinamicoJInternalFrame(MovimientoInventarioConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoMovimientoInventario);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoMovimientoInventario);
				this.jInternalFrameReporteDinamicoMovimientoInventario.setVisible(false);
				this.jInternalFrameReporteDinamicoMovimientoInventario.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoMovimientoInventario.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoMovimientoInventario"));
				this.jInternalFrameReporteDinamicoMovimientoInventario.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoMovimientoInventario"));
				this.jInternalFrameReporteDinamicoMovimientoInventario.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoMovimientoInventario"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualMovimientoInventario();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetalleMovimientoInventario() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosDetalleMovimientoInventario.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormMovimientoInventario.jContentPaneDetalleMovimientoInventario.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosDetalleMovimientoInventario.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosDetalleMovimientoInventario.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosDetalleMovimientoInventario.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleMovimientoInventario() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormMovimientoInventario);
			
	       	this.jInternalFrameDetalleFormMovimientoInventario.setVisible(false);
	        this.jInternalFrameDetalleFormMovimientoInventario.setSelected(false);
			
			//this.jInternalFrameDetalleFormMovimientoInventario.dispose();
			//this.jInternalFrameDetalleFormMovimientoInventario=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoMovimientoInventario() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoMovimientoInventario.setVisible(true);
	        this.jInternalFrameReporteDinamicoMovimientoInventario.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionMovimientoInventario() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionMovimientoInventario.setVisible(true);
	        this.jInternalFrameImportacionMovimientoInventario.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByMovimientoInventario() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByMovimientoInventario.setVisible(true);
	        this.jInternalFrameOrderByMovimientoInventario.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByMovimientoInventario() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByMovimientoInventario.setVisible(false);
	        this.jInternalFrameOrderByMovimientoInventario.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoMovimientoInventario() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoMovimientoInventario.setVisible(false);
	        this.jInternalFrameReporteDinamicoMovimientoInventario.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionMovimientoInventario() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionMovimientoInventario.setVisible(false);
	        this.jInternalFrameImportacionMovimientoInventario.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarMovimientoInventario(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarMovimientoInventario(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesMovimientoInventario(true);
			//this.isEsNuevoMovimientoInventario=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesMovimientoInventario("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesMovimientoInventario(false) ;
			
			if(movimientoinventarioSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado() && DetalleMovimientoInventarioJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleMovimientoInventarioActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(MovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleMovimientoInventario(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualMovimientoInventario(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaMovimientoInventarioActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarMovimientoInventario(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesMovimientoInventario(true);
			//this.isEsNuevoMovimientoInventario=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.movimientoinventario.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesMovimientoInventario("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesMovimientoInventario(false) ;
			
			if(MovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleMovimientoInventario(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualMovimientoInventario(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("TipoCambio")) {
				if(!this.movimientoinventarioConstantesFunciones.cargarid_tipo_cambioMovimientoInventario) {
					this.cargarCombosTipoCambiosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingMovimientoInventario(false,false);
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_tipo_cambio (id);

				this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

			}
			
			if(sType.equals("Empleado")) {
				if(!this.movimientoinventarioConstantesFunciones.cargarid_empleadoMovimientoInventario) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingMovimientoInventario(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
			
			if(sType.equals("Factura")) {
				if(!this.movimientoinventarioConstantesFunciones.cargarid_facturaMovimientoInventario) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingMovimientoInventario(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
			
			if(sType.equals("AsientoContable")) {
				if(!this.movimientoinventarioConstantesFunciones.cargarid_asiento_contableMovimientoInventario) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingMovimientoInventario(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
						
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaTransaccion(List<Transaccion> transaccionsForeignKey)throws Exception{
		TableColumn tableColumnTransaccion=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION));
		TableCellEditor tableCellEditorTransaccion =tableColumnTransaccion.getCellEditor();

		TransaccionTableCell transaccionTableCellFk=(TransaccionTableCell)tableCellEditorTransaccion;

		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.settransaccionsForeignKey(transaccionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccionTableCellFk.setRowActual(intSelectedRow);
			//transaccionTableCellFk.settransaccionsForeignKeyActual(transaccionsForeignKey);
		//}


		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.RecargarTransaccionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaTipoCambio(List<TipoCambio> tipocambiosForeignKey)throws Exception{
		TableColumn tableColumnTipoCambio=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO));
		TableCellEditor tableCellEditorTipoCambio =tableColumnTipoCambio.getCellEditor();

		TipoCambioTableCell tipocambioTableCellFk=(TipoCambioTableCell)tableCellEditorTipoCambio;

		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.settipocambiosForeignKey(tipocambiosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocambioTableCellFk.setRowActual(intSelectedRow);
			//tipocambioTableCellFk.settipocambiosForeignKeyActual(tipocambiosForeignKey);
		//}


		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.RecargarTipoCambiosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoMovimientoInventario(List<EstadoMovimientoInventario> estadomovimientoinventariosForeignKey)throws Exception{
		TableColumn tableColumnEstadoMovimientoInventario=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO));
		TableCellEditor tableCellEditorEstadoMovimientoInventario =tableColumnEstadoMovimientoInventario.getCellEditor();

		EstadoMovimientoInventarioTableCell estadomovimientoinventarioTableCellFk=(EstadoMovimientoInventarioTableCell)tableCellEditorEstadoMovimientoInventario;

		if(estadomovimientoinventarioTableCellFk!=null) {
			estadomovimientoinventarioTableCellFk.setestadomovimientoinventariosForeignKey(estadomovimientoinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadomovimientoinventarioTableCellFk.setRowActual(intSelectedRow);
			//estadomovimientoinventarioTableCellFk.setestadomovimientoinventariosForeignKeyActual(estadomovimientoinventariosForeignKey);
		//}


		if(estadomovimientoinventarioTableCellFk!=null) {
			estadomovimientoinventarioTableCellFk.RecargarEstadoMovimientoInventariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaGuiaRemision(List<GuiaRemision> guiaremisionsForeignKey)throws Exception{
		TableColumn tableColumnGuiaRemision=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION));
		TableCellEditor tableCellEditorGuiaRemision =tableColumnGuiaRemision.getCellEditor();

		GuiaRemisionTableCell guiaremisionTableCellFk=(GuiaRemisionTableCell)tableCellEditorGuiaRemision;

		if(guiaremisionTableCellFk!=null) {
			guiaremisionTableCellFk.setguiaremisionsForeignKey(guiaremisionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//guiaremisionTableCellFk.setRowActual(intSelectedRow);
			//guiaremisionTableCellFk.setguiaremisionsForeignKeyActual(guiaremisionsForeignKey);
		//}


		if(guiaremisionTableCellFk!=null) {
			guiaremisionTableCellFk.RecargarGuiaRemisionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransportista(List<Transportista> transportistasForeignKey)throws Exception{
		TableColumn tableColumnTransportista=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA));
		TableCellEditor tableCellEditorTransportista =tableColumnTransportista.getCellEditor();

		TransportistaTableCell transportistaTableCellFk=(TransportistaTableCell)tableCellEditorTransportista;

		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.settransportistasForeignKey(transportistasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transportistaTableCellFk.setRowActual(intSelectedRow);
			//transportistaTableCellFk.settransportistasForeignKeyActual(transportistasForeignKey);
		//}


		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.RecargarTransportistasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTransaccionModulo(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoTransaccionModulo=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO));
		TableCellEditor tableCellEditorTipoTransaccionModulo =tableColumnTipoTransaccionModulo.getCellEditor();

		TipoTransaccionModuloTableCell tipotransaccionmoduloTableCellFk=(TipoTransaccionModuloTableCell)tableCellEditorTipoTransaccionModulo;

		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKey(tipotransaccionmodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotransaccionmoduloTableCellFk.setRowActual(intSelectedRow);
			//tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKeyActual(tipotransaccionmodulosForeignKey);
		//}


		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.RecargarTipoTransaccionModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCompra(List<Compra> comprasForeignKey)throws Exception{
		TableColumn tableColumnCompra=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA));
		TableCellEditor tableCellEditorCompra =tableColumnCompra.getCellEditor();

		CompraTableCell compraTableCellFk=(CompraTableCell)tableCellEditorCompra;

		if(compraTableCellFk!=null) {
			compraTableCellFk.setcomprasForeignKey(comprasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//compraTableCellFk.setRowActual(intSelectedRow);
			//compraTableCellFk.setcomprasForeignKeyActual(comprasForeignKey);
		//}


		if(compraTableCellFk!=null) {
			compraTableCellFk.RecargarComprasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_tipo_cambio (Long id) throws Exception {
		this.setActualTipoCambioForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesMovimientoInventario(false);
			
			//if(!this.isEsNuevoMovimientoInventario) {								
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				
			}
			
			if(this.permiteMantenimiento(this.movimientoinventario)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoMovimientoInventario=true;
					this.inicializarActualizarBindingTablaMovimientoInventario(false);
					this.isEsNuevoMovimientoInventario=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoMovimientoInventario=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoMovimientoInventario=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesMovimientoInventario(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualMovimientoInventario(false);
				
				this.habilitarDeshabilitarControlesMovimientoInventario(false);
			
												
				
				if(MovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleMovimientoInventario();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoMovimientoInventarioActionPerformed(evt,movimientoinventarioSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualMovimientoInventario(this.movimientoinventario,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,movimientoinventarioSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.movimientoinventario.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				this.movimientoinventario.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				this.movimientoinventario.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.movimientoinventario)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((MovimientoInventarioModel) this.jTableDatosMovimientoInventario.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoMovimientoInventario=true;
				this.inicializarActualizarBindingTablaMovimientoInventario(false);
				this.isEsNuevoMovimientoInventario=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesMovimientoInventario(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualMovimientoInventario(false);
				
				this.habilitarDeshabilitarControlesMovimientoInventario(false);
				
				
				
				if(MovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleMovimientoInventario();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosMovimientoInventario.getRowCount()>=1) {
				jTableDatosMovimientoInventario.removeRowSelectionInterval(0, jTableDatosMovimientoInventario.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesMovimientoInventario(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaMovimientoInventario(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesMovimientoInventario(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualMovimientoInventario(false) ;
			
			this.isEsNuevoMovimientoInventario=false;
			
			if(MovimientoInventarioJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleMovimientoInventario();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingMovimientoInventario(false);
				
				//SI ES MANUAL
				if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualMovimientoInventario();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoMovimientoInventario--;			
			//MovimientoInventario movimientoinventarioAux= new MovimientoInventario();			
			//movimientoinventarioAux.setId(this.iIdNuevoMovimientoInventario);
			
			if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaMovimientoInventario();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
			
			this.movimientoinventario.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.movimientoinventarioLogic.getMovimientoInventarios().add(this.movimientoinventarioAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.movimientoinventarios.add(this.movimientoinventarioAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaMovimientoInventario(false);
			
			this.jTableDatosMovimientoInventario.setRowSelectionInterval(this.getIndiceNuevoMovimientoInventario(), this.getIndiceNuevoMovimientoInventario());
			
			int iLastRow =  this.jTableDatosMovimientoInventario.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosMovimientoInventario.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosMovimientoInventario.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaMovimientoInventario(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingMovimientoInventario(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingMovimientoInventario(false);
			
			//SI ES MANUAL
			if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualMovimientoInventario();
			}
			
			//this.abrirFrameTreeMovimientoInventario();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Movimiento InventarioS ?", "MANTENIMIENTO DE Movimiento Inventario", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionMovimientoInventario.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralMovimientoInventario();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.movimientoinventarioReturnGeneral=movimientoinventarioLogic.procesarImportacionMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.movimientoinventarioParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarMovimientoInventarioReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionMovimientoInventario.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionMovimientoInventario.setFileImportacion(this.jInternalFrameImportacionMovimientoInventario.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionMovimientoInventario.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionMovimientoInventario.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionMovimientoInventario.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionMovimientoInventario.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		

		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("MovimientoInventarioBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"MovimientoInventarioBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteMovimientoInventarios("Todos",movimientoinventariosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transaccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transaccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transaccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transaccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEntrega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEntrega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEntrega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEntrega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroSecuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroSecuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroSecuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroSecuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCambio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCambio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCambio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCambio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoMovimientoInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoMovimientoInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoMovimientoInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoMovimientoInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_GuiaRemision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_GuiaRemision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_GuiaRemision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_GuiaRemision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transportista_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transportista_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transportista_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transportista_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rcentajeDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rcentajeDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rcentajeDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rcentajeDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUMAN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_man_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_man_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_man_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_man_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_STOCK:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ock_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ock_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ock_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ock_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talOtro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talOtro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talOtro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talOtro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_timoCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_timoCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_timoCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_timoCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroItems_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroItems_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroItems_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroItems_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_RETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FLETE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ete_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ete_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ete_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ete_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_puesto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_puesto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_puesto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_puesto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTransaccionModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTransaccionModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTransaccionModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTransaccionModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Compra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Compra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Compra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Compra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_GENERICOID:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nericoId_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nericoId_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nericoId_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nericoId_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TIPOID:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_poId_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_poId_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_poId_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_poId_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoMovimientoInventario.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoria="id_transaccion";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA:
					sNombreCampoCategoria="fecha_entrega";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					sNombreCampoCategoria="numero_secuencial";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoria="id_tipo_cambio";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO:
					sNombreCampoCategoria="id_estado_movimiento_inventario";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoria="numero_factura";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION:
					sNombreCampoCategoria="id_guia_remision";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoria="id_transportista";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					sNombreCampoCategoria="porcentaje_descuento";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoria="suman";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO:
					sNombreCampoCategoria="valor_descuento";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO:
					sNombreCampoCategoria="total_descuento";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_STOCK:
					sNombreCampoCategoria="stock";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO:
					sNombreCampoCategoria="total_otro";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO:
					sNombreCampoCategoria="ultimo_costo";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS:
					sNombreCampoCategoria="numero_items";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoria="retencion";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoria="flete";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO:
					sNombreCampoCategoria="impuesto";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoria="id_tipo_transaccion_modulo";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA:
					sNombreCampoCategoria="id_compra";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_GENERICOID:
					sNombreCampoCategoria="generico_id";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TIPOID:
					sNombreCampoCategoria="tipo_id";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoria="numero_comprobante";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoriaValor="id_transaccion";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA:
					sNombreCampoCategoriaValor="fecha_entrega";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					sNombreCampoCategoriaValor="numero_secuencial";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoriaValor="id_tipo_cambio";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO:
					sNombreCampoCategoriaValor="id_estado_movimiento_inventario";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoriaValor="numero_factura";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION:
					sNombreCampoCategoriaValor="id_guia_remision";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoriaValor="id_transportista";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					sNombreCampoCategoriaValor="porcentaje_descuento";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoriaValor="suman";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO:
					sNombreCampoCategoriaValor="valor_descuento";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO:
					sNombreCampoCategoriaValor="total_descuento";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_STOCK:
					sNombreCampoCategoriaValor="stock";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO:
					sNombreCampoCategoriaValor="total_otro";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO:
					sNombreCampoCategoriaValor="ultimo_costo";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS:
					sNombreCampoCategoriaValor="numero_items";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoriaValor="retencion";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoriaValor="flete";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO:
					sNombreCampoCategoriaValor="impuesto";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoriaValor="id_tipo_transaccion_modulo";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA:
					sNombreCampoCategoriaValor="id_compra";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_GENERICOID:
					sNombreCampoCategoriaValor="generico_id";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TIPOID:
					sNombreCampoCategoriaValor="tipo_id";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_comprobante";
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F Entrega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_entrega");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_secuencial");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T Cambio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cambio");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_movimiento_inventario");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_factura");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Guia Remision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_guia_remision");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transportista",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transportista");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"porcentaje_descuento");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUMAN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Suman",sNombreCampoCategoria,sNombreCampoCategoriaValor,"suman");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_descuento");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_descuento");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_STOCK:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Stock",sNombreCampoCategoria,sNombreCampoCategoriaValor,"stock");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Otro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_otro");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ultimo Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ultimo_costo");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Items",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_items");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_RETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"retencion");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FLETE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Flete",sNombreCampoCategoria,sNombreCampoCategoriaValor,"flete");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Impuesto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"impuesto");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Transaccion Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_transaccion_modulo");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Compra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_compra");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_GENERICOID:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Generico Id",sNombreCampoCategoria,sNombreCampoCategoriaValor,"generico_id");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TIPOID:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Id",sNombreCampoCategoria,sNombreCampoCategoriaValor,"tipo_id");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_comprobante");
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoinventario";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("MovimientoInventarios");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.gettransaccion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getfecha_entrega());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getnumero_secuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.gettipocambio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getestadomovimientoinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getnumero_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getguiaremision_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.gettransportista_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getporcentaje_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUMAN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_SUMAN);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getsuman());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_ICE);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getvalor_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.gettotal_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IVA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_STOCK:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_STOCK);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getstock());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.gettotal_otro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getultimo_costo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getnumero_items());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_RETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_RETENCION);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getretencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FLETE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FLETE);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getflete());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getimpuesto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.gettipotransaccionmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getcompra_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_GENERICOID:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_GENERICOID);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getgenerico_id());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_TIPOID:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TIPOID);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.gettipo_id());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getnumero_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoInventarioConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(MovimientoInventario movimientoinventario:movimientoinventariosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoinventario.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelMovimientoInventario(row);				
			//	iRow++;
			//}				
			
			//for(MovimientoInventario movimientoinventarioAux:movimientoinventariosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelMovimientoInventario(movimientoinventarioAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingMovimientoInventario(false);
			
			//SI ES MANUAL
			if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualMovimientoInventario();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingMovimientoInventario(false);
			
			//SI ES MANUAL
			if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualMovimientoInventario();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingMovimientoInventario(false);
			
			//SI ES MANUAL
			if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualMovimientoInventario();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaMovimientoInventario() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosMovimientoInventario.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosMovimientoInventario.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosMovimientoInventario.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosMovimientoInventario.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosMovimientoInventario.setMinimumSize(dimensionMinimum);
		this.jTableDatosMovimientoInventario.setMaximumSize(dimensionMaximum);
		this.jTableDatosMovimientoInventario.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingMovimientoInventario(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingMovimientoInventario(esInicializar,true);
	}
	
	public void inicializarActualizarBindingMovimientoInventario(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaMovimientoInventario(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesMovimientoInventario(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasMovimientoInventario(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesMovimientoInventario(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesMovimientoInventario(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualMovimientoInventario() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaMovimientoInventario();
		
		this.inicializarActualizarBindingBotonesManualMovimientoInventario(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualMovimientoInventario();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesMovimientoInventario() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualMovimientoInventario(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualMovimientoInventario(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosMovimientoInventario.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosMovimientoInventario.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteMovimientoInventario.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormMovimientoInventario.jCheckBoxPostAccionNuevoMovimientoInventario.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormMovimientoInventario.jCheckBoxPostAccionSinCerrarMovimientoInventario.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormMovimientoInventario.jCheckBoxPostAccionSinMensajeMovimientoInventario.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosMovimientoInventario.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosMovimientoInventario.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteMovimientoInventario.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
				this.jInternalFrameDetalleFormMovimientoInventario.jCheckBoxPostAccionNuevoMovimientoInventario.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormMovimientoInventario.jCheckBoxPostAccionSinCerrarMovimientoInventario.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormMovimientoInventario.jCheckBoxPostAccionSinMensajeMovimientoInventario.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionMovimientoInventario.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionMovimientoInventario.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesMovimientoInventario.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesMovimientoInventario.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesMovimientoInventario.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarMovimientoInventario.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesMovimientoInventario.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesMovimientoInventario.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralMovimientoInventario.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesMovimientoInventario(Boolean esInicializar) throws Exception {
		try	{	
			if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualMovimientoInventario(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesMovimientoInventario() throws Exception {
		try	{
			if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualMovimientoInventario();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleMovimientoInventario() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualMovimientoInventario() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesMovimientoInventario.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesMovimientoInventario.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesMovimientoInventario.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionMovimientoInventario.addItem(reporte);
			}
			
			
			if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionMovimientoInventario.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionMovimientoInventario.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesMovimientoInventario.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesMovimientoInventario.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarMovimientoInventario.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarMovimientoInventario.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarMovimientoInventario.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualMovimientoInventario();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualMovimientoInventario() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
				this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
				this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
				
				if(this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoMovimientoInventario.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=MovimientoInventarioConstantesFunciones.getTiposSeleccionarMovimientoInventario(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=MovimientoInventarioConstantesFunciones.getTiposSeleccionarMovimientoInventario(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=MovimientoInventarioConstantesFunciones.getTiposSeleccionarMovimientoInventario(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoMovimientoInventario.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualMovimientoInventario()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_compraFK_IdCompraMovimientoInventario.getSelectedItem()!=null){this.id_compraFK_IdCompra=((Compra)this.jComboBoxid_compraFK_IdCompraMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.getSelectedItem()!=null){this.id_empleadoFK_IdEmpleado=((Empleado)this.jComboBoxid_empleadoFK_IdEmpleadoMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.getSelectedItem()!=null){this.id_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario=((EstadoMovimientoInventario)this.jComboBoxid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventarioMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_facturaFK_IdFacturaMovimientoInventario.getSelectedItem()!=null){this.id_facturaFK_IdFactura=((Factura)this.jComboBoxid_facturaFK_IdFacturaMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.getSelectedItem()!=null){this.id_guia_remisionFK_IdGuiaRemision=((GuiaRemision)this.jComboBoxid_guia_remisionFK_IdGuiaRemisionMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.getSelectedItem()!=null){this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=((TipoTransaccionModulo)this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloMovimientoInventario.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.getSelectedItem()!=null){this.id_transaccionFK_IdTransaccion=((Transaccion)this.jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasMovimientoInventario(Boolean esInicializar) throws Exception {				
		if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualMovimientoInventario();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaMovimientoInventario() throws Exception {
		this.inicializarActualizarBindingTablaMovimientoInventario(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByMovimientoInventario() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosMovimientoInventarioOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventarioOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaMovimientoInventario(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=movimientoinventarioLogic.getMovimientoInventarios().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=movimientoinventarios.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosMovimientoInventario.setModel(new MovimientoInventarioModel(this.movimientoinventarioLogic.getMovimientoInventarios(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosMovimientoInventario.setModel(new MovimientoInventarioModel(this.movimientoinventarios,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByMovimientoInventario!=null && this.jInternalFrameOrderByMovimientoInventario.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByMovimientoInventario();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+MovimientoInventarioConstantesFunciones.SCLASSWEBTITULO,movimientoinventarioConstantesFunciones.resaltarSeleccionarMovimientoInventario,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+MovimientoInventarioConstantesFunciones.SCLASSWEBTITULO,movimientoinventarioConstantesFunciones.resaltarSeleccionarMovimientoInventario,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_ID));

		if(this.movimientoinventarioConstantesFunciones.mostraridMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltaridMovimientoInventario,this.movimientoinventarioConstantesFunciones.activaridMovimientoInventario,iSizeTabla,this,true,"idMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltaridMovimientoInventario,this.movimientoinventarioConstantesFunciones.activaridMovimientoInventario,this,true,"idMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_empresaMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_empresaMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_empresaMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_empresaMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_empresaMovimientoInventario,false,"id_empresaMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_sucursalMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_sucursalMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_sucursalMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_sucursalMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_sucursalMovimientoInventario,false,"id_sucursalMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDMODULO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_moduloMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_moduloMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_moduloMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_moduloMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_moduloMovimientoInventario,false,"id_moduloMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_ejercicioMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_ejercicioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_ejercicioMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_ejercicioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_ejercicioMovimientoInventario,false,"id_ejercicioMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_periodoMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_periodoMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_periodoMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_periodoMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_periodoMovimientoInventario,false,"id_periodoMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDANIO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_anioMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_anioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_anioMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_anioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_anioMovimientoInventario,true,"id_anioMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDMES));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_mesMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_mesMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_mesMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_mesMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_mesMovimientoInventario,true,"id_mesMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_usuarioMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_usuarioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_usuarioMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_usuarioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_usuarioMovimientoInventario,false,"id_usuarioMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_transaccionMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionTableCell(this.transaccionsForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_transaccionMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_transaccionMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionTableCell(this.transaccionsForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_transaccionMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_transaccionMovimientoInventario,true,"id_transaccionMovimientoInventario","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION));

		if(this.movimientoinventarioConstantesFunciones.mostrarfecha_emisionMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.movimientoinventarioConstantesFunciones.resaltarfecha_emisionMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarfecha_emisionMovimientoInventario,iSizeTabla,this,true,"fecha_emisionMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarfecha_emisionMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarfecha_emisionMovimientoInventario,this,true,"fecha_emisionMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA));

		if(this.movimientoinventarioConstantesFunciones.mostrarfecha_entregaMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.movimientoinventarioConstantesFunciones.resaltarfecha_entregaMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarfecha_entregaMovimientoInventario,iSizeTabla,this,true,"fecha_entregaMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarfecha_entregaMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarfecha_entregaMovimientoInventario,this,true,"fecha_entregaMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL));

		if(this.movimientoinventarioConstantesFunciones.mostrarnumero_secuencialMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.movimientoinventarioConstantesFunciones.resaltarnumero_secuencialMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarnumero_secuencialMovimientoInventario,iSizeTabla,this,true,"numero_secuencialMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarnumero_secuencialMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarnumero_secuencialMovimientoInventario,this,true,"numero_secuencialMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_monedaMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_monedaMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_monedaMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_monedaMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_monedaMovimientoInventario,false,"id_monedaMovimientoInventario","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_tipo_cambioMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoCambioTableCell(this.tipocambiosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_tipo_cambioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_tipo_cambioMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new TipoCambioTableCell(this.tipocambiosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_tipo_cambioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_tipo_cambioMovimientoInventario,true,"id_tipo_cambioMovimientoInventario","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_estado_movimiento_inventarioMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoMovimientoInventarioTableCell(this.estadomovimientoinventariosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_estado_movimiento_inventarioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_estado_movimiento_inventarioMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new EstadoMovimientoInventarioTableCell(this.estadomovimientoinventariosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_estado_movimiento_inventarioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_estado_movimiento_inventarioMovimientoInventario,true,"id_estado_movimiento_inventarioMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_empleadoMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_empleadoMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_empleadoMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_empleadoMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_empleadoMovimientoInventario,true,"id_empleadoMovimientoInventario","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_formatoMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_formatoMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_formatoMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_formatoMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_formatoMovimientoInventario,true,"id_formatoMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA));

		if(this.movimientoinventarioConstantesFunciones.mostrarid_transportistaMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransportistaTableCell(this.transportistasForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_transportistaMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_transportistaMovimientoInventario,iSizeTabla));
			tableColumn.setCellEditor(new TransportistaTableCell(this.transportistasForeignKey,this.movimientoinventarioConstantesFunciones.resaltarid_transportistaMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarid_transportistaMovimientoInventario,true,"id_transportistaMovimientoInventario","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION));

		if(this.movimientoinventarioConstantesFunciones.mostrardescripcionMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.movimientoinventarioConstantesFunciones.resaltardescripcionMovimientoInventario,this.movimientoinventarioConstantesFunciones.activardescripcionMovimientoInventario,iSizeTabla,this,true,"descripcionMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltardescripcionMovimientoInventario,this.movimientoinventarioConstantesFunciones.activardescripcionMovimientoInventario,this,true,"descripcionMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO));

		if(this.movimientoinventarioConstantesFunciones.mostrarporcentaje_descuentoMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarporcentaje_descuentoMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarporcentaje_descuentoMovimientoInventario,iSizeTabla,this,true,"porcentaje_descuentoMovimientoInventario","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarporcentaje_descuentoMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarporcentaje_descuentoMovimientoInventario,this,true,"porcentaje_descuentoMovimientoInventario","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_SUMAN));

		if(this.movimientoinventarioConstantesFunciones.mostrarsumanMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_SUMAN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarsumanMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarsumanMovimientoInventario,iSizeTabla,this,true,"sumanMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarsumanMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarsumanMovimientoInventario,this,true,"sumanMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_ICE));

		if(this.movimientoinventarioConstantesFunciones.mostrariceMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltariceMovimientoInventario,this.movimientoinventarioConstantesFunciones.activariceMovimientoInventario,iSizeTabla,this,true,"iceMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltariceMovimientoInventario,this.movimientoinventarioConstantesFunciones.activariceMovimientoInventario,this,true,"iceMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO));

		if(this.movimientoinventarioConstantesFunciones.mostrarvalor_descuentoMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarvalor_descuentoMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarvalor_descuentoMovimientoInventario,iSizeTabla,this,true,"valor_descuentoMovimientoInventario","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarvalor_descuentoMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarvalor_descuentoMovimientoInventario,this,true,"valor_descuentoMovimientoInventario","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO));

		if(this.movimientoinventarioConstantesFunciones.mostrartotal_descuentoMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltartotal_descuentoMovimientoInventario,this.movimientoinventarioConstantesFunciones.activartotal_descuentoMovimientoInventario,iSizeTabla,this,true,"total_descuentoMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltartotal_descuentoMovimientoInventario,this.movimientoinventarioConstantesFunciones.activartotal_descuentoMovimientoInventario,this,true,"total_descuentoMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_IVA));

		if(this.movimientoinventarioConstantesFunciones.mostrarivaMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarivaMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarivaMovimientoInventario,iSizeTabla,this,true,"ivaMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarivaMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarivaMovimientoInventario,this,true,"ivaMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_STOCK));

		if(this.movimientoinventarioConstantesFunciones.mostrarstockMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_STOCK,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarstockMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarstockMovimientoInventario,iSizeTabla,this,true,"stockMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarstockMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarstockMovimientoInventario,this,true,"stockMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL));

		if(this.movimientoinventarioConstantesFunciones.mostrarsub_totalMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarsub_totalMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarsub_totalMovimientoInventario,iSizeTabla,this,true,"sub_totalMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarsub_totalMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarsub_totalMovimientoInventario,this,true,"sub_totalMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO));

		if(this.movimientoinventarioConstantesFunciones.mostrartotal_otroMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltartotal_otroMovimientoInventario,this.movimientoinventarioConstantesFunciones.activartotal_otroMovimientoInventario,iSizeTabla,this,true,"total_otroMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltartotal_otroMovimientoInventario,this.movimientoinventarioConstantesFunciones.activartotal_otroMovimientoInventario,this,true,"total_otroMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO));

		if(this.movimientoinventarioConstantesFunciones.mostrarultimo_costoMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarultimo_costoMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarultimo_costoMovimientoInventario,iSizeTabla,this,true,"ultimo_costoMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarultimo_costoMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarultimo_costoMovimientoInventario,this,true,"ultimo_costoMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS));

		if(this.movimientoinventarioConstantesFunciones.mostrarnumero_itemsMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarnumero_itemsMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarnumero_itemsMovimientoInventario,iSizeTabla,this,true,"numero_itemsMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarnumero_itemsMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarnumero_itemsMovimientoInventario,this,true,"numero_itemsMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_RETENCION));

		if(this.movimientoinventarioConstantesFunciones.mostrarretencionMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_RETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltarretencionMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarretencionMovimientoInventario,iSizeTabla,this,true,"retencionMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltarretencionMovimientoInventario,this.movimientoinventarioConstantesFunciones.activarretencionMovimientoInventario,this,true,"retencionMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,MovimientoInventarioConstantesFunciones.LABEL_TOTAL));

		if(this.movimientoinventarioConstantesFunciones.mostrartotalMovimientoInventario && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoInventarioConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoinventarioConstantesFunciones.resaltartotalMovimientoInventario,this.movimientoinventarioConstantesFunciones.activartotalMovimientoInventario,iSizeTabla,this,true,"totalMovimientoInventario","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoinventarioConstantesFunciones.resaltartotalMovimientoInventario,this.movimientoinventarioConstantesFunciones.activartotalMovimientoInventario,this,true,"totalMovimientoInventario","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoInventarioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetalleMovimientoInventario && this.movimientoinventarioConstantesFunciones.mostrarDetalleMovimientoInventarioMovimientoInventario && !MovimientoInventarioConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Movimiento Inventarios");
				tableColumn.setHeaderValue("Detalle Movimiento Inventarios");
				tableColumn.setCellRenderer(new DetalleMovimientoInventarioTableCell(movimientoinventarioConstantesFunciones.resaltarDetalleMovimientoInventarioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarDetalleMovimientoInventarioMovimientoInventario));
				tableColumn.setCellEditor(new DetalleMovimientoInventarioTableCell(movimientoinventarioConstantesFunciones.resaltarDetalleMovimientoInventarioMovimientoInventario,this,this.movimientoinventarioConstantesFunciones.activarDetalleMovimientoInventarioMovimientoInventario));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosMovimientoInventario.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosMovimientoInventario.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosMovimientoInventario.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosMovimientoInventario.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosMovimientoInventario.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosMovimientoInventario.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosMovimientoInventario.moveColumn(this.jTableDatosMovimientoInventario.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosMovimientoInventario.moveColumn(this.jTableDatosMovimientoInventario.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosMovimientoInventario.moveColumn(this.jTableDatosMovimientoInventario.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosMovimientoInventario.moveColumn(this.jTableDatosMovimientoInventario.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosMovimientoInventario.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosMovimientoInventario.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosMovimientoInventario,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosMovimientoInventario.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosMovimientoInventario.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosMovimientoInventario.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosMovimientoInventario.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosMovimientoInventario.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=movimientoinventarioLogic.getMovimientoInventarios().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=movimientoinventarios.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosMovimientoInventario.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosMovimientoInventario.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosMovimientoInventario();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoMovimientoInventario=false;
					
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormMovimientoInventario==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosMovimientoInventario.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.movimientoinventario.getsType().equals("DUPLICADO")
				   || this.movimientoinventario.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoMovimientoInventario=true;
				
				} else {
					this.isEsNuevoMovimientoInventario=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					if(this.movimientoinventario.getId()>=0 && !this.movimientoinventario.getIsNew()) {						
						this.isEsNuevoMovimientoInventario=false;
						
					} else {
						this.isEsNuevoMovimientoInventario=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoMovimientoInventario(esRelaciones);						
				
				this.seleccionarMovimientoInventario(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.movimientoinventario.getId()<0) {
					this.isEsNuevoMovimientoInventario=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarMovimientoInventario(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarMovimientoInventario(evt,rowIndex);
				}	
				
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion MovimientoInventario: " + this.dDif); 
					}
				}								
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarMovimientoInventario(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.movimientoinventario)) {
					if(this.movimientoinventario.getId()>0) {
						this.movimientoinventario.setIsDeleted(true);
						
						this.movimientoinventariosEliminados.add(this.movimientoinventario);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.movimientoinventarioLogic.getMovimientoInventarios().remove(this.movimientoinventario);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.movimientoinventarios.remove(this.movimientoinventario);				
					}
					
					
					((MovimientoInventarioModel) this.jTableDatosMovimientoInventario.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaMovimientoInventario(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarMovimientoInventario(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoMovimientoInventario) {
			
			if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosMovimientoInventario.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosMovimientoInventario.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioMovimientoInventario(this.movimientoinventario);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.movimientoinventarioConstantesFunciones.cargarid_empresaMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_empresaMovimientoInventario) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.movimientoinventario.getid_empresa());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(movimientoinventario.getEmpresa()!=null) {
							this.empresasForeignKey.add(movimientoinventario.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.movimientoinventario.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.movimientoinventarioConstantesFunciones.cargarid_sucursalMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_sucursalMovimientoInventario) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.movimientoinventario.getid_sucursal());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(movimientoinventario.getSucursal()!=null) {
							this.sucursalsForeignKey.add(movimientoinventario.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.movimientoinventario.getid_sucursal(),false,"Formulario");

					//Modulo
					if(!this.movimientoinventarioConstantesFunciones.cargarid_moduloMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_moduloMovimientoInventario) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.movimientoinventario.getid_modulo());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(movimientoinventario.getModulo()!=null) {
							this.modulosForeignKey.add(movimientoinventario.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.movimientoinventario.getid_modulo(),false,"Formulario");

					//Ejercicio
					if(!this.movimientoinventarioConstantesFunciones.cargarid_ejercicioMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_ejercicioMovimientoInventario) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.movimientoinventario.getid_ejercicio());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(movimientoinventario.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(movimientoinventario.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.movimientoinventario.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.movimientoinventarioConstantesFunciones.cargarid_periodoMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_periodoMovimientoInventario) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.movimientoinventario.getid_periodo());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(movimientoinventario.getPeriodo()!=null) {
							this.periodosForeignKey.add(movimientoinventario.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.movimientoinventario.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.movimientoinventarioConstantesFunciones.cargarid_anioMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_anioMovimientoInventario) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.movimientoinventario.getid_anio());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(movimientoinventario.getAnio()!=null) {
							this.aniosForeignKey.add(movimientoinventario.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.movimientoinventario.getid_anio(),false,"Formulario");

					//Mes
					if(!this.movimientoinventarioConstantesFunciones.cargarid_mesMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_mesMovimientoInventario) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.movimientoinventario.getid_mes());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(movimientoinventario.getMes()!=null) {
							this.messForeignKey.add(movimientoinventario.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.movimientoinventario.getid_mes(),false,"Formulario");

					//Usuario
					if(!this.movimientoinventarioConstantesFunciones.cargarid_usuarioMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_usuarioMovimientoInventario) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.movimientoinventario.getid_usuario());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(movimientoinventario.getUsuario()!=null) {
							this.usuariosForeignKey.add(movimientoinventario.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.movimientoinventario.getid_usuario(),false,"Formulario");

					//Transaccion
					if(!this.movimientoinventarioConstantesFunciones.cargarid_transaccionMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_transaccionMovimientoInventario) {
						//this.cargarCombosTransaccionsForeignKeyLista(" where id="+this.movimientoinventario.getid_transaccion());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.transaccionsForeignKey=new ArrayList<Transaccion>();

						if(movimientoinventario.getTransaccion()!=null) {
							this.transaccionsForeignKey.add(movimientoinventario.getTransaccion());
						}

						this.addItemDefectoCombosForeignKeyTransaccion();
						this.cargarCombosFrameTransaccionsForeignKey("Todos");
					}
					this.setActualTransaccionForeignKey(this.movimientoinventario.getid_transaccion(),false,"Formulario");

					//Moneda
					if(!this.movimientoinventarioConstantesFunciones.cargarid_monedaMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_monedaMovimientoInventario) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.movimientoinventario.getid_moneda());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(movimientoinventario.getMoneda()!=null) {
							this.monedasForeignKey.add(movimientoinventario.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.movimientoinventario.getid_moneda(),false,"Formulario");

					//TipoCambio
					if(!this.movimientoinventarioConstantesFunciones.cargarid_tipo_cambioMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_tipo_cambioMovimientoInventario) {
						//this.cargarCombosTipoCambiosForeignKeyLista(" where id="+this.movimientoinventario.getid_tipo_cambio());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

						if(movimientoinventario.getTipoCambio()!=null) {
							this.tipocambiosForeignKey.add(movimientoinventario.getTipoCambio());
						}

						this.addItemDefectoCombosForeignKeyTipoCambio();
						this.cargarCombosFrameTipoCambiosForeignKey("Todos");
					}
					this.setActualTipoCambioForeignKey(this.movimientoinventario.getid_tipo_cambio(),false,"Formulario");

					//EstadoMovimientoInventario
					if(!this.movimientoinventarioConstantesFunciones.cargarid_estado_movimiento_inventarioMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_estado_movimiento_inventarioMovimientoInventario) {
						//this.cargarCombosEstadoMovimientoInventariosForeignKeyLista(" where id="+this.movimientoinventario.getid_estado_movimiento_inventario());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.estadomovimientoinventariosForeignKey=new ArrayList<EstadoMovimientoInventario>();

						if(movimientoinventario.getEstadoMovimientoInventario()!=null) {
							this.estadomovimientoinventariosForeignKey.add(movimientoinventario.getEstadoMovimientoInventario());
						}

						this.addItemDefectoCombosForeignKeyEstadoMovimientoInventario();
						this.cargarCombosFrameEstadoMovimientoInventariosForeignKey("Todos");
					}
					this.setActualEstadoMovimientoInventarioForeignKey(this.movimientoinventario.getid_estado_movimiento_inventario(),false,"Formulario");

					//Empleado
					if(!this.movimientoinventarioConstantesFunciones.cargarid_empleadoMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_empleadoMovimientoInventario) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.movimientoinventario.getid_empleado());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(movimientoinventario.getEmpleado()!=null) {
							this.empleadosForeignKey.add(movimientoinventario.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.movimientoinventario.getid_empleado(),false,"Formulario");

					//Formato
					if(!this.movimientoinventarioConstantesFunciones.cargarid_formatoMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_formatoMovimientoInventario) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.movimientoinventario.getid_formato());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(movimientoinventario.getFormato()!=null) {
							this.formatosForeignKey.add(movimientoinventario.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.movimientoinventario.getid_formato(),false,"Formulario");

					//Factura
					if(!this.movimientoinventarioConstantesFunciones.cargarid_facturaMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_facturaMovimientoInventario) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.movimientoinventario.getid_factura());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(movimientoinventario.getFactura()!=null) {
							this.facturasForeignKey.add(movimientoinventario.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.movimientoinventario.getid_factura(),false,"Formulario");

					//GuiaRemision
					if(!this.movimientoinventarioConstantesFunciones.cargarid_guia_remisionMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_guia_remisionMovimientoInventario) {
						//this.cargarCombosGuiaRemisionsForeignKeyLista(" where id="+this.movimientoinventario.getid_guia_remision());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.guiaremisionsForeignKey=new ArrayList<GuiaRemision>();

						if(movimientoinventario.getGuiaRemision()!=null) {
							this.guiaremisionsForeignKey.add(movimientoinventario.getGuiaRemision());
						}

						this.addItemDefectoCombosForeignKeyGuiaRemision();
						this.cargarCombosFrameGuiaRemisionsForeignKey("Todos");
					}
					this.setActualGuiaRemisionForeignKey(this.movimientoinventario.getid_guia_remision(),false,"Formulario");

					//Transportista
					if(!this.movimientoinventarioConstantesFunciones.cargarid_transportistaMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_transportistaMovimientoInventario) {
						//this.cargarCombosTransportistasForeignKeyLista(" where id="+this.movimientoinventario.getid_transportista());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.transportistasForeignKey=new ArrayList<Transportista>();

						if(movimientoinventario.getTransportista()!=null) {
							this.transportistasForeignKey.add(movimientoinventario.getTransportista());
						}

						this.addItemDefectoCombosForeignKeyTransportista();
						this.cargarCombosFrameTransportistasForeignKey("Todos");
					}
					this.setActualTransportistaForeignKey(this.movimientoinventario.getid_transportista(),false,"Formulario");

					//TipoTransaccionModulo
					if(!this.movimientoinventarioConstantesFunciones.cargarid_tipo_transaccion_moduloMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_tipo_transaccion_moduloMovimientoInventario) {
						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(" where id="+this.movimientoinventario.getid_tipo_transaccion_modulo());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

						if(movimientoinventario.getTipoTransaccionModulo()!=null) {
							this.tipotransaccionmodulosForeignKey.add(movimientoinventario.getTipoTransaccionModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
						this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
					}
					this.setActualTipoTransaccionModuloForeignKey(this.movimientoinventario.getid_tipo_transaccion_modulo(),false,"Formulario");

					//Compra
					if(!this.movimientoinventarioConstantesFunciones.cargarid_compraMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_compraMovimientoInventario) {
						//this.cargarCombosComprasForeignKeyLista(" where id="+this.movimientoinventario.getid_compra());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.comprasForeignKey=new ArrayList<Compra>();

						if(movimientoinventario.getCompra()!=null) {
							this.comprasForeignKey.add(movimientoinventario.getCompra());
						}

						this.addItemDefectoCombosForeignKeyCompra();
						this.cargarCombosFrameComprasForeignKey("Todos");
					}
					this.setActualCompraForeignKey(this.movimientoinventario.getid_compra(),false,"Formulario");

					//AsientoContable
					if(!this.movimientoinventarioConstantesFunciones.cargarid_asiento_contableMovimientoInventario || this.movimientoinventarioConstantesFunciones.event_dependid_asiento_contableMovimientoInventario) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.movimientoinventario.getid_asiento_contable());
									//this.inicializarActualizarBindingMovimientoInventario(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(movimientoinventario.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(movimientoinventario.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.movimientoinventario.getid_asiento_contable(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesMovimientoInventario("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesMovimientoInventario(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualMovimientoInventario() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoMovimientoInventario(MovimientoInventario movimientoinventario) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoMovimientoInventario(movimientoinventario,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoMovimientoInventario(MovimientoInventario movimientoinventario,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioMovimientoInventario(movimientoinventario);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyMovimientoInventario(movimientoinventario,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyMovimientoInventario(movimientoinventario);
	}
	
	public void setVariablesObjetoActualToFormularioMovimientoInventario(MovimientoInventario movimientoinventario) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.setText(movimientoinventario.getId().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_emisionMovimientoInventario.setDate(movimientoinventario.getfecha_emision());
			this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_entregaMovimientoInventario.setDate(movimientoinventario.getfecha_entrega());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_secuencialMovimientoInventario.setText(movimientoinventario.getnumero_secuencial());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextAreadescripcionMovimientoInventario.setText(movimientoinventario.getdescripcion());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.setText(movimientoinventario.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsumanMovimientoInventario.setText(movimientoinventario.getsuman().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldiceMovimientoInventario.setText(movimientoinventario.getice().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.setText(movimientoinventario.getvalor_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_descuentoMovimientoInventario.setText(movimientoinventario.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldivaMovimientoInventario.setText(movimientoinventario.getiva().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldstockMovimientoInventario.setText(movimientoinventario.getstock().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsub_totalMovimientoInventario.setText(movimientoinventario.getsub_total().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_otroMovimientoInventario.setText(movimientoinventario.gettotal_otro().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldultimo_costoMovimientoInventario.setText(movimientoinventario.getultimo_costo().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_itemsMovimientoInventario.setText(movimientoinventario.getnumero_items().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldretencionMovimientoInventario.setText(movimientoinventario.getretencion().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotalMovimientoInventario.setText(movimientoinventario.gettotal().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,MovimientoInventario movimientoinventarioLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,movimientoinventarioLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,MovimientoInventario movimientoinventarioLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				movimientoinventarioLocal=this.movimientoinventario;
			} else {
				movimientoinventarioLocal=this.movimientoinventarioAnterior;
			}
		}
		
		if(this.permiteMantenimiento(movimientoinventarioLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoMovimientoInventario(movimientoinventarioLocal,true);
					
					if(movimientoinventarioSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(movimientoinventarioLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(movimientoinventarioLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoMovimientoInventario(MovimientoInventario movimientoinventario,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualMovimientoInventario(movimientoinventario,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(movimientoinventario);
	}
	
	public void setVariablesFormularioToObjetoActualMovimientoInventario(MovimientoInventario movimientoinventario,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualMovimientoInventario(movimientoinventario,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualMovimientoInventario(MovimientoInventario movimientoinventario,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.getText()==null || this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.getText()=="" || this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.getText()=="Id") {
				this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.setText("0");
			}

			if(conColumnasBase) {movimientoinventario.setId(Long.parseLong(this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelIdMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setfecha_emision(this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_emisionMovimientoInventario.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfecha_emisionMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setfecha_entrega(this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_entregaMovimientoInventario.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelfecha_entregaMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setnumero_secuencial(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_secuencialMovimientoInventario.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_secuencialMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setdescripcion(this.jInternalFrameDetalleFormMovimientoInventario.jTextAreadescripcionMovimientoInventario.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeldescripcionMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setporcentaje_descuento(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelporcentaje_descuentoMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setsuman(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsumanMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_SUMAN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelsumanMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setice(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldiceMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeliceMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setvalor_descuento(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelvalor_descuentoMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.settotal_descuento(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_descuentoMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotal_descuentoMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setiva(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldivaMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelivaMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setstock(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldstockMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_STOCK+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelstockMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsub_totalMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelsub_totalMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.settotal_otro(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_otroMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotal_otroMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setultimo_costo(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldultimo_costoMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelultimo_costoMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setnumero_items(Integer.parseInt(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_itemsMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelnumero_itemsMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.setretencion(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldretencionMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_RETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabelretencionMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoinventario.settotal(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotalMovimientoInventario.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoInventarioConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoInventario.jLabeltotalMovimientoInventario,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualMovimientoInventario(MovimientoInventario movimientoinventarioBean,MovimientoInventario movimientoinventario,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosMovimientoInventario(MovimientoInventario movimientoinventarioOrigen,MovimientoInventario movimientoinventario,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && movimientoinventarioOrigen.getId()!=null && !movimientoinventarioOrigen.getId().equals(0L))) {movimientoinventario.setId(movimientoinventarioOrigen.getId());}}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getfecha_emision()!=null && !movimientoinventarioOrigen.getfecha_emision().equals(new Date()))) {movimientoinventario.setfecha_emision(movimientoinventarioOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getfecha_entrega()!=null && !movimientoinventarioOrigen.getfecha_entrega().equals(new Date()))) {movimientoinventario.setfecha_entrega(movimientoinventarioOrigen.getfecha_entrega());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getnumero_secuencial()!=null && !movimientoinventarioOrigen.getnumero_secuencial().equals(""))) {movimientoinventario.setnumero_secuencial(movimientoinventarioOrigen.getnumero_secuencial());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getnumero_factura()!=null && !movimientoinventarioOrigen.getnumero_factura().equals(""))) {movimientoinventario.setnumero_factura(movimientoinventarioOrigen.getnumero_factura());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getdescripcion()!=null && !movimientoinventarioOrigen.getdescripcion().equals(""))) {movimientoinventario.setdescripcion(movimientoinventarioOrigen.getdescripcion());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getporcentaje_descuento()!=null && !movimientoinventarioOrigen.getporcentaje_descuento().equals(0.0))) {movimientoinventario.setporcentaje_descuento(movimientoinventarioOrigen.getporcentaje_descuento());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getsuman()!=null && !movimientoinventarioOrigen.getsuman().equals(0.0))) {movimientoinventario.setsuman(movimientoinventarioOrigen.getsuman());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getice()!=null && !movimientoinventarioOrigen.getice().equals(0.0))) {movimientoinventario.setice(movimientoinventarioOrigen.getice());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getvalor_descuento()!=null && !movimientoinventarioOrigen.getvalor_descuento().equals(0.0))) {movimientoinventario.setvalor_descuento(movimientoinventarioOrigen.getvalor_descuento());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.gettotal_descuento()!=null && !movimientoinventarioOrigen.gettotal_descuento().equals(0.0))) {movimientoinventario.settotal_descuento(movimientoinventarioOrigen.gettotal_descuento());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getiva()!=null && !movimientoinventarioOrigen.getiva().equals(0.0))) {movimientoinventario.setiva(movimientoinventarioOrigen.getiva());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getstock()!=null && !movimientoinventarioOrigen.getstock().equals(0.0))) {movimientoinventario.setstock(movimientoinventarioOrigen.getstock());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getsub_total()!=null && !movimientoinventarioOrigen.getsub_total().equals(0.0))) {movimientoinventario.setsub_total(movimientoinventarioOrigen.getsub_total());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.gettotal_otro()!=null && !movimientoinventarioOrigen.gettotal_otro().equals(0.0))) {movimientoinventario.settotal_otro(movimientoinventarioOrigen.gettotal_otro());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getultimo_costo()!=null && !movimientoinventarioOrigen.getultimo_costo().equals(0.0))) {movimientoinventario.setultimo_costo(movimientoinventarioOrigen.getultimo_costo());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getnumero_items()!=null && !movimientoinventarioOrigen.getnumero_items().equals(0))) {movimientoinventario.setnumero_items(movimientoinventarioOrigen.getnumero_items());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getretencion()!=null && !movimientoinventarioOrigen.getretencion().equals(0.0))) {movimientoinventario.setretencion(movimientoinventarioOrigen.getretencion());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.gettotal()!=null && !movimientoinventarioOrigen.gettotal().equals(0.0))) {movimientoinventario.settotal(movimientoinventarioOrigen.gettotal());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getflete()!=null && !movimientoinventarioOrigen.getflete().equals(0.0))) {movimientoinventario.setflete(movimientoinventarioOrigen.getflete());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getimpuesto()!=null && !movimientoinventarioOrigen.getimpuesto().equals(0.0))) {movimientoinventario.setimpuesto(movimientoinventarioOrigen.getimpuesto());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getgenerico_id()!=null && !movimientoinventarioOrigen.getgenerico_id().equals(0L))) {movimientoinventario.setgenerico_id(movimientoinventarioOrigen.getgenerico_id());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.gettipo_id()!=null && !movimientoinventarioOrigen.gettipo_id().equals(""))) {movimientoinventario.settipo_id(movimientoinventarioOrigen.gettipo_id());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getnumero_comprobante()!=null && !movimientoinventarioOrigen.getnumero_comprobante().equals(""))) {movimientoinventario.setnumero_comprobante(movimientoinventarioOrigen.getnumero_comprobante());}
			if(conDefault || (!conDefault && movimientoinventarioOrigen.getfecha()!=null && !movimientoinventarioOrigen.getfecha().equals(new Date()))) {movimientoinventario.setfecha(movimientoinventarioOrigen.getfecha());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioMovimientoInventario(MovimientoInventario movimientoinventario) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.setText(movimientoinventario.getId().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_emisionMovimientoInventario.setDate(movimientoinventario.getfecha_emision());
			this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_entregaMovimientoInventario.setDate(movimientoinventario.getfecha_entrega());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_secuencialMovimientoInventario.setText(movimientoinventario.getnumero_secuencial());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextAreadescripcionMovimientoInventario.setText(movimientoinventario.getdescripcion());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.setText(movimientoinventario.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsumanMovimientoInventario.setText(movimientoinventario.getsuman().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldiceMovimientoInventario.setText(movimientoinventario.getice().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.setText(movimientoinventario.getvalor_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_descuentoMovimientoInventario.setText(movimientoinventario.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldivaMovimientoInventario.setText(movimientoinventario.getiva().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldstockMovimientoInventario.setText(movimientoinventario.getstock().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsub_totalMovimientoInventario.setText(movimientoinventario.getsub_total().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_otroMovimientoInventario.setText(movimientoinventario.gettotal_otro().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldultimo_costoMovimientoInventario.setText(movimientoinventario.getultimo_costo().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_itemsMovimientoInventario.setText(movimientoinventario.getnumero_items().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldretencionMovimientoInventario.setText(movimientoinventario.getretencion().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotalMovimientoInventario.setText(movimientoinventario.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioMovimientoInventario(MovimientoInventarioBean movimientoinventarioBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.setText(movimientoinventarioBean.getId().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_emisionMovimientoInventario.setDate(movimientoinventarioBean.getfecha_emision());
			this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_entregaMovimientoInventario.setDate(movimientoinventarioBean.getfecha_entrega());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_secuencialMovimientoInventario.setText(movimientoinventarioBean.getnumero_secuencial());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextAreadescripcionMovimientoInventario.setText(movimientoinventarioBean.getdescripcion());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.setText(movimientoinventarioBean.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsumanMovimientoInventario.setText(movimientoinventarioBean.getsuman().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldiceMovimientoInventario.setText(movimientoinventarioBean.getice().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.setText(movimientoinventarioBean.getvalor_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_descuentoMovimientoInventario.setText(movimientoinventarioBean.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldivaMovimientoInventario.setText(movimientoinventarioBean.getiva().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldstockMovimientoInventario.setText(movimientoinventarioBean.getstock().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsub_totalMovimientoInventario.setText(movimientoinventarioBean.getsub_total().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_otroMovimientoInventario.setText(movimientoinventarioBean.gettotal_otro().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldultimo_costoMovimientoInventario.setText(movimientoinventarioBean.getultimo_costo().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_itemsMovimientoInventario.setText(movimientoinventarioBean.getnumero_items().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldretencionMovimientoInventario.setText(movimientoinventarioBean.getretencion().toString());
			this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotalMovimientoInventario.setText(movimientoinventarioBean.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanMovimientoInventario(MovimientoInventarioParameterReturnGeneral movimientoinventarioReturnGeneral,MovimientoInventarioBean movimientoinventarioBean,Boolean conDefault) throws Exception { 
		try {
			MovimientoInventario movimientoinventarioLocal=new MovimientoInventario();
			
			movimientoinventarioLocal=movimientoinventarioReturnGeneral.getMovimientoInventario();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && movimientoinventarioLocal.getId()!=null && !movimientoinventarioLocal.getId().equals(0L))) {movimientoinventarioBean.setId(movimientoinventarioLocal.getId());}}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getfecha_emision()!=null && !movimientoinventarioLocal.getfecha_emision().equals(new Date()))) {movimientoinventarioBean.setfecha_emision(movimientoinventarioLocal.getfecha_emision());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getfecha_entrega()!=null && !movimientoinventarioLocal.getfecha_entrega().equals(new Date()))) {movimientoinventarioBean.setfecha_entrega(movimientoinventarioLocal.getfecha_entrega());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getnumero_secuencial()!=null && !movimientoinventarioLocal.getnumero_secuencial().equals(""))) {movimientoinventarioBean.setnumero_secuencial(movimientoinventarioLocal.getnumero_secuencial());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getdescripcion()!=null && !movimientoinventarioLocal.getdescripcion().equals(""))) {movimientoinventarioBean.setdescripcion(movimientoinventarioLocal.getdescripcion());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getporcentaje_descuento()!=null && !movimientoinventarioLocal.getporcentaje_descuento().equals(0.0))) {movimientoinventarioBean.setporcentaje_descuento(movimientoinventarioLocal.getporcentaje_descuento());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getsuman()!=null && !movimientoinventarioLocal.getsuman().equals(0.0))) {movimientoinventarioBean.setsuman(movimientoinventarioLocal.getsuman());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getice()!=null && !movimientoinventarioLocal.getice().equals(0.0))) {movimientoinventarioBean.setice(movimientoinventarioLocal.getice());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getvalor_descuento()!=null && !movimientoinventarioLocal.getvalor_descuento().equals(0.0))) {movimientoinventarioBean.setvalor_descuento(movimientoinventarioLocal.getvalor_descuento());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.gettotal_descuento()!=null && !movimientoinventarioLocal.gettotal_descuento().equals(0.0))) {movimientoinventarioBean.settotal_descuento(movimientoinventarioLocal.gettotal_descuento());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getiva()!=null && !movimientoinventarioLocal.getiva().equals(0.0))) {movimientoinventarioBean.setiva(movimientoinventarioLocal.getiva());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getstock()!=null && !movimientoinventarioLocal.getstock().equals(0.0))) {movimientoinventarioBean.setstock(movimientoinventarioLocal.getstock());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getsub_total()!=null && !movimientoinventarioLocal.getsub_total().equals(0.0))) {movimientoinventarioBean.setsub_total(movimientoinventarioLocal.getsub_total());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.gettotal_otro()!=null && !movimientoinventarioLocal.gettotal_otro().equals(0.0))) {movimientoinventarioBean.settotal_otro(movimientoinventarioLocal.gettotal_otro());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getultimo_costo()!=null && !movimientoinventarioLocal.getultimo_costo().equals(0.0))) {movimientoinventarioBean.setultimo_costo(movimientoinventarioLocal.getultimo_costo());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getnumero_items()!=null && !movimientoinventarioLocal.getnumero_items().equals(0))) {movimientoinventarioBean.setnumero_items(movimientoinventarioLocal.getnumero_items());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.getretencion()!=null && !movimientoinventarioLocal.getretencion().equals(0.0))) {movimientoinventarioBean.setretencion(movimientoinventarioLocal.getretencion());}
			if(conDefault || (!conDefault && movimientoinventarioLocal.gettotal()!=null && !movimientoinventarioLocal.gettotal().equals(0.0))) {movimientoinventarioBean.settotal(movimientoinventarioLocal.gettotal());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxMovimientoInventarioGenerico(Long idMovimientoInventarioSeleccionado,JComboBox jComboBoxMovimientoInventario,List<MovimientoInventario> movimientoinventariosLocal)throws Exception {
		try {
			MovimientoInventario  movimientoinventarioTemp=null;

			for(MovimientoInventario movimientoinventarioAux:movimientoinventariosLocal) {
				if(movimientoinventarioAux.getId()!=null && movimientoinventarioAux.getId().equals(idMovimientoInventarioSeleccionado)) {
					movimientoinventarioTemp=movimientoinventarioAux;
					break;
				}
			}

			jComboBoxMovimientoInventario.setSelectedItem(movimientoinventarioTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxMovimientoInventarioGenerico(JComboBox jComboBoxMovimientoInventario,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxMovimientoInventario.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxMovimientoInventario.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxMovimientoInventario.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxMovimientoInventario.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxMovimientoInventario.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxMovimientoInventario.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxMovimientoInventario.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxMovimientoInventario.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxMovimientoInventario.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxMovimientoInventario.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetalleMovimientoInventario")) {
			jButtonDetalleMovimientoInventarioActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			movimientoinventario=(MovimientoInventario) movimientoinventarioLogic.getMovimientoInventarios().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			movimientoinventario =(MovimientoInventario) movimientoinventarios.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getmes_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getusuario_descripcion();
			}
		}

		if(sTipo.equals("Transaccion")) {
			//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.gettransaccion_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.gettransaccion_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("TipoCambio")) {
			//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.gettipocambio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.gettipocambio_descripcion();
			}
		}

		if(sTipo.equals("EstadoMovimientoInventario")) {
			//sDescripcion=this.getActualEstadoMovimientoInventarioForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getestadomovimientoinventario_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoMovimientoInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getestadomovimientoinventario_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getempleado_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getformato_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getfactura_descripcion();
			}
		}

		if(sTipo.equals("GuiaRemision")) {
			//sDescripcion=this.getActualGuiaRemisionForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getguiaremision_descripcion();
			} else {
				//sDescripcion=this.getActualGuiaRemisionForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getguiaremision_descripcion();
			}
		}

		if(sTipo.equals("Transportista")) {
			//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.gettransportista_descripcion();
			} else {
				//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.gettransportista_descripcion();
			}
		}

		if(sTipo.equals("TipoTransaccionModulo")) {
			//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.gettipotransaccionmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.gettipotransaccionmodulo_descripcion();
			}
		}

		if(sTipo.equals("Compra")) {
			//sDescripcion=this.getActualCompraForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getcompra_descripcion();
			} else {
				//sDescripcion=this.getActualCompraForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getcompra_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!movimientoinventario.getIsNew() && !movimientoinventario.getIsChanged() && !movimientoinventario.getIsDeleted()) {
				sDescripcion=movimientoinventario.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoinventario.getasientocontable_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		MovimientoInventario movimientoinventarioRow=new MovimientoInventario();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			movimientoinventarioRow=(MovimientoInventario) movimientoinventarioLogic.getMovimientoInventarios().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			movimientoinventarioRow=(MovimientoInventario) movimientoinventarios.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetalleMovimientoInventarioActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,MovimientoInventario movimientoinventario) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormMovimientoInventario==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario = (MovimientoInventario)this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.movimientoinventario = (MovimientoInventario)this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(movimientoinventario!=null) {
						this.movimientoinventario = movimientoinventario;
					} else {
						this.movimientoinventario = new MovimientoInventario();
					}
				}

				if(this.isTienePermisosDetalleMovimientoInventario && this.permiteMantenimiento(this.movimientoinventario)) {
					DetalleMovimientoInventarioBeanSwingJInternalFrame detallemovimientoinventarioBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFramePopup=new DetalleMovimientoInventarioBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detallemovimientoinventarioBeanSwingJInternalFrame=this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFramePopup;
					} else {
						detallemovimientoinventarioBeanSwingJInternalFrame=this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame;
					}

					List<MovimientoInventario> movimientoinventarios=new ArrayList<MovimientoInventario>();
					movimientoinventarios.add(this.movimientoinventario);
					if(!esRelacionado) {
						//detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioSessionBean.setConGuardarRelaciones(false);
						//detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detallemovimientoinventarioBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormMovimientoInventario.cargarDetalleMovimientoInventarioBeanSwingJInternalFrame(movimientoinventarios,this.movimientoinventario,detallemovimientoinventarioBeanSwingJInternalFrame,/*conInicializar,*/detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioSessionBean.getConGuardarRelaciones(),detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioSessionBean.getEsGuardarRelacionado());
					detallemovimientoinventarioBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detallemovimientoinventarioBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleMovimientoInventario("no_relacionado");

						detallemovimientoinventarioBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleMovimientoInventarioConstantesFunciones.ITAMANIOFILATABLA + (DetalleMovimientoInventarioConstantesFunciones.ITAMANIOFILATABLA/2));

						detallemovimientoinventarioBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
						TitledBorder titledBorderDetalleMovimientoInventario=(TitledBorder)detallemovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosDetalleMovimientoInventario.getBorder();

						titledBorderDetalleMovimientoInventario.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Detalle Movimiento Inventario");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detallemovimientoinventarioBeanSwingJInternalFrame);
						}

						detallemovimientoinventarioBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detallemovimientoinventarioBeanSwingJInternalFrame);

						detallemovimientoinventarioBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Movimiento Inventario",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualMovimientoInventario(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoMovimientoInventario && this.isPermisoNuevoMovimientoInventario));			
			this.jButtonDuplicarMovimientoInventario.setVisible((this.isVisibilidadCeldaDuplicarMovimientoInventario && this.isPermisoDuplicarMovimientoInventario));			
			this.jButtonCopiarMovimientoInventario.setVisible((this.isVisibilidadCeldaCopiarMovimientoInventario && this.isPermisoCopiarMovimientoInventario));
			this.jButtonVerFormMovimientoInventario.setVisible((this.isVisibilidadCeldaVerFormMovimientoInventario && this.isPermisoVerFormMovimientoInventario));
			
			this.jButtonAbrirOrderByMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenMovimientoInventario && this.isPermisoOrdenMovimientoInventario));			
			
			this.jButtonNuevoRelacionesMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario && this.isPermisoNuevoMovimientoInventario));			
			this.jButtonNuevoGuardarCambiosMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoMovimientoInventario && this.isPermisoNuevoMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));
			
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarMovimientoInventario.setVisible((this.isVisibilidadCeldaModificarMovimientoInventario && this.isPermisoActualizarMovimientoInventario));	
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarMovimientoInventario.setVisible((this.isVisibilidadCeldaActualizarMovimientoInventario && this.isPermisoActualizarMovimientoInventario));	
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarMovimientoInventario.setVisible((this.isVisibilidadCeldaEliminarMovimientoInventario && this.isPermisoEliminarMovimientoInventario));
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarMovimientoInventario);							
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));			
			
			}
						
			this.jButtonGuardarCambiosTablaMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarCambiosMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoMovimientoInventario && this.isPermisoNuevoMovimientoInventario));						
			this.jButtonDuplicarToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaDuplicarMovimientoInventario && this.isPermisoDuplicarMovimientoInventario));						
			this.jButtonCopiarToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaCopiarMovimientoInventario && this.isPermisoCopiarMovimientoInventario));			
			this.jButtonVerFormToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaVerFormMovimientoInventario && this.isPermisoVerFormMovimientoInventario));			
			this.jButtonAbrirOrderByToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenMovimientoInventario && this.isPermisoOrdenMovimientoInventario));
			this.jButtonNuevoRelacionesToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario && this.isPermisoNuevoMovimientoInventario));			
			this.jButtonNuevoGuardarCambiosToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoMovimientoInventario && this.isPermisoNuevoMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));			
			
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaModificarMovimientoInventario && this.isPermisoActualizarMovimientoInventario));	
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaActualizarMovimientoInventario  && this.isPermisoActualizarMovimientoInventario));	
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaEliminarMovimientoInventario && this.isPermisoEliminarMovimientoInventario));
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarToolBarMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarMovimientoInventario);				
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarCambiosMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoMovimientoInventario && this.isPermisoNuevoMovimientoInventario));			
			this.jMenuItemDuplicarMovimientoInventario.setVisible((this.isVisibilidadCeldaDuplicarMovimientoInventario && this.isPermisoDuplicarMovimientoInventario));			
			this.jMenuItemCopiarMovimientoInventario.setVisible((this.isVisibilidadCeldaCopiarMovimientoInventario && this.isPermisoCopiarMovimientoInventario));			
			this.jMenuItemVerFormMovimientoInventario.setVisible((this.isVisibilidadCeldaVerFormMovimientoInventario && this.isPermisoVerFormMovimientoInventario));			
			this.jMenuItemAbrirOrderByMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenMovimientoInventario && this.isPermisoOrdenMovimientoInventario));			
			//this.jMenuItemMostrarOcultarMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenMovimientoInventario && this.isPermisoOrdenMovimientoInventario));
			this.jMenuItemDetalleAbrirOrderByMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenMovimientoInventario && this.isPermisoOrdenMovimientoInventario));			
			//this.jMenuItemDetalleMostrarOcultarMovimientoInventario.setVisible((this.isVisibilidadCeldaOrdenMovimientoInventario && this.isPermisoOrdenMovimientoInventario));			
			this.jMenuItemNuevoRelacionesMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario && this.isPermisoNuevoMovimientoInventario));			
			this.jMenuItemNuevoGuardarCambiosMovimientoInventario.setVisible((this.isVisibilidadCeldaNuevoMovimientoInventario && this.isPermisoNuevoMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));									
			
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemModificarMovimientoInventario.setVisible((this.isVisibilidadCeldaModificarMovimientoInventario && this.isPermisoActualizarMovimientoInventario));	
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemActualizarMovimientoInventario.setVisible((this.isVisibilidadCeldaActualizarMovimientoInventario && this.isPermisoActualizarMovimientoInventario));	
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemEliminarMovimientoInventario.setVisible((this.isVisibilidadCeldaEliminarMovimientoInventario && this.isPermisoEliminarMovimientoInventario));
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemCancelarMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarMovimientoInventario);				
			}
			
			this.jMenuItemGuardarCambiosMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));						
			this.jMenuItemGuardarCambiosTablaMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarCambiosMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoMovimientoInventario=this.jButtonNuevoMovimientoInventario.isVisible();
			this.isVisibilidadCeldaDuplicarMovimientoInventario=this.jButtonDuplicarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaCopiarMovimientoInventario=this.jButtonCopiarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaVerFormMovimientoInventario=this.jButtonVerFormMovimientoInventario.isVisible();
			
			this.isVisibilidadCeldaOrdenMovimientoInventario=this.jButtonAbrirOrderByMovimientoInventario.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=this.jButtonNuevoRelacionesMovimientoInventario.isVisible();
			this.isVisibilidadCeldaModificarMovimientoInventario=this.jButtonModificarMovimientoInventario.isVisible();
			
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			this.isVisibilidadCeldaActualizarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaEliminarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaCancelarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaGuardarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosMovimientoInventario.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=this.jButtonGuardarCambiosTablaMovimientoInventario.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoMovimientoInventario=this.jButtonNuevoToolBarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=this.jButtonNuevoRelacionesToolBarMovimientoInventario.isVisible();
			
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			this.isVisibilidadCeldaModificarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarToolBarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaActualizarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarToolBarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaEliminarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarToolBarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaCancelarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarToolBarMovimientoInventario.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarMovimientoInventario=this.jButtonGuardarCambiosToolBarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=this.jButtonGuardarCambiosTablaToolBarMovimientoInventario.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoMovimientoInventario=this.jMenuItemNuevoMovimientoInventario.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=this.jMenuItemNuevoRelacionesMovimientoInventario.isVisible();
			
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			this.isVisibilidadCeldaModificarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemModificarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaActualizarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemActualizarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaEliminarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemEliminarMovimientoInventario.isVisible();
			this.isVisibilidadCeldaCancelarMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemCancelarMovimientoInventario.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarMovimientoInventario=this.jMenuItemGuardarCambiosMovimientoInventario.isVisible();
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=this.jMenuItemGuardarCambiosTablaMovimientoInventario.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesMovimientoInventario(Boolean esInicializar) {
		if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {			
			if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
				//if(this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesMovimientoInventario();
			}
			
			this.inicializarActualizarBindingBotonesManualMovimientoInventario(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualMovimientoInventario() {
		this.jButtonNuevoMovimientoInventario.setVisible(this.isPermisoNuevoMovimientoInventario);			
		this.jButtonDuplicarMovimientoInventario.setVisible(this.isPermisoDuplicarMovimientoInventario);			
		this.jButtonCopiarMovimientoInventario.setVisible(this.isPermisoCopiarMovimientoInventario);			
		this.jButtonVerFormMovimientoInventario.setVisible(this.isPermisoVerFormMovimientoInventario);			
		
		this.jButtonAbrirOrderByMovimientoInventario.setVisible(this.isPermisoOrdenMovimientoInventario);					
		
		this.jButtonNuevoRelacionesMovimientoInventario.setVisible(this.isPermisoNuevoMovimientoInventario);			
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarMovimientoInventario.setVisible(this.isPermisoActualizarMovimientoInventario);	
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarMovimientoInventario.setVisible(this.isPermisoActualizarMovimientoInventario);	
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarMovimientoInventario.setVisible(this.isPermisoEliminarMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarMovimientoInventario);						
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosMovimientoInventario.setVisible(this.isPermisoGuardarCambiosMovimientoInventario);							
		}
		
		this.jButtonGuardarCambiosTablaMovimientoInventario.setVisible(this.isPermisoActualizarMovimientoInventario);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleMovimientoInventario() {
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarMovimientoInventario.setVisible(this.isPermisoActualizarMovimientoInventario);	
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarMovimientoInventario.setVisible(this.isPermisoActualizarMovimientoInventario);	
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarMovimientoInventario.setVisible(this.isPermisoEliminarMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarMovimientoInventario.setVisible(this.isVisibilidadCeldaCancelarMovimientoInventario);							
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosMovimientoInventario.setVisible((this.isVisibilidadCeldaGuardarMovimientoInventario && this.isPermisoGuardarCambiosMovimientoInventario));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosMovimientoInventario() {
		if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualMovimientoInventario();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesMovimientoInventario() {
	}
	
	public void jTableDatosMovimientoInventarioListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarMovimientoInventario(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.movimientoinventario.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.movimientoinventario.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.movimientoinventario.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.movimientoinventario.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.movimientoinventario.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.movimientoinventario.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.movimientoinventario.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.movimientoinventario.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.movimientoinventario.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccionMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccion=true;

			idTienePermisotransaccion=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(TransaccionConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.transaccionBeanSwingJInternalFrame=new TransaccionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccionBeanSwingJInternalFrame.getTransaccionLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_transaccion()!=null) {
					this.transaccionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccionBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_transaccion());
					this.transaccionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccion();
				}

				JInternalFrameBase jinternalFrame =this.transaccionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordertransaccion=(TitledBorder)this.transaccionBeanSwingJInternalFrame.jScrollPanelDatosTransaccion.getBorder();

				titledBordertransaccion.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Transaccion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccionMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_transaccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion = "+this.movimientoinventario.getid_transaccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.movimientoinventario.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_entregaMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getfecha_entrega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_entrega = '"+Funciones2.getStringPostgresDate(this.movimientoinventario.getfecha_entrega())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_secuencialMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getnumero_secuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_secuencial like '%"+this.movimientoinventario.getnumero_secuencial()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.movimientoinventario.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cambioMovimientoInventarioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="TipoCambio";

			if(!this.sFinalQueryGeneral_tipocambio.equals("")) {
				this.tipocambioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_tipocambio);
				this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.tipocambioBeanSwingJInternalFrame.procesarBusqueda(this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda);
				this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTipoCambio(false);
			}

			if(!this.sFinalQueryComboTipoCambio.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderMovimientoInventario=null;
			TitledBorder titledBordertipocambio=null;

			if(!this.jScrollPanelDatosMovimientoInventario.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Tipo Cambio");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_tipo_cambioMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocambio=true;

			idTienePermisotipocambio=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(TipoCambioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocambio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocambioBeanSwingJInternalFrame.getTipoCambioLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_tipo_cambio()!=null) {
					this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocambioBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_tipo_cambio());
					this.tipocambioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCambio();
				}

				JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Tipo Cambio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cambioMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_tipo_cambio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cambio = "+this.movimientoinventario.getid_tipo_cambio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_movimiento_inventarioMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadomovimientoinventario=true;

			idTienePermisoestadomovimientoinventario=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(EstadoMovimientoInventarioConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadomovimientoinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.estadomovimientoinventarioBeanSwingJInternalFrame=new EstadoMovimientoInventarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadomovimientoinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadomovimientoinventarioBeanSwingJInternalFrame.getEstadoMovimientoInventarioLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_estado_movimiento_inventario()!=null) {
					this.estadomovimientoinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadomovimientoinventarioBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_estado_movimiento_inventario());
					this.estadomovimientoinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadomovimientoinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadomovimientoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoMovimientoInventario();
				}

				JInternalFrameBase jinternalFrame =this.estadomovimientoinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderestadomovimientoinventario=(TitledBorder)this.estadomovimientoinventarioBeanSwingJInternalFrame.jScrollPanelDatosEstadoMovimientoInventario.getBorder();

				titledBorderestadomovimientoinventario.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Estado Movimiento Inventario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_movimiento_inventarioMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_estado_movimiento_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_movimiento_inventario = "+this.movimientoinventario.getid_estado_movimiento_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoMovimientoInventarioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderMovimientoInventario=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosMovimientoInventario.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.movimientoinventario.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.movimientoinventario.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaMovimientoInventarioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderMovimientoInventario=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosMovimientoInventario.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.movimientoinventario.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_facturaMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getnumero_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_factura like '%"+this.movimientoinventario.getnumero_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_guia_remisionMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoguiaremision=true;

			idTienePermisoguiaremision=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(GuiaRemisionConstantesFunciones.CLASSNAME);

			if(idTienePermisoguiaremision) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.guiaremisionBeanSwingJInternalFrame=new GuiaRemisionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.guiaremisionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.guiaremisionBeanSwingJInternalFrame.getGuiaRemisionLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_guia_remision()!=null) {
					this.guiaremisionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.guiaremisionBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_guia_remision());
					this.guiaremisionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.guiaremisionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.guiaremisionBeanSwingJInternalFrame.inicializarActualizarBindingTablaGuiaRemision();
				}

				JInternalFrameBase jinternalFrame =this.guiaremisionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderguiaremision=(TitledBorder)this.guiaremisionBeanSwingJInternalFrame.jScrollPanelDatosGuiaRemision.getBorder();

				titledBorderguiaremision.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Guia Remision");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_guia_remisionMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_guia_remision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_guia_remision = "+this.movimientoinventario.getid_guia_remision().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transportistaMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransportista=true;

			idTienePermisotransportista=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(TransportistaConstantesFunciones.CLASSNAME);

			if(idTienePermisotransportista) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.transportistaBeanSwingJInternalFrame=new TransportistaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transportistaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transportistaBeanSwingJInternalFrame.getTransportistaLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_transportista()!=null) {
					this.transportistaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transportistaBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_transportista());
					this.transportistaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransportista();
				}

				JInternalFrameBase jinternalFrame =this.transportistaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordertransportista=(TitledBorder)this.transportistaBeanSwingJInternalFrame.jScrollPanelDatosTransportista.getBorder();

				titledBordertransportista.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Transportista");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transportistaMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_transportista()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transportista = "+this.movimientoinventario.getid_transportista().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.movimientoinventario.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonporcentaje_descuentoMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getporcentaje_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where porcentaje_descuento = "+this.movimientoinventario.getporcentaje_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsumanMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getsuman()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where suman = "+this.movimientoinventario.getsuman().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.movimientoinventario.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_descuentoMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getvalor_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_descuento = "+this.movimientoinventario.getvalor_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_descuentoMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.gettotal_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_descuento = "+this.movimientoinventario.gettotal_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.movimientoinventario.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonstockMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getstock()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where stock = "+this.movimientoinventario.getstock().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.movimientoinventario.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_otroMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.gettotal_otro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_otro = "+this.movimientoinventario.gettotal_otro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonultimo_costoMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getultimo_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ultimo_costo = "+this.movimientoinventario.getultimo_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_itemsMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getnumero_items()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_items = "+this.movimientoinventario.getnumero_items().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonretencionMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getretencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where retencion = "+this.movimientoinventario.getretencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.movimientoinventario.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfleteMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getflete()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where flete = "+this.movimientoinventario.getflete().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonimpuestoMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getimpuesto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where impuesto = "+this.movimientoinventario.getimpuesto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_transaccion_moduloMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotransaccionmodulo=true;

			idTienePermisotipotransaccionmodulo=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(TipoTransaccionModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotransaccionmodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.tipotransaccionmoduloBeanSwingJInternalFrame=new TipoTransaccionModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotransaccionmoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotransaccionmoduloBeanSwingJInternalFrame.getTipoTransaccionModuloLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_tipo_transaccion_modulo()!=null) {
					this.tipotransaccionmoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_tipo_transaccion_modulo());
					this.tipotransaccionmoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTransaccionModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipotransaccionmoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordertipotransaccionmodulo=(TitledBorder)this.tipotransaccionmoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoTransaccionModulo.getBorder();

				titledBordertipotransaccionmodulo.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Tipo Transaccion Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_transaccion_moduloMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_tipo_transaccion_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_transaccion_modulo = "+this.movimientoinventario.getid_tipo_transaccion_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_compraMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocompra=true;

			idTienePermisocompra=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(CompraConstantesFunciones.CLASSNAME);

			if(idTienePermisocompra) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.compraBeanSwingJInternalFrame=new CompraBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.compraBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.compraBeanSwingJInternalFrame.getCompraLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_compra()!=null) {
					this.compraBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.compraBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_compra());
					this.compraBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.compraBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.compraBeanSwingJInternalFrame.inicializarActualizarBindingTablaCompra();
				}

				JInternalFrameBase jinternalFrame =this.compraBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBordercompra=(TitledBorder)this.compraBeanSwingJInternalFrame.jScrollPanelDatosCompra.getBorder();

				titledBordercompra.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Compra");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_compraMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_compra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_compra = "+this.movimientoinventario.getid_compra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableMovimientoInventarioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderMovimientoInventario=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosMovimientoInventario.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableMovimientoInventarioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebMovimientoInventario(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoInventario.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoInventario.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.movimientoinventarioLogic.getConnexion());

				if(this.movimientoinventario.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.movimientoinventario.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoInventario=(TitledBorder)this.jScrollPanelDatosMovimientoInventario.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderMovimientoInventario.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.movimientoinventario.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongenerico_idMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getgenerico_id()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where generico_id = "+this.movimientoinventario.getgenerico_id().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontipo_idMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.gettipo_id()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where tipo_id like '%"+this.movimientoinventario.gettipo_id()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_comprobanteMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getnumero_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_comprobante like '%"+this.movimientoinventario.getnumero_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaMovimientoInventarioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.getmovimientoinventario(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoinventario==null) {
						this.movimientoinventario = new MovimientoInventario();
					}

					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);
				}

				if(this.movimientoinventario.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.movimientoinventario.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoInventario(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdAnio();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAsientoContableMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdAsientoContable();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCompraMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdCompra();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdEjercicio();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdEmpleado();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdEmpresa();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoMovimientoInventarioMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdEstadoMovimientoInventario();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdFactura();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdFormato();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdGuiaRemisionMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdGuiaRemision();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdMes();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModuloMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdModulo();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdMoneda();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdPeriodo();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdSucursal();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCambioMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdTipoCambio();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTransaccionModuloMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdTipoTransaccionModulo();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransaccionMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdTransaccion();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransportistaMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdTransportista();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioMovimientoInventarioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoInventario(false,false);

			this.getMovimientoInventariosFK_IdUsuario();

			this.inicializarActualizarBindingMovimientoInventario(false);

			//if(MovimientoInventarioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoInventario(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoinventarioLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameMovimientoInventario() {
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
		

		if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
			this.jInternalFrameDetalleFormMovimientoInventario.setVisible(false);	    			
			this.jInternalFrameDetalleFormMovimientoInventario.dispose();
			this.jInternalFrameDetalleFormMovimientoInventario=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
			this.jInternalFrameReporteDinamicoMovimientoInventario.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoMovimientoInventario.dispose();
			this.jInternalFrameReporteDinamicoMovimientoInventario=null;
		}
		
		if(this.jInternalFrameImportacionMovimientoInventario!=null) {
			this.jInternalFrameImportacionMovimientoInventario.setVisible(false);	    			
			this.jInternalFrameImportacionMovimientoInventario.dispose();
			this.jInternalFrameImportacionMovimientoInventario=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessMovimientoInventario();
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			
			if(sTipo.equals("NuevoMovimientoInventario")) {
				jButtonNuevoMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarMovimientoInventario")) {
				jButtonDuplicarMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarMovimientoInventario")) {
				jButtonCopiarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("VerFormMovimientoInventario")) {
				jButtonVerFormMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarMovimientoInventario")) {
				jButtonNuevoMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarMovimientoInventario")) {
				jButtonDuplicarMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoMovimientoInventario")) {
				jButtonNuevoMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarMovimientoInventario")) {
				jButtonDuplicarMovimientoInventarioActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesMovimientoInventario")) {
				jButtonNuevoMovimientoInventarioActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarMovimientoInventario")) {
				jButtonNuevoMovimientoInventarioActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesMovimientoInventario")) {
				jButtonNuevoMovimientoInventarioActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarMovimientoInventario")) {
				jButtonModificarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarMovimientoInventario")) {
				jButtonModificarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarMovimientoInventario")) {
				jButtonModificarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("ActualizarMovimientoInventario")) {
				jButtonActualizarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarMovimientoInventario")) {
				jButtonActualizarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarMovimientoInventario")) {
				jButtonActualizarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("EliminarMovimientoInventario")) {
				jButtonEliminarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarMovimientoInventario")) {
				jButtonEliminarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarMovimientoInventario")) {
				jButtonEliminarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CancelarMovimientoInventario")) {
				jButtonCancelarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarMovimientoInventario")) {
				jButtonCancelarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarMovimientoInventario")) {
				jButtonCancelarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CerrarMovimientoInventario")) {
				jButtonCerrarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarMovimientoInventario")) {
				jButtonCerrarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarMovimientoInventario")) {
				jButtonCerrarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarMovimientoInventario")) {
				jButtonMostrarOcultarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarMovimientoInventario")) {
				jButtonCancelarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosMovimientoInventario")) {
				jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarMovimientoInventario")) {
				jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarMovimientoInventario")) {
				jButtonCopiarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarMovimientoInventario")) {
				jButtonVerFormMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosMovimientoInventario")) {
				jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarMovimientoInventario")) {
				jButtonCopiarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormMovimientoInventario")) {
				jButtonVerFormMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaMovimientoInventario")) {
				jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarMovimientoInventario")) {
				jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaMovimientoInventario")) {
				jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionMovimientoInventario")) {
				jButtonRecargarInformacionMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarMovimientoInventario")) {
				jButtonRecargarInformacionMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionMovimientoInventario")) {
				jButtonRecargarInformacionMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresMovimientoInventario")) {
				jButtonAnterioresMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarMovimientoInventario")) {
				jButtonAnterioresMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreMovimientoInventario")) {
				jButtonAnterioresMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("SiguientesMovimientoInventario")) {
				jButtonSiguientesMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarMovimientoInventario")) {
				jButtonSiguientesMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesMovimientoInventario")) {
				jButtonSiguientesMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByMovimientoInventario") || sTipo.equals("MenuItemDetalleAbrirOrderByMovimientoInventario")) {
				jButtonAbrirOrderByMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarMovimientoInventario") || sTipo.equals("MenuItemDetalleMostrarOcultarMovimientoInventario")) {
				jButtonMostrarOcultarMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosMovimientoInventario")) {
				jButtonNuevoGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarMovimientoInventario")) {
				jButtonNuevoGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosMovimientoInventario")) {
				jButtonNuevoGuardarCambiosMovimientoInventarioActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoMovimientoInventario")) {
				jButtonCerrarReporteDinamicoMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoMovimientoInventario")) {
				jButtonGenerarReporteDinamicoMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoMovimientoInventario")) {
				
				jButtonGenerarExcelReporteDinamicoMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionMovimientoInventario")) {
				jButtonCerrarImportacionMovimientoInventarioActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionMovimientoInventario")) {
				
				jButtonGenerarImportacionMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionMovimientoInventario")) {
				
				jButtonAbrirImportacionMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesMovimientoInventario")) {
				jComboBoxTiposAccionesMovimientoInventarioActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesMovimientoInventario")) {
				jComboBoxTiposRelacionesMovimientoInventarioActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioMovimientoInventario")) {
				jComboBoxTiposAccionesMovimientoInventarioActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarMovimientoInventario")) {
				
				jComboBoxTiposSeleccionarMovimientoInventarioActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralMovimientoInventario")) {
				jTextFieldValorCampoGeneralMovimientoInventarioActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByMovimientoInventario")) {
				jButtonAbrirOrderByMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarMovimientoInventario")) {
				jButtonAbrirOrderByMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByMovimientoInventario")) {
				jButtonCerrarOrderByMovimientoInventarioActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idMovimientoInventarioBusqueda")) {
				this.jButtonidMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaMovimientoInventarioUpdate")) {
				this.jButtonid_empresaMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaMovimientoInventarioBusqueda")) {
				this.jButtonid_empresaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalMovimientoInventarioUpdate")) {
				this.jButtonid_sucursalMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalMovimientoInventarioBusqueda")) {
				this.jButtonid_sucursalMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloMovimientoInventarioUpdate")) {
				this.jButtonid_moduloMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloMovimientoInventarioBusqueda")) {
				this.jButtonid_moduloMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioMovimientoInventarioUpdate")) {
				this.jButtonid_ejercicioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioMovimientoInventarioBusqueda")) {
				this.jButtonid_ejercicioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoMovimientoInventarioUpdate")) {
				this.jButtonid_periodoMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoMovimientoInventarioBusqueda")) {
				this.jButtonid_periodoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioMovimientoInventarioUpdate")) {
				this.jButtonid_anioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioMovimientoInventarioBusqueda")) {
				this.jButtonid_anioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesMovimientoInventarioUpdate")) {
				this.jButtonid_mesMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesMovimientoInventarioBusqueda")) {
				this.jButtonid_mesMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioMovimientoInventarioUpdate")) {
				this.jButtonid_usuarioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioMovimientoInventarioBusqueda")) {
				this.jButtonid_usuarioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionMovimientoInventarioUpdate")) {
				this.jButtonid_transaccionMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionMovimientoInventarioBusqueda")) {
				this.jButtonid_transaccionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionMovimientoInventarioBusqueda")) {
				this.jButtonfecha_emisionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_entregaMovimientoInventarioBusqueda")) {
				this.jButtonfecha_entregaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialMovimientoInventarioBusqueda")) {
				this.jButtonnumero_secuencialMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaMovimientoInventarioUpdate")) {
				this.jButtonid_monedaMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaMovimientoInventarioBusqueda")) {
				this.jButtonid_monedaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioMovimientoInventario")) {
				this.jButtonid_tipo_cambioMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioMovimientoInventarioUpdate")) {
				this.jButtonid_tipo_cambioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioMovimientoInventarioBusqueda")) {
				this.jButtonid_tipo_cambioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_movimiento_inventarioMovimientoInventarioUpdate")) {
				this.jButtonid_estado_movimiento_inventarioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_movimiento_inventarioMovimientoInventarioBusqueda")) {
				this.jButtonid_estado_movimiento_inventarioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoMovimientoInventario")) {
				this.jButtonid_empleadoMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoMovimientoInventarioUpdate")) {
				this.jButtonid_empleadoMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoMovimientoInventarioBusqueda")) {
				this.jButtonid_empleadoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoMovimientoInventarioUpdate")) {
				this.jButtonid_formatoMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoMovimientoInventarioBusqueda")) {
				this.jButtonid_formatoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaMovimientoInventario")) {
				this.jButtonid_facturaMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaMovimientoInventarioUpdate")) {
				this.jButtonid_facturaMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaMovimientoInventarioBusqueda")) {
				this.jButtonid_facturaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaMovimientoInventarioBusqueda")) {
				this.jButtonnumero_facturaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_guia_remisionMovimientoInventarioUpdate")) {
				this.jButtonid_guia_remisionMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_guia_remisionMovimientoInventarioBusqueda")) {
				this.jButtonid_guia_remisionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaMovimientoInventarioUpdate")) {
				this.jButtonid_transportistaMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaMovimientoInventarioBusqueda")) {
				this.jButtonid_transportistaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionMovimientoInventarioBusqueda")) {
				this.jButtondescripcionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_descuentoMovimientoInventarioBusqueda")) {
				this.jButtonporcentaje_descuentoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanMovimientoInventarioBusqueda")) {
				this.jButtonsumanMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceMovimientoInventarioBusqueda")) {
				this.jButtoniceMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_descuentoMovimientoInventarioBusqueda")) {
				this.jButtonvalor_descuentoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_descuentoMovimientoInventarioBusqueda")) {
				this.jButtontotal_descuentoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaMovimientoInventarioBusqueda")) {
				this.jButtonivaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("stockMovimientoInventarioBusqueda")) {
				this.jButtonstockMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalMovimientoInventarioBusqueda")) {
				this.jButtonsub_totalMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_otroMovimientoInventarioBusqueda")) {
				this.jButtontotal_otroMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ultimo_costoMovimientoInventarioBusqueda")) {
				this.jButtonultimo_costoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_itemsMovimientoInventarioBusqueda")) {
				this.jButtonnumero_itemsMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionMovimientoInventarioBusqueda")) {
				this.jButtonretencionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalMovimientoInventarioBusqueda")) {
				this.jButtontotalMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteMovimientoInventarioBusqueda")) {
				this.jButtonfleteMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("impuestoMovimientoInventarioBusqueda")) {
				this.jButtonimpuestoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloMovimientoInventarioUpdate")) {
				this.jButtonid_tipo_transaccion_moduloMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloMovimientoInventarioBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_compraMovimientoInventarioUpdate")) {
				this.jButtonid_compraMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_compraMovimientoInventarioBusqueda")) {
				this.jButtonid_compraMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableMovimientoInventario")) {
				this.jButtonid_asiento_contableMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableMovimientoInventarioUpdate")) {
				this.jButtonid_asiento_contableMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableMovimientoInventarioBusqueda")) {
				this.jButtonid_asiento_contableMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("generico_idMovimientoInventarioBusqueda")) {
				this.jButtongenerico_idMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("tipo_idMovimientoInventarioBusqueda")) {
				this.jButtontipo_idMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteMovimientoInventarioBusqueda")) {
				this.jButtonnumero_comprobanteMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaMovimientoInventarioBusqueda")) {
				this.jButtonfechaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableMovimientoInventario")) {
				this.jButtonid_asiento_contableMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("id_empleadoMovimientoInventario")) {
				this.jButtonid_empleadoMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("id_facturaMovimientoInventario")) {
				this.jButtonid_facturaMovimientoInventarioActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdAsientoContableMovimientoInventario")) {
				this.jButtonFK_IdAsientoContableMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCompraMovimientoInventario")) {
				this.jButtonFK_IdCompraMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpleadoMovimientoInventario")) {
				this.jButtonFK_IdEmpleadoMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoMovimientoInventarioMovimientoInventario")) {
				this.jButtonFK_IdEstadoMovimientoInventarioMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFacturaMovimientoInventario")) {
				this.jButtonFK_IdFacturaMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdGuiaRemisionMovimientoInventario")) {
				this.jButtonFK_IdGuiaRemisionMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTransaccionModuloMovimientoInventario")) {
				this.jButtonFK_IdTipoTransaccionModuloMovimientoInventarioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransaccionMovimientoInventario")) {
				this.jButtonFK_IdTransaccionMovimientoInventarioActionPerformed(evt);
			}
			
			;
			
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessMovimientoInventario();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoInventarioActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				


			if(sTipo.equals("porcentaje_descuentoMovimientoInventario")) {
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("valor_descuentoMovimientoInventario")) {
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			MovimientoInventario movimientoinventarioLocal=null;
			
			if(!this.getEsControlTabla()) {
				movimientoinventarioLocal=this.movimientoinventario;
			} else {
				movimientoinventarioLocal=this.movimientoinventarioAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


				if(sTipo.equals("porcentaje_descuentoMovimientoInventario")) {
					if(movimientoinventarioLocal.getporcentaje_descuento()==Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("valor_descuentoMovimientoInventario")) {
					if(movimientoinventarioLocal.getvalor_descuento()==Double.parseDouble(this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.getText())){existeCambio=false;};
				}
			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
							
				
				


			if(sTipo.equals("porcentaje_descuentoMovimientoInventario")) {
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("valor_descuentoMovimientoInventario")) {
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			if(sTipo.equals("porcentaje_descuentoMovimientoInventario")) {
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("valor_descuentoMovimientoInventario")) {
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoInventarioActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
								
						
				


				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
								
				
				


				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoInventarioActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
			
			this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
							
				
				


				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoInventarioActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoInventarioActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
			
			this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
								
				
				


			if(sTipo.equals("porcentaje_descuentoMovimientoInventario")) {
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("valor_descuentoMovimientoInventario")) {
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoInventarioActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
			
			this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoInventarioActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosMovimientoInventario")) {
					jCheckBoxSeleccionarTodosMovimientoInventarioItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosMovimientoInventario")) {
					jCheckBoxSeleccionadosMovimientoInventarioItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarMovimientoInventario")) {
					
				}
				
				


				
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
												
				
				


				
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoInventarioActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoInventarioActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_transaccionMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario;
				}

				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTransaccion(jComboBoxGenerico,"Formulario");

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario")) {
				this.procesarActionsCombosForeignKeyTransaccion(jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario,"FK_IdTransaccion");
				//recargarFormMovimientoInventarioTransaccion(jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario,"FK_IdTransaccion");
			}
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoInventarioActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_transaccionMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario;
				}

				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTransaccion(jComboBoxGenerico,"Formulario");

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario")) {
				this.procesarActionsCombosForeignKeyTransaccion(jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario,"FK_IdTransaccion");
				//recargarFormMovimientoInventarioTransaccion(jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario,"FK_IdTransaccion");
			}
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoinventario);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoinventario);
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_transaccionMovimientoInventario")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario;
				}

				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					//classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTransaccion(jComboBoxGenerico,"Formulario");

				this.recargarFormMovimientoInventario(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario")) {
				this.procesarActionsCombosForeignKeyTransaccion(jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario,"FK_IdTransaccion");
				//recargarFormMovimientoInventarioTransaccion(jComboBoxid_transaccionFK_IdTransaccionMovimientoInventario,"FK_IdTransaccion");
			}
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoInventario.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoInventario.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoInventarioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoinventarioAnterior =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarMovimientoInventario")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosMovimientoInventarioListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosMovimientoInventario.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.movimientoinventario =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.movimientoinventario =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.movimientoinventario);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarMovimientoInventario")) {
				
				}
				
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarMovimientoInventario")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosMovimientoInventario.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarMovimientoInventario")) {
			
			}
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessMovimientoInventario();
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			if(sTipo.equals("NuevoMovimientoInventario")) {
				jButtonNuevoMovimientoInventarioActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarMovimientoInventario")) {
				jButtonDuplicarMovimientoInventarioActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarMovimientoInventario")) {
				jButtonCopiarMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormMovimientoInventario")) {
				jButtonVerFormMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesMovimientoInventario")) {
				jButtonNuevoMovimientoInventarioActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarMovimientoInventario")) {
				jButtonModificarMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarMovimientoInventario")) {
				jButtonActualizarMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarMovimientoInventario")) {
				jButtonEliminarMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaMovimientoInventario")) {
				jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarMovimientoInventario")) {
				jButtonCancelarMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarMovimientoInventario")) {
				jButtonCerrarMovimientoInventarioActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosMovimientoInventario")) {
				jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosMovimientoInventario")) {
				jButtonNuevoGuardarCambiosMovimientoInventarioActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByMovimientoInventario")) {
				jButtonAbrirOrderByMovimientoInventarioActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionMovimientoInventario")) {
				jButtonRecargarInformacionMovimientoInventarioActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresMovimientoInventario")) {
				jButtonAnterioresMovimientoInventarioActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesMovimientoInventario")) {
				jButtonSiguientesMovimientoInventarioActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idMovimientoInventarioBusqueda")) {
				this.jButtonidMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaMovimientoInventarioUpdate")) {
				this.jButtonid_empresaMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaMovimientoInventarioBusqueda")) {
				this.jButtonid_empresaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalMovimientoInventarioUpdate")) {
				this.jButtonid_sucursalMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalMovimientoInventarioBusqueda")) {
				this.jButtonid_sucursalMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloMovimientoInventarioUpdate")) {
				this.jButtonid_moduloMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloMovimientoInventarioBusqueda")) {
				this.jButtonid_moduloMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioMovimientoInventarioUpdate")) {
				this.jButtonid_ejercicioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioMovimientoInventarioBusqueda")) {
				this.jButtonid_ejercicioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoMovimientoInventarioUpdate")) {
				this.jButtonid_periodoMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoMovimientoInventarioBusqueda")) {
				this.jButtonid_periodoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioMovimientoInventarioUpdate")) {
				this.jButtonid_anioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioMovimientoInventarioBusqueda")) {
				this.jButtonid_anioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesMovimientoInventarioUpdate")) {
				this.jButtonid_mesMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesMovimientoInventarioBusqueda")) {
				this.jButtonid_mesMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioMovimientoInventarioUpdate")) {
				this.jButtonid_usuarioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioMovimientoInventarioBusqueda")) {
				this.jButtonid_usuarioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionMovimientoInventarioUpdate")) {
				this.jButtonid_transaccionMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionMovimientoInventarioBusqueda")) {
				this.jButtonid_transaccionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionMovimientoInventarioBusqueda")) {
				this.jButtonfecha_emisionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_entregaMovimientoInventarioBusqueda")) {
				this.jButtonfecha_entregaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialMovimientoInventarioBusqueda")) {
				this.jButtonnumero_secuencialMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaMovimientoInventarioUpdate")) {
				this.jButtonid_monedaMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaMovimientoInventarioBusqueda")) {
				this.jButtonid_monedaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioMovimientoInventario")) {
				this.jButtonid_tipo_cambioMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioMovimientoInventarioUpdate")) {
				this.jButtonid_tipo_cambioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioMovimientoInventarioBusqueda")) {
				this.jButtonid_tipo_cambioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_movimiento_inventarioMovimientoInventarioUpdate")) {
				this.jButtonid_estado_movimiento_inventarioMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_movimiento_inventarioMovimientoInventarioBusqueda")) {
				this.jButtonid_estado_movimiento_inventarioMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoMovimientoInventario")) {
				this.jButtonid_empleadoMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoMovimientoInventarioUpdate")) {
				this.jButtonid_empleadoMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoMovimientoInventarioBusqueda")) {
				this.jButtonid_empleadoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoMovimientoInventarioUpdate")) {
				this.jButtonid_formatoMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoMovimientoInventarioBusqueda")) {
				this.jButtonid_formatoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaMovimientoInventario")) {
				this.jButtonid_facturaMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaMovimientoInventarioUpdate")) {
				this.jButtonid_facturaMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaMovimientoInventarioBusqueda")) {
				this.jButtonid_facturaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaMovimientoInventarioBusqueda")) {
				this.jButtonnumero_facturaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_guia_remisionMovimientoInventarioUpdate")) {
				this.jButtonid_guia_remisionMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_guia_remisionMovimientoInventarioBusqueda")) {
				this.jButtonid_guia_remisionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaMovimientoInventarioUpdate")) {
				this.jButtonid_transportistaMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaMovimientoInventarioBusqueda")) {
				this.jButtonid_transportistaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionMovimientoInventarioBusqueda")) {
				this.jButtondescripcionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_descuentoMovimientoInventarioBusqueda")) {
				this.jButtonporcentaje_descuentoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanMovimientoInventarioBusqueda")) {
				this.jButtonsumanMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceMovimientoInventarioBusqueda")) {
				this.jButtoniceMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_descuentoMovimientoInventarioBusqueda")) {
				this.jButtonvalor_descuentoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_descuentoMovimientoInventarioBusqueda")) {
				this.jButtontotal_descuentoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaMovimientoInventarioBusqueda")) {
				this.jButtonivaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("stockMovimientoInventarioBusqueda")) {
				this.jButtonstockMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalMovimientoInventarioBusqueda")) {
				this.jButtonsub_totalMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_otroMovimientoInventarioBusqueda")) {
				this.jButtontotal_otroMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ultimo_costoMovimientoInventarioBusqueda")) {
				this.jButtonultimo_costoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_itemsMovimientoInventarioBusqueda")) {
				this.jButtonnumero_itemsMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionMovimientoInventarioBusqueda")) {
				this.jButtonretencionMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalMovimientoInventarioBusqueda")) {
				this.jButtontotalMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteMovimientoInventarioBusqueda")) {
				this.jButtonfleteMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("impuestoMovimientoInventarioBusqueda")) {
				this.jButtonimpuestoMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloMovimientoInventarioUpdate")) {
				this.jButtonid_tipo_transaccion_moduloMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloMovimientoInventarioBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_compraMovimientoInventarioUpdate")) {
				this.jButtonid_compraMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_compraMovimientoInventarioBusqueda")) {
				this.jButtonid_compraMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableMovimientoInventario")) {
				this.jButtonid_asiento_contableMovimientoInventarioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableMovimientoInventarioUpdate")) {
				this.jButtonid_asiento_contableMovimientoInventarioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableMovimientoInventarioBusqueda")) {
				this.jButtonid_asiento_contableMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("generico_idMovimientoInventarioBusqueda")) {
				this.jButtongenerico_idMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("tipo_idMovimientoInventarioBusqueda")) {
				this.jButtontipo_idMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteMovimientoInventarioBusqueda")) {
				this.jButtonnumero_comprobanteMovimientoInventarioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaMovimientoInventarioBusqueda")) {
				this.jButtonfechaMovimientoInventarioBusquedaActionPerformed(evt);
			}
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessMovimientoInventario();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameMovimientoInventario")) {
				closingInternalFrameMovimientoInventario();
				
			} else if(sTipo.equals("jButtonCancelarMovimientoInventario")) {
				JInternalFrameBase jInternalFrameDetalleFormMovimientoInventario = (JInternalFrameBase)evt.getSource();
	            	
	            MovimientoInventarioBeanSwingJInternalFrame jInternalFrameParent=(MovimientoInventarioBeanSwingJInternalFrame)jInternalFrameDetalleFormMovimientoInventario.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarMovimientoInventarioActionPerformed(null);
			}
			
			MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.movimientoinventario,new Object(),this.movimientoinventarioParameterGeneral,this.movimientoinventarioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormMovimientoInventario(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormMovimientoInventario(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormMovimientoInventario(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.movimientoinventario)) {
			if(!esControlTabla) {
				if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);			
				}
				
				if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualMovimientoInventario(this.movimientoinventario,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.movimientoinventarioReturnGeneral=movimientoinventarioLogic.procesarEventosMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.movimientoinventarioLogic.getMovimientoInventarios(),this.movimientoinventario,this.movimientoinventarioParameterGeneral,this.isEsNuevoMovimientoInventario,classes);//this.movimientoinventarioLogic.getMovimientoInventario()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanMovimientoInventario(this.movimientoinventarioReturnGeneral,this.movimientoinventarioBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanMovimientoInventario(classes,this.movimientoinventarioReturnGeneral,this.movimientoinventarioBean,false);
					}
						
					if(this.movimientoinventarioReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyMovimientoInventario(this.movimientoinventarioReturnGeneral.getMovimientoInventario());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioMovimientoInventario(this.movimientoinventarioReturnGeneral.getMovimientoInventario());	
					}
						
					if(this.movimientoinventarioReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioMovimientoInventario(this.movimientoinventarioReturnGeneral.getMovimientoInventario(),classes);//this.movimientoinventarioBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioMovimientoInventario(this.movimientoinventario,classes);//this.movimientoinventarioBean);									
				}
			
				if(MovimientoInventarioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualMovimientoInventario(this.movimientoinventario,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoInventario(this.movimientoinventario);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.movimientoinventarioAnterior!=null) {
						this.movimientoinventario=this.movimientoinventarioAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.movimientoinventarioReturnGeneral=movimientoinventarioLogic.procesarEventosMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.movimientoinventarioLogic.getMovimientoInventarios(),this.movimientoinventario,this.movimientoinventarioParameterGeneral,this.isEsNuevoMovimientoInventario,classes);//this.movimientoinventarioLogic.getMovimientoInventario()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.movimientoinventarioSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.movimientoinventarioSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.movimientoinventarioReturnGeneral.getMovimientoInventario(),movimientoinventarioLogic.getMovimientoInventarios());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.movimientoinventarioReturnGeneral.getMovimientoInventario(),this.movimientoinventarios);
				}
				//ARCHITECTURE
				
				//this.jTableDatosMovimientoInventario.repaint();
				
				//((AbstractTableModel) this.jTableDatosMovimientoInventario.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosMovimientoInventario();
			}
		}
	}
	
	public void actualizarVisualTableDatosMovimientoInventario() throws Exception {
		
		MovimientoInventarioModel movimientoinventarioModel=(MovimientoInventarioModel)this.jTableDatosMovimientoInventario.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			movimientoinventarioModel.movimientoinventarios=this.movimientoinventarioLogic.getMovimientoInventarios();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			movimientoinventarioModel.movimientoinventarios=this.movimientoinventarios;
		}
		
		
		((MovimientoInventarioModel) this.jTableDatosMovimientoInventario.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaMovimientoInventario() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getmovimientoinventarioAnterior(),this.movimientoinventarioLogic.getMovimientoInventarios());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getmovimientoinventarioAnterior(),this.movimientoinventarios);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosMovimientoInventario();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioMovimientoInventario(MovimientoInventario movimientoinventario,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleMovimientoInventario.class)) {
					this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(movimientoinventario.getDetalleMovimientoInventarios());
					this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.movimientoinventario,new Object(),generalEntityParameterGeneral,this.movimientoinventarioReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.movimientoinventarioSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsOfMovimientoInventario(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=MovimientoInventarioConstantesFunciones.getClassesRelationshipsFromStringsOfMovimientoInventario(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormMovimientoInventario(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				MovimientoInventarioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.movimientoinventario,new Object(),generalEntityParameterGeneral,this.movimientoinventarioReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioMovimientoInventario(MovimientoInventarioBean movimientoinventarioBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleMovimientoInventario.class)) {
					this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.setDetalleMovimientoInventarios(movimientoinventario.getDetalleMovimientoInventarios());
					this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleMovimientoInventario(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanMovimientoInventario(ArrayList<Classe> classes,MovimientoInventarioReturnGeneral movimientoinventarioReturnGeneral,MovimientoInventarioBean movimientoinventarioBean,Boolean conDefault) throws Exception {
		
			this.movimientoinventarioBean.setDetalleMovimientoInventarios(movimientoinventarioReturnGeneral.getMovimientoInventario().getDetalleMovimientoInventarios());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualMovimientoInventario(MovimientoInventario movimientoinventario,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleMovimientoInventario.class)) {
					movimientoinventario.setDetalleMovimientoInventarios(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioBeanSwingJInternalFrame.detallemovimientoinventarioLogic.getDetalleMovimientoInventarios());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.movimientoinventario)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormMovimientoInventario = new MovimientoInventarioDetalleFormJInternalFrame(jDesktopPane,this.movimientoinventarioSessionBean.getConGuardarRelaciones(),this.movimientoinventarioSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.setVisible(false);
		this.jInternalFrameDetalleFormMovimientoInventario.setSelected(false);						
		
		this.jInternalFrameDetalleFormMovimientoInventario.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormMovimientoInventario.movimientoinventarioLogic=this.movimientoinventarioLogic;
		
		this.cargarCombosFrameForeignKeyMovimientoInventario("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleMovimientoInventario();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleMovimientoInventario();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyMovimientoInventario("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyMovimientoInventario();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormMovimientoInventario.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarMovimientoInventario"));
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarMovimientoInventario.addActionListener(new ButtonActionListener(this,"ModificarMovimientoInventario"));

		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarToolBarMovimientoInventario.addActionListener(new ButtonActionListener(this,"ModificarToolBarMovimientoInventario"));
					
		this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemModificarMovimientoInventario.addActionListener(new ButtonActionListener(this,"MenuItemModificarMovimientoInventario"));		
		
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarMovimientoInventario.addActionListener (new ButtonActionListener(this,"ActualizarMovimientoInventario"));
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarToolBarMovimientoInventario.addActionListener(new ButtonActionListener(this,"ActualizarToolBarMovimientoInventario"));
						
		this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemActualizarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemActualizarMovimientoInventario"));		
		
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarMovimientoInventario.addActionListener (new ButtonActionListener(this,"EliminarMovimientoInventario"));
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"EliminarToolBarMovimientoInventario"));
								
		this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemEliminarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemEliminarMovimientoInventario"));		
		
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarMovimientoInventario.addActionListener (new ButtonActionListener(this,"CancelarMovimientoInventario"));
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"CancelarToolBarMovimientoInventario"));
					
		this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemCancelarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemCancelarMovimientoInventario"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemDetalleCerrarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarMovimientoInventario"));		
		
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarMovimientoInventario"));
		
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarMovimientoInventario"));
		
		
		
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioMovimientoInventario"));
		
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"porcentaje_descuentoMovimientoInventario"));
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.addActionListener(new TextFieldActionListener(this,"porcentaje_descuentoMovimientoInventario"));
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldporcentaje_descuentoMovimientoInventario,"porcentaje_descuentoMovimientoInventario"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"valor_descuentoMovimientoInventario"));
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.addActionListener(new TextFieldActionListener(this,"valor_descuentoMovimientoInventario"));
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldvalor_descuentoMovimientoInventario,"valor_descuentoMovimientoInventario"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonidMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"idMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empresaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empresaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_sucursalMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_sucursalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_moduloMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_moduloMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_moduloMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_ejercicioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_ejercicioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_periodoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_periodoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_anioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_anioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_anioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_mesMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_mesMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_mesMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_usuarioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_usuarioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transaccionMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transaccionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfecha_emisionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfecha_entregaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_secuencialMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_monedaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_monedaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_monedaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaMovimientoInventarioBusqueda"));
		//jButtonid_tipo_cambioMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_estado_movimiento_inventarioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_movimiento_inventarioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_estado_movimiento_inventarioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_movimiento_inventarioMovimientoInventarioBusqueda"));
		//jButtonid_empleadoMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_formatoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_formatoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_formatoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoMovimientoInventarioBusqueda"));
		//jButtonid_facturaMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_facturaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_guia_remisionMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_guia_remisionMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_guia_remisionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_guia_remisionMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transportistaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transportistaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtondescripcionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonporcentaje_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonsumanMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"sumanMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtoniceMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iceMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonvalor_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"valor_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotal_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonivaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ivaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonstockMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"stockMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonsub_totalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotal_otroMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"total_otroMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonultimo_costoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_itemsMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_itemsMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonretencionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"retencionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"totalMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfleteMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fleteMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonimpuestoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"impuestoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_transaccion_moduloMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_transaccion_moduloMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_compraMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_compraMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_compraMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_compraMovimientoInventarioBusqueda"));
		//jButtonid_asiento_contableMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtongenerico_idMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"generico_idMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontipo_idMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"tipo_idMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_comprobanteMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfechaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fechaMovimientoInventarioBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesMovimientoInventario"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameMovimientoInventario"));
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarMovimientoInventario"));
		}
		
		this.jTableDatosMovimientoInventario.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarMovimientoInventario"));
		
		this.jTableDatosMovimientoInventario.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarMovimientoInventario"));
		
		this.jButtonNuevoMovimientoInventario.addActionListener(new ButtonActionListener(this,"NuevoMovimientoInventario"));
		
		this.jButtonDuplicarMovimientoInventario.addActionListener(new ButtonActionListener(this,"DuplicarMovimientoInventario"));
		
		this.jButtonCopiarMovimientoInventario.addActionListener(new ButtonActionListener(this,"CopiarMovimientoInventario"));
		
		this.jButtonVerFormMovimientoInventario.addActionListener(new ButtonActionListener(this,"VerFormMovimientoInventario"));
		
		
		this.jButtonNuevoToolBarMovimientoInventario.addActionListener(new ButtonActionListener(this,"NuevoToolBarMovimientoInventario"));
			
		this.jButtonDuplicarToolBarMovimientoInventario.addActionListener(new ButtonActionListener(this,"DuplicarToolBarMovimientoInventario"));
			
		this.jMenuItemNuevoMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemNuevoMovimientoInventario"));
			
		this.jMenuItemDuplicarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarMovimientoInventario"));		
		
		
		this.jButtonNuevoRelacionesMovimientoInventario.addActionListener (new ButtonActionListener(this,"NuevoRelacionesMovimientoInventario"));
		
		
		this.jButtonNuevoRelacionesToolBarMovimientoInventario.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarMovimientoInventario"));
			
		this.jMenuItemNuevoRelacionesMovimientoInventario.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesMovimientoInventario"));		
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarMovimientoInventario.addActionListener(new ButtonActionListener(this,"ModificarMovimientoInventario"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonModificarToolBarMovimientoInventario.addActionListener(new ButtonActionListener(this,"ModificarToolBarMovimientoInventario"));
			
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemModificarMovimientoInventario.addActionListener(new ButtonActionListener(this,"MenuItemModificarMovimientoInventario"));		
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarMovimientoInventario.addActionListener (new ButtonActionListener(this,"ActualizarMovimientoInventario"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonActualizarToolBarMovimientoInventario.addActionListener(new ButtonActionListener(this,"ActualizarToolBarMovimientoInventario"));
				
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemActualizarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemActualizarMovimientoInventario"));		
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarMovimientoInventario.addActionListener (new ButtonActionListener(this,"EliminarMovimientoInventario"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonEliminarToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"EliminarToolBarMovimientoInventario"));
						
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemEliminarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemEliminarMovimientoInventario"));		
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarMovimientoInventario.addActionListener (new ButtonActionListener(this,"CancelarMovimientoInventario"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonCancelarToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"CancelarToolBarMovimientoInventario"));
			
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemCancelarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemCancelarMovimientoInventario"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarMovimientoInventario"));		
		
		
		this.jButtonCerrarMovimientoInventario.addActionListener (new ButtonActionListener(this,"CerrarMovimientoInventario"));
		
		
		this.jButtonCerrarToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"CerrarToolBarMovimientoInventario"));
			
		this.jMenuItemCerrarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemCerrarMovimientoInventario"));
			
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jMenuItemDetalleCerrarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarMovimientoInventario"));		
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosMovimientoInventario"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarMovimientoInventario"));
		}
		
		this.jButtonCopiarToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"CopiarToolBarMovimientoInventario"));
			
		this.jButtonVerFormToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"VerFormToolBarMovimientoInventario"));
		
		this.jMenuItemGuardarCambiosMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosMovimientoInventario"));
			
		this.jMenuItemCopiarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemCopiarMovimientoInventario"));		
		
		this.jMenuItemVerFormMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemVerFormMovimientoInventario"));		
		
		
		this.jButtonGuardarCambiosTablaMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaMovimientoInventario"));
		
		
		this.jButtonGuardarCambiosTablaToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarMovimientoInventario"));
			
		this.jMenuItemGuardarCambiosTablaMovimientoInventario.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaMovimientoInventario"));		
		
		
		
		this.jButtonRecargarInformacionMovimientoInventario.addActionListener (new ButtonActionListener(this,"RecargarInformacionMovimientoInventario"));
					
		this.jButtonRecargarInformacionToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarMovimientoInventario"));
		
		this.jMenuItemRecargarInformacionMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionMovimientoInventario"));		
		
		
		
		this.jButtonAnterioresMovimientoInventario.addActionListener (new ButtonActionListener(this,"AnterioresMovimientoInventario"));
		
		
		this.jButtonAnterioresToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"AnterioresToolBarMovimientoInventario"));
		
		this.jMenuItemAnterioresMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresMovimientoInventario"));		
		
		
		this.jButtonSiguientesMovimientoInventario.addActionListener (new ButtonActionListener(this,"SiguientesMovimientoInventario"));
		
		
		this.jButtonSiguientesToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"SiguientesToolBarMovimientoInventario"));
			
		this.jMenuItemSiguientesMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesMovimientoInventario"));
			
		this.jMenuItemAbrirOrderByMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByMovimientoInventario"));
			
		this.jMenuItemMostrarOcultarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarMovimientoInventario"));
			
		this.jMenuItemDetalleAbrirOrderByMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByMovimientoInventario"));
			
		this.jMenuItemDetalleMostarOcultarMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarMovimientoInventario"));		
		
		
		this.jButtonNuevoGuardarCambiosMovimientoInventario.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosMovimientoInventario"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarMovimientoInventario"));
			
		this.jMenuItemNuevoGuardarCambiosMovimientoInventario.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosMovimientoInventario"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosMovimientoInventario.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosMovimientoInventario"));

		this.jCheckBoxSeleccionadosMovimientoInventario.addItemListener(new CheckBoxItemListener(this,"SeleccionadosMovimientoInventario"));
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioMovimientoInventario"));
		}
		
		
		this.jComboBoxTiposRelacionesMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposRelacionesMovimientoInventario"));
			
		this.jComboBoxTiposAccionesMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposAccionesMovimientoInventario"));
					
		this.jComboBoxTiposSeleccionarMovimientoInventario.addActionListener (new ButtonActionListener(this,"TiposSeleccionarMovimientoInventario"));
			
		this.jTextFieldValorCampoGeneralMovimientoInventario.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralMovimientoInventario"));		
		
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"porcentaje_descuentoMovimientoInventario"));
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.addActionListener(new TextFieldActionListener(this,"porcentaje_descuentoMovimientoInventario"));
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldporcentaje_descuentoMovimientoInventario,"porcentaje_descuentoMovimientoInventario"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.addFocusListener(new TextFieldFocusListener(this,"valor_descuentoMovimientoInventario"));
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.addActionListener(new TextFieldActionListener(this,"valor_descuentoMovimientoInventario"));
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldvalor_descuentoMovimientoInventario,"valor_descuentoMovimientoInventario"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonidMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"idMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empresaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empresaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_sucursalMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_sucursalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_moduloMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_moduloMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_moduloMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_ejercicioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_ejercicioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_periodoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_periodoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_anioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_anioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_anioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_mesMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_mesMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_mesMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_usuarioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_usuarioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transaccionMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transaccionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfecha_emisionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfecha_entregaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_secuencialMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_monedaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_monedaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_monedaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaMovimientoInventarioBusqueda"));
		//jButtonid_tipo_cambioMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_estado_movimiento_inventarioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_movimiento_inventarioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_estado_movimiento_inventarioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_movimiento_inventarioMovimientoInventarioBusqueda"));
		//jButtonid_empleadoMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_formatoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_formatoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_formatoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoMovimientoInventarioBusqueda"));
		//jButtonid_facturaMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_facturaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_guia_remisionMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_guia_remisionMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_guia_remisionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_guia_remisionMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transportistaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transportistaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtondescripcionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonporcentaje_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonsumanMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"sumanMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtoniceMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iceMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonvalor_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"valor_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotal_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonivaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ivaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonstockMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"stockMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonsub_totalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotal_otroMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"total_otroMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonultimo_costoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_itemsMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_itemsMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonretencionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"retencionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"totalMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfleteMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fleteMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonimpuestoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"impuestoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_transaccion_moduloMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_transaccion_moduloMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_compraMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_compraMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_compraMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_compraMovimientoInventarioBusqueda"));
		//jButtonid_asiento_contableMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtongenerico_idMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"generico_idMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontipo_idMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"tipo_idMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_comprobanteMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfechaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fechaMovimientoInventarioBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAsientoContableMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableMovimientoInventario"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventario"));

			this.jButtonFK_IdCompraMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdCompraMovimientoInventario"));

			this.jButtonFK_IdEmpleadoMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoMovimientoInventario"));

			this.jButtonBuscarFK_IdEmpleadoid_empleadoMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventario"));

			this.jButtonFK_IdEstadoMovimientoInventarioMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdEstadoMovimientoInventarioMovimientoInventario"));

			this.jButtonFK_IdFacturaMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdFacturaMovimientoInventario"));

			this.jButtonBuscarFK_IdFacturaid_facturaMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventario"));

			this.jButtonFK_IdGuiaRemisionMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdGuiaRemisionMovimientoInventario"));

			this.jButtonFK_IdTipoTransaccionModuloMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloMovimientoInventario"));

			this.jButtonFK_IdTransaccionMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionMovimientoInventario"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoMovimientoInventario!=null) {
				this.jInternalFrameReporteDinamicoMovimientoInventario.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoMovimientoInventario"));
				this.jInternalFrameReporteDinamicoMovimientoInventario.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoMovimientoInventario"));
				this.jInternalFrameReporteDinamicoMovimientoInventario.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoMovimientoInventario"));
			}
			
			//this.jButtonCerrarReporteDinamicoMovimientoInventario.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoMovimientoInventario"));				
			//this.jButtonGenerarReporteDinamicoMovimientoInventario.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoMovimientoInventario"));
			//this.jButtonGenerarExcelReporteDinamicoMovimientoInventario.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoMovimientoInventario"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionMovimientoInventario!=null) {
				this.jInternalFrameImportacionMovimientoInventario.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionMovimientoInventario"));
				this.jInternalFrameImportacionMovimientoInventario.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionMovimientoInventario"));
				this.jInternalFrameImportacionMovimientoInventario.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionMovimientoInventario"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByMovimientoInventario.addActionListener (new ButtonActionListener(this,"AbrirOrderByMovimientoInventario"));
			
			this.jButtonAbrirOrderByToolBarMovimientoInventario.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarMovimientoInventario"));			
			
			if(this.jInternalFrameOrderByMovimientoInventario!=null) {
				this.jInternalFrameOrderByMovimientoInventario.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByMovimientoInventario"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoInventario.jTabbedPaneRelacionesMovimientoInventario.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesMovimientoInventario"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameMovimientoInventario();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormMovimientoInventario.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormMovimientoInventario = (JInternalFrameBase)event.getSource();
	            	
	            MovimientoInventarioBeanSwingJInternalFrame jInternalFrameParent=(MovimientoInventarioBeanSwingJInternalFrame)jInternalFrameDetalleFormMovimientoInventario.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarMovimientoInventarioActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosMovimientoInventario.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosMovimientoInventarioListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosMovimientoInventario.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosMovimientoInventario.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoInventarioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoInventarioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoInventarioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoMovimientoInventario";
		inputMap = this.jButtonNuevoMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoMovimientoInventarioActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoInventarioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoInventarioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoInventarioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesMovimientoInventario";
		inputMap = this.jButtonNuevoRelacionesMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoMovimientoInventarioActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarMovimientoInventario";
		inputMap = this.jButtonModificarMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarMovimientoInventario";
		inputMap = this.jButtonActualizarMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarMovimientoInventario";
		inputMap = this.jButtonEliminarMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarMovimientoInventario";
		inputMap = this.jButtonCancelarMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarMovimientoInventario";
		inputMap = this.jButtonCerrarMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosMovimientoInventario";
		inputMap = this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosMovimientoInventario.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonGuardarCambiosMovimientoInventario.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosMovimientoInventarioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosMovimientoInventario.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosMovimientoInventarioItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesMovimientoInventario.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesMovimientoInventarioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarMovimientoInventario.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarMovimientoInventarioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralMovimientoInventario.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralMovimientoInventarioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonidMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"idMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empresaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empresaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_sucursalMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_sucursalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_moduloMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_moduloMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_moduloMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_ejercicioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_ejercicioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_periodoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_periodoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_anioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_anioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_anioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_mesMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_mesMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_mesMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_usuarioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_usuarioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transaccionMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transaccionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfecha_emisionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfecha_entregaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_secuencialMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_monedaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_monedaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_monedaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaMovimientoInventarioBusqueda"));
		//jButtonid_tipo_cambioMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_estado_movimiento_inventarioMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_movimiento_inventarioMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_estado_movimiento_inventarioMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_movimiento_inventarioMovimientoInventarioBusqueda"));
		//jButtonid_empleadoMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_formatoMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_formatoMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_formatoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoMovimientoInventarioBusqueda"));
		//jButtonid_facturaMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_facturaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_guia_remisionMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_guia_remisionMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_guia_remisionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_guia_remisionMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transportistaMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_transportistaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtondescripcionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonporcentaje_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonsumanMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"sumanMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtoniceMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"iceMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonvalor_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"valor_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotal_descuentoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonivaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ivaMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonstockMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"stockMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonsub_totalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotal_otroMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"total_otroMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonultimo_costoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_itemsMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_itemsMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonretencionMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"retencionMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontotalMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"totalMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfleteMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fleteMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonimpuestoMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"impuestoMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_transaccion_moduloMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_transaccion_moduloMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloMovimientoInventarioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_compraMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_compraMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_compraMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_compraMovimientoInventarioBusqueda"));
		//jButtonid_asiento_contableMovimientoInventario.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableMovimientoInventarioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventario"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventarioUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventarioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtongenerico_idMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"generico_idMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtontipo_idMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"tipo_idMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonnumero_comprobanteMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteMovimientoInventarioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoInventario.jButtonfechaMovimientoInventarioBusqueda.addActionListener(new ButtonActionListener(this,"fechaMovimientoInventarioBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableMovimientoInventario"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_asiento_contableMovimientoInventario"));

		this.jButtonFK_IdCompraMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdCompraMovimientoInventario"));

		this.jButtonFK_IdEmpleadoMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoMovimientoInventario"));

		this.jButtonBuscarFK_IdEmpleadoid_empleadoMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_empleadoMovimientoInventario"));

		this.jButtonFK_IdEstadoMovimientoInventarioMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdEstadoMovimientoInventarioMovimientoInventario"));

		this.jButtonFK_IdFacturaMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdFacturaMovimientoInventario"));

		this.jButtonBuscarFK_IdFacturaid_facturaMovimientoInventario.addActionListener(new ButtonActionListener(this,"id_facturaMovimientoInventario"));

		this.jButtonFK_IdGuiaRemisionMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdGuiaRemisionMovimientoInventario"));

		this.jButtonFK_IdTipoTransaccionModuloMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloMovimientoInventario"));

		this.jButtonFK_IdTransaccionMovimientoInventario.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionMovimientoInventario"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionMovimientoInventario.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionMovimientoInventarioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarMovimientoInventarioActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarMovimientoInventario.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosMovimientoInventario(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
					movimientoinventarioAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(MovimientoInventario movimientoinventarioAux:movimientoinventarios) {
					movimientoinventarioAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosMovimientoInventarioItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingMovimientoInventario(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
						movimientoinventarioAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(MovimientoInventario movimientoinventarioAux:movimientoinventarios) {
						movimientoinventarioAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(MovimientoInventario movimientoinventarioAux:movimientoinventarios) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaMovimientoInventario(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosMovimientoInventario.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosMovimientoInventario.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosMovimientoInventarioItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingMovimientoInventario(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosMovimientoInventario.getSelectedRows();
			
			MovimientoInventario movimientoinventarioLocal=new MovimientoInventario();
			
			//this.seleccionarTodosMovimientoInventario(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoinventarioLocal =(MovimientoInventario) this.movimientoinventarioLogic.getMovimientoInventarios().toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					movimientoinventarioLocal =(MovimientoInventario) this.movimientoinventarios.toArray()[this.jTableDatosMovimientoInventario.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				movimientoinventarioLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
						movimientoinventarioAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(MovimientoInventario movimientoinventarioAux:movimientoinventarios) {
						movimientoinventarioAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaMovimientoInventario(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosMovimientoInventario.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosMovimientoInventario.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosMovimientoInventario,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualMovimientoInventarioItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarMovimientoInventarioParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralMovimientoInventarioActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingMovimientoInventario(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralMovimientoInventario.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarioLogic.getMovimientoInventarios()) {
				
						if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							movimientoinventarioAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA)) {
							existe=true;
							movimientoinventarioAux.setfecha_entrega(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
							existe=true;
							movimientoinventarioAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							movimientoinventarioAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							movimientoinventarioAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO)) {
							existe=true;
							movimientoinventarioAux.setporcentaje_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							movimientoinventarioAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_ICE)) {
							existe=true;
							movimientoinventarioAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO)) {
							existe=true;
							movimientoinventarioAux.setvalor_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO)) {
							existe=true;
							movimientoinventarioAux.settotal_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IVA)) {
							existe=true;
							movimientoinventarioAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_STOCK)) {
							existe=true;
							movimientoinventarioAux.setstock(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							movimientoinventarioAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO)) {
							existe=true;
							movimientoinventarioAux.settotal_otro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO)) {
							existe=true;
							movimientoinventarioAux.setultimo_costo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS)) {
							existe=true;
							movimientoinventarioAux.setnumero_items(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							movimientoinventarioAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							movimientoinventarioAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							movimientoinventarioAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO)) {
							existe=true;
							movimientoinventarioAux.setimpuesto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_GENERICOID)) {
							existe=true;
							movimientoinventarioAux.setgenerico_id(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TIPOID)) {
							existe=true;
							movimientoinventarioAux.settipo_id(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							movimientoinventarioAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							movimientoinventarioAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(MovimientoInventario movimientoinventarioAux:movimientoinventarios) {
					
						if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							movimientoinventarioAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA)) {
							existe=true;
							movimientoinventarioAux.setfecha_entrega(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
							existe=true;
							movimientoinventarioAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							movimientoinventarioAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							movimientoinventarioAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO)) {
							existe=true;
							movimientoinventarioAux.setporcentaje_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							movimientoinventarioAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_ICE)) {
							existe=true;
							movimientoinventarioAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO)) {
							existe=true;
							movimientoinventarioAux.setvalor_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO)) {
							existe=true;
							movimientoinventarioAux.settotal_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IVA)) {
							existe=true;
							movimientoinventarioAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_STOCK)) {
							existe=true;
							movimientoinventarioAux.setstock(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							movimientoinventarioAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO)) {
							existe=true;
							movimientoinventarioAux.settotal_otro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO)) {
							existe=true;
							movimientoinventarioAux.setultimo_costo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS)) {
							existe=true;
							movimientoinventarioAux.setnumero_items(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							movimientoinventarioAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							movimientoinventarioAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							movimientoinventarioAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO)) {
							existe=true;
							movimientoinventarioAux.setimpuesto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_GENERICOID)) {
							existe=true;
							movimientoinventarioAux.setgenerico_id(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TIPOID)) {
							existe=true;
							movimientoinventarioAux.settipo_id(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							movimientoinventarioAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							movimientoinventarioAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaMovimientoInventario(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesMovimientoInventarioActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingMovimientoInventario(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioMovimientoInventario=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesMovimientoInventario.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteMovimientoInventario) {				
					conSplash=true;//false;										
					
					//this.startProcessMovimientoInventario(conSplash);
				
					this.generarReporteMovimientoInventariosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoMovimientoInventariosSeleccionados();
				//this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoMovimientoInventariosSeleccionados(false);
				//this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoMovimientoInventariosSeleccionados(true);
				//this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessMovimientoInventario();
				
				this.exportarMovimientoInventariosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionMovimientoInventarios();
				//this.importarMovimientoInventarios();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessMovimientoInventario();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelMovimientoInventariosSeleccionados();
				//this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Movimiento Inventario", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessMovimientoInventario();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoMovimientoInventario)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyMovimientoInventario(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.setSelectedIndex(0);					
				}	
			} 			
			else if(MovimientoInventarioBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteMovimientoInventario) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessMovimientoInventario(conSplash);
					
						//this.actualizarParametrosGeneralMovimientoInventario();
						
						this.generarReporteProcesoAccionMovimientoInventariosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(MovimientoInventarioBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Movimiento InventarioS SELECCIONADOS?", "MANTENIMIENTO DE Movimiento Inventario", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessMovimientoInventario();
				
						this.actualizarParametrosGeneralMovimientoInventario();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.movimientoinventarioReturnGeneral=movimientoinventarioLogic.procesarAccionMovimientoInventariosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.movimientoinventarioLogic.getMovimientoInventarios(),this.movimientoinventarioParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarMovimientoInventarioReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralMovimientoInventario();
					
					MovimientoInventarioBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarMovimientoInventarioReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesMovimientoInventario.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxTiposAccionesFormularioMovimientoInventario.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessMovimientoInventario(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesMovimientoInventarioActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessMovimientoInventario();
			
			if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		
			MovimientoInventario movimientoinventario=new MovimientoInventario();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingMovimientoInventario(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesMovimientoInventario.getSelectedItem();
			
			
			
			
			movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
			//this.sTipoAccion;
			
			if(movimientoinventariosSeleccionados.size()==1) {
				for(MovimientoInventario movimientoinventarioAux:movimientoinventariosSeleccionados) {
					movimientoinventario=movimientoinventarioAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Detalle Movimiento Inventario")) {
					jButtonDetalleMovimientoInventarioActionPerformed(null,rowIndex,true,false,movimientoinventario);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessMovimientoInventario();
			
      		//this.finishProcessMovimientoInventario(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarMovimientoInventarioReturnGeneral() throws Exception {
		if(this.movimientoinventarioReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.movimientoinventarioReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.movimientoinventarioReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.movimientoinventarioReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.movimientoinventarioReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.movimientoinventarioReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingMovimientoInventario(false);
		}
		
		if(this.movimientoinventarioReturnGeneral.getConRetornoLista() || this.movimientoinventarioReturnGeneral.getConRetornoObjeto()) {
			if(this.movimientoinventarioReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.movimientoinventarioLogic.setMovimientoInventarios(this.movimientoinventarioReturnGeneral.getMovimientoInventarios());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.movimientoinventarioReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.movimientoinventarioLogic.setMovimientoInventario(this.movimientoinventarioReturnGeneral.getMovimientoInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingMovimientoInventario(false);
		}
	}
	
	public void actualizarParametrosGeneralMovimientoInventario() throws Exception {
		
		
	}
	
	public ArrayList<MovimientoInventario> getMovimientoInventariosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioMovimientoInventario) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(MovimientoInventario movimientoinventarioAux:movimientoinventarioLogic.getMovimientoInventarios()) {
					if(movimientoinventarioAux.getIsSelected()) {
						movimientoinventariosSeleccionados.add(movimientoinventarioAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(MovimientoInventario movimientoinventarioAux:this.movimientoinventarios) {
					if(movimientoinventarioAux.getIsSelected()) {
						movimientoinventariosSeleccionados.add(movimientoinventarioAux);				
					}
				}
			}
			
			if(movimientoinventariosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						movimientoinventariosSeleccionados.addAll(this.movimientoinventarioLogic.getMovimientoInventarios());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						movimientoinventariosSeleccionados.addAll(this.movimientoinventarios);				
					}
				}
			}
		} else {
			movimientoinventariosSeleccionados.add(this.movimientoinventario);
		}
		
		return movimientoinventariosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteMovimientoInventariosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalMovimientoInventariosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoMovimientoInventariosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoMovimientoInventariosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoMovimientoInventariosSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesMovimientoInventariosSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Movimiento Inventario",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteMovimientoInventarios("Todos",movimientoinventariosSeleccionados);
		
	}	
	
	public void generarReporteNormalMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteMovimientoInventarios("Todos",movimientoinventariosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionMovimientoInventariosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteMovimientoInventarios("Todos",movimientoinventariosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		
		
		
		this.abrirInicializarFrameReporteDinamicoMovimientoInventario();
		
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoMovimientoInventario();
		
		
		//this.generarReporteMovimientoInventarios("Todos",movimientoinventariosSeleccionados ,movimientoinventarioImplementable,movimientoinventarioImplementableHome);
	}
	
	public void mostrarImportacionMovimientoInventarios() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionMovimientoInventario();
		
		this.abrirFrameImportacionMovimientoInventario();		
		
			
		//this.generarReporteMovimientoInventarios("Todos",movimientoinventariosSeleccionados ,movimientoinventarioImplementable,movimientoinventarioImplementableHome);
	}
	
	public void importarMovimientoInventarios() throws Exception {		
	
	}
	
	public void exportarMovimientoInventariosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelMovimientoInventariosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoMovimientoInventariosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlMovimientoInventariosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Movimiento Inventario",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoinventario."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarMovimientoInventario(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(MovimientoInventario movimientoinventarioAux:movimientoinventariosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarMovimientoInventario(movimientoinventarioAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//movimientoinventarioAux.setsDetalleGeneralEntityReporte(movimientoinventarioAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarMovimientoInventario(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_SUMAN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_STOCK;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_RETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_FLETE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_GENERICOID;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_TIPOID;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoInventarioConstantesFunciones.LABEL_FECHA;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarMovimientoInventario(MovimientoInventario movimientoinventario,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=movimientoinventario.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.gettransaccion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getfecha_entrega().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getnumero_secuencial();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.gettipocambio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getestadomovimientoinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getnumero_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getguiaremision_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.gettransportista_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getporcentaje_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getsuman().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getvalor_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.gettotal_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getstock().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.gettotal_otro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getultimo_costo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getnumero_items().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getretencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getflete().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getimpuesto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.gettipotransaccionmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getcompra_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getgenerico_id().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.gettipo_id();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getnumero_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoinventario.getfecha().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoinventario.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("MovimientoInventarios");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelMovimientoInventario(row);				
				iRow++;
			}				
			
			for(MovimientoInventario movimientoinventarioAux:movimientoinventariosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelMovimientoInventario(movimientoinventarioAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlMovimientoInventariosSeleccionados() throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();		
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoinventario.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("movimientoinventarios");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("movimientoinventario");
			//elementRoot.appendChild(element);
		
			for(MovimientoInventario movimientoinventarioAux:movimientoinventariosSeleccionados) {
				element = document.createElement("movimientoinventario");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlMovimientoInventario(movimientoinventarioAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Inventario",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelMovimientoInventario(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_SUMAN);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_VALORDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTALDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_STOCK);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTALOTRO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_ULTIMOCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_RETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FLETE);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IMPUESTO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_GENERICOID);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_TIPOID);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoInventarioConstantesFunciones.LABEL_FECHA);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelMovimientoInventario(MovimientoInventario movimientoinventario,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.gettransaccion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getfecha_entrega());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getnumero_secuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.gettipocambio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getestadomovimientoinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getnumero_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getguiaremision_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.gettransportista_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getporcentaje_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getsuman());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getvalor_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.gettotal_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getstock());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.gettotal_otro());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getultimo_costo());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getnumero_items());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getretencion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getflete());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getimpuesto());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.gettipotransaccionmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getcompra_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getgenerico_id());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.gettipo_id());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getnumero_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoinventario.getfecha());				
	}
	
	public void setFilaDatosExportarXmlMovimientoInventario(MovimientoInventario movimientoinventario,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(MovimientoInventarioConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(movimientoinventario.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(MovimientoInventarioConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(movimientoinventario.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(movimientoinventario.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(movimientoinventario.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementmodulo_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(movimientoinventario.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementejercicio_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(movimientoinventario.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(movimientoinventario.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(movimientoinventario.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(movimientoinventario.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementusuario_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(movimientoinventario.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementtransaccion_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDTRANSACCION);
		elementtransaccion_descripcion.appendChild(document.createTextNode(movimientoinventario.gettransaccion_descripcion()));
		element.appendChild(elementtransaccion_descripcion);

		Element elementfecha_emision = document.createElement(MovimientoInventarioConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(movimientoinventario.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementfecha_entrega = document.createElement(MovimientoInventarioConstantesFunciones.FECHAENTREGA);
		elementfecha_entrega.appendChild(document.createTextNode(movimientoinventario.getfecha_entrega().toString().trim()));
		element.appendChild(elementfecha_entrega);

		Element elementnumero_secuencial = document.createElement(MovimientoInventarioConstantesFunciones.NUMEROSECUENCIAL);
		elementnumero_secuencial.appendChild(document.createTextNode(movimientoinventario.getnumero_secuencial().trim()));
		element.appendChild(elementnumero_secuencial);

		Element elementmoneda_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(movimientoinventario.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementtipocambio_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDTIPOCAMBIO);
		elementtipocambio_descripcion.appendChild(document.createTextNode(movimientoinventario.gettipocambio_descripcion()));
		element.appendChild(elementtipocambio_descripcion);

		Element elementestadomovimientoinventario_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDESTADOMOVIMIENTOINVENTARIO);
		elementestadomovimientoinventario_descripcion.appendChild(document.createTextNode(movimientoinventario.getestadomovimientoinventario_descripcion()));
		element.appendChild(elementestadomovimientoinventario_descripcion);

		Element elementempleado_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(movimientoinventario.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementformato_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(movimientoinventario.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementfactura_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(movimientoinventario.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementnumero_factura = document.createElement(MovimientoInventarioConstantesFunciones.NUMEROFACTURA);
		elementnumero_factura.appendChild(document.createTextNode(movimientoinventario.getnumero_factura().trim()));
		element.appendChild(elementnumero_factura);

		Element elementguiaremision_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDGUIAREMISION);
		elementguiaremision_descripcion.appendChild(document.createTextNode(movimientoinventario.getguiaremision_descripcion()));
		element.appendChild(elementguiaremision_descripcion);

		Element elementtransportista_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDTRANSPORTISTA);
		elementtransportista_descripcion.appendChild(document.createTextNode(movimientoinventario.gettransportista_descripcion()));
		element.appendChild(elementtransportista_descripcion);

		Element elementdescripcion = document.createElement(MovimientoInventarioConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(movimientoinventario.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementporcentaje_descuento = document.createElement(MovimientoInventarioConstantesFunciones.PORCENTAJEDESCUENTO);
		elementporcentaje_descuento.appendChild(document.createTextNode(movimientoinventario.getporcentaje_descuento().toString().trim()));
		element.appendChild(elementporcentaje_descuento);

		Element elementsuman = document.createElement(MovimientoInventarioConstantesFunciones.SUMAN);
		elementsuman.appendChild(document.createTextNode(movimientoinventario.getsuman().toString().trim()));
		element.appendChild(elementsuman);

		Element elementice = document.createElement(MovimientoInventarioConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(movimientoinventario.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementvalor_descuento = document.createElement(MovimientoInventarioConstantesFunciones.VALORDESCUENTO);
		elementvalor_descuento.appendChild(document.createTextNode(movimientoinventario.getvalor_descuento().toString().trim()));
		element.appendChild(elementvalor_descuento);

		Element elementtotal_descuento = document.createElement(MovimientoInventarioConstantesFunciones.TOTALDESCUENTO);
		elementtotal_descuento.appendChild(document.createTextNode(movimientoinventario.gettotal_descuento().toString().trim()));
		element.appendChild(elementtotal_descuento);

		Element elementiva = document.createElement(MovimientoInventarioConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(movimientoinventario.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementstock = document.createElement(MovimientoInventarioConstantesFunciones.STOCK);
		elementstock.appendChild(document.createTextNode(movimientoinventario.getstock().toString().trim()));
		element.appendChild(elementstock);

		Element elementsub_total = document.createElement(MovimientoInventarioConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(movimientoinventario.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementtotal_otro = document.createElement(MovimientoInventarioConstantesFunciones.TOTALOTRO);
		elementtotal_otro.appendChild(document.createTextNode(movimientoinventario.gettotal_otro().toString().trim()));
		element.appendChild(elementtotal_otro);

		Element elementultimo_costo = document.createElement(MovimientoInventarioConstantesFunciones.ULTIMOCOSTO);
		elementultimo_costo.appendChild(document.createTextNode(movimientoinventario.getultimo_costo().toString().trim()));
		element.appendChild(elementultimo_costo);

		Element elementnumero_items = document.createElement(MovimientoInventarioConstantesFunciones.NUMEROITEMS);
		elementnumero_items.appendChild(document.createTextNode(movimientoinventario.getnumero_items().toString().trim()));
		element.appendChild(elementnumero_items);

		Element elementretencion = document.createElement(MovimientoInventarioConstantesFunciones.RETENCION);
		elementretencion.appendChild(document.createTextNode(movimientoinventario.getretencion().toString().trim()));
		element.appendChild(elementretencion);

		Element elementtotal = document.createElement(MovimientoInventarioConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(movimientoinventario.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementflete = document.createElement(MovimientoInventarioConstantesFunciones.FLETE);
		elementflete.appendChild(document.createTextNode(movimientoinventario.getflete().toString().trim()));
		element.appendChild(elementflete);

		Element elementimpuesto = document.createElement(MovimientoInventarioConstantesFunciones.IMPUESTO);
		elementimpuesto.appendChild(document.createTextNode(movimientoinventario.getimpuesto().toString().trim()));
		element.appendChild(elementimpuesto);

		Element elementtipotransaccionmodulo_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDTIPOTRANSACCIONMODULO);
		elementtipotransaccionmodulo_descripcion.appendChild(document.createTextNode(movimientoinventario.gettipotransaccionmodulo_descripcion()));
		element.appendChild(elementtipotransaccionmodulo_descripcion);

		Element elementcompra_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDCOMPRA);
		elementcompra_descripcion.appendChild(document.createTextNode(movimientoinventario.getcompra_descripcion()));
		element.appendChild(elementcompra_descripcion);

		Element elementasientocontable_descripcion = document.createElement(MovimientoInventarioConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(movimientoinventario.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementgenerico_id = document.createElement(MovimientoInventarioConstantesFunciones.GENERICOID);
		elementgenerico_id.appendChild(document.createTextNode(movimientoinventario.getgenerico_id().toString().trim()));
		element.appendChild(elementgenerico_id);

		Element elementtipo_id = document.createElement(MovimientoInventarioConstantesFunciones.TIPOID);
		elementtipo_id.appendChild(document.createTextNode(movimientoinventario.gettipo_id().trim()));
		element.appendChild(elementtipo_id);

		Element elementnumero_comprobante = document.createElement(MovimientoInventarioConstantesFunciones.NUMEROCOMPROBANTE);
		elementnumero_comprobante.appendChild(document.createTextNode(movimientoinventario.getnumero_comprobante().trim()));
		element.appendChild(elementnumero_comprobante);

		Element elementfecha = document.createElement(MovimientoInventarioConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(movimientoinventario.getfecha().toString().trim()));
		element.appendChild(elementfecha);
	}
	
	public void generarReporteGroupGenericoMovimientoInventariosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<MovimientoInventario> movimientoinventariosSeleccionados=new ArrayList<MovimientoInventario>();
		
		movimientoinventariosSeleccionados=this.getMovimientoInventariosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoMovimientoInventario(movimientoinventariosSeleccionados);
		
		this.generarReporteMovimientoInventarios("Todos",movimientoinventariosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoMovimientoInventario(ArrayList<MovimientoInventario> movimientoinventariosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(MovimientoInventario movimientoinventarioAux:movimientoinventariosSeleccionados) {
				movimientoinventarioAux.setsDetalleGeneralEntityReporte(movimientoinventarioAux.toString());
			
				if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSACCION)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.gettransaccion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(movimientoinventarioAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHAENTREGA)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(movimientoinventarioAux.getfecha_entrega()));
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getnumero_secuencial());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOCAMBIO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.gettipocambio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDESTADOMOVIMIENTOINVENTARIO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getestadomovimientoinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROFACTURA)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getnumero_factura());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDGUIAREMISION)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getguiaremision_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDTRANSPORTISTA)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.gettransportista_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROITEMS)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getnumero_items().toString());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.gettipotransaccionmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDCOMPRA)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getcompra_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_GENERICOID)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getgenerico_id().toString());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_TIPOID)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.gettipo_id());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(movimientoinventarioAux.getnumero_comprobante());
				}
				 else if(sTipoSeleccionar.equals(MovimientoInventarioConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					movimientoinventarioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(movimientoinventarioAux.getfecha()));
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesMovimientoInventario(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoMovimientoInventario=true;
				this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=true;
				this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=true;
			}
			
			this.isVisibilidadCeldaModificarMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarMovimientoInventario=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoInventario=true;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;
			this.isVisibilidadCeldaModificarMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarMovimientoInventario=true;
			this.isVisibilidadCeldaEliminarMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarMovimientoInventario=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoInventario=true;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;
			this.isVisibilidadCeldaModificarMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarMovimientoInventario=true;
			this.isVisibilidadCeldaEliminarMovimientoInventario=true;
			this.isVisibilidadCeldaCancelarMovimientoInventario=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoInventario=true;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;
			this.isVisibilidadCeldaModificarMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarMovimientoInventario=true;
			this.isVisibilidadCeldaEliminarMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarMovimientoInventario=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoMovimientoInventario=true;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=true;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=true;
			this.isVisibilidadCeldaModificarMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarMovimientoInventario=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoInventario=true;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;
			this.isVisibilidadCeldaActualizarMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarMovimientoInventario=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoMovimientoInventario=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;
			this.isVisibilidadCeldaModificarMovimientoInventario=true;
			this.isVisibilidadCeldaActualizarMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarMovimientoInventario=false;
			this.isVisibilidadCeldaCancelarMovimientoInventario=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoInventario=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(MovimientoInventarioJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoMovimientoInventario=true;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=true;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=true;
		} else {
			this.actualizarEstadoPanelsMovimientoInventario(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarMovimientoInventario=false;
			//this.isVisibilidadCeldaVerFormMovimientoInventario=false;
			this.isVisibilidadCeldaDuplicarMovimientoInventario=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!movimientoinventarioSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
		} else {
			this.isVisibilidadCeldaNuevoMovimientoInventario=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			if(!movimientoinventarioSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;												
			}
			
			this.jButtonCerrarMovimientoInventario.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesMovimientoInventario=false;
		}
		
		if(!this.permiteMantenimiento(this.movimientoinventario)) {
			this.isVisibilidadCeldaActualizarMovimientoInventario=false;
			this.isVisibilidadCeldaEliminarMovimientoInventario=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesMovimientoInventario() {
		this.isVisibilidadCeldaNuevoMovimientoInventario=false;
		this.isVisibilidadCeldaGuardarCambiosMovimientoInventario=false;
	}
	
	public void actualizarEstadoPanelsMovimientoInventario(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionMovimientoInventario.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoInventario!=null) {
				this.jScrollPanelDatosMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelPaginacionMovimientoInventario!=null) {
				this.jPanelPaginacionMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionMovimientoInventario.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosMovimientoInventario!=null) {
				this.jScrollPanelDatosMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelPaginacionMovimientoInventario!=null) {
				this.jPanelPaginacionMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionMovimientoInventario.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoInventario!=null) {
				this.jScrollPanelDatosMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelPaginacionMovimientoInventario!=null) {
				this.jPanelPaginacionMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionMovimientoInventario.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoInventario!=null) {
				this.jScrollPanelDatosMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelPaginacionMovimientoInventario!=null) {
				this.jPanelPaginacionMovimientoInventario.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionMovimientoInventario.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoInventario!=null) {
				this.jScrollPanelDatosMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelPaginacionMovimientoInventario!=null) {
				this.jPanelPaginacionMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionMovimientoInventario.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoInventario!=null) {
				this.jScrollPanelDatosMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelPaginacionMovimientoInventario!=null) {
				this.jPanelPaginacionMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionMovimientoInventario!=null) {
				this.jScrollPanelDatosEdicionMovimientoInventario.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoInventario!=null) {
				this.jScrollPanelDatosMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelPaginacionMovimientoInventario!=null) {
				this.jPanelPaginacionMovimientoInventario.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
					this.jTabbedPaneBusquedasMovimientoInventario.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.movimientoinventarioSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoInventario!=null) {
				this.jTabbedPaneBusquedasMovimientoInventario.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesMovimientoInventario!=null) {
				this.jPanelParametrosReportesMovimientoInventario.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadFK_IdAsientoContable=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAsientoContable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdAsientoContable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdAsientoContable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdAsientoContable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaMesNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaMesNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadFK_IdAsientoContable=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransaccion(Boolean isParaTransaccion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionNegation=!isParaTransaccion;

			this.isVisibilidadFK_IdAsientoContable=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaTransaccion;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadFK_IdAsientoContable=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCambio(Boolean isParaTipoCambio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCambioNegation=!isParaTipoCambio;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoMovimientoInventario(Boolean isParaEstadoMovimientoInventario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoMovimientoInventarioNegation=!isParaEstadoMovimientoInventario;

			this.isVisibilidadFK_IdAsientoContable=isParaEstadoMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaEstadoMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaEstadoMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaEstadoMovimientoInventario;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaEstadoMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaEstadoMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEstadoMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaEstadoMovimientoInventarioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleado;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadFK_IdAsientoContable=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadFK_IdAsientoContable=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaFactura;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaGuiaRemision(Boolean isParaGuiaRemision){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaGuiaRemisionNegation=!isParaGuiaRemision;

			this.isVisibilidadFK_IdAsientoContable=isParaGuiaRemisionNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaGuiaRemisionNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaGuiaRemisionNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaGuiaRemisionNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaGuiaRemisionNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaGuiaRemision;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaGuiaRemisionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaGuiaRemisionNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransportista(Boolean isParaTransportista){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransportistaNegation=!isParaTransportista;

			this.isVisibilidadFK_IdAsientoContable=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTransaccionModulo(Boolean isParaTipoTransaccionModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTransaccionModuloNegation=!isParaTipoTransaccionModulo;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTransaccionModulo;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaCompra(Boolean isParaCompra){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCompraNegation=!isParaCompra;

			this.isVisibilidadFK_IdAsientoContable=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaCompra;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdAsientoContableMovimientoInventario);}

			this.isVisibilidadFK_IdCompra=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdCompraMovimientoInventario);}

			this.isVisibilidadFK_IdEmpleado=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEmpleadoMovimientoInventario);}

			this.isVisibilidadFK_IdEstadoMovimientoInventario=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEstadoMovimientoInventario) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);}

			this.isVisibilidadFK_IdFactura=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdFacturaMovimientoInventario);}

			this.isVisibilidadFK_IdGuiaRemision=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdGuiaRemision) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdGuiaRemisionMovimientoInventario);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTipoTransaccionModuloMovimientoInventario);}

			this.isVisibilidadFK_IdTransaccion=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasMovimientoInventario.remove(jPanelFK_IdTransaccionMovimientoInventario);}
		}
		
	}
	
	

	public String registrarSesionMovimientoInventarioParaDetalleMovimientoInventarios() throws Exception {
		Boolean isPaginaPopupDetalleMovimientoInventario=false;

		try {

			if(this.movimientoinventarioSessionBean==null) {
				this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean==null) {
				this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean=new DetalleMovimientoInventarioSessionBean();
			}

			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean.setsPathNavegacionActual(movimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleMovimientoInventarioConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleMovimientoInventario=this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleMovimientoInventario(true);
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleMovimientoInventario(MovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionMovimientoInventario(true);
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean.setlidMovimientoInventarioActual(this.idMovimientoInventarioActual);
			this.jInternalFrameDetalleFormMovimientoInventario.detallemovimientoinventarioSessionBean.setNoMantenimiento(true);

			movimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyMovimientoInventario(true);
			movimientoinventarioSessionBean.setlIdMovimientoInventarioActualForeignKey(this.idMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionMovimientoInventarioParaBusquedaTipoCambios() throws Exception {
		Boolean isPaginaPopupTipoCambio=false;

		try {

			if(movimientoinventarioSessionBean==null) {
				movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(tipocambioSessionBean==null) {
				tipocambioSessionBean=new TipoCambioSessionBean();
			}

			tipocambioSessionBean.setsPathNavegacionActual(movimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TipoCambioConstantesFunciones.SCLASSWEBTITULO);
			tipocambioSessionBean.setisPermiteRecargarInformacion(false);
			tipocambioSessionBean.setisPaginaPopup(true);
			isPaginaPopupTipoCambio=tipocambioSessionBean.getisPaginaPopup();
			tipocambioSessionBean.setisPaginaPopup(false);
			tipocambioSessionBean.setEstaModoBusqueda(true);
			tipocambioSessionBean.setsFuncionBusquedaRapida("window.opener.movimientoinventarioFuncionGeneral.setCombosCodigoDesdeBusquedaid_tipo_cambio(TO_REPLACE);");
			tipocambioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTipoCambio(true);
			tipocambioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTipoCambio(MovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			//tipocambioSessionBean.setisBusquedaDesdeForeignKeySesionMovimientoInventario(true);
			//tipocambioSessionBean.setlidMovimientoInventarioActual(this.idMovimientoInventarioActual);

			movimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyMovimientoInventario(true);
			movimientoinventarioSessionBean.setlIdMovimientoInventarioActualForeignKey(this.idMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionMovimientoInventarioParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(movimientoinventarioSessionBean==null) {
				movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(movimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.movimientoinventarioFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(MovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionMovimientoInventario(true);
			//empleadoSessionBean.setlidMovimientoInventarioActual(this.idMovimientoInventarioActual);

			movimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyMovimientoInventario(true);
			movimientoinventarioSessionBean.setlIdMovimientoInventarioActualForeignKey(this.idMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionMovimientoInventarioParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(movimientoinventarioSessionBean==null) {
				movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(movimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.movimientoinventarioFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(MovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionMovimientoInventario(true);
			//facturaSessionBean.setlidMovimientoInventarioActual(this.idMovimientoInventarioActual);

			movimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyMovimientoInventario(true);
			movimientoinventarioSessionBean.setlIdMovimientoInventarioActualForeignKey(this.idMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionMovimientoInventarioParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(movimientoinventarioSessionBean==null) {
				movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(movimientoinventarioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.movimientoinventarioFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(MovimientoInventarioConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionMovimientoInventario(true);
			//asientocontableSessionBean.setlidMovimientoInventarioActual(this.idMovimientoInventarioActual);

			movimientoinventarioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyMovimientoInventario(true);
			movimientoinventarioSessionBean.setlIdMovimientoInventarioActualForeignKey(this.idMovimientoInventarioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//MovimientoInventarioSessionBean movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
		
		if(this.movimientoinventarioSessionBean==null) {
			this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
		}
		
		this.movimientoinventarioSessionBean.setsUltimaBusquedaMovimientoInventario(this.getsAccionBusqueda());
		this.movimientoinventarioSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.movimientoinventarioSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			movimientoinventarioSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCompra")) {
			movimientoinventarioSessionBean.setid_compra(this.getid_compraFK_IdCompra());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			movimientoinventarioSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
			movimientoinventarioSessionBean.setid_empleado(this.getid_empleadoFK_IdEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			movimientoinventarioSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoMovimientoInventario")) {
			movimientoinventarioSessionBean.setid_estado_movimiento_inventario(this.getid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
			movimientoinventarioSessionBean.setid_factura(this.getid_facturaFK_IdFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdGuiaRemision")) {
			movimientoinventarioSessionBean.setid_guia_remision(this.getid_guia_remisionFK_IdGuiaRemision());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			movimientoinventarioSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			movimientoinventarioSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			movimientoinventarioSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
			movimientoinventarioSessionBean.setid_tipo_transaccion_modulo(this.getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
			movimientoinventarioSessionBean.setid_transaccion(this.getid_transaccionFK_IdTransaccion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			movimientoinventarioSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//MovimientoInventarioSessionBean movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
		
		if(this.movimientoinventarioSessionBean==null) {
			this.movimientoinventarioSessionBean=new MovimientoInventarioSessionBean();
		}
		
		if(this.movimientoinventarioSessionBean.getsUltimaBusquedaMovimientoInventario()!=null&&!this.movimientoinventarioSessionBean.getsUltimaBusquedaMovimientoInventario().equals("")) {
			this.setsAccionBusqueda(movimientoinventarioSessionBean.getsUltimaBusquedaMovimientoInventario());
			this.setiNumeroPaginacion(movimientoinventarioSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(movimientoinventarioSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(movimientoinventarioSessionBean.getid_asiento_contable());
				movimientoinventarioSessionBean.setid_asiento_contable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCompra")) {
				this.setid_compraFK_IdCompra(movimientoinventarioSessionBean.getid_compra());
				movimientoinventarioSessionBean.setid_compra(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(movimientoinventarioSessionBean.getid_ejercicio());
				movimientoinventarioSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
				this.setid_empleadoFK_IdEmpleado(movimientoinventarioSessionBean.getid_empleado());
				movimientoinventarioSessionBean.setid_empleado(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(movimientoinventarioSessionBean.getid_empresa());
				movimientoinventarioSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoMovimientoInventario")) {
				this.setid_estado_movimiento_inventarioFK_IdEstadoMovimientoInventario(movimientoinventarioSessionBean.getid_estado_movimiento_inventario());
				movimientoinventarioSessionBean.setid_estado_movimiento_inventario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
				this.setid_facturaFK_IdFactura(movimientoinventarioSessionBean.getid_factura());
				movimientoinventarioSessionBean.setid_factura(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdGuiaRemision")) {
				this.setid_guia_remisionFK_IdGuiaRemision(movimientoinventarioSessionBean.getid_guia_remision());
				movimientoinventarioSessionBean.setid_guia_remision(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(movimientoinventarioSessionBean.getid_modulo());
				movimientoinventarioSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(movimientoinventarioSessionBean.getid_periodo());
				movimientoinventarioSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(movimientoinventarioSessionBean.getid_sucursal());
				movimientoinventarioSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
				this.setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(movimientoinventarioSessionBean.getid_tipo_transaccion_modulo());
				movimientoinventarioSessionBean.setid_tipo_transaccion_modulo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
				this.setid_transaccionFK_IdTransaccion(movimientoinventarioSessionBean.getid_transaccion());
				movimientoinventarioSessionBean.setid_transaccion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(movimientoinventarioSessionBean.getid_usuario());
				movimientoinventarioSessionBean.setid_usuario(-1L);
			}
		}
		
		this.movimientoinventarioSessionBean.setsUltimaBusquedaMovimientoInventario("");
		this.movimientoinventarioSessionBean.setiNumeroPaginacion(MovimientoInventarioConstantesFunciones.INUMEROPAGINACION);
		this.movimientoinventarioSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaMovimientoInventario(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioMovimientoInventario() {
		this.updateBorderResaltarBusquedasFormularioMovimientoInventario();
		this.updateVisibilidadBusquedasFormularioMovimientoInventario();
		this.updateHabilitarBusquedasFormularioMovimientoInventario();
	}
	
	public void updateBorderResaltarBusquedasFormularioMovimientoInventario() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasMovimientoInventario.getComponents().length>0) {
	

		if(this.movimientoinventarioConstantesFunciones.resaltarFK_IdAsientoContableMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdAsientoContableMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdAsientoContableMovimientoInventario);
			}
		}

		if(this.movimientoinventarioConstantesFunciones.resaltarFK_IdCompraMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdCompraMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdCompraMovimientoInventario);
			}
		}

		if(this.movimientoinventarioConstantesFunciones.resaltarFK_IdEmpleadoMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdEmpleadoMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdEmpleadoMovimientoInventario);
			}
		}

		if(this.movimientoinventarioConstantesFunciones.resaltarFK_IdEstadoMovimientoInventarioMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdEstadoMovimientoInventarioMovimientoInventario);
			}
		}

		if(this.movimientoinventarioConstantesFunciones.resaltarFK_IdFacturaMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdFacturaMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdFacturaMovimientoInventario);
			}
		}

		if(this.movimientoinventarioConstantesFunciones.resaltarFK_IdGuiaRemisionMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdGuiaRemisionMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdGuiaRemisionMovimientoInventario);
			}
		}

		if(this.movimientoinventarioConstantesFunciones.resaltarFK_IdTipoTransaccionModuloMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdTipoTransaccionModuloMovimientoInventario);
			}
		}

		if(this.movimientoinventarioConstantesFunciones.resaltarFK_IdTransaccionMovimientoInventario!=null) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdTransaccionMovimientoInventario);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdTransaccionMovimientoInventario);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioMovimientoInventario() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasMovimientoInventario.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdAsientoContableMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoinventarioConstantesFunciones.mostrarFK_IdAsientoContableMovimientoInventario);
			if(!this.movimientoinventarioConstantesFunciones.mostrarFK_IdAsientoContableMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdCompraMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoinventarioConstantesFunciones.mostrarFK_IdCompraMovimientoInventario);
			if(!this.movimientoinventarioConstantesFunciones.mostrarFK_IdCompraMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdEmpleadoMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoinventarioConstantesFunciones.mostrarFK_IdEmpleadoMovimientoInventario);
			if(!this.movimientoinventarioConstantesFunciones.mostrarFK_IdEmpleadoMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoinventarioConstantesFunciones.mostrarFK_IdEstadoMovimientoInventarioMovimientoInventario);
			if(!this.movimientoinventarioConstantesFunciones.mostrarFK_IdEstadoMovimientoInventarioMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdFacturaMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoinventarioConstantesFunciones.mostrarFK_IdFacturaMovimientoInventario);
			if(!this.movimientoinventarioConstantesFunciones.mostrarFK_IdFacturaMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdGuiaRemisionMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoinventarioConstantesFunciones.mostrarFK_IdGuiaRemisionMovimientoInventario);
			if(!this.movimientoinventarioConstantesFunciones.mostrarFK_IdGuiaRemisionMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoinventarioConstantesFunciones.mostrarFK_IdTipoTransaccionModuloMovimientoInventario);
			if(!this.movimientoinventarioConstantesFunciones.mostrarFK_IdTipoTransaccionModuloMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasMovimientoInventario.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdTransaccionMovimientoInventario);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoinventarioConstantesFunciones.mostrarFK_IdTransaccionMovimientoInventario);
			if(!this.movimientoinventarioConstantesFunciones.mostrarFK_IdTransaccionMovimientoInventario && index>-1) {
				this.jTabbedPaneBusquedasMovimientoInventario.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioMovimientoInventario() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasMovimientoInventario.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdAsientoContableMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoinventarioConstantesFunciones.activarFK_IdAsientoContableMovimientoInventario);
				this.jTabbedPaneBusquedasMovimientoInventario.setEnabledAt(index,this.movimientoinventarioConstantesFunciones.activarFK_IdAsientoContableMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdCompraMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoinventarioConstantesFunciones.activarFK_IdCompraMovimientoInventario);
				this.jTabbedPaneBusquedasMovimientoInventario.setEnabledAt(index,this.movimientoinventarioConstantesFunciones.activarFK_IdCompraMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdEmpleadoMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoinventarioConstantesFunciones.activarFK_IdEmpleadoMovimientoInventario);
				this.jTabbedPaneBusquedasMovimientoInventario.setEnabledAt(index,this.movimientoinventarioConstantesFunciones.activarFK_IdEmpleadoMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoinventarioConstantesFunciones.activarFK_IdEstadoMovimientoInventarioMovimientoInventario);
				this.jTabbedPaneBusquedasMovimientoInventario.setEnabledAt(index,this.movimientoinventarioConstantesFunciones.activarFK_IdEstadoMovimientoInventarioMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdFacturaMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoinventarioConstantesFunciones.activarFK_IdFacturaMovimientoInventario);
				this.jTabbedPaneBusquedasMovimientoInventario.setEnabledAt(index,this.movimientoinventarioConstantesFunciones.activarFK_IdFacturaMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdGuiaRemisionMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoinventarioConstantesFunciones.activarFK_IdGuiaRemisionMovimientoInventario);
				this.jTabbedPaneBusquedasMovimientoInventario.setEnabledAt(index,this.movimientoinventarioConstantesFunciones.activarFK_IdGuiaRemisionMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoinventarioConstantesFunciones.activarFK_IdTipoTransaccionModuloMovimientoInventario);
				this.jTabbedPaneBusquedasMovimientoInventario.setEnabledAt(index,this.movimientoinventarioConstantesFunciones.activarFK_IdTipoTransaccionModuloMovimientoInventario);
			}

			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdTransaccionMovimientoInventario);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoinventarioConstantesFunciones.activarFK_IdTransaccionMovimientoInventario);
				this.jTabbedPaneBusquedasMovimientoInventario.setEnabledAt(index,this.movimientoinventarioConstantesFunciones.activarFK_IdTransaccionMovimientoInventario);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaMovimientoInventario(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdAsientoContableMovimientoInventario);

			this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);

			this.movimientoinventarioConstantesFunciones.setResaltarFK_IdAsientoContableMovimientoInventario(resaltar);

			jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdAsientoContableMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCompra")) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdCompraMovimientoInventario);

			this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);

			this.movimientoinventarioConstantesFunciones.setResaltarFK_IdCompraMovimientoInventario(resaltar);

			jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdCompraMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpleado")) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdEmpleadoMovimientoInventario);

			this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);

			this.movimientoinventarioConstantesFunciones.setResaltarFK_IdEmpleadoMovimientoInventario(resaltar);

			jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdEmpleadoMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoMovimientoInventario")) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdEstadoMovimientoInventarioMovimientoInventario);

			this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);

			this.movimientoinventarioConstantesFunciones.setResaltarFK_IdEstadoMovimientoInventarioMovimientoInventario(resaltar);

			jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdEstadoMovimientoInventarioMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFactura")) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdFacturaMovimientoInventario);

			this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);

			this.movimientoinventarioConstantesFunciones.setResaltarFK_IdFacturaMovimientoInventario(resaltar);

			jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdFacturaMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdGuiaRemision")) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdGuiaRemisionMovimientoInventario);

			this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);

			this.movimientoinventarioConstantesFunciones.setResaltarFK_IdGuiaRemisionMovimientoInventario(resaltar);

			jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdGuiaRemisionMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTransaccionModulo")) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloMovimientoInventario);

			this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);

			this.movimientoinventarioConstantesFunciones.setResaltarFK_IdTipoTransaccionModuloMovimientoInventario(resaltar);

			jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdTipoTransaccionModuloMovimientoInventario);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccion")) {
			index= this.jTabbedPaneBusquedasMovimientoInventario.indexOfComponent(this.jPanelFK_IdTransaccionMovimientoInventario);

			this.jTabbedPaneBusquedasMovimientoInventario.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoInventario.getComponent(index);

			this.movimientoinventarioConstantesFunciones.setResaltarFK_IdTransaccionMovimientoInventario(resaltar);

			jPanel.setBorder(this.movimientoinventarioConstantesFunciones.resaltarFK_IdTransaccionMovimientoInventario);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarMovimientoInventario.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioMovimientoInventario() throws Exception {

		if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioMovimientoInventario();
		this.updateVisibilidadResaltarControlesFormularioMovimientoInventario();
		this.updateHabilitarResaltarControlesFormularioMovimientoInventario();
		
	}
	
	public void updateBorderResaltarControlesFormularioMovimientoInventario() throws Exception {
		if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.movimientoinventarioConstantesFunciones.resaltaridMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltaridMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_empresaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_empresaMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_sucursalMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_sucursalMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_moduloMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_moduloMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_ejercicioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_ejercicioMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_periodoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_periodoMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_anioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_anioMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_mesMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_mesMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_usuarioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_usuarioMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_transaccionMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_transaccionMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarfecha_emisionMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_emisionMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarfecha_emisionMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarfecha_entregaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_entregaMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarfecha_entregaMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarnumero_secuencialMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_secuencialMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarnumero_secuencialMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_monedaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_monedaMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_tipo_cambioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_tipo_cambioMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_estado_movimiento_inventarioMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_estado_movimiento_inventarioMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_empleadoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_empleadoMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_formatoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_formatoMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_facturaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_facturaMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarnumero_facturaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_facturaMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarnumero_facturaMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_guia_remisionMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_guia_remisionMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_transportistaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_transportistaMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltardescripcionMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextAreadescripcionMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltardescripcionMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarporcentaje_descuentoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarporcentaje_descuentoMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarsumanMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsumanMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarsumanMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltariceMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldiceMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltariceMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarvalor_descuentoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarvalor_descuentoMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltartotal_descuentoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_descuentoMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltartotal_descuentoMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarivaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldivaMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarivaMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarstockMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldstockMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarstockMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarsub_totalMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsub_totalMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarsub_totalMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltartotal_otroMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_otroMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltartotal_otroMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarultimo_costoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldultimo_costoMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarultimo_costoMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarnumero_itemsMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_itemsMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarnumero_itemsMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarretencionMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldretencionMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarretencionMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltartotalMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotalMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltartotalMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarfleteMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldfleteMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarfleteMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarimpuestoMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldimpuestoMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarimpuestoMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_tipo_transaccion_moduloMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_tipo_transaccion_moduloMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_compraMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_compraMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarid_asiento_contableMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarid_asiento_contableMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltargenerico_idMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldgenerico_idMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltargenerico_idMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltartipo_idMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtipo_idMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltartipo_idMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarnumero_comprobanteMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_comprobanteMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarnumero_comprobanteMovimientoInventario);}
		if(this.movimientoinventarioConstantesFunciones.resaltarfechaMovimientoInventario!=null && this.jInternalFrameDetalleFormMovimientoInventario!=null) {this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfechaMovimientoInventario.setBorder(this.movimientoinventarioConstantesFunciones.resaltarfechaMovimientoInventario);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioMovimientoInventario() throws Exception {		
		if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
	
		//this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostraridMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelidMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostraridMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_empresaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_empresaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_empresaMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_sucursalMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_sucursalMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_sucursalMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_moduloMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_moduloMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_moduloMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_ejercicioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_ejercicioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_ejercicioMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_periodoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_periodoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_periodoMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_anioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_anioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_anioMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_mesMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_mesMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_mesMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_usuarioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_usuarioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_usuarioMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_transaccionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_transaccionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_transaccionMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_emisionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarfecha_emisionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelfecha_emisionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarfecha_emisionMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_entregaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarfecha_entregaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelfecha_entregaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarfecha_entregaMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_secuencialMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarnumero_secuencialMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelnumero_secuencialMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarnumero_secuencialMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_monedaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_monedaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_monedaMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_tipo_cambioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_tipo_cambioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_tipo_cambioMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_tipo_cambioMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_estado_movimiento_inventarioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_estado_movimiento_inventarioMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_estado_movimiento_inventarioMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_empleadoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_empleadoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_empleadoMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_empleadoMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_formatoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_formatoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_formatoMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_facturaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_facturaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_facturaMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_facturaMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_facturaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarnumero_facturaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelnumero_facturaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarnumero_facturaMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_guia_remisionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_guia_remisionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_guia_remisionMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_transportistaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_transportistaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_transportistaMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextAreadescripcionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrardescripcionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPaneldescripcionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrardescripcionMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarporcentaje_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelporcentaje_descuentoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarporcentaje_descuentoMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsumanMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarsumanMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelsumanMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarsumanMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldiceMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrariceMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPaneliceMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrariceMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarvalor_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelvalor_descuentoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarvalor_descuentoMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_descuentoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrartotal_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPaneltotal_descuentoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrartotal_descuentoMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldivaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarivaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelivaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarivaMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldstockMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarstockMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelstockMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarstockMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsub_totalMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarsub_totalMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelsub_totalMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarsub_totalMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_otroMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrartotal_otroMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPaneltotal_otroMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrartotal_otroMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldultimo_costoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarultimo_costoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelultimo_costoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarultimo_costoMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_itemsMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarnumero_itemsMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelnumero_itemsMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarnumero_itemsMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldretencionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarretencionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelretencionMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarretencionMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotalMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrartotalMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPaneltotalMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrartotalMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldfleteMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarfleteMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelfleteMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarfleteMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldimpuestoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarimpuestoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelimpuestoMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarimpuestoMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_tipo_transaccion_moduloMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_tipo_transaccion_moduloMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_tipo_transaccion_moduloMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_compraMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_compraMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_compraMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_asiento_contableMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelid_asiento_contableMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_asiento_contableMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarid_asiento_contableMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldgenerico_idMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrargenerico_idMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelgenerico_idMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrargenerico_idMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtipo_idMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrartipo_idMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPaneltipo_idMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrartipo_idMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_comprobanteMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarnumero_comprobanteMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelnumero_comprobanteMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarnumero_comprobanteMovimientoInventario);
		//this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfechaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarfechaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jPanelfechaMovimientoInventario.setVisible(this.movimientoinventarioConstantesFunciones.mostrarfechaMovimientoInventario);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioMovimientoInventario() throws Exception {
		if(this.jInternalFrameDetalleFormMovimientoInventario==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormMovimientoInventario!=null) {
	
		this.jInternalFrameDetalleFormMovimientoInventario.jLabelidMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activaridMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empresaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_empresaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_sucursalMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_sucursalMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_moduloMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_moduloMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_ejercicioMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_ejercicioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_periodoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_periodoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_anioMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_anioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_mesMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_mesMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_usuarioMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_usuarioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transaccionMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_transaccionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_emisionMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarfecha_emisionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfecha_entregaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarfecha_entregaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_secuencialMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarnumero_secuencialMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_monedaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_monedaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_cambioMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_tipo_cambioMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_tipo_cambioMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_tipo_cambioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_estado_movimiento_inventarioMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_estado_movimiento_inventarioMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_empleadoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_empleadoMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_empleadoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_empleadoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_formatoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_formatoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_facturaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_facturaMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_facturaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_facturaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_facturaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarnumero_facturaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_guia_remisionMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_guia_remisionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_transportistaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_transportistaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextAreadescripcionMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activardescripcionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldporcentaje_descuentoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarporcentaje_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsumanMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarsumanMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldiceMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activariceMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldvalor_descuentoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarvalor_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_descuentoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activartotal_descuentoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldivaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarivaMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldstockMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarstockMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldsub_totalMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarsub_totalMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotal_otroMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activartotal_otroMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldultimo_costoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarultimo_costoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_itemsMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarnumero_itemsMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldretencionMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarretencionMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtotalMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activartotalMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldfleteMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarfleteMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldimpuestoMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarimpuestoMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_tipo_transaccion_moduloMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_tipo_transaccion_moduloMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_compraMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_compraMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jComboBoxid_asiento_contableMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_asiento_contableMovimientoInventario);
			this.jInternalFrameDetalleFormMovimientoInventario.jButtonid_asiento_contableMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarid_asiento_contableMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldgenerico_idMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activargenerico_idMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldtipo_idMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activartipo_idMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jTextFieldnumero_comprobanteMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarnumero_comprobanteMovimientoInventario);
		this.jInternalFrameDetalleFormMovimientoInventario.jDateChooserfechaMovimientoInventario.setEnabled(this.movimientoinventarioConstantesFunciones.activarfechaMovimientoInventario);
		}
	}
	
		
}